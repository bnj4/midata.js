(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("midata", [], factory);
	else if(typeof exports === 'object')
		exports["midata"] = factory();
	else
		root["midata"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	var Midata_1 = __webpack_require__(1);
	exports.Midata = Midata_1.Midata;
	__export(__webpack_require__(490));
	var resources = __webpack_require__(490);
	exports.resources = resources;


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var es6_promise_1 = __webpack_require__(2);
	var util_1 = __webpack_require__(5);
	var ionic_native_1 = __webpack_require__(6);
	var http_1 = __webpack_require__(484);
	var registry_1 = __webpack_require__(488);
	var Resource_1 = __webpack_require__(489);
	var Midata = (function () {
	    /**
	     * @param _host The url of the midata server, e.g. "https://test.midata.coop:9000".
	     * @param _appName The internal application name accessing the platform (as defined on the midata platform).
	     * @param _conformanceStatementEndpoint? The location of the endpoint identifying the OAuth authorize and token
	     *        endpoints. Optional parameter.
	     */
	    function Midata(_host, _appName, _secret, _conformanceStatementEndpoint) {
	        var _this = this;
	        this._host = _host;
	        this._appName = _appName;
	        this._secret = _secret;
	        this._conformanceStatementEndpoint = _conformanceStatementEndpoint;
	        /**
	         Helper method to create FHIR resources via a HTTP POST call.
	         */
	        this._create = function (fhirObject) {
	            var url = _this._host + "/fhir/" + fhirObject.resourceType;
	            return util_1.apiCall({
	                jsonBody: false,
	                url: url,
	                method: 'POST',
	                headers: {
	                    'Authorization': 'Bearer ' + _this._authToken,
	                    'Content-Type': 'application/json+fhir;charset=utf-8',
	                    'Prefer': 'return=representation'
	                },
	                payload: fhirObject
	            });
	        };
	        /**
	         Helper method to create FHIR resources via a HTTP PUT call.
	         */
	        this._update = function (fhirObject) {
	            var url = _this._host + "/fhir/" + fhirObject.resourceType + "/" + fhirObject.id;
	            return util_1.apiCall({
	                jsonBody: false,
	                url: url,
	                payload: fhirObject,
	                headers: {
	                    'Authorization': 'Bearer ' + _this._authToken,
	                    'Content-Type': 'application/json+fhir;charset=utf-8',
	                    'Prefer': 'return=representation'
	                },
	                method: 'PUT'
	            });
	        };
	        /**
	         Helper method to refresh the authentication token by authorizing
	         with the help of the refresh token. This will generate a new authentication as well as
	         a new refresh token. On successful refresh, the old refresh_token will be invalid and
	         both the access_token and the refresh_token stored in the local storage will be overwritten.
	         Previous access_tokens will remain valid until their expiration timestamp is exceeded. However, possibly
	         older access_tokens are neglected due to overwrite logic.
	    
	         @return a Promise of type TokenRefreshResponse. On failure the catch clause will forward an error
	         of type ApiCallResponse.
	         */
	        this._refresh = function () {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                var getEncodedParams = function () {
	                    // because of x-www-form-urlencoded
	                    var urlSearchParams = new http_1.URLSearchParams();
	                    urlSearchParams.append("grant_type", "refresh_token");
	                    urlSearchParams.append("refresh_token", _this._refreshToken);
	                    return urlSearchParams;
	                };
	                var refreshTokenRequest = {
	                    encodedParams: getEncodedParams()
	                };
	                util_1.apiCall({
	                    url: _this._tokenEndpoint,
	                    method: 'POST',
	                    payload: refreshTokenRequest.encodedParams.toString(),
	                    jsonBody: true,
	                    jsonEncoded: false,
	                    headers: {
	                        'Content-Type': 'application/x-www-form-urlencoded'
	                    }
	                })
	                    .then(function (response) {
	                    var body = response.body;
	                    _this._authToken = body.access_token;
	                    _this._refreshToken = body.refresh_token;
	                    // set login data
	                    _this._setLoginData(body.access_token, body.refresh_token);
	                    console.log("Login data refreshed! resolve...");
	                    resolve(body);
	                })
	                    .catch(function (response) {
	                    reject(response);
	                });
	            });
	        };
	        if (cordova && cordova.InAppBrowser) {
	            window.open = cordova.InAppBrowser.open;
	        }
	        this._conformanceStatementEndpoint = _conformanceStatementEndpoint || _host + "/fhir/metadata";
	        if (this._conformanceStatementEndpoint !== undefined) {
	            this.fetchFHIRConformanceStatement().then(function (response) {
	                console.log("Success! (" + response.status + ", " + response.message + ")");
	                // Check if there is previously saved login data that was
	                // put there before the last page refresh. In case there is,
	                // load it.
	                if (window.localStorage) {
	                    var value = localStorage.getItem('midataLoginData');
	                    var data = JSON.parse(value);
	                    if (data) {
	                        _this._setLoginData(data.authToken, data.refreshToken);
	                    }
	                }
	            }, function (error) {
	                console.log("Error! (" + error.status + ", " + error.message + ")");
	            });
	        }
	    }
	    Object.defineProperty(Midata.prototype, "loggedIn", {
	        /*
	         If the user is logged in already.
	         */
	        get: function () {
	            return this._authToken !== undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Midata.prototype, "authToken", {
	        /*
	         The currently used authentication token. If the user didn't login yet
	         or recently called `logout()` this property will be undefined.
	         */
	        get: function () {
	            return this._authToken;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Midata.prototype, "refreshToken", {
	        /*
	         The currently used refresh token. If the user didn't login yet
	         or recently called `logout()` this property will be undefined.
	         */
	        get: function () {
	            return this._refreshToken;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /*
	     Destroy all authenication information.
	     */
	    Midata.prototype.logout = function () {
	        this._refreshToken = undefined;
	        this._authToken = undefined;
	        if (window.localStorage) {
	            localStorage.removeItem('midataLoginData');
	        }
	    };
	    /*
	     Set login-specific properties. This method should be called either during
	     startup or when the login method is called explicitly.
	     */
	    Midata.prototype._setLoginData = function (authToken, refreshToken, user) {
	        this._authToken = authToken;
	        this._refreshToken = refreshToken;
	        this._user = user;
	        if (window.localStorage) {
	            localStorage.setItem('midataLoginData', JSON.stringify({
	                authToken: authToken,
	                refreshToken: refreshToken,
	                user: user
	            }));
	        }
	    };
	    /**
	     * Login to the MIDATA platform. This method has to be called prior to
	     * creating or updating resources.
	     *
	     * @deprecated only use this method if your app does not support oAuth2 authentication
	     * @param username The user's identifier, most likely an email address.
	     * @param password The user's password.
	     * @param role The user's role used during the login (optional).
	     * @return If the login was successful the return value will be a resolved
	     *         promise that contains the newly generated authentication and
	     *         refresh token. In case the login failed the return value
	     *         will be a rejected promise containing the error message.
	     */
	    Midata.prototype.login = function (username, password, role) {
	        var _this = this;
	        if (username === undefined || password === undefined) {
	            throw new Error('You need to supply a username and a password!');
	        }
	        var authRequest = {
	            username: username,
	            password: password,
	            appname: this._appName,
	            secret: this._secret
	        };
	        if (role !== undefined) {
	            authRequest.role = role;
	        }
	        var result = util_1.apiCall({
	            url: this._host + '/v1/auth',
	            method: 'POST',
	            headers: {
	                'Content-Type': 'application/json'
	            },
	            jsonBody: true,
	            payload: authRequest
	        })
	            .then(function (response) {
	            var body = response.body;
	            var user = {
	                id: body.owner,
	                name: username
	            };
	            _this._setLoginData(body.authToken, body.refreshToken, user);
	            return body;
	        })
	            .catch(function (error) {
	            return es6_promise_1.Promise.reject(error);
	        });
	        return result;
	    };
	    /**
	     *
	     * This method stores a resource onto midata.
	     *
	     * @param resourceType e.g. HeartRate
	     * @return The promise returns the created object. In case of failure, an error of type
	     *         ApiCallResponse will be returned.
	     */
	    // TODO: Try to map response objects back to their class (e.g. BodyWeight)
	    Midata.prototype.save = function (resource) {
	        var _this = this;
	        // Check if the user is logged in, otherwise no record can be
	        // created or updated.
	        if (this._authToken === undefined) {
	            throw new Error("Can't create records when no user logged in first. Call authenticate() before trying to create records.");
	        }
	        // Convert the resource to a FHIR-structured simple js object.
	        var fhirObject;
	        if (resource instanceof Resource_1.Resource) {
	            fhirObject = resource.toJson();
	        }
	        else {
	            fhirObject = resource;
	        }
	        // If the resource didn't have an id, then the resource has to be
	        // created on the server.
	        var shouldCreate = fhirObject.id === undefined;
	        var apiMethod = shouldCreate ? this._create : this._update;
	        return apiMethod(fhirObject)
	            .then(function (response) {
	            // When the resource is created, the same resource will
	            // be returned (populated with an id field in the case
	            // it was newly created).
	            if (response.status === 201) {
	                return JSON.parse(response.body);
	            }
	            else if (response.status === 200) {
	                return JSON.parse(response.body);
	            }
	            else {
	                console.log("Unexpected response status code: " + response.status);
	                return es6_promise_1.Promise.reject(response);
	            }
	        })
	            .catch(function (response) {
	            // convenience variable
	            var logMsg = "Please login again using method authenticate()";
	            if (response.status === 401) {
	                return new es6_promise_1.Promise(function (resolve, reject) {
	                    console.log("Error, " + response.message + " => Trying to refresh your tokens and save again...");
	                    // retry to save resource. Proceed with logout if the operation somehow still fails.
	                    // premise: existing refresh token
	                    if (_this.refreshToken) {
	                        // short logging of what's been going on during each case of the token recovery process.
	                        // try to refresh the access token using the refresh token
	                        _this.refresh().then(function (_) {
	                            console.log("Success! Tokens restored. Retry action..."); // recovery successful
	                            apiMethod(fhirObject).then(function (response) {
	                                console.log("Success! Proceed..."); // operation successful
	                                resolve(JSON.parse(response.body)); // return created object
	                            }, function (error) {
	                                // retry method call not successful, logout and force authentication
	                                _this.logout();
	                                console.log("Still receiving error, abort. " + logMsg);
	                                reject(error);
	                            });
	                        }, function (error) {
	                            // token recovery not successful, logout and force authentication
	                            _this.logout();
	                            console.log("Error during refresh process. " + logMsg);
	                            reject(error);
	                            // rather unlikely, but still...
	                            // catch other errors during callback..
	                        }).catch(function (error) {
	                            // .. and force new authentication as well in case of such happenings
	                            _this.logout();
	                            console.log("Internal Error, abort. " + logMsg);
	                            reject(error);
	                        });
	                    }
	                    else {
	                        // refresh token not existing. Force authentication by logging out.
	                        _this.logout();
	                        console.log("Refresh token not available!  " + logMsg);
	                        reject(response);
	                    }
	                });
	            }
	            // No 401 error. Therefore, no retry. Return response from
	            // first apiMethod call
	            return es6_promise_1.Promise.reject(response);
	        });
	    };
	    /**
	     * Query the midata API using FHIR resource types and optional params.
	     *
	     * @param resourceType e.g. Observation
	     * @param params e.g. {status: 'preliminary'}
	     * @return The promise returns an array of objects matching the search param(s). In case of failure, an error of type
	     *         ApiCallResponse will be returned.
	     */
	    Midata.prototype.search = function (resourceType, params) {
	        if (params === void 0) { params = {}; }
	        // Check if the user is logged in, otherwise no record can be
	        // created or updated.
	        if (this._authToken === undefined) {
	            throw new Error("Can't search for records when no user logged in first. Call authenticate() before trying to query the API.");
	        }
	        var baseUrl = this._host + "/fhir/" + resourceType;
	        return this._search(baseUrl, params);
	    };
	    Midata.prototype._search = function (baseUrl, params) {
	        var _this = this;
	        if (params === void 0) { params = {}; }
	        var queryParts = Object.keys(params).map(function (key) {
	            return key + '=' + params[key];
	        });
	        var query = queryParts.join('&');
	        query = query && "?" + query || '';
	        var url = baseUrl + query;
	        return util_1.apiCall({
	            url: url,
	            method: 'GET',
	            jsonBody: true,
	            headers: {
	                'Authorization': 'Bearer ' + this._authToken,
	                'Content-Type': 'application/json+fhir;charset=utf-8'
	            }
	        })
	            .then(function (response) {
	            if (response.body.entry !== undefined) {
	                var entries = response.body.entry;
	                var resources = entries.map(function (e) {
	                    return registry_1.fromFhir(e.resource);
	                });
	                return resources;
	            }
	            else {
	                return [];
	            }
	        })
	            .catch(function (response) {
	            // convenience variable
	            var logMsg = "Please login again using method authenticate()";
	            if (response.status === 401) {
	                return new es6_promise_1.Promise(function (resolve, reject) {
	                    console.log("Error, " + response.message + " => Trying to refresh your tokens and save again...");
	                    // retry to save resource. Proceed with logout if the operation somehow still fails.
	                    // premise: existing refresh token
	                    if (_this.refreshToken) {
	                        // short logging of what's been going on during each case of the token recovery process.
	                        // try to refresh the access token using the refresh token
	                        _this.refresh().then(function (_) {
	                            console.log("Success! Tokens restored. Retry action..."); // recovery successful
	                            util_1.apiCall({
	                                url: url,
	                                method: 'GET',
	                                jsonBody: true,
	                                headers: {
	                                    'Authorization': 'Bearer ' + _this._authToken,
	                                    'Content-Type': 'application/json+fhir;charset=utf-8'
	                                }
	                            }).then(function (response) {
	                                if (response.body.entry !== undefined) {
	                                    var entries = response.body.entry;
	                                    // we need Promise.all here since entries is iterable
	                                    var resources = es6_promise_1.Promise.all(entries.map(function (e) {
	                                        return registry_1.fromFhir(e.resource);
	                                    }));
	                                    resolve(resources); // return array containing results
	                                }
	                                else {
	                                    resolve([]); // or return empty array if no results
	                                }
	                            }, function (error) {
	                                // retry method call not successful, logout and force authentication
	                                _this.logout();
	                                console.log("Still receiving error, abort. " + logMsg);
	                                reject(error);
	                            });
	                        }, function (error) {
	                            // token recovery not successful, logout and force authentication
	                            _this.logout();
	                            console.log("Error during refresh process. " + logMsg);
	                            reject(error);
	                            // rather unlikely, but still...
	                            // catch other errors during callback..
	                        }).catch(function (error) {
	                            // .. and force new authentication as well in case of such happenings
	                            _this.logout();
	                            console.log("Internal Error, abort. " + logMsg);
	                            reject(error);
	                        });
	                    }
	                    else {
	                        // refresh token not existing. Force authentication by logging out.
	                        _this.logout();
	                        console.log("Refresh token not available!  " + logMsg);
	                        reject(response);
	                    }
	                });
	            }
	            // No 401 error. Therefore, no retry. Return response from
	            // first apiCall
	            return es6_promise_1.Promise.reject(response);
	        });
	    };
	    /**
	     Login to the MIDATA platform. This method has to be called prior to
	     creating or updating resources. Calling authenticate will initiate the
	     oAuth2 authentication process. This method invokes the methods _authenticate &
	     _exchangeTokenForCode.
	
	     @return If the login process was successful the return value will be a resolved
	     promise that contains the newly generated authentication and
	     refresh token. In case the login failed the return value
	     will be a rejected promise containing the error message (type any).
	     **/
	    Midata.prototype.authenticate = function () {
	        // wrapper method, call subsequent actions from here
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            _this._authenticate().then(function (_) { return _this._exchangeTokenForCode(); })
	                .then(function (body) {
	                resolve(body);
	            })
	                .catch(function (error) {
	                reject(error);
	            });
	        });
	    };
	    /**
	     Helper method to refresh the authentication token by authorizing
	     with the help of the refresh token. This will generate a new authentication as well as
	     a new refresh token. On successful refresh, the old refresh_token will be invalid and
	     both the access_token and the refresh_token stored in the local storage will be overwritten.
	     Previous access_tokens will remain valid until their expiration timestamp is exceeded. However, possibly
	     older access_tokens are neglected due to overwrite logic.
	     */
	    Midata.prototype.refresh = function () {
	        // wrapper method, call subsequent actions from here
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            _this._refresh().then(function (body) {
	                resolve(body);
	            })
	                .catch(function (error) {
	                reject(error);
	            });
	        });
	    };
	    /**
	     The user will be redirected to midata.coop in order to login / register and grant
	     the application access to his data. If the event target is equal to the callback url
	     defined in the USERAUTH_ENDPOINT (and ,therefore, authentication on midata was successful)
	     the authentication code is extracted in stored locally. The authentication code will then be further
	     used by the method _exchangeTokenForCode().
	
	     @return A Promise of type InAppBrowserEvent.
	     **/
	    Midata.prototype._authenticate = function () {
	        var _this = this;
	        var USERAUTH_ENDPOINT = function () {
	            return _this._authEndpoint + "?response_type=code&client_id=" + _this._appName + "&redirect_uri=http://localhost/callback&aud=" + _this._host + "%2Ffhir&scope=user%2F*.*";
	        };
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var browser = new ionic_native_1.InAppBrowser(USERAUTH_ENDPOINT(), '_blank', 'location=yes');
	            browser.on('loadstart').subscribe(function (event) {
	                browser.show();
	                if ((event.url).indexOf("http://localhost/callback") === 0) {
	                    _this._authCode = event.url.split("&")[1].split("=")[1];
	                    browser.close();
	                    resolve(event);
	                }
	            }, function (error) {
	                console.log("Error! (" + error.status + ", " + error.message + ")");
	                reject(error);
	            });
	        });
	    };
	    /**
	     After successful authentication on midata this method is invoked. It exchanges the authCode
	     obtained from midata with the access_token used to query the FHIR endpoint API.
	
	     @return On success the resolved promise will hold a body of type TokenResponse as defined in the interface within
	     the api class. On failure the catch clause will forward an error of type ApiCallResponse.
	     **/
	    Midata.prototype._exchangeTokenForCode = function () {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var getEncodedParams = function () {
	                // because of x-www-form-urlencoded
	                var urlSearchParams = new http_1.URLSearchParams();
	                urlSearchParams.append("grant_type", "authorization_code");
	                urlSearchParams.append("code", _this._authCode);
	                urlSearchParams.append("redirect_uri", "http://localhost/callback");
	                urlSearchParams.append("client_id", "oauth2test");
	                return urlSearchParams;
	            };
	            var tokenRequest = {
	                encodedParams: getEncodedParams()
	            };
	            util_1.apiCall({
	                url: _this._tokenEndpoint,
	                method: 'POST',
	                headers: {
	                    'Content-Type': 'application/x-www-form-urlencoded'
	                },
	                jsonBody: true,
	                payload: tokenRequest.encodedParams.toString(),
	                jsonEncoded: false
	            })
	                .then(function (response) {
	                var body = response.body;
	                // set login data
	                _this._setLoginData(body.access_token, body.refresh_token);
	                console.log("Login data set! resolve...");
	                resolve(body);
	            })
	                .catch(function (response) {
	                reject(response);
	            });
	        });
	    };
	    /**
	     This method fetches the conformance statement identifying the OAuth authorize
	     and token endpoint URLs for use in requesting authorization to access FHIR resources.
	     This method is invoked whenever a new midata object is created. However, it can also
	     exclusively be called in order to update existing endpoint information.
	
	     @return In both cases (on success & and failure) the method will return a resolved promise of type ApiCallResponse
	     conforming to the interface defined within the util class.
	     **/
	    Midata.prototype.fetchFHIRConformanceStatement = function () {
	        var _this = this;
	        return util_1.apiCall({
	            url: this._conformanceStatementEndpoint,
	            method: 'GET'
	        }).then(function (response) {
	            _this._tokenEndpoint = JSON.parse(response.body).rest["0"].security.extension["0"].extension["0"].valueUri;
	            _this._authEndpoint = JSON.parse(response.body).rest["0"].security.extension["0"].extension["1"].valueUri;
	            return response;
	        }).catch(function (error) {
	            return es6_promise_1.Promise.reject(error);
	        });
	    };
	    /**
	     *
	     * This method deletes a resource on midata.
	     *
	     * @param resourceType e.g. HeartRate
	     * @param id (unique)
	     * @return The promise returns the response body. In case of failure, an error of type
	     *         ApiCallResponse will be returned.
	     */
	    Midata.prototype.delete = function (resourceType, id) {
	        var url = this._host + "/fhir/" + resourceType + "/" + id;
	        return util_1.apiCall({
	            url: url,
	            method: 'DELETE',
	            headers: {
	                'Authorization': 'Bearer ' + this._authToken
	            }
	        })
	            .then(function (response) {
	            console.log(response);
	        });
	    };
	    return Midata;
	}());
	exports.Midata = Midata;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(process, global) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
	 * @version   4.1.0
	 */
	
	(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (global.ES6Promise = factory());
	}(this, (function () { 'use strict';
	
	function objectOrFunction(x) {
	  return typeof x === 'function' || typeof x === 'object' && x !== null;
	}
	
	function isFunction(x) {
	  return typeof x === 'function';
	}
	
	var _isArray = undefined;
	if (!Array.isArray) {
	  _isArray = function (x) {
	    return Object.prototype.toString.call(x) === '[object Array]';
	  };
	} else {
	  _isArray = Array.isArray;
	}
	
	var isArray = _isArray;
	
	var len = 0;
	var vertxNext = undefined;
	var customSchedulerFn = undefined;
	
	var asap = function asap(callback, arg) {
	  queue[len] = callback;
	  queue[len + 1] = arg;
	  len += 2;
	  if (len === 2) {
	    // If len is 2, that means that we need to schedule an async flush.
	    // If additional callbacks are queued before the queue is flushed, they
	    // will be processed by this flush that we are scheduling.
	    if (customSchedulerFn) {
	      customSchedulerFn(flush);
	    } else {
	      scheduleFlush();
	    }
	  }
	};
	
	function setScheduler(scheduleFn) {
	  customSchedulerFn = scheduleFn;
	}
	
	function setAsap(asapFn) {
	  asap = asapFn;
	}
	
	var browserWindow = typeof window !== 'undefined' ? window : undefined;
	var browserGlobal = browserWindow || {};
	var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';
	
	// test for web worker but not in IE10
	var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
	
	// node
	function useNextTick() {
	  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	  // see https://github.com/cujojs/when/issues/410 for details
	  return function () {
	    return process.nextTick(flush);
	  };
	}
	
	// vertx
	function useVertxTimer() {
	  if (typeof vertxNext !== 'undefined') {
	    return function () {
	      vertxNext(flush);
	    };
	  }
	
	  return useSetTimeout();
	}
	
	function useMutationObserver() {
	  var iterations = 0;
	  var observer = new BrowserMutationObserver(flush);
	  var node = document.createTextNode('');
	  observer.observe(node, { characterData: true });
	
	  return function () {
	    node.data = iterations = ++iterations % 2;
	  };
	}
	
	// web worker
	function useMessageChannel() {
	  var channel = new MessageChannel();
	  channel.port1.onmessage = flush;
	  return function () {
	    return channel.port2.postMessage(0);
	  };
	}
	
	function useSetTimeout() {
	  // Store setTimeout reference so es6-promise will be unaffected by
	  // other code modifying setTimeout (like sinon.useFakeTimers())
	  var globalSetTimeout = setTimeout;
	  return function () {
	    return globalSetTimeout(flush, 1);
	  };
	}
	
	var queue = new Array(1000);
	function flush() {
	  for (var i = 0; i < len; i += 2) {
	    var callback = queue[i];
	    var arg = queue[i + 1];
	
	    callback(arg);
	
	    queue[i] = undefined;
	    queue[i + 1] = undefined;
	  }
	
	  len = 0;
	}
	
	function attemptVertx() {
	  try {
	    var r = require;
	    var vertx = __webpack_require__(4);
	    vertxNext = vertx.runOnLoop || vertx.runOnContext;
	    return useVertxTimer();
	  } catch (e) {
	    return useSetTimeout();
	  }
	}
	
	var scheduleFlush = undefined;
	// Decide what async method to use to triggering processing of queued callbacks:
	if (isNode) {
	  scheduleFlush = useNextTick();
	} else if (BrowserMutationObserver) {
	  scheduleFlush = useMutationObserver();
	} else if (isWorker) {
	  scheduleFlush = useMessageChannel();
	} else if (browserWindow === undefined && "function" === 'function') {
	  scheduleFlush = attemptVertx();
	} else {
	  scheduleFlush = useSetTimeout();
	}
	
	function then(onFulfillment, onRejection) {
	  var _arguments = arguments;
	
	  var parent = this;
	
	  var child = new this.constructor(noop);
	
	  if (child[PROMISE_ID] === undefined) {
	    makePromise(child);
	  }
	
	  var _state = parent._state;
	
	  if (_state) {
	    (function () {
	      var callback = _arguments[_state - 1];
	      asap(function () {
	        return invokeCallback(_state, child, callback, parent._result);
	      });
	    })();
	  } else {
	    subscribe(parent, child, onFulfillment, onRejection);
	  }
	
	  return child;
	}
	
	/**
	  `Promise.resolve` returns a promise that will become resolved with the
	  passed `value`. It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    resolve(1);
	  });
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.resolve(1);
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  @method resolve
	  @static
	  @param {Any} value value that the returned promise will be resolved with
	  Useful for tooling.
	  @return {Promise} a promise that will become fulfilled with the given
	  `value`
	*/
	function resolve(object) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (object && typeof object === 'object' && object.constructor === Constructor) {
	    return object;
	  }
	
	  var promise = new Constructor(noop);
	  _resolve(promise, object);
	  return promise;
	}
	
	var PROMISE_ID = Math.random().toString(36).substring(16);
	
	function noop() {}
	
	var PENDING = void 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	
	var GET_THEN_ERROR = new ErrorObject();
	
	function selfFulfillment() {
	  return new TypeError("You cannot resolve a promise with itself");
	}
	
	function cannotReturnOwn() {
	  return new TypeError('A promises callback cannot return that same promise.');
	}
	
	function getThen(promise) {
	  try {
	    return promise.then;
	  } catch (error) {
	    GET_THEN_ERROR.error = error;
	    return GET_THEN_ERROR;
	  }
	}
	
	function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	  try {
	    then.call(value, fulfillmentHandler, rejectionHandler);
	  } catch (e) {
	    return e;
	  }
	}
	
	function handleForeignThenable(promise, thenable, then) {
	  asap(function (promise) {
	    var sealed = false;
	    var error = tryThen(then, thenable, function (value) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	      if (thenable !== value) {
	        _resolve(promise, value);
	      } else {
	        fulfill(promise, value);
	      }
	    }, function (reason) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	
	      _reject(promise, reason);
	    }, 'Settle: ' + (promise._label || ' unknown promise'));
	
	    if (!sealed && error) {
	      sealed = true;
	      _reject(promise, error);
	    }
	  }, promise);
	}
	
	function handleOwnThenable(promise, thenable) {
	  if (thenable._state === FULFILLED) {
	    fulfill(promise, thenable._result);
	  } else if (thenable._state === REJECTED) {
	    _reject(promise, thenable._result);
	  } else {
	    subscribe(thenable, undefined, function (value) {
	      return _resolve(promise, value);
	    }, function (reason) {
	      return _reject(promise, reason);
	    });
	  }
	}
	
	function handleMaybeThenable(promise, maybeThenable, then$$) {
	  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
	    handleOwnThenable(promise, maybeThenable);
	  } else {
	    if (then$$ === GET_THEN_ERROR) {
	      _reject(promise, GET_THEN_ERROR.error);
	      GET_THEN_ERROR.error = null;
	    } else if (then$$ === undefined) {
	      fulfill(promise, maybeThenable);
	    } else if (isFunction(then$$)) {
	      handleForeignThenable(promise, maybeThenable, then$$);
	    } else {
	      fulfill(promise, maybeThenable);
	    }
	  }
	}
	
	function _resolve(promise, value) {
	  if (promise === value) {
	    _reject(promise, selfFulfillment());
	  } else if (objectOrFunction(value)) {
	    handleMaybeThenable(promise, value, getThen(value));
	  } else {
	    fulfill(promise, value);
	  }
	}
	
	function publishRejection(promise) {
	  if (promise._onerror) {
	    promise._onerror(promise._result);
	  }
	
	  publish(promise);
	}
	
	function fulfill(promise, value) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	
	  promise._result = value;
	  promise._state = FULFILLED;
	
	  if (promise._subscribers.length !== 0) {
	    asap(publish, promise);
	  }
	}
	
	function _reject(promise, reason) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	  promise._state = REJECTED;
	  promise._result = reason;
	
	  asap(publishRejection, promise);
	}
	
	function subscribe(parent, child, onFulfillment, onRejection) {
	  var _subscribers = parent._subscribers;
	  var length = _subscribers.length;
	
	  parent._onerror = null;
	
	  _subscribers[length] = child;
	  _subscribers[length + FULFILLED] = onFulfillment;
	  _subscribers[length + REJECTED] = onRejection;
	
	  if (length === 0 && parent._state) {
	    asap(publish, parent);
	  }
	}
	
	function publish(promise) {
	  var subscribers = promise._subscribers;
	  var settled = promise._state;
	
	  if (subscribers.length === 0) {
	    return;
	  }
	
	  var child = undefined,
	      callback = undefined,
	      detail = promise._result;
	
	  for (var i = 0; i < subscribers.length; i += 3) {
	    child = subscribers[i];
	    callback = subscribers[i + settled];
	
	    if (child) {
	      invokeCallback(settled, child, callback, detail);
	    } else {
	      callback(detail);
	    }
	  }
	
	  promise._subscribers.length = 0;
	}
	
	function ErrorObject() {
	  this.error = null;
	}
	
	var TRY_CATCH_ERROR = new ErrorObject();
	
	function tryCatch(callback, detail) {
	  try {
	    return callback(detail);
	  } catch (e) {
	    TRY_CATCH_ERROR.error = e;
	    return TRY_CATCH_ERROR;
	  }
	}
	
	function invokeCallback(settled, promise, callback, detail) {
	  var hasCallback = isFunction(callback),
	      value = undefined,
	      error = undefined,
	      succeeded = undefined,
	      failed = undefined;
	
	  if (hasCallback) {
	    value = tryCatch(callback, detail);
	
	    if (value === TRY_CATCH_ERROR) {
	      failed = true;
	      error = value.error;
	      value.error = null;
	    } else {
	      succeeded = true;
	    }
	
	    if (promise === value) {
	      _reject(promise, cannotReturnOwn());
	      return;
	    }
	  } else {
	    value = detail;
	    succeeded = true;
	  }
	
	  if (promise._state !== PENDING) {
	    // noop
	  } else if (hasCallback && succeeded) {
	      _resolve(promise, value);
	    } else if (failed) {
	      _reject(promise, error);
	    } else if (settled === FULFILLED) {
	      fulfill(promise, value);
	    } else if (settled === REJECTED) {
	      _reject(promise, value);
	    }
	}
	
	function initializePromise(promise, resolver) {
	  try {
	    resolver(function resolvePromise(value) {
	      _resolve(promise, value);
	    }, function rejectPromise(reason) {
	      _reject(promise, reason);
	    });
	  } catch (e) {
	    _reject(promise, e);
	  }
	}
	
	var id = 0;
	function nextId() {
	  return id++;
	}
	
	function makePromise(promise) {
	  promise[PROMISE_ID] = id++;
	  promise._state = undefined;
	  promise._result = undefined;
	  promise._subscribers = [];
	}
	
	function Enumerator(Constructor, input) {
	  this._instanceConstructor = Constructor;
	  this.promise = new Constructor(noop);
	
	  if (!this.promise[PROMISE_ID]) {
	    makePromise(this.promise);
	  }
	
	  if (isArray(input)) {
	    this._input = input;
	    this.length = input.length;
	    this._remaining = input.length;
	
	    this._result = new Array(this.length);
	
	    if (this.length === 0) {
	      fulfill(this.promise, this._result);
	    } else {
	      this.length = this.length || 0;
	      this._enumerate();
	      if (this._remaining === 0) {
	        fulfill(this.promise, this._result);
	      }
	    }
	  } else {
	    _reject(this.promise, validationError());
	  }
	}
	
	function validationError() {
	  return new Error('Array Methods must be provided an Array');
	};
	
	Enumerator.prototype._enumerate = function () {
	  var length = this.length;
	  var _input = this._input;
	
	  for (var i = 0; this._state === PENDING && i < length; i++) {
	    this._eachEntry(_input[i], i);
	  }
	};
	
	Enumerator.prototype._eachEntry = function (entry, i) {
	  var c = this._instanceConstructor;
	  var resolve$$ = c.resolve;
	
	  if (resolve$$ === resolve) {
	    var _then = getThen(entry);
	
	    if (_then === then && entry._state !== PENDING) {
	      this._settledAt(entry._state, i, entry._result);
	    } else if (typeof _then !== 'function') {
	      this._remaining--;
	      this._result[i] = entry;
	    } else if (c === Promise) {
	      var promise = new c(noop);
	      handleMaybeThenable(promise, entry, _then);
	      this._willSettleAt(promise, i);
	    } else {
	      this._willSettleAt(new c(function (resolve$$) {
	        return resolve$$(entry);
	      }), i);
	    }
	  } else {
	    this._willSettleAt(resolve$$(entry), i);
	  }
	};
	
	Enumerator.prototype._settledAt = function (state, i, value) {
	  var promise = this.promise;
	
	  if (promise._state === PENDING) {
	    this._remaining--;
	
	    if (state === REJECTED) {
	      _reject(promise, value);
	    } else {
	      this._result[i] = value;
	    }
	  }
	
	  if (this._remaining === 0) {
	    fulfill(promise, this._result);
	  }
	};
	
	Enumerator.prototype._willSettleAt = function (promise, i) {
	  var enumerator = this;
	
	  subscribe(promise, undefined, function (value) {
	    return enumerator._settledAt(FULFILLED, i, value);
	  }, function (reason) {
	    return enumerator._settledAt(REJECTED, i, reason);
	  });
	};
	
	/**
	  `Promise.all` accepts an array of promises, and returns a new promise which
	  is fulfilled with an array of fulfillment values for the passed promises, or
	  rejected with the reason of the first passed promise to be rejected. It casts all
	  elements of the passed iterable to promises as it runs this algorithm.
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = resolve(2);
	  let promise3 = resolve(3);
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // The array here would be [ 1, 2, 3 ];
	  });
	  ```
	
	  If any of the `promises` given to `all` are rejected, the first promise
	  that is rejected will be given as an argument to the returned promises's
	  rejection handler. For example:
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = reject(new Error("2"));
	  let promise3 = reject(new Error("3"));
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // Code here never runs because there are rejected promises!
	  }, function(error) {
	    // error.message === "2"
	  });
	  ```
	
	  @method all
	  @static
	  @param {Array} entries array of promises
	  @param {String} label optional string for labeling the promise.
	  Useful for tooling.
	  @return {Promise} promise that is fulfilled when all `promises` have been
	  fulfilled, or rejected if any of them become rejected.
	  @static
	*/
	function all(entries) {
	  return new Enumerator(this, entries).promise;
	}
	
	/**
	  `Promise.race` returns a new promise which is settled in the same way as the
	  first passed promise to settle.
	
	  Example:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 2');
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // result === 'promise 2' because it was resolved before promise1
	    // was resolved.
	  });
	  ```
	
	  `Promise.race` is deterministic in that only the state of the first
	  settled promise matters. For example, even if other promises given to the
	  `promises` array argument are resolved, but the first settled promise has
	  become rejected before the other promises became fulfilled, the returned
	  promise will become rejected:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      reject(new Error('promise 2'));
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // Code here never runs
	  }, function(reason){
	    // reason.message === 'promise 2' because promise 2 became rejected before
	    // promise 1 became fulfilled
	  });
	  ```
	
	  An example real-world use case is implementing timeouts:
	
	  ```javascript
	  Promise.race([ajax('foo.json'), timeout(5000)])
	  ```
	
	  @method race
	  @static
	  @param {Array} promises array of promises to observe
	  Useful for tooling.
	  @return {Promise} a promise which settles in the same way as the first passed
	  promise to settle.
	*/
	function race(entries) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (!isArray(entries)) {
	    return new Constructor(function (_, reject) {
	      return reject(new TypeError('You must pass an array to race.'));
	    });
	  } else {
	    return new Constructor(function (resolve, reject) {
	      var length = entries.length;
	      for (var i = 0; i < length; i++) {
	        Constructor.resolve(entries[i]).then(resolve, reject);
	      }
	    });
	  }
	}
	
	/**
	  `Promise.reject` returns a promise rejected with the passed `reason`.
	  It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    reject(new Error('WHOOPS'));
	  });
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.reject(new Error('WHOOPS'));
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  @method reject
	  @static
	  @param {Any} reason value that the returned promise will be rejected with.
	  Useful for tooling.
	  @return {Promise} a promise rejected with the given `reason`.
	*/
	function reject(reason) {
	  /*jshint validthis:true */
	  var Constructor = this;
	  var promise = new Constructor(noop);
	  _reject(promise, reason);
	  return promise;
	}
	
	function needsResolver() {
	  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	}
	
	function needsNew() {
	  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	}
	
	/**
	  Promise objects represent the eventual result of an asynchronous operation. The
	  primary way of interacting with a promise is through its `then` method, which
	  registers callbacks to receive either a promise's eventual value or the reason
	  why the promise cannot be fulfilled.
	
	  Terminology
	  -----------
	
	  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	  - `thenable` is an object or function that defines a `then` method.
	  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	  - `exception` is a value that is thrown using the throw statement.
	  - `reason` is a value that indicates why a promise was rejected.
	  - `settled` the final resting state of a promise, fulfilled or rejected.
	
	  A promise can be in one of three states: pending, fulfilled, or rejected.
	
	  Promises that are fulfilled have a fulfillment value and are in the fulfilled
	  state.  Promises that are rejected have a rejection reason and are in the
	  rejected state.  A fulfillment value is never a thenable.
	
	  Promises can also be said to *resolve* a value.  If this value is also a
	  promise, then the original promise's settled state will match the value's
	  settled state.  So a promise that *resolves* a promise that rejects will
	  itself reject, and a promise that *resolves* a promise that fulfills will
	  itself fulfill.
	
	
	  Basic Usage:
	  ------------
	
	  ```js
	  let promise = new Promise(function(resolve, reject) {
	    // on success
	    resolve(value);
	
	    // on failure
	    reject(reason);
	  });
	
	  promise.then(function(value) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Advanced Usage:
	  ---------------
	
	  Promises shine when abstracting away asynchronous interactions such as
	  `XMLHttpRequest`s.
	
	  ```js
	  function getJSON(url) {
	    return new Promise(function(resolve, reject){
	      let xhr = new XMLHttpRequest();
	
	      xhr.open('GET', url);
	      xhr.onreadystatechange = handler;
	      xhr.responseType = 'json';
	      xhr.setRequestHeader('Accept', 'application/json');
	      xhr.send();
	
	      function handler() {
	        if (this.readyState === this.DONE) {
	          if (this.status === 200) {
	            resolve(this.response);
	          } else {
	            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	          }
	        }
	      };
	    });
	  }
	
	  getJSON('/posts.json').then(function(json) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Unlike callbacks, promises are great composable primitives.
	
	  ```js
	  Promise.all([
	    getJSON('/posts'),
	    getJSON('/comments')
	  ]).then(function(values){
	    values[0] // => postsJSON
	    values[1] // => commentsJSON
	
	    return values;
	  });
	  ```
	
	  @class Promise
	  @param {function} resolver
	  Useful for tooling.
	  @constructor
	*/
	function Promise(resolver) {
	  this[PROMISE_ID] = nextId();
	  this._result = this._state = undefined;
	  this._subscribers = [];
	
	  if (noop !== resolver) {
	    typeof resolver !== 'function' && needsResolver();
	    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
	  }
	}
	
	Promise.all = all;
	Promise.race = race;
	Promise.resolve = resolve;
	Promise.reject = reject;
	Promise._setScheduler = setScheduler;
	Promise._setAsap = setAsap;
	Promise._asap = asap;
	
	Promise.prototype = {
	  constructor: Promise,
	
	  /**
	    The primary way of interacting with a promise is through its `then` method,
	    which registers callbacks to receive either a promise's eventual value or the
	    reason why the promise cannot be fulfilled.
	  
	    ```js
	    findUser().then(function(user){
	      // user is available
	    }, function(reason){
	      // user is unavailable, and you are given the reason why
	    });
	    ```
	  
	    Chaining
	    --------
	  
	    The return value of `then` is itself a promise.  This second, 'downstream'
	    promise is resolved with the return value of the first promise's fulfillment
	    or rejection handler, or rejected if the handler throws an exception.
	  
	    ```js
	    findUser().then(function (user) {
	      return user.name;
	    }, function (reason) {
	      return 'default name';
	    }).then(function (userName) {
	      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	      // will be `'default name'`
	    });
	  
	    findUser().then(function (user) {
	      throw new Error('Found user, but still unhappy');
	    }, function (reason) {
	      throw new Error('`findUser` rejected and we're unhappy');
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	    });
	    ```
	    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	  
	    ```js
	    findUser().then(function (user) {
	      throw new PedagogicalException('Upstream error');
	    }).then(function (value) {
	      // never reached
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // The `PedgagocialException` is propagated all the way down to here
	    });
	    ```
	  
	    Assimilation
	    ------------
	  
	    Sometimes the value you want to propagate to a downstream promise can only be
	    retrieved asynchronously. This can be achieved by returning a promise in the
	    fulfillment or rejection handler. The downstream promise will then be pending
	    until the returned promise is settled. This is called *assimilation*.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // The user's comments are now available
	    });
	    ```
	  
	    If the assimliated promise rejects, then the downstream promise will also reject.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // If `findCommentsByAuthor` fulfills, we'll have the value here
	    }, function (reason) {
	      // If `findCommentsByAuthor` rejects, we'll have the reason here
	    });
	    ```
	  
	    Simple Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let result;
	  
	    try {
	      result = findResult();
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	    findResult(function(result, err){
	      if (err) {
	        // failure
	      } else {
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findResult().then(function(result){
	      // success
	    }, function(reason){
	      // failure
	    });
	    ```
	  
	    Advanced Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let author, books;
	  
	    try {
	      author = findAuthor();
	      books  = findBooksByAuthor(author);
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	  
	    function foundBooks(books) {
	  
	    }
	  
	    function failure(reason) {
	  
	    }
	  
	    findAuthor(function(author, err){
	      if (err) {
	        failure(err);
	        // failure
	      } else {
	        try {
	          findBoooksByAuthor(author, function(books, err) {
	            if (err) {
	              failure(err);
	            } else {
	              try {
	                foundBooks(books);
	              } catch(reason) {
	                failure(reason);
	              }
	            }
	          });
	        } catch(error) {
	          failure(err);
	        }
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findAuthor().
	      then(findBooksByAuthor).
	      then(function(books){
	        // found books
	    }).catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method then
	    @param {Function} onFulfilled
	    @param {Function} onRejected
	    Useful for tooling.
	    @return {Promise}
	  */
	  then: then,
	
	  /**
	    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	    as the catch block of a try/catch statement.
	  
	    ```js
	    function findAuthor(){
	      throw new Error('couldn't find that author');
	    }
	  
	    // synchronous
	    try {
	      findAuthor();
	    } catch(reason) {
	      // something went wrong
	    }
	  
	    // async with promises
	    findAuthor().catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method catch
	    @param {Function} onRejection
	    Useful for tooling.
	    @return {Promise}
	  */
	  'catch': function _catch(onRejection) {
	    return this.then(null, onRejection);
	  }
	};
	
	function polyfill() {
	    var local = undefined;
	
	    if (typeof global !== 'undefined') {
	        local = global;
	    } else if (typeof self !== 'undefined') {
	        local = self;
	    } else {
	        try {
	            local = Function('return this')();
	        } catch (e) {
	            throw new Error('polyfill failed because global object is unavailable in this environment');
	        }
	    }
	
	    var P = local.Promise;
	
	    if (P) {
	        var promiseToString = null;
	        try {
	            promiseToString = Object.prototype.toString.call(P.resolve());
	        } catch (e) {
	            // silently ignored
	        }
	
	        if (promiseToString === '[object Promise]' && !P.cast) {
	            return;
	        }
	    }
	
	    local.Promise = Promise;
	}
	
	// Strange compat..
	Promise.polyfill = polyfill;
	Promise.Promise = Promise;
	
	return Promise;
	
	})));
	//# sourceMappingURL=es6-promise.map
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), (function() { return this; }())))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var es6_promise_1 = __webpack_require__(2);
	;
	;
	// TODO: Either the payload should be anything and the user has to
	// specify the content-type via the headers arg or it should always
	// be JSON in which case the user shouldn't need to specify the content-type
	// to be application/json.
	/**
	 * Perform an AJAX call to an API endpoint.
	 * @param args The arguments for the call.
	 * @return A promise holding an object of structure ApiCallResponse.
	 */
	function apiCall(args) {
	    var url = args.url;
	    var method = args.method;
	    var payload = args.payload;
	    var headers = args.headers;
	    var jsonBody = args.jsonBody || false;
	    var jsonEncoded = args.jsonEncoded; // flag indicating json-encoding
	    return new es6_promise_1.Promise(function (resolve, reject) {
	        var xhr = new XMLHttpRequest();
	        xhr.open(method, url, true);
	        if (headers) {
	            Object.keys(headers).forEach(function (key) {
	                xhr.setRequestHeader(key, headers[key]);
	            });
	        }
	        xhr.onreadystatechange = function () {
	            if (this.readyState === 4) {
	                var status_1 = this.status;
	                if (status_1 >= 200 && status_1 < 300) {
	                    var body = void 0;
	                    if (jsonBody) {
	                        body = JSON.parse(this.responseText);
	                    }
	                    else {
	                        body = this.responseText;
	                    }
	                    resolve({
	                        message: 'Request successful',
	                        body: body,
	                        status: status_1
	                    });
	                }
	                else {
	                    reject({
	                        message: this.statusText,
	                        body: this.responseText,
	                        status: status_1
	                    });
	                }
	            }
	        };
	        xhr.onerror = function () {
	            reject({
	                message: 'Network error',
	                body: '',
	                status: 0
	            });
	        };
	        // NOTE: Note that the payload should probably be stringified
	        // before being passed into this function in order to allow
	        // non-json encodings of the payload (such as url-encoded or plain text).
	        // Supplement wya3: Check for JSON encoding. Additionally check if undefined in
	        // order to ensure backward compatibility.
	        if (payload !== undefined) {
	            if (jsonEncoded || jsonEncoded == undefined) {
	                xhr.send(JSON.stringify(payload));
	            }
	            else {
	                xhr.send(payload);
	            }
	        }
	        else {
	            xhr.send();
	        }
	    });
	}
	exports.apiCall = apiCall;
	;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var ng1_1 = __webpack_require__(7);
	var DEVICE_READY_TIMEOUT = 5000;
	var actionsheet_1 = __webpack_require__(8);
	var admob_1 = __webpack_require__(28);
	var alipay_1 = __webpack_require__(29);
	var android_fingerprint_auth_1 = __webpack_require__(30);
	var appavailability_1 = __webpack_require__(31);
	var appodeal_1 = __webpack_require__(32);
	var apprate_1 = __webpack_require__(358);
	var apppreferences_1 = __webpack_require__(359);
	var app_update_1 = __webpack_require__(360);
	var appversion_1 = __webpack_require__(361);
	var badge_1 = __webpack_require__(362);
	var background_fetch_1 = __webpack_require__(363);
	var background_geolocation_1 = __webpack_require__(364);
	var backgroundmode_1 = __webpack_require__(365);
	var backlight_1 = __webpack_require__(366);
	var barcodescanner_1 = __webpack_require__(367);
	var base64togallery_1 = __webpack_require__(368);
	var batterystatus_1 = __webpack_require__(369);
	var brightness_1 = __webpack_require__(370);
	var browser_tab_1 = __webpack_require__(371);
	var ble_1 = __webpack_require__(372);
	var bluetoothserial_1 = __webpack_require__(373);
	var broadcaster_1 = __webpack_require__(374);
	var calendar_1 = __webpack_require__(375);
	var call_number_1 = __webpack_require__(376);
	var camera_1 = __webpack_require__(377);
	var camera_preview_1 = __webpack_require__(378);
	var card_io_1 = __webpack_require__(379);
	var clipboard_1 = __webpack_require__(380);
	var code_push_1 = __webpack_require__(381);
	var contacts_1 = __webpack_require__(382);
	var couchbase_lite_1 = __webpack_require__(383);
	var crop_1 = __webpack_require__(384);
	var datepicker_1 = __webpack_require__(385);
	var dbmeter_1 = __webpack_require__(386);
	var deeplinks_1 = __webpack_require__(387);
	var device_1 = __webpack_require__(388);
	var device_feedback_1 = __webpack_require__(389);
	var deviceaccounts_1 = __webpack_require__(390);
	var devicemotion_1 = __webpack_require__(391);
	var deviceorientation_1 = __webpack_require__(392);
	var diagnostic_1 = __webpack_require__(393);
	var dialogs_1 = __webpack_require__(394);
	var emailcomposer_1 = __webpack_require__(395);
	var estimote_beacons_1 = __webpack_require__(396);
	var facebook_1 = __webpack_require__(397);
	var file_1 = __webpack_require__(398);
	var file_chooser_1 = __webpack_require__(399);
	var file_opener_1 = __webpack_require__(400);
	var filepath_1 = __webpack_require__(401);
	var filetransfer_1 = __webpack_require__(402);
	var fingerprint_aio_1 = __webpack_require__(403);
	var firebase_1 = __webpack_require__(404);
	var flashlight_1 = __webpack_require__(405);
	var geofence_1 = __webpack_require__(406);
	var geolocation_1 = __webpack_require__(407);
	var globalization_1 = __webpack_require__(408);
	var google_plus_1 = __webpack_require__(409);
	var googlemap_1 = __webpack_require__(410);
	var googleanalytics_1 = __webpack_require__(411);
	var gyroscope_1 = __webpack_require__(412);
	var headercolor_1 = __webpack_require__(413);
	var health_1 = __webpack_require__(414);
	var hotspot_1 = __webpack_require__(415);
	var http_1 = __webpack_require__(416);
	var httpd_1 = __webpack_require__(417);
	var ibeacon_1 = __webpack_require__(418);
	var imagepicker_1 = __webpack_require__(419);
	var imageresizer_1 = __webpack_require__(420);
	var inappbrowser_1 = __webpack_require__(421);
	var inapppurchase_1 = __webpack_require__(422);
	var insomnia_1 = __webpack_require__(423);
	var instagram_1 = __webpack_require__(424);
	var is_debug_1 = __webpack_require__(425);
	var keyboard_1 = __webpack_require__(426);
	var launchnavigator_1 = __webpack_require__(427);
	var launch_review_1 = __webpack_require__(428);
	var localnotifications_1 = __webpack_require__(429);
	var location_accuracy_1 = __webpack_require__(430);
	var media_capture_1 = __webpack_require__(431);
	var native_audio_1 = __webpack_require__(432);
	var native_geocoder_1 = __webpack_require__(433);
	var native_page_transitions_1 = __webpack_require__(434);
	var nativestorage_1 = __webpack_require__(435);
	var navigationbar_1 = __webpack_require__(436);
	var market_1 = __webpack_require__(437);
	var media_1 = __webpack_require__(438);
	var mixpanel_1 = __webpack_require__(439);
	var music_controls_1 = __webpack_require__(440);
	var network_1 = __webpack_require__(441);
	var nfc_1 = __webpack_require__(442);
	var onesignal_1 = __webpack_require__(443);
	var photo_viewer_1 = __webpack_require__(444);
	var screen_orientation_1 = __webpack_require__(445);
	var pay_pal_1 = __webpack_require__(446);
	var photo_library_1 = __webpack_require__(447);
	var pin_dialog_1 = __webpack_require__(448);
	var pinterest_1 = __webpack_require__(449);
	var power_management_1 = __webpack_require__(450);
	var printer_1 = __webpack_require__(451);
	var push_1 = __webpack_require__(452);
	var rollbar_1 = __webpack_require__(453);
	var safari_view_controller_1 = __webpack_require__(454);
	var screenshot_1 = __webpack_require__(455);
	var securestorage_1 = __webpack_require__(456);
	var serial_1 = __webpack_require__(457);
	var shake_1 = __webpack_require__(458);
	var sim_1 = __webpack_require__(459);
	var sms_1 = __webpack_require__(460);
	var socialsharing_1 = __webpack_require__(461);
	var speech_recognition_1 = __webpack_require__(462);
	var spinnerdialog_1 = __webpack_require__(463);
	var splashscreen_1 = __webpack_require__(464);
	var sqlite_1 = __webpack_require__(465);
	var statusbar_1 = __webpack_require__(466);
	var stepcounter_1 = __webpack_require__(467);
	var streaming_media_1 = __webpack_require__(468);
	var stripe_1 = __webpack_require__(469);
	var _3dtouch_1 = __webpack_require__(470);
	var toast_1 = __webpack_require__(471);
	var touchid_1 = __webpack_require__(472);
	var text_to_speech_1 = __webpack_require__(473);
	var themeable_browser_1 = __webpack_require__(474);
	var twitter_connect_1 = __webpack_require__(475);
	var unique_device_id_1 = __webpack_require__(476);
	var vibration_1 = __webpack_require__(477);
	var video_editor_1 = __webpack_require__(478);
	var video_player_1 = __webpack_require__(479);
	var webintent_1 = __webpack_require__(480);
	var youtube_video_player_1 = __webpack_require__(481);
	var z_bar_1 = __webpack_require__(482);
	var zip_1 = __webpack_require__(483);
	__export(__webpack_require__(470));
	__export(__webpack_require__(8));
	__export(__webpack_require__(28));
	__export(__webpack_require__(29));
	__export(__webpack_require__(30));
	__export(__webpack_require__(31));
	__export(__webpack_require__(359));
	__export(__webpack_require__(32));
	__export(__webpack_require__(358));
	__export(__webpack_require__(360));
	__export(__webpack_require__(361));
	__export(__webpack_require__(363));
	__export(__webpack_require__(364));
	__export(__webpack_require__(365));
	__export(__webpack_require__(366));
	__export(__webpack_require__(362));
	__export(__webpack_require__(367));
	__export(__webpack_require__(368));
	__export(__webpack_require__(369));
	__export(__webpack_require__(372));
	__export(__webpack_require__(373));
	__export(__webpack_require__(370));
	__export(__webpack_require__(371));
	__export(__webpack_require__(374));
	__export(__webpack_require__(375));
	__export(__webpack_require__(376));
	__export(__webpack_require__(377));
	__export(__webpack_require__(378));
	__export(__webpack_require__(379));
	__export(__webpack_require__(380));
	__export(__webpack_require__(381));
	__export(__webpack_require__(382));
	__export(__webpack_require__(383));
	__export(__webpack_require__(384));
	__export(__webpack_require__(385));
	__export(__webpack_require__(386));
	__export(__webpack_require__(387));
	__export(__webpack_require__(388));
	__export(__webpack_require__(389));
	__export(__webpack_require__(390));
	__export(__webpack_require__(391));
	__export(__webpack_require__(392));
	__export(__webpack_require__(393));
	__export(__webpack_require__(394));
	__export(__webpack_require__(395));
	__export(__webpack_require__(396));
	__export(__webpack_require__(397));
	__export(__webpack_require__(398));
	__export(__webpack_require__(399));
	__export(__webpack_require__(400));
	__export(__webpack_require__(402));
	__export(__webpack_require__(404));
	__export(__webpack_require__(401));
	__export(__webpack_require__(403));
	__export(__webpack_require__(405));
	__export(__webpack_require__(406));
	__export(__webpack_require__(407));
	__export(__webpack_require__(408));
	__export(__webpack_require__(409));
	__export(__webpack_require__(411));
	__export(__webpack_require__(410));
	__export(__webpack_require__(412));
	__export(__webpack_require__(413));
	__export(__webpack_require__(414));
	__export(__webpack_require__(415));
	__export(__webpack_require__(416));
	__export(__webpack_require__(417));
	__export(__webpack_require__(418));
	__export(__webpack_require__(419));
	__export(__webpack_require__(420));
	__export(__webpack_require__(421));
	__export(__webpack_require__(422));
	__export(__webpack_require__(423));
	__export(__webpack_require__(424));
	__export(__webpack_require__(425));
	__export(__webpack_require__(426));
	__export(__webpack_require__(427));
	__export(__webpack_require__(428));
	__export(__webpack_require__(429));
	__export(__webpack_require__(430));
	__export(__webpack_require__(437));
	__export(__webpack_require__(438));
	__export(__webpack_require__(431));
	__export(__webpack_require__(439));
	__export(__webpack_require__(440));
	__export(__webpack_require__(432));
	__export(__webpack_require__(433));
	__export(__webpack_require__(434));
	__export(__webpack_require__(435));
	__export(__webpack_require__(436));
	__export(__webpack_require__(441));
	__export(__webpack_require__(442));
	__export(__webpack_require__(443));
	__export(__webpack_require__(446));
	__export(__webpack_require__(447));
	__export(__webpack_require__(444));
	__export(__webpack_require__(448));
	__export(__webpack_require__(449));
	__export(__webpack_require__(9));
	__export(__webpack_require__(450));
	__export(__webpack_require__(451));
	__export(__webpack_require__(452));
	__export(__webpack_require__(453));
	__export(__webpack_require__(454));
	__export(__webpack_require__(445));
	__export(__webpack_require__(455));
	__export(__webpack_require__(456));
	__export(__webpack_require__(457));
	__export(__webpack_require__(458));
	__export(__webpack_require__(459));
	__export(__webpack_require__(460));
	__export(__webpack_require__(461));
	__export(__webpack_require__(462));
	__export(__webpack_require__(463));
	__export(__webpack_require__(464));
	__export(__webpack_require__(465));
	__export(__webpack_require__(466));
	__export(__webpack_require__(467));
	__export(__webpack_require__(468));
	__export(__webpack_require__(469));
	__export(__webpack_require__(473));
	__export(__webpack_require__(474));
	__export(__webpack_require__(471));
	__export(__webpack_require__(472));
	__export(__webpack_require__(475));
	__export(__webpack_require__(476));
	__export(__webpack_require__(477));
	__export(__webpack_require__(478));
	__export(__webpack_require__(479));
	__export(__webpack_require__(480));
	__export(__webpack_require__(481));
	__export(__webpack_require__(482));
	__export(__webpack_require__(483));
	// Window export to use outside of a module loading system
	window['IonicNative'] = {
	    ActionSheet: actionsheet_1.ActionSheet,
	    AdMob: admob_1.AdMob,
	    Alipay: alipay_1.Alipay,
	    AndroidFingerprintAuth: android_fingerprint_auth_1.AndroidFingerprintAuth,
	    AppAvailability: appavailability_1.AppAvailability,
	    AppPreferences: apppreferences_1.AppPreferences,
	    Appodeal: appodeal_1.Appodeal,
	    AppRate: apprate_1.AppRate,
	    AppUpdate: app_update_1.AppUpdate,
	    AppVersion: appversion_1.AppVersion,
	    Badge: badge_1.Badge,
	    BackgroundGeolocation: background_geolocation_1.BackgroundGeolocation,
	    BackgroundFetch: background_fetch_1.BackgroundFetch,
	    BackgroundMode: backgroundmode_1.BackgroundMode,
	    Backlight: backlight_1.Backlight,
	    BarcodeScanner: barcodescanner_1.BarcodeScanner,
	    Base64ToGallery: base64togallery_1.Base64ToGallery,
	    BatteryStatus: batterystatus_1.BatteryStatus,
	    Brightness: brightness_1.Brightness,
	    BrowserTab: browser_tab_1.BrowserTab,
	    BLE: ble_1.BLE,
	    BluetoothSerial: bluetoothserial_1.BluetoothSerial,
	    Broadcaster: broadcaster_1.Broadcaster,
	    Calendar: calendar_1.Calendar,
	    CallNumber: call_number_1.CallNumber,
	    Camera: camera_1.Camera,
	    CameraPreview: camera_preview_1.CameraPreview,
	    CardIO: card_io_1.CardIO,
	    Clipboard: clipboard_1.Clipboard,
	    CodePush: code_push_1.CodePush,
	    Contacts: contacts_1.Contacts,
	    CouchbaseLite: couchbase_lite_1.CouchbaseLite,
	    Crop: crop_1.Crop,
	    DatePicker: datepicker_1.DatePicker,
	    DBMeter: dbmeter_1.DBMeter,
	    Deeplinks: deeplinks_1.Deeplinks,
	    Device: device_1.Device,
	    DeviceFeedback: device_feedback_1.DeviceFeedback,
	    DeviceAccounts: deviceaccounts_1.DeviceAccounts,
	    DeviceMotion: devicemotion_1.DeviceMotion,
	    DeviceOrientation: deviceorientation_1.DeviceOrientation,
	    Dialogs: dialogs_1.Dialogs,
	    Diagnostic: diagnostic_1.Diagnostic,
	    EmailComposer: emailcomposer_1.EmailComposer,
	    EstimoteBeacons: estimote_beacons_1.EstimoteBeacons,
	    Facebook: facebook_1.Facebook,
	    File: file_1.File,
	    FileChooser: file_chooser_1.FileChooser,
	    FileOpener: file_opener_1.FileOpener,
	    FilePath: filepath_1.FilePath,
	    FingerprintAIO: fingerprint_aio_1.FingerprintAIO,
	    Flashlight: flashlight_1.Flashlight,
	    Firebase: firebase_1.Firebase,
	    Geofence: geofence_1.Geofence,
	    Geolocation: geolocation_1.Geolocation,
	    Globalization: globalization_1.Globalization,
	    GooglePlus: google_plus_1.GooglePlus,
	    GoogleMap: googlemap_1.GoogleMap,
	    GoogleAnalytics: googleanalytics_1.GoogleAnalytics,
	    Gyroscope: gyroscope_1.Gyroscope,
	    HeaderColor: headercolor_1.HeaderColor,
	    Health: health_1.Health,
	    Hotspot: hotspot_1.Hotspot,
	    HTTP: http_1.HTTP,
	    Httpd: httpd_1.Httpd,
	    IBeacon: ibeacon_1.IBeacon,
	    ImagePicker: imagepicker_1.ImagePicker,
	    ImageResizer: imageresizer_1.ImageResizer,
	    InAppBrowser: inappbrowser_1.InAppBrowser,
	    InAppPurchase: inapppurchase_1.InAppPurchase,
	    Insomnia: insomnia_1.Insomnia,
	    Instagram: instagram_1.Instagram,
	    IsDebug: is_debug_1.IsDebug,
	    Keyboard: keyboard_1.Keyboard,
	    LaunchNavigator: launchnavigator_1.LaunchNavigator,
	    LaunchReview: launch_review_1.LaunchReview,
	    LocalNotifications: localnotifications_1.LocalNotifications,
	    LocationAccuracy: location_accuracy_1.LocationAccuracy,
	    Market: market_1.Market,
	    MediaCapture: media_capture_1.MediaCapture,
	    MediaPlugin: media_1.MediaPlugin,
	    Mixpanel: mixpanel_1.Mixpanel,
	    MusicControls: music_controls_1.MusicControls,
	    NativeAudio: native_audio_1.NativeAudio,
	    NativeGeocoder: native_geocoder_1.NativeGeocoder,
	    NativePageTransitions: native_page_transitions_1.NativePageTransitions,
	    NativeStorage: nativestorage_1.NativeStorage,
	    NavigationBar: navigationbar_1.NavigationBar,
	    Network: network_1.Network,
	    PayPal: pay_pal_1.PayPal,
	    PhotoLibrary: photo_library_1.PhotoLibrary,
	    NFC: nfc_1.NFC,
	    Printer: printer_1.Printer,
	    Push: push_1.Push,
	    OneSignal: onesignal_1.OneSignal,
	    PhotoViewer: photo_viewer_1.PhotoViewer,
	    ScreenOrientation: screen_orientation_1.ScreenOrientation,
	    PinDialog: pin_dialog_1.PinDialog,
	    Pinterest: pinterest_1.Pinterest,
	    PowerManagement: power_management_1.PowerManagement,
	    Rollbar: rollbar_1.Rollbar,
	    SafariViewController: safari_view_controller_1.SafariViewController,
	    Screenshot: screenshot_1.Screenshot,
	    SecureStorage: securestorage_1.SecureStorage,
	    Serial: serial_1.Serial,
	    Shake: shake_1.Shake,
	    Sim: sim_1.Sim,
	    SMS: sms_1.SMS,
	    SocialSharing: socialsharing_1.SocialSharing,
	    SpinnerDialog: spinnerdialog_1.SpinnerDialog,
	    Splashscreen: splashscreen_1.Splashscreen,
	    SQLite: sqlite_1.SQLite,
	    StatusBar: statusbar_1.StatusBar,
	    SpeechRecognition: speech_recognition_1.SpeechRecognition,
	    Stepcounter: stepcounter_1.Stepcounter,
	    StreamingMedia: streaming_media_1.StreamingMedia,
	    Stripe: stripe_1.Stripe,
	    ThreeDeeTouch: _3dtouch_1.ThreeDeeTouch,
	    Toast: toast_1.Toast,
	    TouchID: touchid_1.TouchID,
	    Transfer: filetransfer_1.Transfer,
	    TextToSpeech: text_to_speech_1.TextToSpeech,
	    ThemeableBrowser: themeable_browser_1.ThemeableBrowser,
	    TwitterConnect: twitter_connect_1.TwitterConnect,
	    UniqueDeviceID: unique_device_id_1.UniqueDeviceID,
	    VideoEditor: video_editor_1.VideoEditor,
	    VideoPlayer: video_player_1.VideoPlayer,
	    Vibration: vibration_1.Vibration,
	    WebIntent: webintent_1.WebIntent,
	    YoutubeVideoPlayer: youtube_video_player_1.YoutubeVideoPlayer,
	    ZBar: z_bar_1.ZBar,
	    Zip: zip_1.Zip
	};
	ng1_1.initAngular1(window['IonicNative']);
	// To help developers using cordova, we listen for the device ready event and
	// log an error if it didn't fire in a reasonable amount of time. Generally,
	// when this happens, developers should remove and reinstall plugins, since
	// an inconsistent plugin is often the culprit.
	var before = Date.now();
	var didFireReady = false;
	document.addEventListener('deviceready', function () {
	    console.log('DEVICE READY FIRED AFTER', (Date.now() - before), 'ms');
	    didFireReady = true;
	});
	setTimeout(function () {
	    if (!didFireReady && window.cordova) {
	        console.warn("Native: deviceready did not fire within " + DEVICE_READY_TIMEOUT + "ms. This can happen when plugins are in an inconsistent state. Try removing plugins from plugins/ and reinstalling them.");
	    }
	}, DEVICE_READY_TIMEOUT);
	//# sourceMappingURL=index.js.map

/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * Initialize the ionic.native Angular module if we're running in ng1.
	 * This iterates through the list of registered plugins and dynamically
	 * creates Angular 1 services of the form $cordovaSERVICE, ex: $cordovaStatusBar.
	 */
	function initAngular1(plugins) {
	    if (window.angular) {
	        var ngModule_1 = window.angular.module('ionic.native', []);
	        for (var name in plugins) {
	            var serviceName = '$cordova' + name;
	            var cls = plugins[name];
	            (function (serviceName, cls, name) {
	                ngModule_1.service(serviceName, [function () {
	                        var funcs = window.angular.copy(cls);
	                        funcs.prototype['name'] = name;
	                        return funcs;
	                    }]);
	            })(serviceName, cls, name);
	        }
	    }
	}
	exports.initAngular1 = initAngular1;
	//# sourceMappingURL=ng1.js.map

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Action Sheet
	 * @description
	 * The ActionSheet plugin shows a native list of options the user can choose from.
	 *
	 * Requires Cordova plugin: `cordova-plugin-actionsheet`. For more info, please see the [ActionSheet plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-actionsheet).
	 *
	 * @usage
	 * ```typescript
	 * import { ActionSheet } from 'ionic-native';
	 *
	 * let buttonLabels = ['Share via Facebook', 'Share via Twitter'];
	 * ActionSheet.show({
	 *   'title': 'What do you want with this image?',
	 *   'buttonLabels': buttonLabels,
	 *   'addCancelButtonWithLabel': 'Cancel',
	 *   'addDestructiveButtonWithLabel' : 'Delete'
	 * }).then((buttonIndex: number) => {
	 *   console.log('Button pressed: ' + buttonIndex);
	 * });
	 * ```
	 * @interfaces
	 * ActionSheetOptions
	 */
	var ActionSheet = (function () {
	    function ActionSheet() {
	    }
	    /**
	     * Show a native ActionSheet component. See below for options.
	     * @param options {ActionSheetOptions} Options See table below
	     * @returns {Promise<any>} Returns a Promise that resolves with the index of the
	     *   button pressed (1 based, so 1, 2, 3, etc.)
	     */
	    ActionSheet.show = function (options) { return; };
	    /**
	     * Progamtically hide the native ActionSheet
	     * @returns {Promise<any>} Returns a Promise that resolves when the actionsheet is closed
	     */
	    ActionSheet.hide = function (options) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], ActionSheet, "show", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], ActionSheet, "hide", null);
	    ActionSheet = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'ActionSheet',
	            plugin: 'cordova-plugin-actionsheet',
	            pluginRef: 'plugins.actionsheet',
	            repo: 'https://github.com/EddyVerbruggen/cordova-plugin-actionsheet',
	            platforms: ['Android', 'iOS', 'Windows Phone 8']
	        })
	    ], ActionSheet);
	    return ActionSheet;
	}());
	exports.ActionSheet = ActionSheet;
	//# sourceMappingURL=actionsheet.js.map

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var util_1 = __webpack_require__(10);
	var Observable_1 = __webpack_require__(11);
	__webpack_require__(25);
	/**
	 * @private
	 * @param pluginRef
	 * @returns {null|*}
	 */
	exports.getPlugin = function (pluginRef) {
	    return util_1.get(window, pluginRef);
	};
	/**
	 * @private
	 * @param pluginObj
	 * @param method
	 */
	exports.pluginWarn = function (pluginObj, method) {
	    var pluginName = pluginObj.pluginName, plugin = pluginObj.plugin;
	    if (method) {
	        console.warn('Native: tried calling ' + pluginName + '.' + method + ', but the ' + pluginName + ' plugin is not installed.');
	    }
	    else {
	        console.warn('Native: tried accessing the ' + pluginName + ' plugin but it\'s not installed.');
	    }
	    console.warn('Install the ' + pluginName + ' plugin: \'ionic plugin add ' + plugin + '\'');
	};
	/**
	 * @private
	 * @param pluginName
	 * @param method
	 */
	exports.cordovaWarn = function (pluginName, method) {
	    if (method) {
	        console.warn('Native: tried calling ' + pluginName + '.' + method + ', but Cordova is not available. Make sure to include cordova.js or run in a device/simulator');
	    }
	    else {
	        console.warn('Native: tried accessing the ' + pluginName + ' plugin but Cordova is not available. Make sure to include cordova.js or run in a device/simulator');
	    }
	};
	function setIndex(args, opts, resolve, reject) {
	    if (opts === void 0) { opts = {}; }
	    // ignore resolve and reject in case sync
	    if (opts.sync) {
	        return args;
	    }
	    // If the plugin method expects myMethod(success, err, options)
	    if (opts.callbackOrder === 'reverse') {
	        // Get those arguments in the order [resolve, reject, ...restOfArgs]
	        args.unshift(reject);
	        args.unshift(resolve);
	    }
	    else if (opts.callbackStyle === 'node') {
	        args.push(function (err, result) {
	            if (err) {
	                reject(err);
	            }
	            else {
	                resolve(result);
	            }
	        });
	    }
	    else if (opts.callbackStyle === 'object' && opts.successName && opts.errorName) {
	        var obj = {};
	        obj[opts.successName] = resolve;
	        obj[opts.errorName] = reject;
	        args.push(obj);
	    }
	    else if (typeof opts.successIndex !== 'undefined' || typeof opts.errorIndex !== 'undefined') {
	        var setSuccessIndex = function () {
	            // If we've specified a success/error index
	            if (opts.successIndex > args.length) {
	                args[opts.successIndex] = resolve;
	            }
	            else {
	                args.splice(opts.successIndex, 0, resolve);
	            }
	        };
	        var setErrorIndex = function () {
	            // We don't want that the reject cb gets spliced into the position of an optional argument that has not been defined and thus causing non expected behaviour.
	            if (opts.errorIndex > args.length) {
	                args[opts.errorIndex] = reject; // insert the reject fn at the correct specific index
	            }
	            else {
	                args.splice(opts.errorIndex, 0, reject); // otherwise just splice it into the array
	            }
	        };
	        if (opts.successIndex > opts.errorIndex) {
	            setErrorIndex();
	            setSuccessIndex();
	        }
	        else {
	            setSuccessIndex();
	            setErrorIndex();
	        }
	    }
	    else {
	        // Otherwise, let's tack them on to the end of the argument list
	        // which is 90% of cases
	        args.push(resolve);
	        args.push(reject);
	    }
	    return args;
	}
	function callCordovaPlugin(pluginObj, methodName, args, opts, resolve, reject) {
	    if (opts === void 0) { opts = {}; }
	    // Try to figure out where the success/error callbacks need to be bound
	    // to our promise resolve/reject handlers.
	    args = setIndex(args, opts, resolve, reject);
	    var pluginInstance = exports.getPlugin(pluginObj.pluginRef);
	    if (!pluginInstance || pluginInstance[methodName] === 'undefined') {
	        // Do this check in here in the case that the Web API for this plugin is available (for example, Geolocation).
	        if (!window.cordova) {
	            exports.cordovaWarn(pluginObj.pluginName, methodName);
	            return {
	                error: 'cordova_not_available'
	            };
	        }
	        exports.pluginWarn(pluginObj, methodName);
	        return {
	            error: 'plugin_not_installed'
	        };
	    }
	    return pluginInstance[methodName].apply(pluginInstance, args);
	}
	/**
	 * @private
	 */
	function getPromise(cb) {
	    var tryNativePromise = function () {
	        if (window.Promise) {
	            return new Promise(function (resolve, reject) {
	                cb(resolve, reject);
	            });
	        }
	        else {
	            console.error('No Promise support or polyfill found. To enable Ionic Native support, please add the es6-promise polyfill before this script, or run with a library like Angular 1/2 or on a recent browser.');
	        }
	    };
	    if (window.angular) {
	        var injector = window.angular.element(document.querySelector('[ng-app]') || document.body).injector();
	        if (injector) {
	            var $q = injector.get('$q');
	            return $q(function (resolve, reject) {
	                cb(resolve, reject);
	            });
	        }
	        else {
	            console.warn('Angular 1 was detected but $q couldn\'t be retrieved. This is usually when the app is not bootstrapped on the html or body tag. Falling back to native promises which won\'t trigger an automatic digest when promises resolve.');
	            return tryNativePromise();
	        }
	    }
	    else {
	        return tryNativePromise();
	    }
	}
	exports.getPromise = getPromise;
	function wrapPromise(pluginObj, methodName, args, opts) {
	    if (opts === void 0) { opts = {}; }
	    var pluginResult, rej;
	    var p = getPromise(function (resolve, reject) {
	        pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts, resolve, reject);
	        rej = reject;
	    });
	    // Angular throws an error on unhandled rejection, but in this case we have already printed
	    // a warning that Cordova is undefined or the plugin is uninstalled, so there is no reason
	    // to error
	    if (pluginResult && pluginResult.error) {
	        p.catch(function () { });
	        rej(pluginResult.error);
	    }
	    return p;
	}
	function wrapOtherPromise(pluginObj, methodName, args, opts) {
	    if (opts === void 0) { opts = {}; }
	    return getPromise(function (resolve, reject) {
	        var pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts);
	        if (pluginResult && pluginResult.error) {
	            reject(pluginResult.error);
	        }
	        pluginResult.then(resolve).catch(reject);
	    });
	}
	function wrapObservable(pluginObj, methodName, args, opts) {
	    if (opts === void 0) { opts = {}; }
	    return new Observable_1.Observable(function (observer) {
	        var pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts, observer.next.bind(observer), observer.error.bind(observer));
	        if (pluginResult && pluginResult.error) {
	            observer.error(pluginResult.error);
	        }
	        return function () {
	            try {
	                if (opts.clearFunction) {
	                    if (opts.clearWithArgs) {
	                        return callCordovaPlugin(pluginObj, opts.clearFunction, args, opts, observer.next.bind(observer), observer.error.bind(observer));
	                    }
	                    return util_1.get(window, pluginObj.pluginRef)[opts.clearFunction].call(pluginObj, pluginResult);
	                }
	            }
	            catch (e) {
	                console.warn('Unable to clear the previous observable watch for', pluginObj.pluginName, methodName);
	                console.error(e);
	            }
	        };
	    });
	}
	function callInstance(pluginObj, methodName, args, opts, resolve, reject) {
	    if (opts === void 0) { opts = {}; }
	    args = setIndex(args, opts, resolve, reject);
	    return pluginObj._objectInstance[methodName].apply(pluginObj._objectInstance, args);
	}
	function wrapInstance(pluginObj, methodName, opts) {
	    if (opts === void 0) { opts = {}; }
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        if (opts.sync) {
	            // Sync doesn't wrap the plugin with a promise or observable, it returns the result as-is
	            return callInstance(pluginObj, methodName, args, opts);
	        }
	        else if (opts.observable) {
	            return new Observable_1.Observable(function (observer) {
	                var pluginResult = callInstance(pluginObj, methodName, args, opts, observer.next.bind(observer), observer.error.bind(observer));
	                return function () {
	                    try {
	                        if (opts.clearWithArgs) {
	                            return pluginObj._objectInstance[opts.clearFunction].apply(pluginObj._objectInstance, args);
	                        }
	                        return pluginObj._objectInstance[opts.clearFunction].call(pluginObj, pluginResult);
	                    }
	                    catch (e) {
	                        console.warn('Unable to clear the previous observable watch for', pluginObj.pluginName, methodName);
	                        console.error(e);
	                    }
	                };
	            });
	        }
	        else if (opts.otherPromise) {
	            return getPromise(function (resolve, reject) {
	                var result = callInstance(pluginObj, methodName, args, opts, resolve, reject);
	                result.then(resolve, reject);
	            });
	        }
	        else {
	            return getPromise(function (resolve, reject) {
	                callInstance(pluginObj, methodName, args, opts, resolve, reject);
	            });
	        }
	    };
	}
	/**
	 * Wrap the event with an observable
	 * @param event even name
	 * @param element The element to attach the event listener to
	 * @returns {Observable}
	 */
	function wrapEventObservable(event, element) {
	    if (element === void 0) { element = window; }
	    return Observable_1.Observable.fromEvent(element, event);
	}
	/**
	 * Certain plugins expect the user to override methods in the plugin. For example,
	 * window.cordova.plugins.backgroundMode.onactivate = function() { ... }.
	 *
	 * Unfortunately, this is brittle and would be better wrapped as an Observable. overrideFunction
	 * does just this.
	 */
	function overrideFunction(pluginObj, methodName, args, opts) {
	    if (opts === void 0) { opts = {}; }
	    return new Observable_1.Observable(function (observer) {
	        var pluginInstance = exports.getPlugin(pluginObj.pluginRef);
	        if (!pluginInstance) {
	            // Do this check in here in the case that the Web API for this plugin is available (for example, Geolocation).
	            if (!window.cordova) {
	                exports.cordovaWarn(pluginObj.pluginName, methodName);
	                observer.error({
	                    error: 'cordova_not_available'
	                });
	            }
	            exports.pluginWarn(pluginObj, methodName);
	            observer.error({
	                error: 'plugin_not_installed'
	            });
	            return;
	        }
	        pluginInstance[methodName] = observer.next.bind(observer);
	    });
	}
	/**
	 * @private
	 * @param pluginObj
	 * @param methodName
	 * @param opts
	 * @returns {function(...[any]): (undefined|*|Observable|*|*)}
	 */
	exports.wrap = function (pluginObj, methodName, opts) {
	    if (opts === void 0) { opts = {}; }
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        if (opts.sync) {
	            // Sync doesn't wrap the plugin with a promise or observable, it returns the result as-is
	            return callCordovaPlugin(pluginObj, methodName, args, opts);
	        }
	        else if (opts.observable) {
	            return wrapObservable(pluginObj, methodName, args, opts);
	        }
	        else if (opts.eventObservable && opts.event) {
	            return wrapEventObservable(opts.event, opts.element);
	        }
	        else if (opts.otherPromise) {
	            return wrapOtherPromise(pluginObj, methodName, args, opts);
	        }
	        else {
	            return wrapPromise(pluginObj, methodName, args, opts);
	        }
	    };
	};
	/**
	 * @private
	 *
	 * Class decorator specifying Plugin metadata. Required for all plugins.
	 *
	 * @usage
	 * ```typescript
	 * @Plugin({
	 *  pluginName: 'MyPlugin',
	 *  plugin: 'cordova-plugin-myplugin',
	 *  pluginRef: 'window.myplugin'
	 *  })
	 *  export class MyPlugin {
	 *
	 *    // Plugin wrappers, properties, and functions go here ...
	 *
	 *  }
	 * ```
	 */
	function Plugin(config) {
	    return function (cls) {
	        // Add these fields to the class
	        for (var k in config) {
	            cls[k] = config[k];
	        }
	        cls['installed'] = function (printWarning) {
	            return !!exports.getPlugin(config.pluginRef);
	        };
	        cls['getPlugin'] = function () {
	            return exports.getPlugin(config.pluginRef);
	        };
	        cls['checkInstall'] = function () {
	            var pluginInstance = exports.getPlugin(config.pluginRef);
	            if (!pluginInstance) {
	                exports.pluginWarn(cls);
	                return false;
	            }
	            return true;
	        };
	        return cls;
	    };
	}
	exports.Plugin = Plugin;
	/**
	 * @private
	 *
	 * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova
	 * and the required plugin are installed.
	 */
	function Cordova(opts) {
	    if (opts === void 0) { opts = {}; }
	    return function (target, methodName, descriptor) {
	        return {
	            value: function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i - 0] = arguments[_i];
	                }
	                return exports.wrap(this, methodName, opts).apply(this, args);
	            }
	        };
	    };
	}
	exports.Cordova = Cordova;
	/**
	 * @private
	 *
	 * Wrap an instance method
	 */
	function CordovaInstance(opts) {
	    if (opts === void 0) { opts = {}; }
	    return function (target, methodName) {
	        return {
	            value: function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i - 0] = arguments[_i];
	                }
	                return wrapInstance(this, methodName, opts).apply(this, args);
	            }
	        };
	    };
	}
	exports.CordovaInstance = CordovaInstance;
	/**
	 * @private
	 *
	 *
	 * Before calling the original method, ensure Cordova and the plugin are installed.
	 */
	function CordovaProperty(target, key) {
	    var exists = function () {
	        var pluginInstance = exports.getPlugin(target.pluginRef);
	        if (!pluginInstance || typeof pluginInstance[key] === 'undefined') {
	            exports.pluginWarn(target, key);
	            return false;
	        }
	        return true;
	    };
	    Object.defineProperty(target, key, {
	        get: function () {
	            if (exists()) {
	                return exports.getPlugin(target.pluginRef)[key];
	            }
	            else {
	                return null;
	            }
	        },
	        set: function (value) {
	            if (exists()) {
	                exports.getPlugin(target.pluginRef)[key] = value;
	            }
	        }
	    });
	}
	exports.CordovaProperty = CordovaProperty;
	/**
	 * @private
	 * @param target
	 * @param key
	 * @constructor
	 */
	function InstanceProperty(target, key) {
	    Object.defineProperty(target, key, {
	        get: function () {
	            return this._objectInstance[key];
	        },
	        set: function (value) {
	            this._objectInstance[key] = value;
	        }
	    });
	}
	exports.InstanceProperty = InstanceProperty;
	/**
	 * @private
	 *
	 * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova
	 * and the required plugin are installed.
	 */
	function CordovaFunctionOverride(opts) {
	    if (opts === void 0) { opts = {}; }
	    return function (target, methodName, descriptor) {
	        return {
	            value: function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i - 0] = arguments[_i];
	                }
	                return overrideFunction(this, methodName, opts);
	            }
	        };
	    };
	}
	exports.CordovaFunctionOverride = CordovaFunctionOverride;
	/**
	 * @private
	 *
	 * Wraps method that returns an observable that can be completed. Provided opts.resultFinalPredicate dictates when the observable completes.
	 *
	 */
	function CordovaFiniteObservable(opts) {
	    if (opts === void 0) { opts = {}; }
	    if (opts.observable === false) {
	        throw new Error('CordovaFiniteObservable decorator can only be used on methods that returns observable. Please provide correct option.');
	    }
	    opts.observable = true;
	    return function (target, methodName, descriptor) {
	        return {
	            value: function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i - 0] = arguments[_i];
	                }
	                var wrappedObservable = exports.wrap(this, methodName, opts).apply(this, args);
	                return new Observable_1.Observable(function (observer) {
	                    var wrappedSubscription = wrappedObservable.subscribe({
	                        next: function (x) {
	                            observer.next(opts.resultTransform ? opts.resultTransform(x) : x);
	                            if (opts.resultFinalPredicate && opts.resultFinalPredicate(x)) {
	                                observer.complete();
	                            }
	                        },
	                        error: function (err) { observer.error(err); },
	                        complete: function () { observer.complete(); }
	                    });
	                    return function () {
	                        wrappedSubscription.unsubscribe();
	                    };
	                });
	            }
	        };
	    };
	}
	exports.CordovaFiniteObservable = CordovaFiniteObservable;
	//# sourceMappingURL=plugin.js.map

/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";
	function get(obj, path) {
	    for (var i = 0, path = path.split('.'), len = path.length; i < len; i++) {
	        if (!obj) {
	            return null;
	        }
	        obj = obj[path[i]];
	    }
	    return obj;
	}
	exports.get = get;
	;
	//# sourceMappingURL=util.js.map

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(12);
	var toSubscriber_1 = __webpack_require__(13);
	var observable_1 = __webpack_require__(24);
	/**
	 * A representation of any set of values over any amount of time. This the most basic building block
	 * of RxJS.
	 *
	 * @class Observable<T>
	 */
	var Observable = (function () {
	    /**
	     * @constructor
	     * @param {Function} subscribe the function that is  called when the Observable is
	     * initially subscribed to. This function is given a Subscriber, to which new values
	     * can be `next`ed, or an `error` method can be called to raise an error, or
	     * `complete` can be called to notify of a successful completion.
	     */
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    /**
	     * Creates a new Observable, with this Observable as the source, and the passed
	     * operator defined as the new observable's operator.
	     * @method lift
	     * @param {Operator} operator the operator defining the operation to take on the observable
	     * @return {Observable} a new observable with the Operator applied
	     */
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            operator.call(sink, this.source);
	        }
	        else {
	            sink.add(this._subscribe(sink));
	        }
	        if (sink.syncErrorThrowable) {
	            sink.syncErrorThrowable = false;
	            if (sink.syncErrorThrown) {
	                throw sink.syncErrorValue;
	            }
	        }
	        return sink;
	    };
	    /**
	     * @method forEach
	     * @param {Function} next a handler for each value emitted by the observable
	     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
	     * @return {Promise} a promise that either resolves on observable completion or
	     *  rejects with the handled error
	     */
	    Observable.prototype.forEach = function (next, PromiseCtor) {
	        var _this = this;
	        if (!PromiseCtor) {
	            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	                PromiseCtor = root_1.root.Rx.config.Promise;
	            }
	            else if (root_1.root.Promise) {
	                PromiseCtor = root_1.root.Promise;
	            }
	        }
	        if (!PromiseCtor) {
	            throw new Error('no Promise impl found');
	        }
	        return new PromiseCtor(function (resolve, reject) {
	            var subscription = _this.subscribe(function (value) {
	                if (subscription) {
	                    // if there is a subscription, then we can surmise
	                    // the next handling is asynchronous. Any errors thrown
	                    // need to be rejected explicitly and unsubscribe must be
	                    // called manually
	                    try {
	                        next(value);
	                    }
	                    catch (err) {
	                        reject(err);
	                        subscription.unsubscribe();
	                    }
	                }
	                else {
	                    // if there is NO subscription, then we're getting a nexted
	                    // value synchronously during subscription. We can just call it.
	                    // If it errors, Observable's `subscribe` will ensure the
	                    // unsubscription logic is called, then synchronously rethrow the error.
	                    // After that, Promise will trap the error and send it
	                    // down the rejection path.
	                    next(value);
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        return this.source.subscribe(subscriber);
	    };
	    /**
	     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
	     * @method Symbol.observable
	     * @return {Observable} this instance of the observable
	     */
	    Observable.prototype[observable_1.$$observable] = function () {
	        return this;
	    };
	    // HACK: Since TypeScript inherits static properties too, we have to
	    // fight against TypeScript here so Subject can have a different static create signature
	    /**
	     * Creates a new cold Observable by calling the Observable constructor
	     * @static true
	     * @owner Observable
	     * @method create
	     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
	     * @return {Observable} a new cold observable
	     */
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	exports.Observable = Observable;
	//# sourceMappingURL=Observable.js.map

/***/ },
/* 12 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	/**
	 * window: browser in DOM main thread
	 * self: browser in WebWorker
	 * global: Node.js/other
	 */
	exports.root = (typeof window == 'object' && window.window === window && window
	    || typeof self == 'object' && self.self === self && self
	    || typeof global == 'object' && global.global === global && global);
	if (!exports.root) {
	    throw new Error('RxJS could not find any global context (window, self, global)');
	}
	//# sourceMappingURL=root.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Subscriber_1 = __webpack_require__(14);
	var rxSubscriber_1 = __webpack_require__(23);
	var Observer_1 = __webpack_require__(22);
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
	            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber_1.Subscriber(Observer_1.empty);
	    }
	    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	}
	exports.toSubscriber = toSubscriber;
	//# sourceMappingURL=toSubscriber.js.map

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isFunction_1 = __webpack_require__(15);
	var Subscription_1 = __webpack_require__(16);
	var Observer_1 = __webpack_require__(22);
	var rxSubscriber_1 = __webpack_require__(23);
	/**
	 * Implements the {@link Observer} interface and extends the
	 * {@link Subscription} class. While the {@link Observer} is the public API for
	 * consuming the values of an {@link Observable}, all Observers get converted to
	 * a Subscriber, in order to provide Subscription-like capabilities such as
	 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
	 * implementing operators, but it is rarely used as a public API.
	 *
	 * @class Subscriber<T>
	 */
	var Subscriber = (function (_super) {
	    __extends(Subscriber, _super);
	    /**
	     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
	     * defined Observer or a `next` callback function.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     */
	    function Subscriber(destinationOrNext, error, complete) {
	        _super.call(this);
	        this.syncErrorValue = null;
	        this.syncErrorThrown = false;
	        this.syncErrorThrowable = false;
	        this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                this.destination = Observer_1.empty;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    this.destination = Observer_1.empty;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        this.destination = destinationOrNext;
	                        this.destination.add(this);
	                    }
	                    else {
	                        this.syncErrorThrowable = true;
	                        this.destination = new SafeSubscriber(this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                this.syncErrorThrowable = true;
	                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
	                break;
	        }
	    }
	    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };
	    /**
	     * A static factory for a Subscriber, given a (potentially partial) definition
	     * of an Observer.
	     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
	     * Observer represented by the given arguments.
	     */
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `next` from
	     * the Observable, with a value. The Observable may call this method 0 or more
	     * times.
	     * @param {T} [value] The `next` value.
	     * @return {void}
	     */
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `error` from
	     * the Observable, with an attached {@link Error}. Notifies the Observer that
	     * the Observable has experienced an error condition.
	     * @param {any} [err] The `error` exception.
	     * @return {void}
	     */
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive a valueless notification of type
	     * `complete` from the Observable. Notifies the Observer that the Observable
	     * has finished sending push-based notifications.
	     * @return {void}
	     */
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    return Subscriber;
	}(Subscription_1.Subscription));
	exports.Subscriber = Subscriber;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SafeSubscriber = (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parent, observerOrNext, error, complete) {
	        _super.call(this);
	        this._parent = _parent;
	        var next;
	        var context = this;
	        if (isFunction_1.isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            context = observerOrNext;
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (isFunction_1.isFunction(context.unsubscribe)) {
	                this.add(context.unsubscribe.bind(context));
	            }
	            context.unsubscribe = this.unsubscribe.bind(this);
	        }
	        this._context = context;
	        this._next = next;
	        this._error = error;
	        this._complete = complete;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parent = this._parent;
	            if (!_parent.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parent, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._error) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parent.syncErrorThrowable) {
	                this.unsubscribe();
	                throw err;
	            }
	            else {
	                _parent.syncErrorValue = err;
	                _parent.syncErrorThrown = true;
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._complete) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._complete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._complete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            throw err;
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            parent.syncErrorValue = err;
	            parent.syncErrorThrown = true;
	            return true;
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parent = this._parent;
	        this._context = null;
	        this._parent = null;
	        _parent.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=Subscriber.js.map

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	function isFunction(x) {
	    return typeof x === 'function';
	}
	exports.isFunction = isFunction;
	//# sourceMappingURL=isFunction.js.map

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var isArray_1 = __webpack_require__(17);
	var isObject_1 = __webpack_require__(18);
	var isFunction_1 = __webpack_require__(15);
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var UnsubscriptionError_1 = __webpack_require__(21);
	/**
	 * Represents a disposable resource, such as the execution of an Observable. A
	 * Subscription has one important method, `unsubscribe`, that takes no argument
	 * and just disposes the resource held by the subscription.
	 *
	 * Additionally, subscriptions may be grouped together through the `add()`
	 * method, which will attach a child Subscription to the current Subscription.
	 * When a Subscription is unsubscribed, all its children (and its grandchildren)
	 * will be unsubscribed as well.
	 *
	 * @class Subscription
	 */
	var Subscription = (function () {
	    /**
	     * @param {function(): void} [unsubscribe] A function describing how to
	     * perform the disposal of resources when the `unsubscribe` method is called.
	     */
	    function Subscription(unsubscribe) {
	        /**
	         * A flag to indicate whether this Subscription has already been unsubscribed.
	         * @type {boolean}
	         */
	        this.closed = false;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    /**
	     * Disposes the resources held by the subscription. May, for instance, cancel
	     * an ongoing Observable execution or cancel any other type of work that
	     * started when the Subscription was created.
	     * @return {void}
	     */
	    Subscription.prototype.unsubscribe = function () {
	        var hasErrors = false;
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this._subscriptions = null;
	        if (isFunction_1.isFunction(_unsubscribe)) {
	            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
	            if (trial === errorObject_1.errorObject) {
	                hasErrors = true;
	                (errors = errors || []).push(errorObject_1.errorObject.e);
	            }
	        }
	        if (isArray_1.isArray(_subscriptions)) {
	            var index = -1;
	            var len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject_1.isObject(sub)) {
	                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
	                    if (trial === errorObject_1.errorObject) {
	                        hasErrors = true;
	                        errors = errors || [];
	                        var err = errorObject_1.errorObject.e;
	                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
	                            errors = errors.concat(err.errors);
	                        }
	                        else {
	                            errors.push(err);
	                        }
	                    }
	                }
	            }
	        }
	        if (hasErrors) {
	            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
	        }
	    };
	    /**
	     * Adds a tear down to be called during the unsubscribe() of this
	     * Subscription.
	     *
	     * If the tear down being added is a subscription that is already
	     * unsubscribed, is the same reference `add` is being called on, or is
	     * `Subscription.EMPTY`, it will not be added.
	     *
	     * If this subscription is already in an `closed` state, the passed
	     * tear down logic will be executed immediately.
	     *
	     * @param {TeardownLogic} teardown The additional logic to execute on
	     * teardown.
	     * @return {Subscription} Returns the Subscription used or created to be
	     * added to the inner subscriptions list. This Subscription can be used with
	     * `remove()` to remove the passed teardown logic from the inner subscriptions
	     * list.
	     */
	    Subscription.prototype.add = function (teardown) {
	        if (!teardown || (teardown === Subscription.EMPTY)) {
	            return Subscription.EMPTY;
	        }
	        if (teardown === this) {
	            return this;
	        }
	        var sub = teardown;
	        switch (typeof teardown) {
	            case 'function':
	                sub = new Subscription(teardown);
	            case 'object':
	                if (sub.closed || typeof sub.unsubscribe !== 'function') {
	                    break;
	                }
	                else if (this.closed) {
	                    sub.unsubscribe();
	                }
	                else {
	                    (this._subscriptions || (this._subscriptions = [])).push(sub);
	                }
	                break;
	            default:
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	        }
	        return sub;
	    };
	    /**
	     * Removes a Subscription from the internal list of subscriptions that will
	     * unsubscribe during the unsubscribe process of this Subscription.
	     * @param {Subscription} subscription The subscription to remove.
	     * @return {void}
	     */
	    Subscription.prototype.remove = function (subscription) {
	        // HACK: This might be redundant because of the logic in `add()`
	        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
	            return;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	exports.Subscription = Subscription;
	//# sourceMappingURL=Subscription.js.map

/***/ },
/* 17 */
/***/ function(module, exports) {

	"use strict";
	exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArray.js.map

/***/ },
/* 18 */
/***/ function(module, exports) {

	"use strict";
	function isObject(x) {
	    return x != null && typeof x === 'object';
	}
	exports.isObject = isObject;
	//# sourceMappingURL=isObject.js.map

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var errorObject_1 = __webpack_require__(20);
	var tryCatchTarget;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    }
	    catch (e) {
	        errorObject_1.errorObject.e = e;
	        return errorObject_1.errorObject;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}
	exports.tryCatch = tryCatch;
	;
	//# sourceMappingURL=tryCatch.js.map

/***/ },
/* 20 */
/***/ function(module, exports) {

	"use strict";
	// typeof any so that it we don't have to cast when comparing a result to the error object
	exports.errorObject = { e: {} };
	//# sourceMappingURL=errorObject.js.map

/***/ },
/* 21 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when one or more errors have occurred during the
	 * `unsubscribe` of a {@link Subscription}.
	 */
	var UnsubscriptionError = (function (_super) {
	    __extends(UnsubscriptionError, _super);
	    function UnsubscriptionError(errors) {
	        _super.call(this);
	        this.errors = errors;
	        var err = Error.call(this, errors ?
	            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
	        this.name = err.name = 'UnsubscriptionError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return UnsubscriptionError;
	}(Error));
	exports.UnsubscriptionError = UnsubscriptionError;
	//# sourceMappingURL=UnsubscriptionError.js.map

/***/ },
/* 22 */
/***/ function(module, exports) {

	"use strict";
	exports.empty = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) { throw err; },
	    complete: function () { }
	};
	//# sourceMappingURL=Observer.js.map

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(12);
	var Symbol = root_1.root.Symbol;
	exports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
	    Symbol.for('rxSubscriber') : '@@rxSubscriber';
	//# sourceMappingURL=rxSubscriber.js.map

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(12);
	function getSymbolObservable(context) {
	    var $$observable;
	    var Symbol = context.Symbol;
	    if (typeof Symbol === 'function') {
	        if (Symbol.observable) {
	            $$observable = Symbol.observable;
	        }
	        else {
	            $$observable = Symbol('observable');
	            Symbol.observable = $$observable;
	        }
	    }
	    else {
	        $$observable = '@@observable';
	    }
	    return $$observable;
	}
	exports.getSymbolObservable = getSymbolObservable;
	exports.$$observable = getSymbolObservable(root_1.root);
	//# sourceMappingURL=observable.js.map

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var fromEvent_1 = __webpack_require__(26);
	Observable_1.Observable.fromEvent = fromEvent_1.fromEvent;
	//# sourceMappingURL=fromEvent.js.map

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var FromEventObservable_1 = __webpack_require__(27);
	exports.fromEvent = FromEventObservable_1.FromEventObservable.create;
	//# sourceMappingURL=fromEvent.js.map

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var tryCatch_1 = __webpack_require__(19);
	var isFunction_1 = __webpack_require__(15);
	var errorObject_1 = __webpack_require__(20);
	var Subscription_1 = __webpack_require__(16);
	var toString = Object.prototype.toString;
	function isNodeStyleEventEmmitter(sourceObj) {
	    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
	}
	function isJQueryStyleEventEmitter(sourceObj) {
	    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
	}
	function isNodeList(sourceObj) {
	    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';
	}
	function isHTMLCollection(sourceObj) {
	    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';
	}
	function isEventTarget(sourceObj) {
	    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
	}
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var FromEventObservable = (function (_super) {
	    __extends(FromEventObservable, _super);
	    function FromEventObservable(sourceObj, eventName, selector, options) {
	        _super.call(this);
	        this.sourceObj = sourceObj;
	        this.eventName = eventName;
	        this.selector = selector;
	        this.options = options;
	    }
	    /* tslint:enable:max-line-length */
	    /**
	     * Creates an Observable that emits events of a specific type coming from the
	     * given event target.
	     *
	     * <span class="informal">Creates an Observable from DOM events, or Node
	     * EventEmitter events or others.</span>
	     *
	     * <img src="./img/fromEvent.png" width="100%">
	     *
	     * Creates an Observable by attaching an event listener to an "event target",
	     * which may be an object with `addEventListener` and `removeEventListener`,
	     * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the
	     * DOM, or an HTMLCollection from the DOM. The event handler is attached when
	     * the output Observable is subscribed, and removed when the Subscription is
	     * unsubscribed.
	     *
	     * @example <caption>Emits clicks happening on the DOM document</caption>
	     * var clicks = Rx.Observable.fromEvent(document, 'click');
	     * clicks.subscribe(x => console.log(x));
	     *
	     * // Results in:
	     * // MouseEvent object logged to console everytime a click
	     * // occurs on the document.
	     *
	     * @see {@link from}
	     * @see {@link fromEventPattern}
	     *
	     * @param {EventTargetLike} target The DOMElement, event target, Node.js
	     * EventEmitter, NodeList or HTMLCollection to attach the event handler to.
	     * @param {string} eventName The event name of interest, being emitted by the
	     * `target`.
	     * @param {EventListenerOptions} [options] Options to pass through to addEventListener
	     * @param {SelectorMethodSignature<T>} [selector] An optional function to
	     * post-process results. It takes the arguments from the event handler and
	     * should return a single value.
	     * @return {Observable<T>}
	     * @static true
	     * @name fromEvent
	     * @owner Observable
	     */
	    FromEventObservable.create = function (target, eventName, options, selector) {
	        if (isFunction_1.isFunction(options)) {
	            selector = options;
	            options = undefined;
	        }
	        return new FromEventObservable(target, eventName, selector, options);
	    };
	    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {
	        var unsubscribe;
	        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {
	            for (var i = 0, len = sourceObj.length; i < len; i++) {
	                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
	            }
	        }
	        else if (isEventTarget(sourceObj)) {
	            var source_1 = sourceObj;
	            sourceObj.addEventListener(eventName, handler, options);
	            unsubscribe = function () { return source_1.removeEventListener(eventName, handler); };
	        }
	        else if (isJQueryStyleEventEmitter(sourceObj)) {
	            var source_2 = sourceObj;
	            sourceObj.on(eventName, handler);
	            unsubscribe = function () { return source_2.off(eventName, handler); };
	        }
	        else if (isNodeStyleEventEmmitter(sourceObj)) {
	            var source_3 = sourceObj;
	            sourceObj.addListener(eventName, handler);
	            unsubscribe = function () { return source_3.removeListener(eventName, handler); };
	        }
	        else {
	            throw new TypeError('Invalid event target');
	        }
	        subscriber.add(new Subscription_1.Subscription(unsubscribe));
	    };
	    FromEventObservable.prototype._subscribe = function (subscriber) {
	        var sourceObj = this.sourceObj;
	        var eventName = this.eventName;
	        var options = this.options;
	        var selector = this.selector;
	        var handler = selector ? function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);
	            if (result === errorObject_1.errorObject) {
	                subscriber.error(errorObject_1.errorObject.e);
	            }
	            else {
	                subscriber.next(result);
	            }
	        } : function (e) { return subscriber.next(e); };
	        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);
	    };
	    return FromEventObservable;
	}(Observable_1.Observable));
	exports.FromEventObservable = FromEventObservable;
	//# sourceMappingURL=FromEventObservable.js.map

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name AdMob
	 * @description
	 * Plugin for Google Ads, including AdMob / DFP (doubleclick for publisher) and mediations to other Ad networks.
	 * @usage
	 * ```typescript
	 * import { AdMob } from 'ionic-native';
	 *
	 * ionViewDidLoad() {
	 *   AdMob.onAdDismiss()
	 *     .subscribe(() => { console.log('User dismissed ad'); });
	 * }
	 *
	 * onClick() {
	 *   AdMob.prepareInterstitial('YOUR_ADID')
	 *     .then(() => { AdMob.showInterstitial(); });
	 * }
	 *
	 * ```
	 *
	 * @interfaces
	 * AdMobOptions
	 * AdMobAdExtras
	 */
	var AdMob = (function () {
	    function AdMob() {
	    }
	    /**
	     * Create a banner
	     * @param adIdOrOptions {string | AdMobOptions} Ad ID or Options
	     * @returns {Promise<any>} Returns a Promise that resolves when the banner is created
	     */
	    AdMob.createBanner = function (adIdOrOptions) { return; };
	    /**
	     * Destroy the banner, remove it from screen.
	     */
	    AdMob.removeBanner = function () { };
	    /**
	     * Show banner at position
	     * @param position {number} Position. Use `AdMob.AD_POSITION` to set values.
	     */
	    AdMob.showBanner = function (position) { };
	    /**
	     * Show banner at custom position
	     * @param x {number} Offset from screen left.
	     * @param y {number} Offset from screen top.
	     */
	    AdMob.showBannerAtXY = function (x, y) { };
	    /**
	     * Hide the banner, remove it from screen, but can show it later
	     */
	    AdMob.hideBanner = function () { };
	    /**
	     * Prepare interstitial banner
	     * @param adIdOrOptions {string | AdMobOptions} Ad ID or Options
	     * @returns {Promise<any>} Returns a Promise that resolves when interstitial is prepared
	     */
	    AdMob.prepareInterstitial = function (adIdOrOptions) { return; };
	    /**
	     * Show interstitial ad when it's ready
	     */
	    AdMob.showInterstitial = function () { };
	    /**
	     * Prepare a reward video ad
	     * @param adIdOrOptions {string | AdMobOptions} Ad ID or Options
	     * @returns {Promise<any>} Returns a Promise that resolves when the ad is prepared
	     */
	    AdMob.prepareRewardVideoAd = function (adIdOrOptions) { return; };
	    /**
	     * Show a reward video ad
	     */
	    AdMob.showRewardVideoAd = function () { };
	    /**
	     * Sets the values for configuration and targeting
	     * @param options {AdMobOptions} Options
	     * @returns {Promise<any>} Returns a Promise that resolves when the options have been set
	     */
	    AdMob.setOptions = function (options) { return; };
	    /**
	     * Get user ad settings
	     * @returns {Promise<any>} Returns a promise that resolves with the ad settings
	     */
	    AdMob.getAdSettings = function () { return; };
	    /**
	     * Triggered when failed to receive Ad
	     * @returns {Observable<any>}
	     */
	    AdMob.onAdFailLoad = function () { return; };
	    /**
	     * Triggered when Ad received
	     * @returns {Observable<any>}
	     */
	    AdMob.onAdLoaded = function () { return; };
	    /**
	     * Triggered when Ad will be showed on screen
	     * @returns {Observable<any>}
	     */
	    AdMob.onAdPresent = function () { return; };
	    /**
	     * Triggered when user click the Ad, and will jump out of your App
	     * @returns {Observable<any>}
	     */
	    AdMob.onAdLeaveApp = function () { return; };
	    /**
	     * Triggered when dismiss the Ad and back to your App
	     * @returns {Observable<any>}
	     */
	    AdMob.onAdDismiss = function () { return; };
	    /**
	     * @private
	     */
	    AdMob.AD_POSITION = {
	        NO_CHANGE: 0,
	        TOP_LEFT: 1,
	        TOP_CENTER: 2,
	        TOP_RIGHT: 3,
	        LEFT: 4,
	        CENTER: 5,
	        RIGHT: 6,
	        BOTTOM_LEFT: 7,
	        BOTTOM_CENTER: 8,
	        BOTTOM_RIGHT: 9,
	        POS_XY: 10
	    };
	    __decorate([
	        plugin_1.Cordova()
	    ], AdMob, "createBanner", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], AdMob, "removeBanner", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], AdMob, "showBanner", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], AdMob, "showBannerAtXY", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], AdMob, "hideBanner", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], AdMob, "prepareInterstitial", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], AdMob, "showInterstitial", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], AdMob, "prepareRewardVideoAd", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], AdMob, "showRewardVideoAd", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], AdMob, "setOptions", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], AdMob, "getAdSettings", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'onAdFailLoad'
	        })
	    ], AdMob, "onAdFailLoad", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'onAdLoaded'
	        })
	    ], AdMob, "onAdLoaded", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'onAdPresent'
	        })
	    ], AdMob, "onAdPresent", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'onAdLeaveApp'
	        })
	    ], AdMob, "onAdLeaveApp", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'onAdDismiss'
	        })
	    ], AdMob, "onAdDismiss", null);
	    AdMob = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'AdMob',
	            plugin: 'cordova-plugin-admobpro',
	            pluginRef: 'AdMob',
	            repo: 'https://github.com/floatinghotpot/cordova-admob-pro',
	            platforms: ['Android', 'iOS', 'Windows Phone 8']
	        })
	    ], AdMob);
	    return AdMob;
	}());
	exports.AdMob = AdMob;
	//# sourceMappingURL=admob.js.map

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Alipay
	 * @description
	 *  This plugin is used for Alipay APP support. Integrated with the latest SDK.
	 *
	 * Requires Cordova plugin: `cordova-alipay-base`. For more info, please see the [Alipay plugin docs](https://github.com/xueron/cordova-alipay-base).
	 *
	 * @usage
	 * ```
	 * import { Alipay } from 'ionic-native';
	 *
	 * // Should get from server side with sign.
	 * let alipayOrder = {
	         ...
	 *     };
	 *
	 * Alipay.pay(alipayOrder)
	 *    .then(result => {
	 *       console.log(result); // Success
	 *    })
	 *    .catch(error => {
	 *       console.log(error); // Failed
	 *    });
	 *
	 * ```
	 *
	 * @interfaces
	 * AlipayOrder
	 */
	var Alipay = (function () {
	    function Alipay() {
	    }
	    /**
	     * Open Alipay to perform App pay
	     * @param order { AlipayOrder } alipay options
	     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.
	     */
	    Alipay.pay = function (order) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Alipay, "pay", null);
	    Alipay = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Alipay',
	            plugin: 'cordova-alipay-base',
	            pluginRef: 'Alipay.Base',
	            repo: 'https://github.com/xueron/cordova-alipay-base',
	            platforms: ['Android', 'iOS'],
	            install: 'ionic plugin add https://github.com/xueron/cordova-alipay-base --variable APP_ID=your_app_id'
	        })
	    ], Alipay);
	    return Alipay;
	}());
	exports.Alipay = Alipay;
	//# sourceMappingURL=alipay.js.map

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Android Fingerprint Auth
	 * @description
	 * This plugin will open a native dialog fragment prompting the user to authenticate using their fingerprint. If the device has a secure lockscreen (pattern, PIN, or password), the user may opt to authenticate using that method as a backup.
	 * @usage
	 * ```typescript
	 * import { AndroidFingerprintAuth } from 'ionic-native';
	 *
	 * AndroidFingerprintAuth.isAvailable()
	 *   .then((result)=> {
	 *     if(result.isAvailable){
	 *       // it is available
	 *
	 *       AndroidFingerprintAuth.encrypt({ clientId: "myAppName", username: "myUsername", password: "myPassword" })
	 *         .then(result => {
	 *            if (result.withFingerprint) {
	 *                console.log("Successfully encrypted credentials.");
	 *                console.log("Encrypted credentials: " + result.token);
	 *            } else if (result.withBackup) {
	 *              console.log('Successfully authenticated with backup password!');
	 *            } else console.log('Didn\'t authenticate!');
	 *         })
	 *         .catch(error => {
	 *            if (error === "Cancelled") {
	 *              console.log("Fingerprint authentication cancelled");
	 *            } else console.error(error)
	 *         });
	 *
	 *     } else {
	 *       // fingerprint auth isn't available
	 *     }
	 *   })
	 *   .catch(error => console.error(error));
	 * ```
	 * @interfaces
	 * AndroidFingerprintAuthOptions
	 */
	var AndroidFingerprintAuth = (function () {
	    function AndroidFingerprintAuth() {
	    }
	    /**
	     * Opens a native dialog fragment to use the device hardware fingerprint scanner to authenticate against fingerprints registered for the device.
	     * @param options {AndroidFingerprintAuthOptions} Options
	     * @returns {Promise<any>}
	     */
	    AndroidFingerprintAuth.encrypt = function (options) { return; };
	    /**
	     * Opens a native dialog fragment to use the device hardware fingerprint scanner to authenticate against fingerprints registered for the device.
	     * @param options {AndroidFingerprintAuthOptions} Options
	     * @returns {Promise<any>}
	     */
	    AndroidFingerprintAuth.decrypt = function (options) { return; };
	    /**
	     * Check if service is available
	     * @returns {Promise<any>} Returns a Promise that resolves if fingerprint auth is available on the device
	     */
	    AndroidFingerprintAuth.isAvailable = function () { return; };
	    /**
	     * Delete the cipher used for encryption and decryption by username
	     * @returns {Promise<any>} Returns a Promise that resolves if the cipher was successfully deleted
	     */
	    AndroidFingerprintAuth.delete = function (options) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], AndroidFingerprintAuth, "encrypt", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], AndroidFingerprintAuth, "decrypt", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], AndroidFingerprintAuth, "isAvailable", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], AndroidFingerprintAuth, "delete", null);
	    AndroidFingerprintAuth = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'AndroidFingerprintAuth',
	            plugin: 'cordova-plugin-android-fingerprint-auth',
	            pluginRef: 'FingerprintAuth',
	            repo: 'https://github.com/mjwheatley/cordova-plugin-android-fingerprint-auth'
	        })
	    ], AndroidFingerprintAuth);
	    return AndroidFingerprintAuth;
	}());
	exports.AndroidFingerprintAuth = AndroidFingerprintAuth;
	//# sourceMappingURL=android-fingerprint-auth.js.map

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name App Availability
	 * @description
	 * This plugin allows you to check if an app is installed on the user's device. It requires an URI Scheme (e.g. twitter://) on iOS or a Package Name (e.g com.twitter.android) on Android.
	 *
	 * Requires Cordova plugin: cordova-plugin-appavailability. For more info, please see the [AppAvailability plugin docs](https://github.com/ohh2ahh/AppAvailability).
	 *
	 * @usage
	 * ```typescript
	 * import { AppAvailability, Device } from 'ionic-native';
	 *
	 *
	 * let app;
	 *
	 * if (Device.platform === 'iOS') {
	 *   app = 'twitter://';
	 * } else if (Device.platform === 'Android') {
	 *   app = 'com.twitter.android';
	 * }
	 *
	 * AppAvailability.check(app)
	 *   .then(
	 *     (yes: string) => console.log(app + ' is available'),
	 *     (no: string) => console.log(app + ' is NOT available')
	 *   );
	 * ```
	 */
	var AppAvailability = (function () {
	    function AppAvailability() {
	    }
	    /**
	     * Checks if an app is available on device
	     * @param {string} app Package name on android, or URI scheme on iOS
	     * @returns {Promise<boolean>}
	     */
	    AppAvailability.check = function (app) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], AppAvailability, "check", null);
	    AppAvailability = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'AppAvailability',
	            plugin: 'cordova-plugin-appavailability',
	            pluginRef: 'appAvailability',
	            repo: 'https://github.com/ohh2ahh/AppAvailability',
	            platforms: ['Android', 'iOS']
	        })
	    ], AppAvailability);
	    return AppAvailability;
	}());
	exports.AppAvailability = AppAvailability;
	//# sourceMappingURL=appavailability.js.map

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	var rxjs_1 = __webpack_require__(33);
	/**
	 * @name Appodeal
	 * @description
	 * Plugin to serve ads through native Appodeal SDKs
	 *
	 * @usage
	 * ```
	 * import { Appodeal } from 'ionic-native';
	 *
	 * let appKey = '<your app key>';
	 * Appodeal.initialize(appKey, Appodeal.AD_TYPES.REWARDED_VIDEO);
	 * Appodeal.show(Appodeal.AD_TYPES.REWARDED_VIDEO);
	 *
	 * ```
	 */
	var Appodeal = (function () {
	    function Appodeal() {
	    }
	    /**
	     * initialize Appodeal SDK
	     * @param {string} appKey
	     * @param {number} adType
	     */
	    Appodeal.initialize = function (appKey, adType) { };
	    ;
	    /**
	     * check if SDK has been initialized
	     * @returns {Promise<boolean>}
	     */
	    Appodeal.isInitialized = function () { return; };
	    ;
	    /**
	     * show ad of specified type
	     * @param {number} adType
	     * @returns {Promise<boolean>}
	     */
	    Appodeal.show = function (adType) { return; };
	    ;
	    /**
	     * show ad of specified type with placement options
	     * @param {number} adType
	     * @param {any} placement
	     * @returns {Promise<boolean>}
	     */
	    Appodeal.showWithPlacement = function (adType, placement) { return; };
	    ;
	    /**
	     * hide ad of specified type
	     * @param {number} adType
	     */
	    Appodeal.hide = function (adType) { };
	    ;
	    /**
	     * confirm use of ads of specified type
	     * @param {number} adType
	     */
	    Appodeal.confirm = function (adType) { };
	    ;
	    /**
	     * check if ad of specified type has been loaded
	     * @param {number} adType
	     * @returns {Promise<boolean>}
	     */
	    Appodeal.isLoaded = function (adType) { return; };
	    ;
	    /**
	     * check if ad of specified
	     * @param {number} adType
	     * @returns {Promise<boolean>}
	     */
	    Appodeal.isPrecache = function (adType) { return; };
	    ;
	    /**
	     *
	     * @param {number} adType
	     * @param autoCache
	     */
	    Appodeal.setAutoCache = function (adType, autoCache) { };
	    ;
	    /**
	     * forcefully cache an ad by type
	     * @param {number} adType
	     */
	    Appodeal.cache = function (adType) { };
	    ;
	    /**
	     *
	     * @param {boolean} set
	     */
	    Appodeal.setOnLoadedTriggerBoth = function (set) { };
	    ;
	    /**
	     * enable or disable Smart Banners
	     * @param {boolean} enabled
	     */
	    Appodeal.setSmartBanners = function (enabled) { };
	    ;
	    /**
	     * enable or disable banner backgrounds
	     * @param {boolean} enabled
	     */
	    Appodeal.setBannerBackground = function (enabled) { };
	    ;
	    /**
	     * enable or disable banner animations
	     * @param {boolean} enabled
	     */
	    Appodeal.setBannerAnimation = function (enabled) { };
	    ;
	    /**
	     *
	     * @param value
	     */
	    Appodeal.set728x90Banners = function (value) { };
	    ;
	    /**
	     * enable or disable logging
	     * @param {boolean} logging
	     */
	    Appodeal.setLogging = function (logging) { };
	    ;
	    /**
	     * enable or disable testing mode
	     * @param {boolean} testing
	     */
	    Appodeal.setTesting = function (testing) { };
	    ;
	    /**
	     * reset device ID
	     */
	    Appodeal.resetUUID = function () { };
	    ;
	    /**
	     * get version of Appdeal SDK
	     */
	    Appodeal.getVersion = function () { return; };
	    ;
	    /**
	     *
	     * @param {string} network
	     * @param {number} adType
	     */
	    Appodeal.disableNetwork = function (network, adType) { };
	    ;
	    /**
	     *
	     * @param {string} network
	     * @param {number} adType
	     */
	    Appodeal.disableNetworkType = function (network, adType) { };
	    ;
	    /**
	     * disable Location permissions for Appodeal SDK
	     */
	    Appodeal.disableLocationPermissionCheck = function () { };
	    ;
	    /**
	     * disable Storage permissions for Appodeal SDK
	     */
	    Appodeal.disableWriteExternalStoragePermissionCheck = function () { };
	    ;
	    /**
	     * enable event listeners
	     * @param {boolean} enabled
	     */
	    Appodeal.enableInterstitialCallbacks = function (enabled) { };
	    ;
	    /**
	     * enable event listeners
	     * @param {boolean} enabled
	     */
	    Appodeal.enableSkippableVideoCallbacks = function (enabled) { };
	    ;
	    /**
	     * enable event listeners
	     * @param {boolean} enabled
	     */
	    Appodeal.enableNonSkippableVideoCallbacks = function (enabled) { };
	    ;
	    /**
	     * enable event listeners
	     * @param {boolean} enabled
	     */
	    Appodeal.enableBannerCallbacks = function (enabled) { };
	    ;
	    /**
	     * enable event listeners
	     * @param {boolean} enabled
	     */
	    Appodeal.enableRewardedVideoCallbacks = function (enabled) { };
	    ;
	    /**
	     *
	     * @param {string} name - name of rule
	     * @param {boolean} value
	     */
	    Appodeal.setCustomBooleanRule = function (name, value) { };
	    ;
	    /**
	     *
	     * @param {string} name - name of rule
	     * @param {number} value
	     */
	    Appodeal.setCustomIntegerRule = function (name, value) { };
	    ;
	    /**
	     * set rule with float value
	     * @param {string} name
	     * @param {number} value
	     */
	    Appodeal.setCustomDoubleRule = function (name, value) { };
	    ;
	    /**
	     * set rule with string value
	     * @param {string} name - name of rule
	     * @param {string} value
	     */
	    Appodeal.setCustomStringRule = function (name, value) { };
	    ;
	    /**
	     * set ID preference in Appodeal for current user
	     * @param id
	     */
	    Appodeal.setUserId = function (id) { };
	    ;
	    /**
	     * set Email preference in Appodeal for current user
	     * @param email
	     */
	    Appodeal.setEmail = function (email) { };
	    ;
	    /**
	     * set Birthday preference in Appodeal for current user
	     * @param birthday
	     */
	    Appodeal.setBirthday = function (birthday) { };
	    ;
	    /**
	     * et Age preference in Appodeal for current user
	     * @param age
	     */
	    Appodeal.setAge = function (age) { };
	    ;
	    /**
	     * set Gender preference in Appodeal for current user
	     * @param gender
	     */
	    Appodeal.setGender = function (gender) { };
	    ;
	    /**
	     * set Occupation preference in Appodeal for current user
	     * @param occupation
	     */
	    Appodeal.setOccupation = function (occupation) { };
	    ;
	    /**
	     * set Relation preference in Appodeal for current user
	     * @param relation
	     */
	    Appodeal.setRelation = function (relation) { };
	    ;
	    /**
	     * set Smoking preference in Appodeal for current user
	     * @param smoking
	     */
	    Appodeal.setSmoking = function (smoking) { };
	    ;
	    /**
	     * set Alcohol preference in Appodeal for current user
	     * @param alcohol
	     */
	    Appodeal.setAlcohol = function (alcohol) { };
	    ;
	    /**
	     * set Interests preference in Appodeal for current user
	     * @param interests
	     */
	    Appodeal.setInterests = function (interests) { };
	    ;
	    /*********************
	     * event Observables *
	     *********************/
	    Appodeal.onInterstitialLoaded = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onInterstitialLoaded');
	    };
	    Appodeal.onInterstitialFailedToLoad = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onInterstitialFailedToLoad');
	    };
	    Appodeal.onInterstitialShown = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onInterstitialShown');
	    };
	    Appodeal.onInterstitialClicked = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onInterstitialClicked');
	    };
	    Appodeal.onInterstitialClosed = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onInterstitialClosed');
	    };
	    Appodeal.onSkippableVideoLoaded = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onSkippableVideoLoaded');
	    };
	    Appodeal.onSkippableVideoFailedToLoad = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onSkippableVideoFailedToLoad');
	    };
	    Appodeal.onSkippableVideoShown = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onSkippableVideoShown');
	    };
	    Appodeal.onSkippableVideoFinished = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onSkippableVideoFinished');
	    };
	    Appodeal.onSkippableVideoClosed = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onSkippableVideoClosed');
	    };
	    Appodeal.onRewardedVideoLoaded = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onRewardedVideoLoaded');
	    };
	    Appodeal.onRewardedVideoFailedToLoad = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onRewardedVideoFailedToLoad');
	    };
	    Appodeal.onRewardedVideoShown = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onRewardedVideoShown');
	    };
	    Appodeal.onRewardedVideoFinished = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onRewardedVideoFinished');
	    };
	    Appodeal.onRewardedVideoClosed = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onRewardedVideoClosed');
	    };
	    Appodeal.onNonSkippableVideoLoaded = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onNonSkippableVideoLoaded');
	    };
	    Appodeal.onNonSkippableVideoFailedToLoad = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onNonSkippableVideoFailedToLoad');
	    };
	    Appodeal.onNonSkippableVideoShown = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onNonSkippableVideoShown');
	    };
	    Appodeal.onNonSkippableVideoFinished = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onNonSkippableVideoFinished');
	    };
	    Appodeal.onNonSkippableVideoClosed = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onNonSkippableVideoClosed');
	    };
	    Appodeal.onBannerClicked = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onBannerClicked');
	    };
	    Appodeal.onBannerFailedToLoad = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onBannerFailedToLoad');
	    };
	    Appodeal.onBannerLoaded = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onBannerLoaded');
	    };
	    Appodeal.onBannerShown = function () {
	        return rxjs_1.Observable.fromEvent(document, 'onBannerShown');
	    };
	    // available types of advertisements
	    Appodeal.AD_TYPES = {
	        INTERSTITIAL: 1,
	        SKIPPABLE_VIDEO: 2,
	        BANNER: 4,
	        BANNER_BOTTOM: 8,
	        BANNER_TOP: 16,
	        REWARDED_VIDEO: 128,
	        NON_SKIPPABLE_VIDEO: 256
	    };
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "initialize", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "isInitialized", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "show", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "showWithPlacement", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "hide", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "confirm", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "isLoaded", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "isPrecache", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setAutoCache", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "cache", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setOnLoadedTriggerBoth", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setSmartBanners", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setBannerBackground", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setBannerAnimation", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "set728x90Banners", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setLogging", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setTesting", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "resetUUID", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "getVersion", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "disableNetwork", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "disableNetworkType", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "disableLocationPermissionCheck", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "disableWriteExternalStoragePermissionCheck", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "enableInterstitialCallbacks", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "enableSkippableVideoCallbacks", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "enableNonSkippableVideoCallbacks", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "enableBannerCallbacks", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "enableRewardedVideoCallbacks", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setCustomBooleanRule", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setCustomIntegerRule", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setCustomDoubleRule", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setCustomStringRule", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setUserId", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setEmail", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setBirthday", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setAge", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setGender", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setOccupation", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setRelation", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setSmoking", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setAlcohol", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Appodeal, "setInterests", null);
	    Appodeal = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Appodeal',
	            plugin: 'https://github.com/appodeal/appodeal-cordova-plugin',
	            pluginRef: 'Appodeal',
	            repo: 'https://github.com/appodeal/appodeal-cordova-plugin.git',
	            platforms: ['ios', 'android']
	        })
	    ], Appodeal);
	    return Appodeal;
	}());
	exports.Appodeal = Appodeal;
	//# sourceMappingURL=appodeal.js.map

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/* tslint:disable:no-unused-variable */
	// Subject imported before Observable to bypass circular dependency issue since
	// Subject extends Observable and Observable references Subject in it's
	// definition
	var Subject_1 = __webpack_require__(34);
	exports.Subject = Subject_1.Subject;
	exports.AnonymousSubject = Subject_1.AnonymousSubject;
	/* tslint:enable:no-unused-variable */
	var Observable_1 = __webpack_require__(11);
	exports.Observable = Observable_1.Observable;
	// statics
	/* tslint:disable:no-use-before-declare */
	__webpack_require__(37);
	__webpack_require__(41);
	__webpack_require__(44);
	__webpack_require__(56);
	__webpack_require__(60);
	__webpack_require__(63);
	__webpack_require__(65);
	__webpack_require__(68);
	__webpack_require__(25);
	__webpack_require__(76);
	__webpack_require__(79);
	__webpack_require__(81);
	__webpack_require__(83);
	__webpack_require__(86);
	__webpack_require__(95);
	__webpack_require__(98);
	__webpack_require__(100);
	__webpack_require__(104);
	__webpack_require__(106);
	__webpack_require__(108);
	__webpack_require__(111);
	__webpack_require__(114);
	__webpack_require__(117);
	__webpack_require__(120);
	__webpack_require__(124);
	//dom
	__webpack_require__(127);
	__webpack_require__(131);
	//operators
	__webpack_require__(139);
	__webpack_require__(141);
	__webpack_require__(143);
	__webpack_require__(145);
	__webpack_require__(147);
	__webpack_require__(149);
	__webpack_require__(151);
	__webpack_require__(153);
	__webpack_require__(154);
	__webpack_require__(155);
	__webpack_require__(157);
	__webpack_require__(160);
	__webpack_require__(163);
	__webpack_require__(165);
	__webpack_require__(167);
	__webpack_require__(169);
	__webpack_require__(171);
	__webpack_require__(173);
	__webpack_require__(175);
	__webpack_require__(177);
	__webpack_require__(180);
	__webpack_require__(182);
	__webpack_require__(184);
	__webpack_require__(186);
	__webpack_require__(188);
	__webpack_require__(190);
	__webpack_require__(192);
	__webpack_require__(195);
	__webpack_require__(197);
	__webpack_require__(199);
	__webpack_require__(201);
	__webpack_require__(203);
	__webpack_require__(206);
	__webpack_require__(211);
	__webpack_require__(213);
	__webpack_require__(215);
	__webpack_require__(217);
	__webpack_require__(219);
	__webpack_require__(221);
	__webpack_require__(223);
	__webpack_require__(225);
	__webpack_require__(226);
	__webpack_require__(228);
	__webpack_require__(230);
	__webpack_require__(233);
	__webpack_require__(234);
	__webpack_require__(235);
	__webpack_require__(236);
	__webpack_require__(237);
	__webpack_require__(239);
	__webpack_require__(241);
	__webpack_require__(244);
	__webpack_require__(245);
	__webpack_require__(246);
	__webpack_require__(248);
	__webpack_require__(251);
	__webpack_require__(253);
	__webpack_require__(255);
	__webpack_require__(258);
	__webpack_require__(260);
	__webpack_require__(262);
	__webpack_require__(263);
	__webpack_require__(264);
	__webpack_require__(266);
	__webpack_require__(268);
	__webpack_require__(270);
	__webpack_require__(272);
	__webpack_require__(274);
	__webpack_require__(276);
	__webpack_require__(278);
	__webpack_require__(280);
	__webpack_require__(282);
	__webpack_require__(284);
	__webpack_require__(286);
	__webpack_require__(288);
	__webpack_require__(290);
	__webpack_require__(292);
	__webpack_require__(301);
	__webpack_require__(303);
	__webpack_require__(305);
	__webpack_require__(307);
	__webpack_require__(309);
	__webpack_require__(311);
	__webpack_require__(313);
	__webpack_require__(315);
	__webpack_require__(317);
	__webpack_require__(319);
	__webpack_require__(321);
	__webpack_require__(324);
	__webpack_require__(326);
	__webpack_require__(328);
	__webpack_require__(330);
	__webpack_require__(332);
	__webpack_require__(334);
	__webpack_require__(336);
	__webpack_require__(338);
	__webpack_require__(340);
	__webpack_require__(342);
	__webpack_require__(344);
	__webpack_require__(345);
	/* tslint:disable:no-unused-variable */
	var Subscription_1 = __webpack_require__(16);
	exports.Subscription = Subscription_1.Subscription;
	var Subscriber_1 = __webpack_require__(14);
	exports.Subscriber = Subscriber_1.Subscriber;
	var AsyncSubject_1 = __webpack_require__(40);
	exports.AsyncSubject = AsyncSubject_1.AsyncSubject;
	var ReplaySubject_1 = __webpack_require__(134);
	exports.ReplaySubject = ReplaySubject_1.ReplaySubject;
	var BehaviorSubject_1 = __webpack_require__(257);
	exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;
	var ConnectableObservable_1 = __webpack_require__(243);
	exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;
	var Notification_1 = __webpack_require__(75);
	exports.Notification = Notification_1.Notification;
	var EmptyError_1 = __webpack_require__(205);
	exports.EmptyError = EmptyError_1.EmptyError;
	var ArgumentOutOfRangeError_1 = __webpack_require__(194);
	exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
	var ObjectUnsubscribedError_1 = __webpack_require__(35);
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;
	var TimeoutError_1 = __webpack_require__(323);
	exports.TimeoutError = TimeoutError_1.TimeoutError;
	var UnsubscriptionError_1 = __webpack_require__(21);
	exports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;
	var timeInterval_1 = __webpack_require__(320);
	exports.TimeInterval = timeInterval_1.TimeInterval;
	var timestamp_1 = __webpack_require__(327);
	exports.Timestamp = timestamp_1.Timestamp;
	var TestScheduler_1 = __webpack_require__(347);
	exports.TestScheduler = TestScheduler_1.TestScheduler;
	var VirtualTimeScheduler_1 = __webpack_require__(353);
	exports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;
	var AjaxObservable_1 = __webpack_require__(129);
	exports.AjaxResponse = AjaxObservable_1.AjaxResponse;
	exports.AjaxError = AjaxObservable_1.AjaxError;
	exports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;
	var asap_1 = __webpack_require__(295);
	var async_1 = __webpack_require__(90);
	var queue_1 = __webpack_require__(135);
	var animationFrame_1 = __webpack_require__(354);
	var rxSubscriber_1 = __webpack_require__(23);
	var iterator_1 = __webpack_require__(54);
	var observable_1 = __webpack_require__(24);
	/* tslint:enable:no-unused-variable */
	/**
	 * @typedef {Object} Rx.Scheduler
	 * @property {Scheduler} queue Schedules on a queue in the current event frame
	 * (trampoline scheduler). Use this for iteration operations.
	 * @property {Scheduler} asap Schedules on the micro task queue, which uses the
	 * fastest transport mechanism available, either Node.js' `process.nextTick()`
	 * or Web Worker MessageChannel or setTimeout or others. Use this for
	 * asynchronous conversions.
	 * @property {Scheduler} async Schedules work with `setInterval`. Use this for
	 * time-based operations.
	 * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.
	 * Use this for synchronizing with the platform's painting
	 */
	var Scheduler = {
	    asap: asap_1.asap,
	    queue: queue_1.queue,
	    animationFrame: animationFrame_1.animationFrame,
	    async: async_1.async
	};
	exports.Scheduler = Scheduler;
	/**
	 * @typedef {Object} Rx.Symbol
	 * @property {Symbol|string} rxSubscriber A symbol to use as a property name to
	 * retrieve an "Rx safe" Observer from an object. "Rx safety" can be defined as
	 * an object that has all of the traits of an Rx Subscriber, including the
	 * ability to add and remove subscriptions to the subscription chain and
	 * guarantees involving event triggering (can't "next" after unsubscription,
	 * etc).
	 * @property {Symbol|string} observable A symbol to use as a property name to
	 * retrieve an Observable as defined by the [ECMAScript "Observable" spec](https://github.com/zenparsing/es-observable).
	 * @property {Symbol|string} iterator The ES6 symbol to use as a property name
	 * to retrieve an iterator from an object.
	 */
	var Symbol = {
	    rxSubscriber: rxSubscriber_1.$$rxSubscriber,
	    observable: observable_1.$$observable,
	    iterator: iterator_1.$$iterator
	};
	exports.Symbol = Symbol;
	//# sourceMappingURL=Rx.js.map

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var Subscriber_1 = __webpack_require__(14);
	var Subscription_1 = __webpack_require__(16);
	var ObjectUnsubscribedError_1 = __webpack_require__(35);
	var SubjectSubscription_1 = __webpack_require__(36);
	var rxSubscriber_1 = __webpack_require__(23);
	/**
	 * @class SubjectSubscriber<T>
	 */
	var SubjectSubscriber = (function (_super) {
	    __extends(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        _super.call(this, destination);
	        this.destination = destination;
	    }
	    return SubjectSubscriber;
	}(Subscriber_1.Subscriber));
	exports.SubjectSubscriber = SubjectSubscriber;
	/**
	 * @class Subject<T>
	 */
	var Subject = (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        _super.call(this);
	        this.observers = [];
	        this.closed = false;
	        this.isStopped = false;
	        this.hasError = false;
	        this.thrownError = null;
	    }
	    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable_1.Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable_1.Observable));
	exports.Subject = Subject;
	/**
	 * @class AnonymousSubject<T>
	 */
	var AnonymousSubject = (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.source = source;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription_1.Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));
	exports.AnonymousSubject = AnonymousSubject;
	//# sourceMappingURL=Subject.js.map

/***/ },
/* 35 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an action is invalid because the object has been
	 * unsubscribed.
	 *
	 * @see {@link Subject}
	 * @see {@link BehaviorSubject}
	 *
	 * @class ObjectUnsubscribedError
	 */
	var ObjectUnsubscribedError = (function (_super) {
	    __extends(ObjectUnsubscribedError, _super);
	    function ObjectUnsubscribedError() {
	        var err = _super.call(this, 'object unsubscribed');
	        this.name = err.name = 'ObjectUnsubscribedError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return ObjectUnsubscribedError;
	}(Error));
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
	//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(16);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubjectSubscription = (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        _super.call(this);
	        this.subject = subject;
	        this.subscriber = subscriber;
	        this.closed = false;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription_1.Subscription));
	exports.SubjectSubscription = SubjectSubscription;
	//# sourceMappingURL=SubjectSubscription.js.map

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var bindCallback_1 = __webpack_require__(38);
	Observable_1.Observable.bindCallback = bindCallback_1.bindCallback;
	//# sourceMappingURL=bindCallback.js.map

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var BoundCallbackObservable_1 = __webpack_require__(39);
	exports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;
	//# sourceMappingURL=bindCallback.js.map

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var AsyncSubject_1 = __webpack_require__(40);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var BoundCallbackObservable = (function (_super) {
	    __extends(BoundCallbackObservable, _super);
	    function BoundCallbackObservable(callbackFunc, selector, args, scheduler) {
	        _super.call(this);
	        this.callbackFunc = callbackFunc;
	        this.selector = selector;
	        this.args = args;
	        this.scheduler = scheduler;
	    }
	    /* tslint:enable:max-line-length */
	    /**
	     * Converts a callback API to a function that returns an Observable.
	     *
	     * <span class="informal">Give it a function `f` of type `f(x, callback)` and
	     * it will return a function `g` that when called as `g(x)` will output an
	     * Observable.</span>
	     *
	     * `bindCallback` is not an operator because its input and output are not
	     * Observables. The input is a function `func` with some parameters, but the
	     * last parameter must be a callback function that `func` calls when it is
	     * done. The output of `bindCallback` is a function that takes the same
	     * parameters as `func`, except the last one (the callback). When the output
	     * function is called with arguments, it will return an Observable where the
	     * results will be delivered to.
	     *
	     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>
	     * // Suppose we have jQuery.getJSON('/my/url', callback)
	     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);
	     * var result = getJSONAsObservable('/my/url');
	     * result.subscribe(x => console.log(x), e => console.error(e));
	     *
	     * @see {@link bindNodeCallback}
	     * @see {@link from}
	     * @see {@link fromPromise}
	     *
	     * @param {function} func Function with a callback as the last parameter.
	     * @param {function} [selector] A function which takes the arguments from the
	     * callback and maps those a value to emit on the output Observable.
	     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
	     * callbacks.
	     * @return {function(...params: *): Observable} A function which returns the
	     * Observable that delivers the same values the callback would deliver.
	     * @static true
	     * @name bindCallback
	     * @owner Observable
	     */
	    BoundCallbackObservable.create = function (func, selector, scheduler) {
	        if (selector === void 0) { selector = undefined; }
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            return new BoundCallbackObservable(func, selector, args, scheduler);
	        };
	    };
	    BoundCallbackObservable.prototype._subscribe = function (subscriber) {
	        var callbackFunc = this.callbackFunc;
	        var args = this.args;
	        var scheduler = this.scheduler;
	        var subject = this.subject;
	        if (!scheduler) {
	            if (!subject) {
	                subject = this.subject = new AsyncSubject_1.AsyncSubject();
	                var handler = function handlerFn() {
	                    var innerArgs = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        innerArgs[_i - 0] = arguments[_i];
	                    }
	                    var source = handlerFn.source;
	                    var selector = source.selector, subject = source.subject;
	                    if (selector) {
	                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
	                        if (result_1 === errorObject_1.errorObject) {
	                            subject.error(errorObject_1.errorObject.e);
	                        }
	                        else {
	                            subject.next(result_1);
	                            subject.complete();
	                        }
	                    }
	                    else {
	                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);
	                        subject.complete();
	                    }
	                };
	                // use named function instance to avoid closure.
	                handler.source = this;
	                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
	                if (result === errorObject_1.errorObject) {
	                    subject.error(errorObject_1.errorObject.e);
	                }
	            }
	            return subject.subscribe(subscriber);
	        }
	        else {
	            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber });
	        }
	    };
	    BoundCallbackObservable.dispatch = function (state) {
	        var self = this;
	        var source = state.source, subscriber = state.subscriber;
	        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;
	        var subject = source.subject;
	        if (!subject) {
	            subject = source.subject = new AsyncSubject_1.AsyncSubject();
	            var handler = function handlerFn() {
	                var innerArgs = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    innerArgs[_i - 0] = arguments[_i];
	                }
	                var source = handlerFn.source;
	                var selector = source.selector, subject = source.subject;
	                if (selector) {
	                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
	                    if (result_2 === errorObject_1.errorObject) {
	                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
	                    }
	                    else {
	                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));
	                    }
	                }
	                else {
	                    var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;
	                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
	                }
	            };
	            // use named function to pass values in without closure
	            handler.source = source;
	            var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
	            if (result === errorObject_1.errorObject) {
	                subject.error(errorObject_1.errorObject.e);
	            }
	        }
	        self.add(subject.subscribe(subscriber));
	    };
	    return BoundCallbackObservable;
	}(Observable_1.Observable));
	exports.BoundCallbackObservable = BoundCallbackObservable;
	function dispatchNext(arg) {
	    var value = arg.value, subject = arg.subject;
	    subject.next(value);
	    subject.complete();
	}
	function dispatchError(arg) {
	    var err = arg.err, subject = arg.subject;
	    subject.error(err);
	}
	//# sourceMappingURL=BoundCallbackObservable.js.map

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(34);
	var Subscription_1 = __webpack_require__(16);
	/**
	 * @class AsyncSubject<T>
	 */
	var AsyncSubject = (function (_super) {
	    __extends(AsyncSubject, _super);
	    function AsyncSubject() {
	        _super.apply(this, arguments);
	        this.value = null;
	        this.hasNext = false;
	        this.hasCompleted = false;
	    }
	    AsyncSubject.prototype._subscribe = function (subscriber) {
	        if (this.hasCompleted && this.hasNext) {
	            subscriber.next(this.value);
	            subscriber.complete();
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription_1.Subscription.EMPTY;
	        }
	        return _super.prototype._subscribe.call(this, subscriber);
	    };
	    AsyncSubject.prototype.next = function (value) {
	        if (!this.hasCompleted) {
	            this.value = value;
	            this.hasNext = true;
	        }
	    };
	    AsyncSubject.prototype.complete = function () {
	        this.hasCompleted = true;
	        if (this.hasNext) {
	            _super.prototype.next.call(this, this.value);
	        }
	        _super.prototype.complete.call(this);
	    };
	    return AsyncSubject;
	}(Subject_1.Subject));
	exports.AsyncSubject = AsyncSubject;
	//# sourceMappingURL=AsyncSubject.js.map

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var bindNodeCallback_1 = __webpack_require__(42);
	Observable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;
	//# sourceMappingURL=bindNodeCallback.js.map

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var BoundNodeCallbackObservable_1 = __webpack_require__(43);
	exports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;
	//# sourceMappingURL=bindNodeCallback.js.map

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var AsyncSubject_1 = __webpack_require__(40);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var BoundNodeCallbackObservable = (function (_super) {
	    __extends(BoundNodeCallbackObservable, _super);
	    function BoundNodeCallbackObservable(callbackFunc, selector, args, scheduler) {
	        _super.call(this);
	        this.callbackFunc = callbackFunc;
	        this.selector = selector;
	        this.args = args;
	        this.scheduler = scheduler;
	    }
	    /* tslint:enable:max-line-length */
	    /**
	     * Converts a Node.js-style callback API to a function that returns an
	     * Observable.
	     *
	     * <span class="informal">It's just like {@link bindCallback}, but the
	     * callback is expected to be of type `callback(error, result)`.</span>
	     *
	     * `bindNodeCallback` is not an operator because its input and output are not
	     * Observables. The input is a function `func` with some parameters, but the
	     * last parameter must be a callback function that `func` calls when it is
	     * done. The callback function is expected to follow Node.js conventions,
	     * where the first argument to the callback is an error, while remaining
	     * arguments are the callback result. The output of `bindNodeCallback` is a
	     * function that takes the same parameters as `func`, except the last one (the
	     * callback). When the output function is called with arguments, it will
	     * return an Observable where the results will be delivered to.
	     *
	     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>
	     * import * as fs from 'fs';
	     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);
	     * var result = readFileAsObservable('./roadNames.txt', 'utf8');
	     * result.subscribe(x => console.log(x), e => console.error(e));
	     *
	     * @see {@link bindCallback}
	     * @see {@link from}
	     * @see {@link fromPromise}
	     *
	     * @param {function} func Function with a callback as the last parameter.
	     * @param {function} [selector] A function which takes the arguments from the
	     * callback and maps those a value to emit on the output Observable.
	     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
	     * callbacks.
	     * @return {function(...params: *): Observable} A function which returns the
	     * Observable that delivers the same values the Node.js callback would
	     * deliver.
	     * @static true
	     * @name bindNodeCallback
	     * @owner Observable
	     */
	    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {
	        if (selector === void 0) { selector = undefined; }
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            return new BoundNodeCallbackObservable(func, selector, args, scheduler);
	        };
	    };
	    BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {
	        var callbackFunc = this.callbackFunc;
	        var args = this.args;
	        var scheduler = this.scheduler;
	        var subject = this.subject;
	        if (!scheduler) {
	            if (!subject) {
	                subject = this.subject = new AsyncSubject_1.AsyncSubject();
	                var handler = function handlerFn() {
	                    var innerArgs = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        innerArgs[_i - 0] = arguments[_i];
	                    }
	                    var source = handlerFn.source;
	                    var selector = source.selector, subject = source.subject;
	                    var err = innerArgs.shift();
	                    if (err) {
	                        subject.error(err);
	                    }
	                    else if (selector) {
	                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
	                        if (result_1 === errorObject_1.errorObject) {
	                            subject.error(errorObject_1.errorObject.e);
	                        }
	                        else {
	                            subject.next(result_1);
	                            subject.complete();
	                        }
	                    }
	                    else {
	                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);
	                        subject.complete();
	                    }
	                };
	                // use named function instance to avoid closure.
	                handler.source = this;
	                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
	                if (result === errorObject_1.errorObject) {
	                    subject.error(errorObject_1.errorObject.e);
	                }
	            }
	            return subject.subscribe(subscriber);
	        }
	        else {
	            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber });
	        }
	    };
	    return BoundNodeCallbackObservable;
	}(Observable_1.Observable));
	exports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;
	function dispatch(state) {
	    var self = this;
	    var source = state.source, subscriber = state.subscriber;
	    // XXX: cast to `any` to access to the private field in `source`.
	    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;
	    var subject = source.subject;
	    if (!subject) {
	        subject = source.subject = new AsyncSubject_1.AsyncSubject();
	        var handler = function handlerFn() {
	            var innerArgs = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                innerArgs[_i - 0] = arguments[_i];
	            }
	            var source = handlerFn.source;
	            var selector = source.selector, subject = source.subject;
	            var err = innerArgs.shift();
	            if (err) {
	                subject.error(err);
	            }
	            else if (selector) {
	                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
	                if (result_2 === errorObject_1.errorObject) {
	                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
	                }
	                else {
	                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));
	                }
	            }
	            else {
	                var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;
	                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
	            }
	        };
	        // use named function to pass values in without closure
	        handler.source = source;
	        var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
	        if (result === errorObject_1.errorObject) {
	            subject.error(errorObject_1.errorObject.e);
	        }
	    }
	    self.add(subject.subscribe(subscriber));
	}
	function dispatchNext(arg) {
	    var value = arg.value, subject = arg.subject;
	    subject.next(value);
	    subject.complete();
	}
	function dispatchError(arg) {
	    var err = arg.err, subject = arg.subject;
	    subject.error(err);
	}
	//# sourceMappingURL=BoundNodeCallbackObservable.js.map

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var combineLatest_1 = __webpack_require__(45);
	Observable_1.Observable.combineLatest = combineLatest_1.combineLatest;
	//# sourceMappingURL=combineLatest.js.map

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var isScheduler_1 = __webpack_require__(46);
	var isArray_1 = __webpack_require__(17);
	var ArrayObservable_1 = __webpack_require__(47);
	var combineLatest_1 = __webpack_require__(50);
	/* tslint:enable:max-line-length */
	/**
	 * Combines multiple Observables to create an Observable whose values are
	 * calculated from the latest values of each of its input Observables.
	 *
	 * <span class="informal">Whenever any input Observable emits a value, it
	 * computes a formula using the latest values from all the inputs, then emits
	 * the output of that formula.</span>
	 *
	 * <img src="./img/combineLatest.png" width="100%">
	 *
	 * `combineLatest` combines the values from all the Observables passed as
	 * arguments. This is done by subscribing to each Observable, in order, and
	 * collecting an array of each of the most recent values any time any of the
	 * input Observables emits, then either taking that array and passing it as
	 * arguments to an optional `project` function and emitting the return value of
	 * that, or just emitting the array of recent values directly if there is no
	 * `project` function.
	 *
	 * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>
	 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
	 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
	 * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));
	 * bmi.subscribe(x => console.log('BMI is ' + x));
	 *
	 * // With output to console:
	 * // BMI is 24.212293388429753
	 * // BMI is 23.93948099205209
	 * // BMI is 23.671253629592222
	 *
	 * @see {@link combineAll}
	 * @see {@link merge}
	 * @see {@link withLatestFrom}
	 *
	 * @param {Observable} observable1 An input Observable to combine with the
	 * source Observable.
	 * @param {Observable} observable2 An input Observable to combine with the
	 * source Observable. More than one input Observables may be given as argument.
	 * @param {function} [project] An optional function to project the values from
	 * the combined latest values into a new value on the output Observable.
	 * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to
	 * each input Observable.
	 * @return {Observable} An Observable of projected values from the most recent
	 * values from each input Observable, or an array of the most recent values from
	 * each input Observable.
	 * @static true
	 * @name combineLatest
	 * @owner Observable
	 */
	function combineLatest() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var project = null;
	    var scheduler = null;
	    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
	        scheduler = observables.pop();
	    }
	    if (typeof observables[observables.length - 1] === 'function') {
	        project = observables.pop();
	    }
	    // if the first and only other argument besides the resultSelector is an array
	    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
	    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
	        observables = observables[0];
	    }
	    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));
	}
	exports.combineLatest = combineLatest;
	//# sourceMappingURL=combineLatest.js.map

/***/ },
/* 46 */
/***/ function(module, exports) {

	"use strict";
	function isScheduler(value) {
	    return value && typeof value.schedule === 'function';
	}
	exports.isScheduler = isScheduler;
	//# sourceMappingURL=isScheduler.js.map

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var ScalarObservable_1 = __webpack_require__(48);
	var EmptyObservable_1 = __webpack_require__(49);
	var isScheduler_1 = __webpack_require__(46);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ArrayObservable = (function (_super) {
	    __extends(ArrayObservable, _super);
	    function ArrayObservable(array, scheduler) {
	        _super.call(this);
	        this.array = array;
	        this.scheduler = scheduler;
	        if (!scheduler && array.length === 1) {
	            this._isScalar = true;
	            this.value = array[0];
	        }
	    }
	    ArrayObservable.create = function (array, scheduler) {
	        return new ArrayObservable(array, scheduler);
	    };
	    /**
	     * Creates an Observable that emits some values you specify as arguments,
	     * immediately one after the other, and then emits a complete notification.
	     *
	     * <span class="informal">Emits the arguments you provide, then completes.
	     * </span>
	     *
	     * <img src="./img/of.png" width="100%">
	     *
	     * This static operator is useful for creating a simple Observable that only
	     * emits the arguments given, and the complete notification thereafter. It can
	     * be used for composing with other Observables, such as with {@link concat}.
	     * By default, it uses a `null` Scheduler, which means the `next`
	     * notifications are sent synchronously, although with a different Scheduler
	     * it is possible to determine when those notifications will be delivered.
	     *
	     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
	     * var numbers = Rx.Observable.of(10, 20, 30);
	     * var letters = Rx.Observable.of('a', 'b', 'c');
	     * var interval = Rx.Observable.interval(1000);
	     * var result = numbers.concat(letters).concat(interval);
	     * result.subscribe(x => console.log(x));
	     *
	     * @see {@link create}
	     * @see {@link empty}
	     * @see {@link never}
	     * @see {@link throw}
	     *
	     * @param {...T} values Arguments that represent `next` values to be emitted.
	     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
	     * the emissions of the `next` notifications.
	     * @return {Observable<T>} An Observable that emits each given input value.
	     * @static true
	     * @name of
	     * @owner Observable
	     */
	    ArrayObservable.of = function () {
	        var array = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            array[_i - 0] = arguments[_i];
	        }
	        var scheduler = array[array.length - 1];
	        if (isScheduler_1.isScheduler(scheduler)) {
	            array.pop();
	        }
	        else {
	            scheduler = null;
	        }
	        var len = array.length;
	        if (len > 1) {
	            return new ArrayObservable(array, scheduler);
	        }
	        else if (len === 1) {
	            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
	        }
	        else {
	            return new EmptyObservable_1.EmptyObservable(scheduler);
	        }
	    };
	    ArrayObservable.dispatch = function (state) {
	        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
	        if (index >= count) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(array[index]);
	        if (subscriber.closed) {
	            return;
	        }
	        state.index = index + 1;
	        this.schedule(state);
	    };
	    ArrayObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var array = this.array;
	        var count = array.length;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(ArrayObservable.dispatch, 0, {
	                array: array, index: index, count: count, subscriber: subscriber
	            });
	        }
	        else {
	            for (var i = 0; i < count && !subscriber.closed; i++) {
	                subscriber.next(array[i]);
	            }
	            subscriber.complete();
	        }
	    };
	    return ArrayObservable;
	}(Observable_1.Observable));
	exports.ArrayObservable = ArrayObservable;
	//# sourceMappingURL=ArrayObservable.js.map

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ScalarObservable = (function (_super) {
	    __extends(ScalarObservable, _super);
	    function ScalarObservable(value, scheduler) {
	        _super.call(this);
	        this.value = value;
	        this.scheduler = scheduler;
	        this._isScalar = true;
	        if (scheduler) {
	            this._isScalar = false;
	        }
	    }
	    ScalarObservable.create = function (value, scheduler) {
	        return new ScalarObservable(value, scheduler);
	    };
	    ScalarObservable.dispatch = function (state) {
	        var done = state.done, value = state.value, subscriber = state.subscriber;
	        if (done) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(value);
	        if (subscriber.closed) {
	            return;
	        }
	        state.done = true;
	        this.schedule(state);
	    };
	    ScalarObservable.prototype._subscribe = function (subscriber) {
	        var value = this.value;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(ScalarObservable.dispatch, 0, {
	                done: false, value: value, subscriber: subscriber
	            });
	        }
	        else {
	            subscriber.next(value);
	            if (!subscriber.closed) {
	                subscriber.complete();
	            }
	        }
	    };
	    return ScalarObservable;
	}(Observable_1.Observable));
	exports.ScalarObservable = ScalarObservable;
	//# sourceMappingURL=ScalarObservable.js.map

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var EmptyObservable = (function (_super) {
	    __extends(EmptyObservable, _super);
	    function EmptyObservable(scheduler) {
	        _super.call(this);
	        this.scheduler = scheduler;
	    }
	    /**
	     * Creates an Observable that emits no items to the Observer and immediately
	     * emits a complete notification.
	     *
	     * <span class="informal">Just emits 'complete', and nothing else.
	     * </span>
	     *
	     * <img src="./img/empty.png" width="100%">
	     *
	     * This static operator is useful for creating a simple Observable that only
	     * emits the complete notification. It can be used for composing with other
	     * Observables, such as in a {@link mergeMap}.
	     *
	     * @example <caption>Emit the number 7, then complete.</caption>
	     * var result = Rx.Observable.empty().startWith(7);
	     * result.subscribe(x => console.log(x));
	     *
	     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
	     * var interval = Rx.Observable.interval(1000);
	     * var result = interval.mergeMap(x =>
	     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
	     * );
	     * result.subscribe(x => console.log(x));
	     *
	     * // Results in the following to the console:
	     * // x is equal to the count on the interval eg(0,1,2,3,...)
	     * // x will occur every 1000ms
	     * // if x % 2 is equal to 1 print abc
	     * // if x % 2 is not equal to 1 nothing will be output
	     *
	     * @see {@link create}
	     * @see {@link never}
	     * @see {@link of}
	     * @see {@link throw}
	     *
	     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
	     * the emission of the complete notification.
	     * @return {Observable} An "empty" Observable: emits only the complete
	     * notification.
	     * @static true
	     * @name empty
	     * @owner Observable
	     */
	    EmptyObservable.create = function (scheduler) {
	        return new EmptyObservable(scheduler);
	    };
	    EmptyObservable.dispatch = function (arg) {
	        var subscriber = arg.subscriber;
	        subscriber.complete();
	    };
	    EmptyObservable.prototype._subscribe = function (subscriber) {
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
	        }
	        else {
	            subscriber.complete();
	        }
	    };
	    return EmptyObservable;
	}(Observable_1.Observable));
	exports.EmptyObservable = EmptyObservable;
	//# sourceMappingURL=EmptyObservable.js.map

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ArrayObservable_1 = __webpack_require__(47);
	var isArray_1 = __webpack_require__(17);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	var none = {};
	/* tslint:disable:max-line-length */
	/**
	 * Combines multiple Observables to create an Observable whose values are
	 * calculated from the latest values of each of its input Observables.
	 *
	 * <span class="informal">Whenever any input Observable emits a value, it
	 * computes a formula using the latest values from all the inputs, then emits
	 * the output of that formula.</span>
	 *
	 * <img src="./img/combineLatest.png" width="100%">
	 *
	 * `combineLatest` combines the values from this Observable with values from
	 * Observables passed as arguments. This is done by subscribing to each
	 * Observable, in order, and collecting an array of each of the most recent
	 * values any time any of the input Observables emits, then either taking that
	 * array and passing it as arguments to an optional `project` function and
	 * emitting the return value of that, or just emitting the array of recent
	 * values directly if there is no `project` function.
	 *
	 * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>
	 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
	 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
	 * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));
	 * bmi.subscribe(x => console.log('BMI is ' + x));
	 *
	 * // With output to console:
	 * // BMI is 24.212293388429753
	 * // BMI is 23.93948099205209
	 * // BMI is 23.671253629592222
	 *
	 * @see {@link combineAll}
	 * @see {@link merge}
	 * @see {@link withLatestFrom}
	 *
	 * @param {Observable} other An input Observable to combine with the source
	 * Observable. More than one input Observables may be given as argument.
	 * @param {function} [project] An optional function to project the values from
	 * the combined latest values into a new value on the output Observable.
	 * @return {Observable} An Observable of projected values from the most recent
	 * values from each input Observable, or an array of the most recent values from
	 * each input Observable.
	 * @method combineLatest
	 * @owner Observable
	 */
	function combineLatest() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var project = null;
	    if (typeof observables[observables.length - 1] === 'function') {
	        project = observables.pop();
	    }
	    // if the first and only other argument besides the resultSelector is an array
	    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
	    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
	        observables = observables[0];
	    }
	    observables.unshift(this);
	    return this.lift.call(new ArrayObservable_1.ArrayObservable(observables), new CombineLatestOperator(project));
	}
	exports.combineLatest = combineLatest;
	var CombineLatestOperator = (function () {
	    function CombineLatestOperator(project) {
	        this.project = project;
	    }
	    CombineLatestOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));
	    };
	    return CombineLatestOperator;
	}());
	exports.CombineLatestOperator = CombineLatestOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var CombineLatestSubscriber = (function (_super) {
	    __extends(CombineLatestSubscriber, _super);
	    function CombineLatestSubscriber(destination, project) {
	        _super.call(this, destination);
	        this.project = project;
	        this.active = 0;
	        this.values = [];
	        this.observables = [];
	    }
	    CombineLatestSubscriber.prototype._next = function (observable) {
	        this.values.push(none);
	        this.observables.push(observable);
	    };
	    CombineLatestSubscriber.prototype._complete = function () {
	        var observables = this.observables;
	        var len = observables.length;
	        if (len === 0) {
	            this.destination.complete();
	        }
	        else {
	            this.active = len;
	            this.toRespond = len;
	            for (var i = 0; i < len; i++) {
	                var observable = observables[i];
	                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
	            }
	        }
	    };
	    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
	        if ((this.active -= 1) === 0) {
	            this.destination.complete();
	        }
	    };
	    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var values = this.values;
	        var oldVal = values[outerIndex];
	        var toRespond = !this.toRespond
	            ? 0
	            : oldVal === none ? --this.toRespond : this.toRespond;
	        values[outerIndex] = innerValue;
	        if (toRespond === 0) {
	            if (this.project) {
	                this._tryProject(values);
	            }
	            else {
	                this.destination.next(values.slice());
	            }
	        }
	    };
	    CombineLatestSubscriber.prototype._tryProject = function (values) {
	        var result;
	        try {
	            result = this.project.apply(this, values);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return CombineLatestSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	exports.CombineLatestSubscriber = CombineLatestSubscriber;
	//# sourceMappingURL=combineLatest.js.map

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var OuterSubscriber = (function (_super) {
	    __extends(OuterSubscriber, _super);
	    function OuterSubscriber() {
	        _super.apply(this, arguments);
	    }
	    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
	        this.destination.error(error);
	    };
	    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.destination.complete();
	    };
	    return OuterSubscriber;
	}(Subscriber_1.Subscriber));
	exports.OuterSubscriber = OuterSubscriber;
	//# sourceMappingURL=OuterSubscriber.js.map

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(12);
	var isArray_1 = __webpack_require__(17);
	var isPromise_1 = __webpack_require__(53);
	var isObject_1 = __webpack_require__(18);
	var Observable_1 = __webpack_require__(11);
	var iterator_1 = __webpack_require__(54);
	var InnerSubscriber_1 = __webpack_require__(55);
	var observable_1 = __webpack_require__(24);
	function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
	    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
	    if (destination.closed) {
	        return null;
	    }
	    if (result instanceof Observable_1.Observable) {
	        if (result._isScalar) {
	            destination.next(result.value);
	            destination.complete();
	            return null;
	        }
	        else {
	            return result.subscribe(destination);
	        }
	    }
	    else if (isArray_1.isArray(result)) {
	        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
	            destination.next(result[i]);
	        }
	        if (!destination.closed) {
	            destination.complete();
	        }
	    }
	    else if (isPromise_1.isPromise(result)) {
	        result.then(function (value) {
	            if (!destination.closed) {
	                destination.next(value);
	                destination.complete();
	            }
	        }, function (err) { return destination.error(err); })
	            .then(null, function (err) {
	            // Escaping the Promise trap: globally throw unhandled errors
	            root_1.root.setTimeout(function () { throw err; });
	        });
	        return destination;
	    }
	    else if (result && typeof result[iterator_1.$$iterator] === 'function') {
	        var iterator = result[iterator_1.$$iterator]();
	        do {
	            var item = iterator.next();
	            if (item.done) {
	                destination.complete();
	                break;
	            }
	            destination.next(item.value);
	            if (destination.closed) {
	                break;
	            }
	        } while (true);
	    }
	    else if (result && typeof result[observable_1.$$observable] === 'function') {
	        var obs = result[observable_1.$$observable]();
	        if (typeof obs.subscribe !== 'function') {
	            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
	        }
	        else {
	            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
	        }
	    }
	    else {
	        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
	        var msg = ("You provided " + value + " where a stream was expected.")
	            + ' You can provide an Observable, Promise, Array, or Iterable.';
	        destination.error(new TypeError(msg));
	    }
	    return null;
	}
	exports.subscribeToResult = subscribeToResult;
	//# sourceMappingURL=subscribeToResult.js.map

/***/ },
/* 53 */
/***/ function(module, exports) {

	"use strict";
	function isPromise(value) {
	    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
	}
	exports.isPromise = isPromise;
	//# sourceMappingURL=isPromise.js.map

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(12);
	function symbolIteratorPonyfill(root) {
	    var Symbol = root.Symbol;
	    if (typeof Symbol === 'function') {
	        if (!Symbol.iterator) {
	            Symbol.iterator = Symbol('iterator polyfill');
	        }
	        return Symbol.iterator;
	    }
	    else {
	        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
	        var Set_1 = root.Set;
	        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
	            return '@@iterator';
	        }
	        var Map_1 = root.Map;
	        // required for compatability with es6-shim
	        if (Map_1) {
	            var keys = Object.getOwnPropertyNames(Map_1.prototype);
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
	                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
	                    return key;
	                }
	            }
	        }
	        return '@@iterator';
	    }
	}
	exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
	exports.$$iterator = symbolIteratorPonyfill(root_1.root);
	//# sourceMappingURL=iterator.js.map

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var InnerSubscriber = (function (_super) {
	    __extends(InnerSubscriber, _super);
	    function InnerSubscriber(parent, outerValue, outerIndex) {
	        _super.call(this);
	        this.parent = parent;
	        this.outerValue = outerValue;
	        this.outerIndex = outerIndex;
	        this.index = 0;
	    }
	    InnerSubscriber.prototype._next = function (value) {
	        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
	    };
	    InnerSubscriber.prototype._error = function (error) {
	        this.parent.notifyError(error, this);
	        this.unsubscribe();
	    };
	    InnerSubscriber.prototype._complete = function () {
	        this.parent.notifyComplete(this);
	        this.unsubscribe();
	    };
	    return InnerSubscriber;
	}(Subscriber_1.Subscriber));
	exports.InnerSubscriber = InnerSubscriber;
	//# sourceMappingURL=InnerSubscriber.js.map

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var concat_1 = __webpack_require__(57);
	Observable_1.Observable.concat = concat_1.concat;
	//# sourceMappingURL=concat.js.map

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var concat_1 = __webpack_require__(58);
	exports.concat = concat_1.concatStatic;
	//# sourceMappingURL=concat.js.map

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var isScheduler_1 = __webpack_require__(46);
	var ArrayObservable_1 = __webpack_require__(47);
	var mergeAll_1 = __webpack_require__(59);
	/* tslint:disable:max-line-length */
	/**
	 * Creates an output Observable which sequentially emits all values from every
	 * given input Observable after the current Observable.
	 *
	 * <span class="informal">Concatenates multiple Observables together by
	 * sequentially emitting their values, one Observable after the other.</span>
	 *
	 * <img src="./img/concat.png" width="100%">
	 *
	 * Joins this Observable with multiple other Observables by subscribing to them
	 * one at a time, starting with the source, and merging their results into the
	 * output Observable. Will wait for each Observable to complete before moving
	 * on to the next.
	 *
	 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
	 * var timer = Rx.Observable.interval(1000).take(4);
	 * var sequence = Rx.Observable.range(1, 10);
	 * var result = timer.concat(sequence);
	 * result.subscribe(x => console.log(x));
	 *
	 * // results in:
	 * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
	 *
	 * @example <caption>Concatenate 3 Observables</caption>
	 * var timer1 = Rx.Observable.interval(1000).take(10);
	 * var timer2 = Rx.Observable.interval(2000).take(6);
	 * var timer3 = Rx.Observable.interval(500).take(10);
	 * var result = timer1.concat(timer2, timer3);
	 * result.subscribe(x => console.log(x));
	 *
	 * // results in the following:
	 * // (Prints to console sequentially)
	 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
	 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
	 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
	 *
	 * @see {@link concatAll}
	 * @see {@link concatMap}
	 * @see {@link concatMapTo}
	 *
	 * @param {Observable} other An input Observable to concatenate after the source
	 * Observable. More than one input Observables may be given as argument.
	 * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each
	 * Observable subscription on.
	 * @return {Observable} All values of each passed Observable merged into a
	 * single Observable, in order, in serial fashion.
	 * @method concat
	 * @owner Observable
	 */
	function concat() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    return this.lift.call(concatStatic.apply(void 0, [this].concat(observables)));
	}
	exports.concat = concat;
	/* tslint:enable:max-line-length */
	/**
	 * Creates an output Observable which sequentially emits all values from every
	 * given input Observable after the current Observable.
	 *
	 * <span class="informal">Concatenates multiple Observables together by
	 * sequentially emitting their values, one Observable after the other.</span>
	 *
	 * <img src="./img/concat.png" width="100%">
	 *
	 * Joins multiple Observables together by subscribing to them one at a time and
	 * merging their results into the output Observable. Will wait for each
	 * Observable to complete before moving on to the next.
	 *
	 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
	 * var timer = Rx.Observable.interval(1000).take(4);
	 * var sequence = Rx.Observable.range(1, 10);
	 * var result = Rx.Observable.concat(timer, sequence);
	 * result.subscribe(x => console.log(x));
	 *
	 * // results in:
	 * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
	 *
	 * @example <caption>Concatenate 3 Observables</caption>
	 * var timer1 = Rx.Observable.interval(1000).take(10);
	 * var timer2 = Rx.Observable.interval(2000).take(6);
	 * var timer3 = Rx.Observable.interval(500).take(10);
	 * var result = Rx.Observable.concat(timer1, timer2, timer3);
	 * result.subscribe(x => console.log(x));
	 *
	 * // results in the following:
	 * // (Prints to console sequentially)
	 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
	 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
	 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
	 *
	 * @see {@link concatAll}
	 * @see {@link concatMap}
	 * @see {@link concatMapTo}
	 *
	 * @param {Observable} input1 An input Observable to concatenate with others.
	 * @param {Observable} input2 An input Observable to concatenate with others.
	 * More than one input Observables may be given as argument.
	 * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each
	 * Observable subscription on.
	 * @return {Observable} All values of each passed Observable merged into a
	 * single Observable, in order, in serial fashion.
	 * @static true
	 * @name concat
	 * @owner Observable
	 */
	function concatStatic() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var scheduler = null;
	    var args = observables;
	    if (isScheduler_1.isScheduler(args[observables.length - 1])) {
	        scheduler = args.pop();
	    }
	    if (scheduler === null && observables.length === 1) {
	        return observables[0];
	    }
	    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));
	}
	exports.concatStatic = concatStatic;
	//# sourceMappingURL=concat.js.map

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Converts a higher-order Observable into a first-order Observable which
	 * concurrently delivers all values that are emitted on the inner Observables.
	 *
	 * <span class="informal">Flattens an Observable-of-Observables.</span>
	 *
	 * <img src="./img/mergeAll.png" width="100%">
	 *
	 * `mergeAll` subscribes to an Observable that emits Observables, also known as
	 * a higher-order Observable. Each time it observes one of these emitted inner
	 * Observables, it subscribes to that and delivers all the values from the
	 * inner Observable on the output Observable. The output Observable only
	 * completes once all inner Observables have completed. Any error delivered by
	 * a inner Observable will be immediately emitted on the output Observable.
	 *
	 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
	 * var firstOrder = higherOrder.mergeAll();
	 * firstOrder.subscribe(x => console.log(x));
	 *
	 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
	 * var firstOrder = higherOrder.mergeAll(2);
	 * firstOrder.subscribe(x => console.log(x));
	 *
	 * @see {@link combineAll}
	 * @see {@link concatAll}
	 * @see {@link exhaust}
	 * @see {@link merge}
	 * @see {@link mergeMap}
	 * @see {@link mergeMapTo}
	 * @see {@link mergeScan}
	 * @see {@link switch}
	 * @see {@link zipAll}
	 *
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
	 * Observables being subscribed to concurrently.
	 * @return {Observable} An Observable that emits values coming from all the
	 * inner Observables emitted by the source Observable.
	 * @method mergeAll
	 * @owner Observable
	 */
	function mergeAll(concurrent) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    return this.lift(new MergeAllOperator(concurrent));
	}
	exports.mergeAll = mergeAll;
	var MergeAllOperator = (function () {
	    function MergeAllOperator(concurrent) {
	        this.concurrent = concurrent;
	    }
	    MergeAllOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
	    };
	    return MergeAllOperator;
	}());
	exports.MergeAllOperator = MergeAllOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MergeAllSubscriber = (function (_super) {
	    __extends(MergeAllSubscriber, _super);
	    function MergeAllSubscriber(destination, concurrent) {
	        _super.call(this, destination);
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	    }
	    MergeAllSubscriber.prototype._next = function (observable) {
	        if (this.active < this.concurrent) {
	            this.active++;
	            this.add(subscribeToResult_1.subscribeToResult(this, observable));
	        }
	        else {
	            this.buffer.push(observable);
	        }
	    };
	    MergeAllSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };
	    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeAllSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	exports.MergeAllSubscriber = MergeAllSubscriber;
	//# sourceMappingURL=mergeAll.js.map

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var defer_1 = __webpack_require__(61);
	Observable_1.Observable.defer = defer_1.defer;
	//# sourceMappingURL=defer.js.map

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var DeferObservable_1 = __webpack_require__(62);
	exports.defer = DeferObservable_1.DeferObservable.create;
	//# sourceMappingURL=defer.js.map

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var subscribeToResult_1 = __webpack_require__(52);
	var OuterSubscriber_1 = __webpack_require__(51);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var DeferObservable = (function (_super) {
	    __extends(DeferObservable, _super);
	    function DeferObservable(observableFactory) {
	        _super.call(this);
	        this.observableFactory = observableFactory;
	    }
	    /**
	     * Creates an Observable that, on subscribe, calls an Observable factory to
	     * make an Observable for each new Observer.
	     *
	     * <span class="informal">Creates the Observable lazily, that is, only when it
	     * is subscribed.
	     * </span>
	     *
	     * <img src="./img/defer.png" width="100%">
	     *
	     * `defer` allows you to create the Observable only when the Observer
	     * subscribes, and create a fresh Observable for each Observer. It waits until
	     * an Observer subscribes to it, and then it generates an Observable,
	     * typically with an Observable factory function. It does this afresh for each
	     * subscriber, so although each subscriber may think it is subscribing to the
	     * same Observable, in fact each subscriber gets its own individual
	     * Observable.
	     *
	     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>
	     * var clicksOrInterval = Rx.Observable.defer(function () {
	     *   if (Math.random() > 0.5) {
	     *     return Rx.Observable.fromEvent(document, 'click');
	     *   } else {
	     *     return Rx.Observable.interval(1000);
	     *   }
	     * });
	     * clicksOrInterval.subscribe(x => console.log(x));
	     *
	     * // Results in the following behavior:
	     * // If the result of Math.random() is greater than 0.5 it will listen
	     * // for clicks anywhere on the "document"; when document is clicked it
	     * // will log a MouseEvent object to the console. If the result is less
	     * // than 0.5 it will emit ascending numbers, one every second(1000ms).
	     *
	     * @see {@link create}
	     *
	     * @param {function(): Observable|Promise} observableFactory The Observable
	     * factory function to invoke for each Observer that subscribes to the output
	     * Observable. May also return a Promise, which will be converted on the fly
	     * to an Observable.
	     * @return {Observable} An Observable whose Observers' subscriptions trigger
	     * an invocation of the given Observable factory function.
	     * @static true
	     * @name defer
	     * @owner Observable
	     */
	    DeferObservable.create = function (observableFactory) {
	        return new DeferObservable(observableFactory);
	    };
	    DeferObservable.prototype._subscribe = function (subscriber) {
	        return new DeferSubscriber(subscriber, this.observableFactory);
	    };
	    return DeferObservable;
	}(Observable_1.Observable));
	exports.DeferObservable = DeferObservable;
	var DeferSubscriber = (function (_super) {
	    __extends(DeferSubscriber, _super);
	    function DeferSubscriber(destination, factory) {
	        _super.call(this, destination);
	        this.factory = factory;
	        this.tryDefer();
	    }
	    DeferSubscriber.prototype.tryDefer = function () {
	        try {
	            this._callFactory();
	        }
	        catch (err) {
	            this._error(err);
	        }
	    };
	    DeferSubscriber.prototype._callFactory = function () {
	        var result = this.factory();
	        if (result) {
	            this.add(subscribeToResult_1.subscribeToResult(this, result));
	        }
	    };
	    return DeferSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=DeferObservable.js.map

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var empty_1 = __webpack_require__(64);
	Observable_1.Observable.empty = empty_1.empty;
	//# sourceMappingURL=empty.js.map

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var EmptyObservable_1 = __webpack_require__(49);
	exports.empty = EmptyObservable_1.EmptyObservable.create;
	//# sourceMappingURL=empty.js.map

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var forkJoin_1 = __webpack_require__(66);
	Observable_1.Observable.forkJoin = forkJoin_1.forkJoin;
	//# sourceMappingURL=forkJoin.js.map

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ForkJoinObservable_1 = __webpack_require__(67);
	exports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;
	//# sourceMappingURL=forkJoin.js.map

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var EmptyObservable_1 = __webpack_require__(49);
	var isArray_1 = __webpack_require__(17);
	var subscribeToResult_1 = __webpack_require__(52);
	var OuterSubscriber_1 = __webpack_require__(51);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ForkJoinObservable = (function (_super) {
	    __extends(ForkJoinObservable, _super);
	    function ForkJoinObservable(sources, resultSelector) {
	        _super.call(this);
	        this.sources = sources;
	        this.resultSelector = resultSelector;
	    }
	    /* tslint:enable:max-line-length */
	    /**
	     * @param sources
	     * @return {any}
	     * @static true
	     * @name forkJoin
	     * @owner Observable
	     */
	    ForkJoinObservable.create = function () {
	        var sources = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            sources[_i - 0] = arguments[_i];
	        }
	        if (sources === null || arguments.length === 0) {
	            return new EmptyObservable_1.EmptyObservable();
	        }
	        var resultSelector = null;
	        if (typeof sources[sources.length - 1] === 'function') {
	            resultSelector = sources.pop();
	        }
	        // if the first and only other argument besides the resultSelector is an array
	        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`
	        if (sources.length === 1 && isArray_1.isArray(sources[0])) {
	            sources = sources[0];
	        }
	        if (sources.length === 0) {
	            return new EmptyObservable_1.EmptyObservable();
	        }
	        return new ForkJoinObservable(sources, resultSelector);
	    };
	    ForkJoinObservable.prototype._subscribe = function (subscriber) {
	        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
	    };
	    return ForkJoinObservable;
	}(Observable_1.Observable));
	exports.ForkJoinObservable = ForkJoinObservable;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ForkJoinSubscriber = (function (_super) {
	    __extends(ForkJoinSubscriber, _super);
	    function ForkJoinSubscriber(destination, sources, resultSelector) {
	        _super.call(this, destination);
	        this.sources = sources;
	        this.resultSelector = resultSelector;
	        this.completed = 0;
	        this.haveValues = 0;
	        var len = sources.length;
	        this.total = len;
	        this.values = new Array(len);
	        for (var i = 0; i < len; i++) {
	            var source = sources[i];
	            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
	            if (innerSubscription) {
	                innerSubscription.outerIndex = i;
	                this.add(innerSubscription);
	            }
	        }
	    }
	    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.values[outerIndex] = innerValue;
	        if (!innerSub._hasValue) {
	            innerSub._hasValue = true;
	            this.haveValues++;
	        }
	    };
	    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
	        var destination = this.destination;
	        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;
	        var len = values.length;
	        if (!innerSub._hasValue) {
	            destination.complete();
	            return;
	        }
	        this.completed++;
	        if (this.completed !== len) {
	            return;
	        }
	        if (haveValues === len) {
	            var value = resultSelector ? resultSelector.apply(this, values) : values;
	            destination.next(value);
	        }
	        destination.complete();
	    };
	    return ForkJoinSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=ForkJoinObservable.js.map

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var from_1 = __webpack_require__(69);
	Observable_1.Observable.from = from_1.from;
	//# sourceMappingURL=from.js.map

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var FromObservable_1 = __webpack_require__(70);
	exports.from = FromObservable_1.FromObservable.create;
	//# sourceMappingURL=from.js.map

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isArray_1 = __webpack_require__(17);
	var isPromise_1 = __webpack_require__(53);
	var PromiseObservable_1 = __webpack_require__(71);
	var IteratorObservable_1 = __webpack_require__(72);
	var ArrayObservable_1 = __webpack_require__(47);
	var ArrayLikeObservable_1 = __webpack_require__(73);
	var iterator_1 = __webpack_require__(54);
	var Observable_1 = __webpack_require__(11);
	var observeOn_1 = __webpack_require__(74);
	var observable_1 = __webpack_require__(24);
	var isArrayLike = (function (x) { return x && typeof x.length === 'number'; });
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var FromObservable = (function (_super) {
	    __extends(FromObservable, _super);
	    function FromObservable(ish, scheduler) {
	        _super.call(this, null);
	        this.ish = ish;
	        this.scheduler = scheduler;
	    }
	    /**
	     * Creates an Observable from an Array, an array-like object, a Promise, an
	     * iterable object, or an Observable-like object.
	     *
	     * <span class="informal">Converts almost anything to an Observable.</span>
	     *
	     * <img src="./img/from.png" width="100%">
	     *
	     * Convert various other objects and data types into Observables. `from`
	     * converts a Promise or an array-like or an
	     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
	     * object into an Observable that emits the items in that promise or array or
	     * iterable. A String, in this context, is treated as an array of characters.
	     * Observable-like objects (contains a function named with the ES2015 Symbol
	     * for Observable) can also be converted through this operator.
	     *
	     * @example <caption>Converts an array to an Observable</caption>
	     * var array = [10, 20, 30];
	     * var result = Rx.Observable.from(array);
	     * result.subscribe(x => console.log(x));
	     *
	     * // Results in the following:
	     * // 10 20 30
	     *
	     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
	     * function* generateDoubles(seed) {
	     *   var i = seed;
	     *   while (true) {
	     *     yield i;
	     *     i = 2 * i; // double it
	     *   }
	     * }
	     *
	     * var iterator = generateDoubles(3);
	     * var result = Rx.Observable.from(iterator).take(10);
	     * result.subscribe(x => console.log(x));
	     *
	     * // Results in the following:
	     * // 3 6 12 24 48 96 192 384 768 1536
	     *
	     * @see {@link create}
	     * @see {@link fromEvent}
	     * @see {@link fromEventPattern}
	     * @see {@link fromPromise}
	     *
	     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
	     * Observable-like, an Array, an iterable or an array-like object to be
	     * converted.
	     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
	     * emissions of values.
	     * @return {Observable<T>} The Observable whose values are originally from the
	     * input object that was converted.
	     * @static true
	     * @name from
	     * @owner Observable
	     */
	    FromObservable.create = function (ish, scheduler) {
	        if (ish != null) {
	            if (typeof ish[observable_1.$$observable] === 'function') {
	                if (ish instanceof Observable_1.Observable && !scheduler) {
	                    return ish;
	                }
	                return new FromObservable(ish, scheduler);
	            }
	            else if (isArray_1.isArray(ish)) {
	                return new ArrayObservable_1.ArrayObservable(ish, scheduler);
	            }
	            else if (isPromise_1.isPromise(ish)) {
	                return new PromiseObservable_1.PromiseObservable(ish, scheduler);
	            }
	            else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {
	                return new IteratorObservable_1.IteratorObservable(ish, scheduler);
	            }
	            else if (isArrayLike(ish)) {
	                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
	            }
	        }
	        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
	    };
	    FromObservable.prototype._subscribe = function (subscriber) {
	        var ish = this.ish;
	        var scheduler = this.scheduler;
	        if (scheduler == null) {
	            return ish[observable_1.$$observable]().subscribe(subscriber);
	        }
	        else {
	            return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
	        }
	    };
	    return FromObservable;
	}(Observable_1.Observable));
	exports.FromObservable = FromObservable;
	//# sourceMappingURL=FromObservable.js.map

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var root_1 = __webpack_require__(12);
	var Observable_1 = __webpack_require__(11);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var PromiseObservable = (function (_super) {
	    __extends(PromiseObservable, _super);
	    function PromiseObservable(promise, scheduler) {
	        _super.call(this);
	        this.promise = promise;
	        this.scheduler = scheduler;
	    }
	    /**
	     * Converts a Promise to an Observable.
	     *
	     * <span class="informal">Returns an Observable that just emits the Promise's
	     * resolved value, then completes.</span>
	     *
	     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
	     * Observable. If the Promise resolves with a value, the output Observable
	     * emits that resolved value as a `next`, and then completes. If the Promise
	     * is rejected, then the output Observable emits the corresponding Error.
	     *
	     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
	     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
	     * result.subscribe(x => console.log(x), e => console.error(e));
	     *
	     * @see {@link bindCallback}
	     * @see {@link from}
	     *
	     * @param {Promise<T>} promise The promise to be converted.
	     * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling
	     * the delivery of the resolved value (or the rejection).
	     * @return {Observable<T>} An Observable which wraps the Promise.
	     * @static true
	     * @name fromPromise
	     * @owner Observable
	     */
	    PromiseObservable.create = function (promise, scheduler) {
	        return new PromiseObservable(promise, scheduler);
	    };
	    PromiseObservable.prototype._subscribe = function (subscriber) {
	        var _this = this;
	        var promise = this.promise;
	        var scheduler = this.scheduler;
	        if (scheduler == null) {
	            if (this._isScalar) {
	                if (!subscriber.closed) {
	                    subscriber.next(this.value);
	                    subscriber.complete();
	                }
	            }
	            else {
	                promise.then(function (value) {
	                    _this.value = value;
	                    _this._isScalar = true;
	                    if (!subscriber.closed) {
	                        subscriber.next(value);
	                        subscriber.complete();
	                    }
	                }, function (err) {
	                    if (!subscriber.closed) {
	                        subscriber.error(err);
	                    }
	                })
	                    .then(null, function (err) {
	                    // escape the promise trap, throw unhandled errors
	                    root_1.root.setTimeout(function () { throw err; });
	                });
	            }
	        }
	        else {
	            if (this._isScalar) {
	                if (!subscriber.closed) {
	                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
	                }
	            }
	            else {
	                promise.then(function (value) {
	                    _this.value = value;
	                    _this._isScalar = true;
	                    if (!subscriber.closed) {
	                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
	                    }
	                }, function (err) {
	                    if (!subscriber.closed) {
	                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
	                    }
	                })
	                    .then(null, function (err) {
	                    // escape the promise trap, throw unhandled errors
	                    root_1.root.setTimeout(function () { throw err; });
	                });
	            }
	        }
	    };
	    return PromiseObservable;
	}(Observable_1.Observable));
	exports.PromiseObservable = PromiseObservable;
	function dispatchNext(arg) {
	    var value = arg.value, subscriber = arg.subscriber;
	    if (!subscriber.closed) {
	        subscriber.next(value);
	        subscriber.complete();
	    }
	}
	function dispatchError(arg) {
	    var err = arg.err, subscriber = arg.subscriber;
	    if (!subscriber.closed) {
	        subscriber.error(err);
	    }
	}
	//# sourceMappingURL=PromiseObservable.js.map

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var root_1 = __webpack_require__(12);
	var Observable_1 = __webpack_require__(11);
	var iterator_1 = __webpack_require__(54);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var IteratorObservable = (function (_super) {
	    __extends(IteratorObservable, _super);
	    function IteratorObservable(iterator, scheduler) {
	        _super.call(this);
	        this.scheduler = scheduler;
	        if (iterator == null) {
	            throw new Error('iterator cannot be null.');
	        }
	        this.iterator = getIterator(iterator);
	    }
	    IteratorObservable.create = function (iterator, scheduler) {
	        return new IteratorObservable(iterator, scheduler);
	    };
	    IteratorObservable.dispatch = function (state) {
	        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;
	        if (hasError) {
	            subscriber.error(state.error);
	            return;
	        }
	        var result = iterator.next();
	        if (result.done) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(result.value);
	        state.index = index + 1;
	        if (subscriber.closed) {
	            if (typeof iterator.return === 'function') {
	                iterator.return();
	            }
	            return;
	        }
	        this.schedule(state);
	    };
	    IteratorObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(IteratorObservable.dispatch, 0, {
	                index: index, iterator: iterator, subscriber: subscriber
	            });
	        }
	        else {
	            do {
	                var result = iterator.next();
	                if (result.done) {
	                    subscriber.complete();
	                    break;
	                }
	                else {
	                    subscriber.next(result.value);
	                }
	                if (subscriber.closed) {
	                    if (typeof iterator.return === 'function') {
	                        iterator.return();
	                    }
	                    break;
	                }
	            } while (true);
	        }
	    };
	    return IteratorObservable;
	}(Observable_1.Observable));
	exports.IteratorObservable = IteratorObservable;
	var StringIterator = (function () {
	    function StringIterator(str, idx, len) {
	        if (idx === void 0) { idx = 0; }
	        if (len === void 0) { len = str.length; }
	        this.str = str;
	        this.idx = idx;
	        this.len = len;
	    }
	    StringIterator.prototype[iterator_1.$$iterator] = function () { return (this); };
	    StringIterator.prototype.next = function () {
	        return this.idx < this.len ? {
	            done: false,
	            value: this.str.charAt(this.idx++)
	        } : {
	            done: true,
	            value: undefined
	        };
	    };
	    return StringIterator;
	}());
	var ArrayIterator = (function () {
	    function ArrayIterator(arr, idx, len) {
	        if (idx === void 0) { idx = 0; }
	        if (len === void 0) { len = toLength(arr); }
	        this.arr = arr;
	        this.idx = idx;
	        this.len = len;
	    }
	    ArrayIterator.prototype[iterator_1.$$iterator] = function () { return this; };
	    ArrayIterator.prototype.next = function () {
	        return this.idx < this.len ? {
	            done: false,
	            value: this.arr[this.idx++]
	        } : {
	            done: true,
	            value: undefined
	        };
	    };
	    return ArrayIterator;
	}());
	function getIterator(obj) {
	    var i = obj[iterator_1.$$iterator];
	    if (!i && typeof obj === 'string') {
	        return new StringIterator(obj);
	    }
	    if (!i && obj.length !== undefined) {
	        return new ArrayIterator(obj);
	    }
	    if (!i) {
	        throw new TypeError('object is not iterable');
	    }
	    return obj[iterator_1.$$iterator]();
	}
	var maxSafeInteger = Math.pow(2, 53) - 1;
	function toLength(o) {
	    var len = +o.length;
	    if (isNaN(len)) {
	        return 0;
	    }
	    if (len === 0 || !numberIsFinite(len)) {
	        return len;
	    }
	    len = sign(len) * Math.floor(Math.abs(len));
	    if (len <= 0) {
	        return 0;
	    }
	    if (len > maxSafeInteger) {
	        return maxSafeInteger;
	    }
	    return len;
	}
	function numberIsFinite(value) {
	    return typeof value === 'number' && root_1.root.isFinite(value);
	}
	function sign(value) {
	    var valueAsNumber = +value;
	    if (valueAsNumber === 0) {
	        return valueAsNumber;
	    }
	    if (isNaN(valueAsNumber)) {
	        return valueAsNumber;
	    }
	    return valueAsNumber < 0 ? -1 : 1;
	}
	//# sourceMappingURL=IteratorObservable.js.map

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var ScalarObservable_1 = __webpack_require__(48);
	var EmptyObservable_1 = __webpack_require__(49);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ArrayLikeObservable = (function (_super) {
	    __extends(ArrayLikeObservable, _super);
	    function ArrayLikeObservable(arrayLike, scheduler) {
	        _super.call(this);
	        this.arrayLike = arrayLike;
	        this.scheduler = scheduler;
	        if (!scheduler && arrayLike.length === 1) {
	            this._isScalar = true;
	            this.value = arrayLike[0];
	        }
	    }
	    ArrayLikeObservable.create = function (arrayLike, scheduler) {
	        var length = arrayLike.length;
	        if (length === 0) {
	            return new EmptyObservable_1.EmptyObservable();
	        }
	        else if (length === 1) {
	            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
	        }
	        else {
	            return new ArrayLikeObservable(arrayLike, scheduler);
	        }
	    };
	    ArrayLikeObservable.dispatch = function (state) {
	        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;
	        if (subscriber.closed) {
	            return;
	        }
	        if (index >= length) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(arrayLike[index]);
	        state.index = index + 1;
	        this.schedule(state);
	    };
	    ArrayLikeObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;
	        var length = arrayLike.length;
	        if (scheduler) {
	            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
	                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
	            });
	        }
	        else {
	            for (var i = 0; i < length && !subscriber.closed; i++) {
	                subscriber.next(arrayLike[i]);
	            }
	            subscriber.complete();
	        }
	    };
	    return ArrayLikeObservable;
	}(Observable_1.Observable));
	exports.ArrayLikeObservable = ArrayLikeObservable;
	//# sourceMappingURL=ArrayLikeObservable.js.map

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var Notification_1 = __webpack_require__(75);
	/**
	 * @see {@link Notification}
	 *
	 * @param scheduler
	 * @param delay
	 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
	 * @method observeOn
	 * @owner Observable
	 */
	function observeOn(scheduler, delay) {
	    if (delay === void 0) { delay = 0; }
	    return this.lift(new ObserveOnOperator(scheduler, delay));
	}
	exports.observeOn = observeOn;
	var ObserveOnOperator = (function () {
	    function ObserveOnOperator(scheduler, delay) {
	        if (delay === void 0) { delay = 0; }
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    ObserveOnOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
	    };
	    return ObserveOnOperator;
	}());
	exports.ObserveOnOperator = ObserveOnOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ObserveOnSubscriber = (function (_super) {
	    __extends(ObserveOnSubscriber, _super);
	    function ObserveOnSubscriber(destination, scheduler, delay) {
	        if (delay === void 0) { delay = 0; }
	        _super.call(this, destination);
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    ObserveOnSubscriber.dispatch = function (arg) {
	        var notification = arg.notification, destination = arg.destination;
	        notification.observe(destination);
	    };
	    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
	        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
	    };
	    ObserveOnSubscriber.prototype._next = function (value) {
	        this.scheduleMessage(Notification_1.Notification.createNext(value));
	    };
	    ObserveOnSubscriber.prototype._error = function (err) {
	        this.scheduleMessage(Notification_1.Notification.createError(err));
	    };
	    ObserveOnSubscriber.prototype._complete = function () {
	        this.scheduleMessage(Notification_1.Notification.createComplete());
	    };
	    return ObserveOnSubscriber;
	}(Subscriber_1.Subscriber));
	exports.ObserveOnSubscriber = ObserveOnSubscriber;
	var ObserveOnMessage = (function () {
	    function ObserveOnMessage(notification, destination) {
	        this.notification = notification;
	        this.destination = destination;
	    }
	    return ObserveOnMessage;
	}());
	exports.ObserveOnMessage = ObserveOnMessage;
	//# sourceMappingURL=observeOn.js.map

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	/**
	 * Represents a push-based event or value that an {@link Observable} can emit.
	 * This class is particularly useful for operators that manage notifications,
	 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
	 * others. Besides wrapping the actual delivered value, it also annotates it
	 * with metadata of, for instance, what type of push message it is (`next`,
	 * `error`, or `complete`).
	 *
	 * @see {@link materialize}
	 * @see {@link dematerialize}
	 * @see {@link observeOn}
	 *
	 * @class Notification<T>
	 */
	var Notification = (function () {
	    function Notification(kind, value, error) {
	        this.kind = kind;
	        this.value = value;
	        this.error = error;
	        this.hasValue = kind === 'N';
	    }
	    /**
	     * Delivers to the given `observer` the value wrapped by this Notification.
	     * @param {Observer} observer
	     * @return
	     */
	    Notification.prototype.observe = function (observer) {
	        switch (this.kind) {
	            case 'N':
	                return observer.next && observer.next(this.value);
	            case 'E':
	                return observer.error && observer.error(this.error);
	            case 'C':
	                return observer.complete && observer.complete();
	        }
	    };
	    /**
	     * Given some {@link Observer} callbacks, deliver the value represented by the
	     * current Notification to the correctly corresponding callback.
	     * @param {function(value: T): void} next An Observer `next` callback.
	     * @param {function(err: any): void} [error] An Observer `error` callback.
	     * @param {function(): void} [complete] An Observer `complete` callback.
	     * @return {any}
	     */
	    Notification.prototype.do = function (next, error, complete) {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return next && next(this.value);
	            case 'E':
	                return error && error(this.error);
	            case 'C':
	                return complete && complete();
	        }
	    };
	    /**
	     * Takes an Observer or its individual callback functions, and calls `observe`
	     * or `do` methods accordingly.
	     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
	     * the `next` callback.
	     * @param {function(err: any): void} [error] An Observer `error` callback.
	     * @param {function(): void} [complete] An Observer `complete` callback.
	     * @return {any}
	     */
	    Notification.prototype.accept = function (nextOrObserver, error, complete) {
	        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
	            return this.observe(nextOrObserver);
	        }
	        else {
	            return this.do(nextOrObserver, error, complete);
	        }
	    };
	    /**
	     * Returns a simple Observable that just delivers the notification represented
	     * by this Notification instance.
	     * @return {any}
	     */
	    Notification.prototype.toObservable = function () {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return Observable_1.Observable.of(this.value);
	            case 'E':
	                return Observable_1.Observable.throw(this.error);
	            case 'C':
	                return Observable_1.Observable.empty();
	        }
	        throw new Error('unexpected notification kind value');
	    };
	    /**
	     * A shortcut to create a Notification instance of the type `next` from a
	     * given value.
	     * @param {T} value The `next` value.
	     * @return {Notification<T>} The "next" Notification representing the
	     * argument.
	     */
	    Notification.createNext = function (value) {
	        if (typeof value !== 'undefined') {
	            return new Notification('N', value);
	        }
	        return this.undefinedValueNotification;
	    };
	    /**
	     * A shortcut to create a Notification instance of the type `error` from a
	     * given error.
	     * @param {any} [err] The `error` error.
	     * @return {Notification<T>} The "error" Notification representing the
	     * argument.
	     */
	    Notification.createError = function (err) {
	        return new Notification('E', undefined, err);
	    };
	    /**
	     * A shortcut to create a Notification instance of the type `complete`.
	     * @return {Notification<any>} The valueless "complete" Notification.
	     */
	    Notification.createComplete = function () {
	        return this.completeNotification;
	    };
	    Notification.completeNotification = new Notification('C');
	    Notification.undefinedValueNotification = new Notification('N', undefined);
	    return Notification;
	}());
	exports.Notification = Notification;
	//# sourceMappingURL=Notification.js.map

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var fromEventPattern_1 = __webpack_require__(77);
	Observable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;
	//# sourceMappingURL=fromEventPattern.js.map

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var FromEventPatternObservable_1 = __webpack_require__(78);
	exports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;
	//# sourceMappingURL=fromEventPattern.js.map

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var Subscription_1 = __webpack_require__(16);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var FromEventPatternObservable = (function (_super) {
	    __extends(FromEventPatternObservable, _super);
	    function FromEventPatternObservable(addHandler, removeHandler, selector) {
	        _super.call(this);
	        this.addHandler = addHandler;
	        this.removeHandler = removeHandler;
	        this.selector = selector;
	    }
	    /**
	     * Creates an Observable from an API based on addHandler/removeHandler
	     * functions.
	     *
	     * <span class="informal">Converts any addHandler/removeHandler API to an
	     * Observable.</span>
	     *
	     * <img src="./img/fromEventPattern.png" width="100%">
	     *
	     * Creates an Observable by using the `addHandler` and `removeHandler`
	     * functions to add and remove the handlers, with an optional selector
	     * function to project the event arguments to a result. The `addHandler` is
	     * called when the output Observable is subscribed, and `removeHandler` is
	     * called when the Subscription is unsubscribed.
	     *
	     * @example <caption>Emits clicks happening on the DOM document</caption>
	     * function addClickHandler(handler) {
	     *   document.addEventListener('click', handler);
	     * }
	     *
	     * function removeClickHandler(handler) {
	     *   document.removeEventListener('click', handler);
	     * }
	     *
	     * var clicks = Rx.Observable.fromEventPattern(
	     *   addClickHandler,
	     *   removeClickHandler
	     * );
	     * clicks.subscribe(x => console.log(x));
	     *
	     * @see {@link from}
	     * @see {@link fromEvent}
	     *
	     * @param {function(handler: Function): any} addHandler A function that takes
	     * a `handler` function as argument and attaches it somehow to the actual
	     * source of events.
	     * @param {function(handler: Function): void} removeHandler A function that
	     * takes a `handler` function as argument and removes it in case it was
	     * previously attached using `addHandler`.
	     * @param {function(...args: any): T} [selector] An optional function to
	     * post-process results. It takes the arguments from the event handler and
	     * should return a single value.
	     * @return {Observable<T>}
	     * @static true
	     * @name fromEventPattern
	     * @owner Observable
	     */
	    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {
	        return new FromEventPatternObservable(addHandler, removeHandler, selector);
	    };
	    FromEventPatternObservable.prototype._subscribe = function (subscriber) {
	        var _this = this;
	        var removeHandler = this.removeHandler;
	        var handler = !!this.selector ? function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            _this._callSelector(subscriber, args);
	        } : function (e) { subscriber.next(e); };
	        this._callAddHandler(handler, subscriber);
	        subscriber.add(new Subscription_1.Subscription(function () {
	            //TODO: determine whether or not to forward to error handler
	            removeHandler(handler);
	        }));
	    };
	    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {
	        try {
	            var result = this.selector.apply(this, args);
	            subscriber.next(result);
	        }
	        catch (e) {
	            subscriber.error(e);
	        }
	    };
	    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {
	        try {
	            this.addHandler(handler);
	        }
	        catch (e) {
	            errorSubscriber.error(e);
	        }
	    };
	    return FromEventPatternObservable;
	}(Observable_1.Observable));
	exports.FromEventPatternObservable = FromEventPatternObservable;
	//# sourceMappingURL=FromEventPatternObservable.js.map

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var fromPromise_1 = __webpack_require__(80);
	Observable_1.Observable.fromPromise = fromPromise_1.fromPromise;
	//# sourceMappingURL=fromPromise.js.map

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var PromiseObservable_1 = __webpack_require__(71);
	exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
	//# sourceMappingURL=fromPromise.js.map

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var GenerateObservable_1 = __webpack_require__(82);
	Observable_1.Observable.generate = GenerateObservable_1.GenerateObservable.create;
	//# sourceMappingURL=generate.js.map

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var isScheduler_1 = __webpack_require__(46);
	var selfSelector = function (value) { return value; };
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var GenerateObservable = (function (_super) {
	    __extends(GenerateObservable, _super);
	    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {
	        _super.call(this);
	        this.initialState = initialState;
	        this.condition = condition;
	        this.iterate = iterate;
	        this.resultSelector = resultSelector;
	        this.scheduler = scheduler;
	    }
	    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
	        if (arguments.length == 1) {
	            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);
	        }
	        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {
	            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);
	        }
	        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);
	    };
	    GenerateObservable.prototype._subscribe = function (subscriber) {
	        var state = this.initialState;
	        if (this.scheduler) {
	            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {
	                subscriber: subscriber,
	                iterate: this.iterate,
	                condition: this.condition,
	                resultSelector: this.resultSelector,
	                state: state });
	        }
	        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;
	        do {
	            if (condition) {
	                var conditionResult = void 0;
	                try {
	                    conditionResult = condition(state);
	                }
	                catch (err) {
	                    subscriber.error(err);
	                    return;
	                }
	                if (!conditionResult) {
	                    subscriber.complete();
	                    break;
	                }
	            }
	            var value = void 0;
	            try {
	                value = resultSelector(state);
	            }
	            catch (err) {
	                subscriber.error(err);
	                return;
	            }
	            subscriber.next(value);
	            if (subscriber.closed) {
	                break;
	            }
	            try {
	                state = iterate(state);
	            }
	            catch (err) {
	                subscriber.error(err);
	                return;
	            }
	        } while (true);
	    };
	    GenerateObservable.dispatch = function (state) {
	        var subscriber = state.subscriber, condition = state.condition;
	        if (subscriber.closed) {
	            return;
	        }
	        if (state.needIterate) {
	            try {
	                state.state = state.iterate(state.state);
	            }
	            catch (err) {
	                subscriber.error(err);
	                return;
	            }
	        }
	        else {
	            state.needIterate = true;
	        }
	        if (condition) {
	            var conditionResult = void 0;
	            try {
	                conditionResult = condition(state.state);
	            }
	            catch (err) {
	                subscriber.error(err);
	                return;
	            }
	            if (!conditionResult) {
	                subscriber.complete();
	                return;
	            }
	            if (subscriber.closed) {
	                return;
	            }
	        }
	        var value;
	        try {
	            value = state.resultSelector(state.state);
	        }
	        catch (err) {
	            subscriber.error(err);
	            return;
	        }
	        if (subscriber.closed) {
	            return;
	        }
	        subscriber.next(value);
	        if (subscriber.closed) {
	            return;
	        }
	        return this.schedule(state);
	    };
	    return GenerateObservable;
	}(Observable_1.Observable));
	exports.GenerateObservable = GenerateObservable;
	//# sourceMappingURL=GenerateObservable.js.map

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var if_1 = __webpack_require__(84);
	Observable_1.Observable.if = if_1._if;
	//# sourceMappingURL=if.js.map

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var IfObservable_1 = __webpack_require__(85);
	exports._if = IfObservable_1.IfObservable.create;
	//# sourceMappingURL=if.js.map

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var subscribeToResult_1 = __webpack_require__(52);
	var OuterSubscriber_1 = __webpack_require__(51);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var IfObservable = (function (_super) {
	    __extends(IfObservable, _super);
	    function IfObservable(condition, thenSource, elseSource) {
	        _super.call(this);
	        this.condition = condition;
	        this.thenSource = thenSource;
	        this.elseSource = elseSource;
	    }
	    IfObservable.create = function (condition, thenSource, elseSource) {
	        return new IfObservable(condition, thenSource, elseSource);
	    };
	    IfObservable.prototype._subscribe = function (subscriber) {
	        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;
	        return new IfSubscriber(subscriber, condition, thenSource, elseSource);
	    };
	    return IfObservable;
	}(Observable_1.Observable));
	exports.IfObservable = IfObservable;
	var IfSubscriber = (function (_super) {
	    __extends(IfSubscriber, _super);
	    function IfSubscriber(destination, condition, thenSource, elseSource) {
	        _super.call(this, destination);
	        this.condition = condition;
	        this.thenSource = thenSource;
	        this.elseSource = elseSource;
	        this.tryIf();
	    }
	    IfSubscriber.prototype.tryIf = function () {
	        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;
	        var result;
	        try {
	            result = condition();
	            var source = result ? thenSource : elseSource;
	            if (source) {
	                this.add(subscribeToResult_1.subscribeToResult(this, source));
	            }
	            else {
	                this._complete();
	            }
	        }
	        catch (err) {
	            this._error(err);
	        }
	    };
	    return IfSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=IfObservable.js.map

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var interval_1 = __webpack_require__(87);
	Observable_1.Observable.interval = interval_1.interval;
	//# sourceMappingURL=interval.js.map

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var IntervalObservable_1 = __webpack_require__(88);
	exports.interval = IntervalObservable_1.IntervalObservable.create;
	//# sourceMappingURL=interval.js.map

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isNumeric_1 = __webpack_require__(89);
	var Observable_1 = __webpack_require__(11);
	var async_1 = __webpack_require__(90);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var IntervalObservable = (function (_super) {
	    __extends(IntervalObservable, _super);
	    function IntervalObservable(period, scheduler) {
	        if (period === void 0) { period = 0; }
	        if (scheduler === void 0) { scheduler = async_1.async; }
	        _super.call(this);
	        this.period = period;
	        this.scheduler = scheduler;
	        if (!isNumeric_1.isNumeric(period) || period < 0) {
	            this.period = 0;
	        }
	        if (!scheduler || typeof scheduler.schedule !== 'function') {
	            this.scheduler = async_1.async;
	        }
	    }
	    /**
	     * Creates an Observable that emits sequential numbers every specified
	     * interval of time, on a specified Scheduler.
	     *
	     * <span class="informal">Emits incremental numbers periodically in time.
	     * </span>
	     *
	     * <img src="./img/interval.png" width="100%">
	     *
	     * `interval` returns an Observable that emits an infinite sequence of
	     * ascending integers, with a constant interval of time of your choosing
	     * between those emissions. The first emission is not sent immediately, but
	     * only after the first period has passed. By default, this operator uses the
	     * `async` Scheduler to provide a notion of time, but you may pass any
	     * Scheduler to it.
	     *
	     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>
	     * var numbers = Rx.Observable.interval(1000);
	     * numbers.subscribe(x => console.log(x));
	     *
	     * @see {@link timer}
	     * @see {@link delay}
	     *
	     * @param {number} [period=0] The interval size in milliseconds (by default)
	     * or the time unit determined by the scheduler's clock.
	     * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling
	     * the emission of values, and providing a notion of "time".
	     * @return {Observable} An Observable that emits a sequential number each time
	     * interval.
	     * @static true
	     * @name interval
	     * @owner Observable
	     */
	    IntervalObservable.create = function (period, scheduler) {
	        if (period === void 0) { period = 0; }
	        if (scheduler === void 0) { scheduler = async_1.async; }
	        return new IntervalObservable(period, scheduler);
	    };
	    IntervalObservable.dispatch = function (state) {
	        var index = state.index, subscriber = state.subscriber, period = state.period;
	        subscriber.next(index);
	        if (subscriber.closed) {
	            return;
	        }
	        state.index += 1;
	        this.schedule(state, period);
	    };
	    IntervalObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var period = this.period;
	        var scheduler = this.scheduler;
	        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {
	            index: index, subscriber: subscriber, period: period
	        }));
	    };
	    return IntervalObservable;
	}(Observable_1.Observable));
	exports.IntervalObservable = IntervalObservable;
	//# sourceMappingURL=IntervalObservable.js.map

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var isArray_1 = __webpack_require__(17);
	function isNumeric(val) {
	    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
	    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
	    // subtraction forces infinities to NaN
	    // adding 1 corrects loss of precision from parseFloat (#15100)
	    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;
	}
	exports.isNumeric = isNumeric;
	;
	//# sourceMappingURL=isNumeric.js.map

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var AsyncAction_1 = __webpack_require__(91);
	var AsyncScheduler_1 = __webpack_require__(93);
	exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
	//# sourceMappingURL=async.js.map

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var root_1 = __webpack_require__(12);
	var Action_1 = __webpack_require__(92);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var AsyncAction = (function (_super) {
	    __extends(AsyncAction, _super);
	    function AsyncAction(scheduler, work) {
	        _super.call(this, scheduler, work);
	        this.scheduler = scheduler;
	        this.work = work;
	        this.pending = false;
	    }
	    AsyncAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (this.closed) {
	            return this;
	        }
	        // Always replace the current state with the new state.
	        this.state = state;
	        // Set the pending flag indicating that this action has been scheduled, or
	        // has recursively rescheduled itself.
	        this.pending = true;
	        var id = this.id;
	        var scheduler = this.scheduler;
	        //
	        // Important implementation note:
	        //
	        // Actions only execute once by default, unless rescheduled from within the
	        // scheduled callback. This allows us to implement single and repeat
	        // actions via the same code path, without adding API surface area, as well
	        // as mimic traditional recursion but across asynchronous boundaries.
	        //
	        // However, JS runtimes and timers distinguish between intervals achieved by
	        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
	        // serial `setTimeout` calls can be individually delayed, which delays
	        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
	        // guarantee the interval callback will be invoked more precisely to the
	        // interval period, regardless of load.
	        //
	        // Therefore, we use `setInterval` to schedule single and repeat actions.
	        // If the action reschedules itself with the same delay, the interval is not
	        // canceled. If the action doesn't reschedule, or reschedules with a
	        // different delay, the interval will be canceled after scheduled callback
	        // execution.
	        //
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, delay);
	        }
	        this.delay = delay;
	        // If this action has already an async Id, don't request a new one.
	        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
	        return this;
	    };
	    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
	    };
	    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        // If this action is rescheduled with the same delay time, don't clear the interval id.
	        if (delay !== null && this.delay === delay) {
	            return id;
	        }
	        // Otherwise, if the action's delay time is different from the current delay,
	        // clear the interval id
	        return root_1.root.clearInterval(id) && undefined || undefined;
	    };
	    /**
	     * Immediately executes this action and the `work` it contains.
	     * @return {any}
	     */
	    AsyncAction.prototype.execute = function (state, delay) {
	        if (this.closed) {
	            return new Error('executing a cancelled action');
	        }
	        this.pending = false;
	        var error = this._execute(state, delay);
	        if (error) {
	            return error;
	        }
	        else if (this.pending === false && this.id != null) {
	            // Dequeue if the action didn't reschedule itself. Don't call
	            // unsubscribe(), because the action could reschedule later.
	            // For example:
	            // ```
	            // scheduler.schedule(function doWork(counter) {
	            //   /* ... I'm a busy worker bee ... */
	            //   var originalAction = this;
	            //   /* wait 100ms before rescheduling the action */
	            //   setTimeout(function () {
	            //     originalAction.schedule(counter + 1);
	            //   }, 100);
	            // }, 1000);
	            // ```
	            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
	        }
	    };
	    AsyncAction.prototype._execute = function (state, delay) {
	        var errored = false;
	        var errorValue = undefined;
	        try {
	            this.work(state);
	        }
	        catch (e) {
	            errored = true;
	            errorValue = !!e && e || new Error(e);
	        }
	        if (errored) {
	            this.unsubscribe();
	            return errorValue;
	        }
	    };
	    AsyncAction.prototype._unsubscribe = function () {
	        var id = this.id;
	        var scheduler = this.scheduler;
	        var actions = scheduler.actions;
	        var index = actions.indexOf(this);
	        this.work = null;
	        this.delay = null;
	        this.state = null;
	        this.pending = false;
	        this.scheduler = null;
	        if (index !== -1) {
	            actions.splice(index, 1);
	        }
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, null);
	        }
	    };
	    return AsyncAction;
	}(Action_1.Action));
	exports.AsyncAction = AsyncAction;
	//# sourceMappingURL=AsyncAction.js.map

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(16);
	/**
	 * A unit of work to be executed in a {@link Scheduler}. An action is typically
	 * created from within a Scheduler and an RxJS user does not need to concern
	 * themselves about creating and manipulating an Action.
	 *
	 * ```ts
	 * class Action<T> extends Subscription {
	 *   new (scheduler: Scheduler, work: (state?: T) => void);
	 *   schedule(state?: T, delay: number = 0): Subscription;
	 * }
	 * ```
	 *
	 * @class Action<T>
	 */
	var Action = (function (_super) {
	    __extends(Action, _super);
	    function Action(scheduler, work) {
	        _super.call(this);
	    }
	    /**
	     * Schedules this action on its parent Scheduler for execution. May be passed
	     * some context object, `state`. May happen at some point in the future,
	     * according to the `delay` parameter, if specified.
	     * @param {T} [state] Some contextual data that the `work` function uses when
	     * called by the Scheduler.
	     * @param {number} [delay] Time to wait before executing the work, where the
	     * time unit is implicit and defined by the Scheduler.
	     * @return {void}
	     */
	    Action.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        return this;
	    };
	    return Action;
	}(Subscription_1.Subscription));
	exports.Action = Action;
	//# sourceMappingURL=Action.js.map

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Scheduler_1 = __webpack_require__(94);
	var AsyncScheduler = (function (_super) {
	    __extends(AsyncScheduler, _super);
	    function AsyncScheduler() {
	        _super.apply(this, arguments);
	        this.actions = [];
	        /**
	         * A flag to indicate whether the Scheduler is currently executing a batch of
	         * queued actions.
	         * @type {boolean}
	         */
	        this.active = false;
	        /**
	         * An internal ID used to track the latest asynchronous task such as those
	         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
	         * others.
	         * @type {any}
	         */
	        this.scheduled = undefined;
	    }
	    AsyncScheduler.prototype.flush = function (action) {
	        var actions = this.actions;
	        if (this.active) {
	            actions.push(action);
	            return;
	        }
	        var error;
	        this.active = true;
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (action = actions.shift()); // exhaust the scheduler queue
	        this.active = false;
	        if (error) {
	            while (action = actions.shift()) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsyncScheduler;
	}(Scheduler_1.Scheduler));
	exports.AsyncScheduler = AsyncScheduler;
	//# sourceMappingURL=AsyncScheduler.js.map

/***/ },
/* 94 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * An execution context and a data structure to order tasks and schedule their
	 * execution. Provides a notion of (potentially virtual) time, through the
	 * `now()` getter method.
	 *
	 * Each unit of work in a Scheduler is called an {@link Action}.
	 *
	 * ```ts
	 * class Scheduler {
	 *   now(): number;
	 *   schedule(work, delay?, state?): Subscription;
	 * }
	 * ```
	 *
	 * @class Scheduler
	 */
	var Scheduler = (function () {
	    function Scheduler(SchedulerAction, now) {
	        if (now === void 0) { now = Scheduler.now; }
	        this.SchedulerAction = SchedulerAction;
	        this.now = now;
	    }
	    /**
	     * Schedules a function, `work`, for execution. May happen at some point in
	     * the future, according to the `delay` parameter, if specified. May be passed
	     * some context object, `state`, which will be passed to the `work` function.
	     *
	     * The given arguments will be processed an stored as an Action object in a
	     * queue of actions.
	     *
	     * @param {function(state: ?T): ?Subscription} work A function representing a
	     * task, or some unit of work to be executed by the Scheduler.
	     * @param {number} [delay] Time to wait before executing the work, where the
	     * time unit is implicit and defined by the Scheduler itself.
	     * @param {T} [state] Some contextual data that the `work` function uses when
	     * called by the Scheduler.
	     * @return {Subscription} A subscription in order to be able to unsubscribe
	     * the scheduled work.
	     */
	    Scheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) { delay = 0; }
	        return new this.SchedulerAction(this, work).schedule(state, delay);
	    };
	    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
	    return Scheduler;
	}());
	exports.Scheduler = Scheduler;
	//# sourceMappingURL=Scheduler.js.map

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var merge_1 = __webpack_require__(96);
	Observable_1.Observable.merge = merge_1.merge;
	//# sourceMappingURL=merge.js.map

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var merge_1 = __webpack_require__(97);
	exports.merge = merge_1.mergeStatic;
	//# sourceMappingURL=merge.js.map

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ArrayObservable_1 = __webpack_require__(47);
	var mergeAll_1 = __webpack_require__(59);
	var isScheduler_1 = __webpack_require__(46);
	/* tslint:disable:max-line-length */
	/**
	 * Creates an output Observable which concurrently emits all values from every
	 * given input Observable.
	 *
	 * <span class="informal">Flattens multiple Observables together by blending
	 * their values into one Observable.</span>
	 *
	 * <img src="./img/merge.png" width="100%">
	 *
	 * `merge` subscribes to each given input Observable (either the source or an
	 * Observable given as argument), and simply forwards (without doing any
	 * transformation) all the values from all the input Observables to the output
	 * Observable. The output Observable only completes once all input Observables
	 * have completed. Any error delivered by an input Observable will be immediately
	 * emitted on the output Observable.
	 *
	 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var timer = Rx.Observable.interval(1000);
	 * var clicksOrTimer = clicks.merge(timer);
	 * clicksOrTimer.subscribe(x => console.log(x));
	 *
	 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
	 * var timer1 = Rx.Observable.interval(1000).take(10);
	 * var timer2 = Rx.Observable.interval(2000).take(6);
	 * var timer3 = Rx.Observable.interval(500).take(10);
	 * var concurrent = 2; // the argument
	 * var merged = timer1.merge(timer2, timer3, concurrent);
	 * merged.subscribe(x => console.log(x));
	 *
	 * @see {@link mergeAll}
	 * @see {@link mergeMap}
	 * @see {@link mergeMapTo}
	 * @see {@link mergeScan}
	 *
	 * @param {Observable} other An input Observable to merge with the source
	 * Observable. More than one input Observables may be given as argument.
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
	 * Observables being subscribed to concurrently.
	 * @param {Scheduler} [scheduler=null] The Scheduler to use for managing
	 * concurrency of input Observables.
	 * @return {Observable} an Observable that emits items that are the result of
	 * every input Observable.
	 * @method merge
	 * @owner Observable
	 */
	function merge() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    return this.lift.call(mergeStatic.apply(void 0, [this].concat(observables)));
	}
	exports.merge = merge;
	/* tslint:enable:max-line-length */
	/**
	 * Creates an output Observable which concurrently emits all values from every
	 * given input Observable.
	 *
	 * <span class="informal">Flattens multiple Observables together by blending
	 * their values into one Observable.</span>
	 *
	 * <img src="./img/merge.png" width="100%">
	 *
	 * `merge` subscribes to each given input Observable (as arguments), and simply
	 * forwards (without doing any transformation) all the values from all the input
	 * Observables to the output Observable. The output Observable only completes
	 * once all input Observables have completed. Any error delivered by an input
	 * Observable will be immediately emitted on the output Observable.
	 *
	 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var timer = Rx.Observable.interval(1000);
	 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
	 * clicksOrTimer.subscribe(x => console.log(x));
	 *
	 * // Results in the following:
	 * // timer will emit ascending values, one every second(1000ms) to console
	 * // clicks logs MouseEvents to console everytime the "document" is clicked
	 * // Since the two streams are merged you see these happening
	 * // as they occur.
	 *
	 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
	 * var timer1 = Rx.Observable.interval(1000).take(10);
	 * var timer2 = Rx.Observable.interval(2000).take(6);
	 * var timer3 = Rx.Observable.interval(500).take(10);
	 * var concurrent = 2; // the argument
	 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
	 * merged.subscribe(x => console.log(x));
	 *
	 * // Results in the following:
	 * // - First timer1 and timer2 will run concurrently
	 * // - timer1 will emit a value every 1000ms for 10 iterations
	 * // - timer2 will emit a value every 2000ms for 6 iterations
	 * // - after timer1 hits it's max iteration, timer2 will
	 * //   continue, and timer3 will start to run concurrently with timer2
	 * // - when timer2 hits it's max iteration it terminates, and
	 * //   timer3 will continue to emit a value every 500ms until it is complete
	 *
	 * @see {@link mergeAll}
	 * @see {@link mergeMap}
	 * @see {@link mergeMapTo}
	 * @see {@link mergeScan}
	 *
	 * @param {...Observable} observables Input Observables to merge together.
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
	 * Observables being subscribed to concurrently.
	 * @param {Scheduler} [scheduler=null] The Scheduler to use for managing
	 * concurrency of input Observables.
	 * @return {Observable} an Observable that emits items that are the result of
	 * every input Observable.
	 * @static true
	 * @name merge
	 * @owner Observable
	 */
	function mergeStatic() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var concurrent = Number.POSITIVE_INFINITY;
	    var scheduler = null;
	    var last = observables[observables.length - 1];
	    if (isScheduler_1.isScheduler(last)) {
	        scheduler = observables.pop();
	        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
	            concurrent = observables.pop();
	        }
	    }
	    else if (typeof last === 'number') {
	        concurrent = observables.pop();
	    }
	    if (scheduler === null && observables.length === 1) {
	        return observables[0];
	    }
	    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
	}
	exports.mergeStatic = mergeStatic;
	//# sourceMappingURL=merge.js.map

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var race_1 = __webpack_require__(99);
	Observable_1.Observable.race = race_1.raceStatic;
	//# sourceMappingURL=race.js.map

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isArray_1 = __webpack_require__(17);
	var ArrayObservable_1 = __webpack_require__(47);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/* tslint:disable:max-line-length */
	/**
	 * Returns an Observable that mirrors the first source Observable to emit an item
	 * from the combination of this Observable and supplied Observables
	 * @param {...Observables} ...observables sources used to race for which Observable emits first.
	 * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.
	 * @method race
	 * @owner Observable
	 */
	function race() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    // if the only argument is an array, it was most likely called with
	    // `pair([obs1, obs2, ...])`
	    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
	        observables = observables[0];
	    }
	    return this.lift.call(raceStatic.apply(void 0, [this].concat(observables)));
	}
	exports.race = race;
	function raceStatic() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    // if the only argument is an array, it was most likely called with
	    // `pair([obs1, obs2, ...])`
	    if (observables.length === 1) {
	        if (isArray_1.isArray(observables[0])) {
	            observables = observables[0];
	        }
	        else {
	            return observables[0];
	        }
	    }
	    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());
	}
	exports.raceStatic = raceStatic;
	var RaceOperator = (function () {
	    function RaceOperator() {
	    }
	    RaceOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RaceSubscriber(subscriber));
	    };
	    return RaceOperator;
	}());
	exports.RaceOperator = RaceOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var RaceSubscriber = (function (_super) {
	    __extends(RaceSubscriber, _super);
	    function RaceSubscriber(destination) {
	        _super.call(this, destination);
	        this.hasFirst = false;
	        this.observables = [];
	        this.subscriptions = [];
	    }
	    RaceSubscriber.prototype._next = function (observable) {
	        this.observables.push(observable);
	    };
	    RaceSubscriber.prototype._complete = function () {
	        var observables = this.observables;
	        var len = observables.length;
	        if (len === 0) {
	            this.destination.complete();
	        }
	        else {
	            for (var i = 0; i < len && !this.hasFirst; i++) {
	                var observable = observables[i];
	                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
	                if (this.subscriptions) {
	                    this.subscriptions.push(subscription);
	                }
	                this.add(subscription);
	            }
	            this.observables = null;
	        }
	    };
	    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        if (!this.hasFirst) {
	            this.hasFirst = true;
	            for (var i = 0; i < this.subscriptions.length; i++) {
	                if (i !== outerIndex) {
	                    var subscription = this.subscriptions[i];
	                    subscription.unsubscribe();
	                    this.remove(subscription);
	                }
	            }
	            this.subscriptions = null;
	        }
	        this.destination.next(innerValue);
	    };
	    return RaceSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	exports.RaceSubscriber = RaceSubscriber;
	//# sourceMappingURL=race.js.map

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var never_1 = __webpack_require__(101);
	Observable_1.Observable.never = never_1.never;
	//# sourceMappingURL=never.js.map

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var NeverObservable_1 = __webpack_require__(102);
	exports.never = NeverObservable_1.NeverObservable.create;
	//# sourceMappingURL=never.js.map

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var noop_1 = __webpack_require__(103);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var NeverObservable = (function (_super) {
	    __extends(NeverObservable, _super);
	    function NeverObservable() {
	        _super.call(this);
	    }
	    /**
	     * Creates an Observable that emits no items to the Observer.
	     *
	     * <span class="informal">An Observable that never emits anything.</span>
	     *
	     * <img src="./img/never.png" width="100%">
	     *
	     * This static operator is useful for creating a simple Observable that emits
	     * neither values nor errors nor the completion notification. It can be used
	     * for testing purposes or for composing with other Observables. Please not
	     * that by never emitting a complete notification, this Observable keeps the
	     * subscription from being disposed automatically. Subscriptions need to be
	     * manually disposed.
	     *
	     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>
	     * function info() {
	     *   console.log('Will not be called');
	     * }
	     * var result = Rx.Observable.never().startWith(7);
	     * result.subscribe(x => console.log(x), info, info);
	     *
	     * @see {@link create}
	     * @see {@link empty}
	     * @see {@link of}
	     * @see {@link throw}
	     *
	     * @return {Observable} A "never" Observable: never emits anything.
	     * @static true
	     * @name never
	     * @owner Observable
	     */
	    NeverObservable.create = function () {
	        return new NeverObservable();
	    };
	    NeverObservable.prototype._subscribe = function (subscriber) {
	        noop_1.noop();
	    };
	    return NeverObservable;
	}(Observable_1.Observable));
	exports.NeverObservable = NeverObservable;
	//# sourceMappingURL=NeverObservable.js.map

/***/ },
/* 103 */
/***/ function(module, exports) {

	"use strict";
	/* tslint:disable:no-empty */
	function noop() { }
	exports.noop = noop;
	//# sourceMappingURL=noop.js.map

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var of_1 = __webpack_require__(105);
	Observable_1.Observable.of = of_1.of;
	//# sourceMappingURL=of.js.map

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ArrayObservable_1 = __webpack_require__(47);
	exports.of = ArrayObservable_1.ArrayObservable.of;
	//# sourceMappingURL=of.js.map

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var onErrorResumeNext_1 = __webpack_require__(107);
	Observable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;
	//# sourceMappingURL=onErrorResumeNext.js.map

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var FromObservable_1 = __webpack_require__(70);
	var isArray_1 = __webpack_require__(17);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/* tslint:disable:max-line-length */
	function onErrorResumeNext() {
	    var nextSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        nextSources[_i - 0] = arguments[_i];
	    }
	    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
	        nextSources = nextSources[0];
	    }
	    return this.lift(new OnErrorResumeNextOperator(nextSources));
	}
	exports.onErrorResumeNext = onErrorResumeNext;
	/* tslint:enable:max-line-length */
	function onErrorResumeNextStatic() {
	    var nextSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        nextSources[_i - 0] = arguments[_i];
	    }
	    var source = null;
	    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
	        nextSources = nextSources[0];
	    }
	    source = nextSources.shift();
	    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));
	}
	exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
	var OnErrorResumeNextOperator = (function () {
	    function OnErrorResumeNextOperator(nextSources) {
	        this.nextSources = nextSources;
	    }
	    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
	    };
	    return OnErrorResumeNextOperator;
	}());
	var OnErrorResumeNextSubscriber = (function (_super) {
	    __extends(OnErrorResumeNextSubscriber, _super);
	    function OnErrorResumeNextSubscriber(destination, nextSources) {
	        _super.call(this, destination);
	        this.destination = destination;
	        this.nextSources = nextSources;
	    }
	    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
	        this.subscribeToNextSource();
	    };
	    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.subscribeToNextSource();
	    };
	    OnErrorResumeNextSubscriber.prototype._error = function (err) {
	        this.subscribeToNextSource();
	    };
	    OnErrorResumeNextSubscriber.prototype._complete = function () {
	        this.subscribeToNextSource();
	    };
	    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
	        var next = this.nextSources.shift();
	        if (next) {
	            this.add(subscribeToResult_1.subscribeToResult(this, next));
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    return OnErrorResumeNextSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=onErrorResumeNext.js.map

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var pairs_1 = __webpack_require__(109);
	Observable_1.Observable.pairs = pairs_1.pairs;
	//# sourceMappingURL=pairs.js.map

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var PairsObservable_1 = __webpack_require__(110);
	exports.pairs = PairsObservable_1.PairsObservable.create;
	//# sourceMappingURL=pairs.js.map

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	function dispatch(state) {
	    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;
	    if (index === length) {
	        subscriber.complete();
	        return;
	    }
	    var key = keys[index];
	    subscriber.next([key, obj[key]]);
	    state.index = index + 1;
	    this.schedule(state);
	}
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var PairsObservable = (function (_super) {
	    __extends(PairsObservable, _super);
	    function PairsObservable(obj, scheduler) {
	        _super.call(this);
	        this.obj = obj;
	        this.scheduler = scheduler;
	        this.keys = Object.keys(obj);
	    }
	    /**
	     * Convert an object into an observable sequence of [key, value] pairs
	     * using an optional Scheduler to enumerate the object.
	     *
	     * @example <caption>Converts a javascript object to an Observable</caption>
	     * var obj = {
	     *   foo: 42,
	     *   bar: 56,
	     *   baz: 78
	     * };
	     *
	     * var source = Rx.Observable.pairs(obj);
	     *
	     * var subscription = source.subscribe(
	     *   function (x) {
	     *     console.log('Next: %s', x);
	     *   },
	     *   function (err) {
	     *     console.log('Error: %s', err);
	     *   },
	     *   function () {
	     *     console.log('Completed');
	     *   });
	     *
	     * @param {Object} obj The object to inspect and turn into an
	     * Observable sequence.
	     * @param {Scheduler} [scheduler] An optional Scheduler to run the
	     * enumeration of the input sequence on.
	     * @returns {(Observable<Array<string | T>>)} An observable sequence of
	     * [key, value] pairs from the object.
	     */
	    PairsObservable.create = function (obj, scheduler) {
	        return new PairsObservable(obj, scheduler);
	    };
	    PairsObservable.prototype._subscribe = function (subscriber) {
	        var _a = this, keys = _a.keys, scheduler = _a.scheduler;
	        var length = keys.length;
	        if (scheduler) {
	            return scheduler.schedule(dispatch, 0, {
	                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber
	            });
	        }
	        else {
	            for (var idx = 0; idx < length; idx++) {
	                var key = keys[idx];
	                subscriber.next([key, this.obj[key]]);
	            }
	            subscriber.complete();
	        }
	    };
	    return PairsObservable;
	}(Observable_1.Observable));
	exports.PairsObservable = PairsObservable;
	//# sourceMappingURL=PairsObservable.js.map

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var range_1 = __webpack_require__(112);
	Observable_1.Observable.range = range_1.range;
	//# sourceMappingURL=range.js.map

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var RangeObservable_1 = __webpack_require__(113);
	exports.range = RangeObservable_1.RangeObservable.create;
	//# sourceMappingURL=range.js.map

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var RangeObservable = (function (_super) {
	    __extends(RangeObservable, _super);
	    function RangeObservable(start, count, scheduler) {
	        _super.call(this);
	        this.start = start;
	        this._count = count;
	        this.scheduler = scheduler;
	    }
	    /**
	     * Creates an Observable that emits a sequence of numbers within a specified
	     * range.
	     *
	     * <span class="informal">Emits a sequence of numbers in a range.</span>
	     *
	     * <img src="./img/range.png" width="100%">
	     *
	     * `range` operator emits a range of sequential integers, in order, where you
	     * select the `start` of the range and its `length`. By default, uses no
	     * Scheduler and just delivers the notifications synchronously, but may use
	     * an optional Scheduler to regulate those deliveries.
	     *
	     * @example <caption>Emits the numbers 1 to 10</caption>
	     * var numbers = Rx.Observable.range(1, 10);
	     * numbers.subscribe(x => console.log(x));
	     *
	     * @see {@link timer}
	     * @see {@link interval}
	     *
	     * @param {number} [start=0] The value of the first integer in the sequence.
	     * @param {number} [count=0] The number of sequential integers to generate.
	     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
	     * the emissions of the notifications.
	     * @return {Observable} An Observable of numbers that emits a finite range of
	     * sequential integers.
	     * @static true
	     * @name range
	     * @owner Observable
	     */
	    RangeObservable.create = function (start, count, scheduler) {
	        if (start === void 0) { start = 0; }
	        if (count === void 0) { count = 0; }
	        return new RangeObservable(start, count, scheduler);
	    };
	    RangeObservable.dispatch = function (state) {
	        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
	        if (index >= count) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(start);
	        if (subscriber.closed) {
	            return;
	        }
	        state.index = index + 1;
	        state.start = start + 1;
	        this.schedule(state);
	    };
	    RangeObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var start = this.start;
	        var count = this._count;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(RangeObservable.dispatch, 0, {
	                index: index, count: count, start: start, subscriber: subscriber
	            });
	        }
	        else {
	            do {
	                if (index++ >= count) {
	                    subscriber.complete();
	                    break;
	                }
	                subscriber.next(start++);
	                if (subscriber.closed) {
	                    break;
	                }
	            } while (true);
	        }
	    };
	    return RangeObservable;
	}(Observable_1.Observable));
	exports.RangeObservable = RangeObservable;
	//# sourceMappingURL=RangeObservable.js.map

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var using_1 = __webpack_require__(115);
	Observable_1.Observable.using = using_1.using;
	//# sourceMappingURL=using.js.map

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var UsingObservable_1 = __webpack_require__(116);
	exports.using = UsingObservable_1.UsingObservable.create;
	//# sourceMappingURL=using.js.map

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var subscribeToResult_1 = __webpack_require__(52);
	var OuterSubscriber_1 = __webpack_require__(51);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var UsingObservable = (function (_super) {
	    __extends(UsingObservable, _super);
	    function UsingObservable(resourceFactory, observableFactory) {
	        _super.call(this);
	        this.resourceFactory = resourceFactory;
	        this.observableFactory = observableFactory;
	    }
	    UsingObservable.create = function (resourceFactory, observableFactory) {
	        return new UsingObservable(resourceFactory, observableFactory);
	    };
	    UsingObservable.prototype._subscribe = function (subscriber) {
	        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;
	        var resource;
	        try {
	            resource = resourceFactory();
	            return new UsingSubscriber(subscriber, resource, observableFactory);
	        }
	        catch (err) {
	            subscriber.error(err);
	        }
	    };
	    return UsingObservable;
	}(Observable_1.Observable));
	exports.UsingObservable = UsingObservable;
	var UsingSubscriber = (function (_super) {
	    __extends(UsingSubscriber, _super);
	    function UsingSubscriber(destination, resource, observableFactory) {
	        _super.call(this, destination);
	        this.resource = resource;
	        this.observableFactory = observableFactory;
	        destination.add(resource);
	        this.tryUse();
	    }
	    UsingSubscriber.prototype.tryUse = function () {
	        try {
	            var source = this.observableFactory.call(this, this.resource);
	            if (source) {
	                this.add(subscribeToResult_1.subscribeToResult(this, source));
	            }
	        }
	        catch (err) {
	            this._error(err);
	        }
	    };
	    return UsingSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=UsingObservable.js.map

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var throw_1 = __webpack_require__(118);
	Observable_1.Observable.throw = throw_1._throw;
	//# sourceMappingURL=throw.js.map

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ErrorObservable_1 = __webpack_require__(119);
	exports._throw = ErrorObservable_1.ErrorObservable.create;
	//# sourceMappingURL=throw.js.map

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ErrorObservable = (function (_super) {
	    __extends(ErrorObservable, _super);
	    function ErrorObservable(error, scheduler) {
	        _super.call(this);
	        this.error = error;
	        this.scheduler = scheduler;
	    }
	    /**
	     * Creates an Observable that emits no items to the Observer and immediately
	     * emits an error notification.
	     *
	     * <span class="informal">Just emits 'error', and nothing else.
	     * </span>
	     *
	     * <img src="./img/throw.png" width="100%">
	     *
	     * This static operator is useful for creating a simple Observable that only
	     * emits the error notification. It can be used for composing with other
	     * Observables, such as in a {@link mergeMap}.
	     *
	     * @example <caption>Emit the number 7, then emit an error.</caption>
	     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);
	     * result.subscribe(x => console.log(x), e => console.error(e));
	     *
	     * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
	     * var interval = Rx.Observable.interval(1000);
	     * var result = interval.mergeMap(x =>
	     *   x === 13 ?
	     *     Rx.Observable.throw('Thirteens are bad') :
	     *     Rx.Observable.of('a', 'b', 'c')
	     * );
	     * result.subscribe(x => console.log(x), e => console.error(e));
	     *
	     * @see {@link create}
	     * @see {@link empty}
	     * @see {@link never}
	     * @see {@link of}
	     *
	     * @param {any} error The particular Error to pass to the error notification.
	     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
	     * the emission of the error notification.
	     * @return {Observable} An error Observable: emits only the error notification
	     * using the given error argument.
	     * @static true
	     * @name throw
	     * @owner Observable
	     */
	    ErrorObservable.create = function (error, scheduler) {
	        return new ErrorObservable(error, scheduler);
	    };
	    ErrorObservable.dispatch = function (arg) {
	        var error = arg.error, subscriber = arg.subscriber;
	        subscriber.error(error);
	    };
	    ErrorObservable.prototype._subscribe = function (subscriber) {
	        var error = this.error;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(ErrorObservable.dispatch, 0, {
	                error: error, subscriber: subscriber
	            });
	        }
	        else {
	            subscriber.error(error);
	        }
	    };
	    return ErrorObservable;
	}(Observable_1.Observable));
	exports.ErrorObservable = ErrorObservable;
	//# sourceMappingURL=ErrorObservable.js.map

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var timer_1 = __webpack_require__(121);
	Observable_1.Observable.timer = timer_1.timer;
	//# sourceMappingURL=timer.js.map

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var TimerObservable_1 = __webpack_require__(122);
	exports.timer = TimerObservable_1.TimerObservable.create;
	//# sourceMappingURL=timer.js.map

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isNumeric_1 = __webpack_require__(89);
	var Observable_1 = __webpack_require__(11);
	var async_1 = __webpack_require__(90);
	var isScheduler_1 = __webpack_require__(46);
	var isDate_1 = __webpack_require__(123);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var TimerObservable = (function (_super) {
	    __extends(TimerObservable, _super);
	    function TimerObservable(dueTime, period, scheduler) {
	        if (dueTime === void 0) { dueTime = 0; }
	        _super.call(this);
	        this.period = -1;
	        this.dueTime = 0;
	        if (isNumeric_1.isNumeric(period)) {
	            this.period = Number(period) < 1 && 1 || Number(period);
	        }
	        else if (isScheduler_1.isScheduler(period)) {
	            scheduler = period;
	        }
	        if (!isScheduler_1.isScheduler(scheduler)) {
	            scheduler = async_1.async;
	        }
	        this.scheduler = scheduler;
	        this.dueTime = isDate_1.isDate(dueTime) ?
	            (+dueTime - this.scheduler.now()) :
	            dueTime;
	    }
	    /**
	     * Creates an Observable that starts emitting after an `initialDelay` and
	     * emits ever increasing numbers after each `period` of time thereafter.
	     *
	     * <span class="informal">Its like {@link interval}, but you can specify when
	     * should the emissions start.</span>
	     *
	     * <img src="./img/timer.png" width="100%">
	     *
	     * `timer` returns an Observable that emits an infinite sequence of ascending
	     * integers, with a constant interval of time, `period` of your choosing
	     * between those emissions. The first emission happens after the specified
	     * `initialDelay`. The initial delay may be a {@link Date}. By default, this
	     * operator uses the `async` Scheduler to provide a notion of time, but you
	     * may pass any Scheduler to it. If `period` is not specified, the output
	     * Observable emits only one value, `0`. Otherwise, it emits an infinite
	     * sequence.
	     *
	     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>
	     * var numbers = Rx.Observable.timer(3000, 1000);
	     * numbers.subscribe(x => console.log(x));
	     *
	     * @example <caption>Emits one number after five seconds</caption>
	     * var numbers = Rx.Observable.timer(5000);
	     * numbers.subscribe(x => console.log(x));
	     *
	     * @see {@link interval}
	     * @see {@link delay}
	     *
	     * @param {number|Date} initialDelay The initial delay time to wait before
	     * emitting the first value of `0`.
	     * @param {number} [period] The period of time between emissions of the
	     * subsequent numbers.
	     * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling
	     * the emission of values, and providing a notion of "time".
	     * @return {Observable} An Observable that emits a `0` after the
	     * `initialDelay` and ever increasing numbers after each `period` of time
	     * thereafter.
	     * @static true
	     * @name timer
	     * @owner Observable
	     */
	    TimerObservable.create = function (initialDelay, period, scheduler) {
	        if (initialDelay === void 0) { initialDelay = 0; }
	        return new TimerObservable(initialDelay, period, scheduler);
	    };
	    TimerObservable.dispatch = function (state) {
	        var index = state.index, period = state.period, subscriber = state.subscriber;
	        var action = this;
	        subscriber.next(index);
	        if (subscriber.closed) {
	            return;
	        }
	        else if (period === -1) {
	            return subscriber.complete();
	        }
	        state.index = index + 1;
	        action.schedule(state, period);
	    };
	    TimerObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;
	        return scheduler.schedule(TimerObservable.dispatch, dueTime, {
	            index: index, period: period, subscriber: subscriber
	        });
	    };
	    return TimerObservable;
	}(Observable_1.Observable));
	exports.TimerObservable = TimerObservable;
	//# sourceMappingURL=TimerObservable.js.map

/***/ },
/* 123 */
/***/ function(module, exports) {

	"use strict";
	function isDate(value) {
	    return value instanceof Date && !isNaN(+value);
	}
	exports.isDate = isDate;
	//# sourceMappingURL=isDate.js.map

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var zip_1 = __webpack_require__(125);
	Observable_1.Observable.zip = zip_1.zip;
	//# sourceMappingURL=zip.js.map

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var zip_1 = __webpack_require__(126);
	exports.zip = zip_1.zipStatic;
	//# sourceMappingURL=zip.js.map

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ArrayObservable_1 = __webpack_require__(47);
	var isArray_1 = __webpack_require__(17);
	var Subscriber_1 = __webpack_require__(14);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	var iterator_1 = __webpack_require__(54);
	/* tslint:disable:max-line-length */
	/**
	 * @param observables
	 * @return {Observable<R>}
	 * @method zip
	 * @owner Observable
	 */
	function zipProto() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    return this.lift.call(zipStatic.apply(void 0, [this].concat(observables)));
	}
	exports.zipProto = zipProto;
	/* tslint:enable:max-line-length */
	/**
	 * @param observables
	 * @return {Observable<R>}
	 * @static true
	 * @name zip
	 * @owner Observable
	 */
	function zipStatic() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var project = observables[observables.length - 1];
	    if (typeof project === 'function') {
	        observables.pop();
	    }
	    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));
	}
	exports.zipStatic = zipStatic;
	var ZipOperator = (function () {
	    function ZipOperator(project) {
	        this.project = project;
	    }
	    ZipOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ZipSubscriber(subscriber, this.project));
	    };
	    return ZipOperator;
	}());
	exports.ZipOperator = ZipOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ZipSubscriber = (function (_super) {
	    __extends(ZipSubscriber, _super);
	    function ZipSubscriber(destination, project, values) {
	        if (values === void 0) { values = Object.create(null); }
	        _super.call(this, destination);
	        this.iterators = [];
	        this.active = 0;
	        this.project = (typeof project === 'function') ? project : null;
	        this.values = values;
	    }
	    ZipSubscriber.prototype._next = function (value) {
	        var iterators = this.iterators;
	        if (isArray_1.isArray(value)) {
	            iterators.push(new StaticArrayIterator(value));
	        }
	        else if (typeof value[iterator_1.$$iterator] === 'function') {
	            iterators.push(new StaticIterator(value[iterator_1.$$iterator]()));
	        }
	        else {
	            iterators.push(new ZipBufferIterator(this.destination, this, value));
	        }
	    };
	    ZipSubscriber.prototype._complete = function () {
	        var iterators = this.iterators;
	        var len = iterators.length;
	        this.active = len;
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            if (iterator.stillUnsubscribed) {
	                this.add(iterator.subscribe(iterator, i));
	            }
	            else {
	                this.active--; // not an observable
	            }
	        }
	    };
	    ZipSubscriber.prototype.notifyInactive = function () {
	        this.active--;
	        if (this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    ZipSubscriber.prototype.checkIterators = function () {
	        var iterators = this.iterators;
	        var len = iterators.length;
	        var destination = this.destination;
	        // abort if not all of them have values
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
	                return;
	            }
	        }
	        var shouldComplete = false;
	        var args = [];
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            var result = iterator.next();
	            // check to see if it's completed now that you've gotten
	            // the next value.
	            if (iterator.hasCompleted()) {
	                shouldComplete = true;
	            }
	            if (result.done) {
	                destination.complete();
	                return;
	            }
	            args.push(result.value);
	        }
	        if (this.project) {
	            this._tryProject(args);
	        }
	        else {
	            destination.next(args);
	        }
	        if (shouldComplete) {
	            destination.complete();
	        }
	    };
	    ZipSubscriber.prototype._tryProject = function (args) {
	        var result;
	        try {
	            result = this.project.apply(this, args);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return ZipSubscriber;
	}(Subscriber_1.Subscriber));
	exports.ZipSubscriber = ZipSubscriber;
	var StaticIterator = (function () {
	    function StaticIterator(iterator) {
	        this.iterator = iterator;
	        this.nextResult = iterator.next();
	    }
	    StaticIterator.prototype.hasValue = function () {
	        return true;
	    };
	    StaticIterator.prototype.next = function () {
	        var result = this.nextResult;
	        this.nextResult = this.iterator.next();
	        return result;
	    };
	    StaticIterator.prototype.hasCompleted = function () {
	        var nextResult = this.nextResult;
	        return nextResult && nextResult.done;
	    };
	    return StaticIterator;
	}());
	var StaticArrayIterator = (function () {
	    function StaticArrayIterator(array) {
	        this.array = array;
	        this.index = 0;
	        this.length = 0;
	        this.length = array.length;
	    }
	    StaticArrayIterator.prototype[iterator_1.$$iterator] = function () {
	        return this;
	    };
	    StaticArrayIterator.prototype.next = function (value) {
	        var i = this.index++;
	        var array = this.array;
	        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
	    };
	    StaticArrayIterator.prototype.hasValue = function () {
	        return this.array.length > this.index;
	    };
	    StaticArrayIterator.prototype.hasCompleted = function () {
	        return this.array.length === this.index;
	    };
	    return StaticArrayIterator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ZipBufferIterator = (function (_super) {
	    __extends(ZipBufferIterator, _super);
	    function ZipBufferIterator(destination, parent, observable) {
	        _super.call(this, destination);
	        this.parent = parent;
	        this.observable = observable;
	        this.stillUnsubscribed = true;
	        this.buffer = [];
	        this.isComplete = false;
	    }
	    ZipBufferIterator.prototype[iterator_1.$$iterator] = function () {
	        return this;
	    };
	    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
	    //    this is legit because `next()` will never be called by a subscription in this case.
	    ZipBufferIterator.prototype.next = function () {
	        var buffer = this.buffer;
	        if (buffer.length === 0 && this.isComplete) {
	            return { value: null, done: true };
	        }
	        else {
	            return { value: buffer.shift(), done: false };
	        }
	    };
	    ZipBufferIterator.prototype.hasValue = function () {
	        return this.buffer.length > 0;
	    };
	    ZipBufferIterator.prototype.hasCompleted = function () {
	        return this.buffer.length === 0 && this.isComplete;
	    };
	    ZipBufferIterator.prototype.notifyComplete = function () {
	        if (this.buffer.length > 0) {
	            this.isComplete = true;
	            this.parent.notifyInactive();
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.buffer.push(innerValue);
	        this.parent.checkIterators();
	    };
	    ZipBufferIterator.prototype.subscribe = function (value, index) {
	        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
	    };
	    return ZipBufferIterator;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=zip.js.map

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var ajax_1 = __webpack_require__(128);
	Observable_1.Observable.ajax = ajax_1.ajax;
	//# sourceMappingURL=ajax.js.map

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var AjaxObservable_1 = __webpack_require__(129);
	exports.ajax = AjaxObservable_1.AjaxObservable.create;
	//# sourceMappingURL=ajax.js.map

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var root_1 = __webpack_require__(12);
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var Observable_1 = __webpack_require__(11);
	var Subscriber_1 = __webpack_require__(14);
	var map_1 = __webpack_require__(130);
	function getCORSRequest() {
	    if (root_1.root.XMLHttpRequest) {
	        var xhr = new root_1.root.XMLHttpRequest();
	        if ('withCredentials' in xhr) {
	            xhr.withCredentials = !!this.withCredentials;
	        }
	        return xhr;
	    }
	    else if (!!root_1.root.XDomainRequest) {
	        return new root_1.root.XDomainRequest();
	    }
	    else {
	        throw new Error('CORS is not supported by your browser');
	    }
	}
	function getXMLHttpRequest() {
	    if (root_1.root.XMLHttpRequest) {
	        return new root_1.root.XMLHttpRequest();
	    }
	    else {
	        var progId = void 0;
	        try {
	            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];
	            for (var i = 0; i < 3; i++) {
	                try {
	                    progId = progIds[i];
	                    if (new root_1.root.ActiveXObject(progId)) {
	                        break;
	                    }
	                }
	                catch (e) {
	                }
	            }
	            return new root_1.root.ActiveXObject(progId);
	        }
	        catch (e) {
	            throw new Error('XMLHttpRequest is not supported by your browser');
	        }
	    }
	}
	function ajaxGet(url, headers) {
	    if (headers === void 0) { headers = null; }
	    return new AjaxObservable({ method: 'GET', url: url, headers: headers });
	}
	exports.ajaxGet = ajaxGet;
	;
	function ajaxPost(url, body, headers) {
	    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });
	}
	exports.ajaxPost = ajaxPost;
	;
	function ajaxDelete(url, headers) {
	    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });
	}
	exports.ajaxDelete = ajaxDelete;
	;
	function ajaxPut(url, body, headers) {
	    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });
	}
	exports.ajaxPut = ajaxPut;
	;
	function ajaxGetJSON(url, headers) {
	    return new AjaxObservable({ method: 'GET', url: url, responseType: 'json', headers: headers })
	        .lift(new map_1.MapOperator(function (x, index) { return x.response; }, null));
	}
	exports.ajaxGetJSON = ajaxGetJSON;
	;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var AjaxObservable = (function (_super) {
	    __extends(AjaxObservable, _super);
	    function AjaxObservable(urlOrRequest) {
	        _super.call(this);
	        var request = {
	            async: true,
	            createXHR: function () {
	                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();
	            },
	            crossDomain: false,
	            withCredentials: false,
	            headers: {},
	            method: 'GET',
	            responseType: 'json',
	            timeout: 0
	        };
	        if (typeof urlOrRequest === 'string') {
	            request.url = urlOrRequest;
	        }
	        else {
	            for (var prop in urlOrRequest) {
	                if (urlOrRequest.hasOwnProperty(prop)) {
	                    request[prop] = urlOrRequest[prop];
	                }
	            }
	        }
	        this.request = request;
	    }
	    AjaxObservable.prototype._subscribe = function (subscriber) {
	        return new AjaxSubscriber(subscriber, this.request);
	    };
	    /**
	     * Creates an observable for an Ajax request with either a request object with
	     * url, headers, etc or a string for a URL.
	     *
	     * @example
	     * source = Rx.Observable.ajax('/products');
	     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });
	     *
	     * @param {string|Object} request Can be one of the following:
	     *   A string of the URL to make the Ajax call.
	     *   An object with the following properties
	     *   - url: URL of the request
	     *   - body: The body of the request
	     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE
	     *   - async: Whether the request is async
	     *   - headers: Optional headers
	     *   - crossDomain: true if a cross domain request, else false
	     *   - createXHR: a function to override if you need to use an alternate
	     *   XMLHttpRequest implementation.
	     *   - resultSelector: a function to use to alter the output value type of
	     *   the Observable. Gets {@link AjaxResponse} as an argument.
	     * @return {Observable} An observable sequence containing the XMLHttpRequest.
	     * @static true
	     * @name ajax
	     * @owner Observable
	    */
	    AjaxObservable.create = (function () {
	        var create = function (urlOrRequest) {
	            return new AjaxObservable(urlOrRequest);
	        };
	        create.get = ajaxGet;
	        create.post = ajaxPost;
	        create.delete = ajaxDelete;
	        create.put = ajaxPut;
	        create.getJSON = ajaxGetJSON;
	        return create;
	    })();
	    return AjaxObservable;
	}(Observable_1.Observable));
	exports.AjaxObservable = AjaxObservable;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var AjaxSubscriber = (function (_super) {
	    __extends(AjaxSubscriber, _super);
	    function AjaxSubscriber(destination, request) {
	        _super.call(this, destination);
	        this.request = request;
	        this.done = false;
	        var headers = request.headers = request.headers || {};
	        // force CORS if requested
	        if (!request.crossDomain && !headers['X-Requested-With']) {
	            headers['X-Requested-With'] = 'XMLHttpRequest';
	        }
	        // ensure content type is set
	        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {
	            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
	        }
	        // properly serialize body
	        request.body = this.serializeBody(request.body, request.headers['Content-Type']);
	        this.send();
	    }
	    AjaxSubscriber.prototype.next = function (e) {
	        this.done = true;
	        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;
	        var response = new AjaxResponse(e, xhr, request);
	        destination.next(response);
	    };
	    AjaxSubscriber.prototype.send = function () {
	        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;
	        var createXHR = request.createXHR;
	        var xhr = tryCatch_1.tryCatch(createXHR).call(request);
	        if (xhr === errorObject_1.errorObject) {
	            this.error(errorObject_1.errorObject.e);
	        }
	        else {
	            this.xhr = xhr;
	            // open XHR first
	            var result = void 0;
	            if (user) {
	                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);
	            }
	            else {
	                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);
	            }
	            if (result === errorObject_1.errorObject) {
	                this.error(errorObject_1.errorObject.e);
	                return null;
	            }
	            // timeout and responseType can be set once the XHR is open
	            xhr.timeout = request.timeout;
	            xhr.responseType = request.responseType;
	            // set headers
	            this.setHeaders(xhr, headers);
	            // now set up the events
	            this.setupEvents(xhr, request);
	            // finally send the request
	            result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);
	            if (result === errorObject_1.errorObject) {
	                this.error(errorObject_1.errorObject.e);
	                return null;
	            }
	        }
	        return xhr;
	    };
	    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {
	        if (!body || typeof body === 'string') {
	            return body;
	        }
	        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {
	            return body;
	        }
	        if (contentType) {
	            var splitIndex = contentType.indexOf(';');
	            if (splitIndex !== -1) {
	                contentType = contentType.substring(0, splitIndex);
	            }
	        }
	        switch (contentType) {
	            case 'application/x-www-form-urlencoded':
	                return Object.keys(body).map(function (key) { return (encodeURI(key) + "=" + encodeURI(body[key])); }).join('&');
	            case 'application/json':
	                return JSON.stringify(body);
	            default:
	                return body;
	        }
	    };
	    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {
	        for (var key in headers) {
	            if (headers.hasOwnProperty(key)) {
	                xhr.setRequestHeader(key, headers[key]);
	            }
	        }
	    };
	    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {
	        var progressSubscriber = request.progressSubscriber;
	        function xhrTimeout(e) {
	            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
	            if (progressSubscriber) {
	                progressSubscriber.error(e);
	            }
	            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.
	        }
	        ;
	        xhr.ontimeout = xhrTimeout;
	        xhrTimeout.request = request;
	        xhrTimeout.subscriber = this;
	        xhrTimeout.progressSubscriber = progressSubscriber;
	        if (xhr.upload && 'withCredentials' in xhr && root_1.root.XDomainRequest) {
	            if (progressSubscriber) {
	                var xhrProgress_1;
	                xhrProgress_1 = function (e) {
	                    var progressSubscriber = xhrProgress_1.progressSubscriber;
	                    progressSubscriber.next(e);
	                };
	                xhr.onprogress = xhrProgress_1;
	                xhrProgress_1.progressSubscriber = progressSubscriber;
	            }
	            var xhrError_1;
	            xhrError_1 = function (e) {
	                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;
	                if (progressSubscriber) {
	                    progressSubscriber.error(e);
	                }
	                subscriber.error(new AjaxError('ajax error', this, request));
	            };
	            xhr.onerror = xhrError_1;
	            xhrError_1.request = request;
	            xhrError_1.subscriber = this;
	            xhrError_1.progressSubscriber = progressSubscriber;
	        }
	        function xhrReadyStateChange(e) {
	            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
	            if (this.readyState === 4) {
	                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	                var status_1 = this.status === 1223 ? 204 : this.status;
	                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);
	                // fix status code when it is 0 (0 status is undocumented).
	                // Occurs when accessing file resources or on Android 4.1 stock browser
	                // while retrieving files from application cache.
	                if (status_1 === 0) {
	                    status_1 = response ? 200 : 0;
	                }
	                if (200 <= status_1 && status_1 < 300) {
	                    if (progressSubscriber) {
	                        progressSubscriber.complete();
	                    }
	                    subscriber.next(e);
	                    subscriber.complete();
	                }
	                else {
	                    if (progressSubscriber) {
	                        progressSubscriber.error(e);
	                    }
	                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));
	                }
	            }
	        }
	        ;
	        xhr.onreadystatechange = xhrReadyStateChange;
	        xhrReadyStateChange.subscriber = this;
	        xhrReadyStateChange.progressSubscriber = progressSubscriber;
	        xhrReadyStateChange.request = request;
	    };
	    AjaxSubscriber.prototype.unsubscribe = function () {
	        var _a = this, done = _a.done, xhr = _a.xhr;
	        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {
	            xhr.abort();
	        }
	        _super.prototype.unsubscribe.call(this);
	    };
	    return AjaxSubscriber;
	}(Subscriber_1.Subscriber));
	exports.AjaxSubscriber = AjaxSubscriber;
	/**
	 * A normalized AJAX response.
	 *
	 * @see {@link ajax}
	 *
	 * @class AjaxResponse
	 */
	var AjaxResponse = (function () {
	    function AjaxResponse(originalEvent, xhr, request) {
	        this.originalEvent = originalEvent;
	        this.xhr = xhr;
	        this.request = request;
	        this.status = xhr.status;
	        this.responseType = xhr.responseType || request.responseType;
	        switch (this.responseType) {
	            case 'json':
	                if ('response' in xhr) {
	                    //IE does not support json as responseType, parse it internally
	                    this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');
	                }
	                else {
	                    this.response = JSON.parse(xhr.responseText || 'null');
	                }
	                break;
	            case 'xml':
	                this.response = xhr.responseXML;
	                break;
	            case 'text':
	            default:
	                this.response = ('response' in xhr) ? xhr.response : xhr.responseText;
	                break;
	        }
	    }
	    return AjaxResponse;
	}());
	exports.AjaxResponse = AjaxResponse;
	/**
	 * A normalized AJAX error.
	 *
	 * @see {@link ajax}
	 *
	 * @class AjaxError
	 */
	var AjaxError = (function (_super) {
	    __extends(AjaxError, _super);
	    function AjaxError(message, xhr, request) {
	        _super.call(this, message);
	        this.message = message;
	        this.xhr = xhr;
	        this.request = request;
	        this.status = xhr.status;
	    }
	    return AjaxError;
	}(Error));
	exports.AjaxError = AjaxError;
	/**
	 * @see {@link ajax}
	 *
	 * @class AjaxTimeoutError
	 */
	var AjaxTimeoutError = (function (_super) {
	    __extends(AjaxTimeoutError, _super);
	    function AjaxTimeoutError(xhr, request) {
	        _super.call(this, 'ajax timeout', xhr, request);
	    }
	    return AjaxTimeoutError;
	}(AjaxError));
	exports.AjaxTimeoutError = AjaxTimeoutError;
	//# sourceMappingURL=AjaxObservable.js.map

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Applies a given `project` function to each value emitted by the source
	 * Observable, and emits the resulting values as an Observable.
	 *
	 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
	 * it passes each source value through a transformation function to get
	 * corresponding output values.</span>
	 *
	 * <img src="./img/map.png" width="100%">
	 *
	 * Similar to the well known `Array.prototype.map` function, this operator
	 * applies a projection to each value and emits that projection in the output
	 * Observable.
	 *
	 * @example <caption>Map every every click to the clientX position of that click</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var positions = clicks.map(ev => ev.clientX);
	 * positions.subscribe(x => console.log(x));
	 *
	 * @see {@link mapTo}
	 * @see {@link pluck}
	 *
	 * @param {function(value: T, index: number): R} project The function to apply
	 * to each `value` emitted by the source Observable. The `index` parameter is
	 * the number `i` for the i-th emission that has happened since the
	 * subscription, starting from the number `0`.
	 * @param {any} [thisArg] An optional argument to define what `this` is in the
	 * `project` function.
	 * @return {Observable<R>} An Observable that emits the values from the source
	 * Observable transformed by the given `project` function.
	 * @method map
	 * @owner Observable
	 */
	function map(project, thisArg) {
	    if (typeof project !== 'function') {
	        throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
	    }
	    return this.lift(new MapOperator(project, thisArg));
	}
	exports.map = map;
	var MapOperator = (function () {
	    function MapOperator(project, thisArg) {
	        this.project = project;
	        this.thisArg = thisArg;
	    }
	    MapOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
	    };
	    return MapOperator;
	}());
	exports.MapOperator = MapOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MapSubscriber = (function (_super) {
	    __extends(MapSubscriber, _super);
	    function MapSubscriber(destination, project, thisArg) {
	        _super.call(this, destination);
	        this.project = project;
	        this.count = 0;
	        this.thisArg = thisArg || this;
	    }
	    // NOTE: This looks unoptimized, but it's actually purposefully NOT
	    // using try/catch optimizations.
	    MapSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.project.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return MapSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=map.js.map

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var webSocket_1 = __webpack_require__(132);
	Observable_1.Observable.webSocket = webSocket_1.webSocket;
	//# sourceMappingURL=webSocket.js.map

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var WebSocketSubject_1 = __webpack_require__(133);
	exports.webSocket = WebSocketSubject_1.WebSocketSubject.create;
	//# sourceMappingURL=webSocket.js.map

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(34);
	var Subscriber_1 = __webpack_require__(14);
	var Observable_1 = __webpack_require__(11);
	var Subscription_1 = __webpack_require__(16);
	var root_1 = __webpack_require__(12);
	var ReplaySubject_1 = __webpack_require__(134);
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var assign_1 = __webpack_require__(138);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var WebSocketSubject = (function (_super) {
	    __extends(WebSocketSubject, _super);
	    function WebSocketSubject(urlConfigOrSource, destination) {
	        if (urlConfigOrSource instanceof Observable_1.Observable) {
	            _super.call(this, destination, urlConfigOrSource);
	        }
	        else {
	            _super.call(this);
	            this.WebSocketCtor = root_1.root.WebSocket;
	            this._output = new Subject_1.Subject();
	            if (typeof urlConfigOrSource === 'string') {
	                this.url = urlConfigOrSource;
	            }
	            else {
	                // WARNING: config object could override important members here.
	                assign_1.assign(this, urlConfigOrSource);
	            }
	            if (!this.WebSocketCtor) {
	                throw new Error('no WebSocket constructor can be found');
	            }
	            this.destination = new ReplaySubject_1.ReplaySubject();
	        }
	    }
	    WebSocketSubject.prototype.resultSelector = function (e) {
	        return JSON.parse(e.data);
	    };
	    /**
	     * @param urlConfigOrSource
	     * @return {WebSocketSubject}
	     * @static true
	     * @name webSocket
	     * @owner Observable
	     */
	    WebSocketSubject.create = function (urlConfigOrSource) {
	        return new WebSocketSubject(urlConfigOrSource);
	    };
	    WebSocketSubject.prototype.lift = function (operator) {
	        var sock = new WebSocketSubject(this, this.destination);
	        sock.operator = operator;
	        return sock;
	    };
	    WebSocketSubject.prototype._resetState = function () {
	        this.socket = null;
	        if (!this.source) {
	            this.destination = new ReplaySubject_1.ReplaySubject();
	        }
	        this._output = new Subject_1.Subject();
	    };
	    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures
	    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {
	        var self = this;
	        return new Observable_1.Observable(function (observer) {
	            var result = tryCatch_1.tryCatch(subMsg)();
	            if (result === errorObject_1.errorObject) {
	                observer.error(errorObject_1.errorObject.e);
	            }
	            else {
	                self.next(result);
	            }
	            var subscription = self.subscribe(function (x) {
	                var result = tryCatch_1.tryCatch(messageFilter)(x);
	                if (result === errorObject_1.errorObject) {
	                    observer.error(errorObject_1.errorObject.e);
	                }
	                else if (result) {
	                    observer.next(x);
	                }
	            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });
	            return function () {
	                var result = tryCatch_1.tryCatch(unsubMsg)();
	                if (result === errorObject_1.errorObject) {
	                    observer.error(errorObject_1.errorObject.e);
	                }
	                else {
	                    self.next(result);
	                }
	                subscription.unsubscribe();
	            };
	        });
	    };
	    WebSocketSubject.prototype._connectSocket = function () {
	        var _this = this;
	        var WebSocketCtor = this.WebSocketCtor;
	        var observer = this._output;
	        var socket = null;
	        try {
	            socket = this.protocol ?
	                new WebSocketCtor(this.url, this.protocol) :
	                new WebSocketCtor(this.url);
	            this.socket = socket;
	        }
	        catch (e) {
	            observer.error(e);
	            return;
	        }
	        var subscription = new Subscription_1.Subscription(function () {
	            _this.socket = null;
	            if (socket && socket.readyState === 1) {
	                socket.close();
	            }
	        });
	        socket.onopen = function (e) {
	            var openObserver = _this.openObserver;
	            if (openObserver) {
	                openObserver.next(e);
	            }
	            var queue = _this.destination;
	            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {
	                var closingObserver = _this.closingObserver;
	                if (closingObserver) {
	                    closingObserver.next(undefined);
	                }
	                if (e && e.code) {
	                    socket.close(e.code, e.reason);
	                }
	                else {
	                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +
	                        'and an optional reason: { code: number, reason: string }'));
	                }
	                _this._resetState();
	            }, function () {
	                var closingObserver = _this.closingObserver;
	                if (closingObserver) {
	                    closingObserver.next(undefined);
	                }
	                socket.close();
	                _this._resetState();
	            });
	            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {
	                subscription.add(queue.subscribe(_this.destination));
	            }
	        };
	        socket.onerror = function (e) {
	            _this._resetState();
	            observer.error(e);
	        };
	        socket.onclose = function (e) {
	            _this._resetState();
	            var closeObserver = _this.closeObserver;
	            if (closeObserver) {
	                closeObserver.next(e);
	            }
	            if (e.wasClean) {
	                observer.complete();
	            }
	            else {
	                observer.error(e);
	            }
	        };
	        socket.onmessage = function (e) {
	            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);
	            if (result === errorObject_1.errorObject) {
	                observer.error(errorObject_1.errorObject.e);
	            }
	            else {
	                observer.next(result);
	            }
	        };
	    };
	    WebSocketSubject.prototype._subscribe = function (subscriber) {
	        var _this = this;
	        var source = this.source;
	        if (source) {
	            return source.subscribe(subscriber);
	        }
	        if (!this.socket) {
	            this._connectSocket();
	        }
	        var subscription = new Subscription_1.Subscription();
	        subscription.add(this._output.subscribe(subscriber));
	        subscription.add(function () {
	            var socket = _this.socket;
	            if (_this._output.observers.length === 0) {
	                if (socket && socket.readyState === 1) {
	                    socket.close();
	                }
	                _this._resetState();
	            }
	        });
	        return subscription;
	    };
	    WebSocketSubject.prototype.unsubscribe = function () {
	        var _a = this, source = _a.source, socket = _a.socket;
	        if (socket && socket.readyState === 1) {
	            socket.close();
	            this._resetState();
	        }
	        _super.prototype.unsubscribe.call(this);
	        if (!source) {
	            this.destination = new ReplaySubject_1.ReplaySubject();
	        }
	    };
	    return WebSocketSubject;
	}(Subject_1.AnonymousSubject));
	exports.WebSocketSubject = WebSocketSubject;
	//# sourceMappingURL=WebSocketSubject.js.map

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(34);
	var queue_1 = __webpack_require__(135);
	var Subscription_1 = __webpack_require__(16);
	var observeOn_1 = __webpack_require__(74);
	var ObjectUnsubscribedError_1 = __webpack_require__(35);
	var SubjectSubscription_1 = __webpack_require__(36);
	/**
	 * @class ReplaySubject<T>
	 */
	var ReplaySubject = (function (_super) {
	    __extends(ReplaySubject, _super);
	    function ReplaySubject(bufferSize, windowTime, scheduler) {
	        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
	        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
	        _super.call(this);
	        this.scheduler = scheduler;
	        this._events = [];
	        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
	        this._windowTime = windowTime < 1 ? 1 : windowTime;
	    }
	    ReplaySubject.prototype.next = function (value) {
	        var now = this._getNow();
	        this._events.push(new ReplayEvent(now, value));
	        this._trimBufferThenGetEvents();
	        _super.prototype.next.call(this, value);
	    };
	    ReplaySubject.prototype._subscribe = function (subscriber) {
	        var _events = this._trimBufferThenGetEvents();
	        var scheduler = this.scheduler;
	        var subscription;
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscription = Subscription_1.Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscription = Subscription_1.Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	        }
	        if (scheduler) {
	            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
	        }
	        var len = _events.length;
	        for (var i = 0; i < len && !subscriber.closed; i++) {
	            subscriber.next(_events[i].value);
	        }
	        if (this.hasError) {
	            subscriber.error(this.thrownError);
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	        }
	        return subscription;
	    };
	    ReplaySubject.prototype._getNow = function () {
	        return (this.scheduler || queue_1.queue).now();
	    };
	    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
	        var now = this._getNow();
	        var _bufferSize = this._bufferSize;
	        var _windowTime = this._windowTime;
	        var _events = this._events;
	        var eventsCount = _events.length;
	        var spliceCount = 0;
	        // Trim events that fall out of the time window.
	        // Start at the front of the list. Break early once
	        // we encounter an event that falls within the window.
	        while (spliceCount < eventsCount) {
	            if ((now - _events[spliceCount].time) < _windowTime) {
	                break;
	            }
	            spliceCount++;
	        }
	        if (eventsCount > _bufferSize) {
	            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
	        }
	        if (spliceCount > 0) {
	            _events.splice(0, spliceCount);
	        }
	        return _events;
	    };
	    return ReplaySubject;
	}(Subject_1.Subject));
	exports.ReplaySubject = ReplaySubject;
	var ReplayEvent = (function () {
	    function ReplayEvent(time, value) {
	        this.time = time;
	        this.value = value;
	    }
	    return ReplayEvent;
	}());
	//# sourceMappingURL=ReplaySubject.js.map

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var QueueAction_1 = __webpack_require__(136);
	var QueueScheduler_1 = __webpack_require__(137);
	exports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
	//# sourceMappingURL=queue.js.map

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AsyncAction_1 = __webpack_require__(91);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var QueueAction = (function (_super) {
	    __extends(QueueAction, _super);
	    function QueueAction(scheduler, work) {
	        _super.call(this, scheduler, work);
	        this.scheduler = scheduler;
	        this.work = work;
	    }
	    QueueAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay > 0) {
	            return _super.prototype.schedule.call(this, state, delay);
	        }
	        this.delay = delay;
	        this.state = state;
	        this.scheduler.flush(this);
	        return this;
	    };
	    QueueAction.prototype.execute = function (state, delay) {
	        return (delay > 0 || this.closed) ?
	            _super.prototype.execute.call(this, state, delay) :
	            this._execute(state, delay);
	    };
	    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        // If delay exists and is greater than 0, or if the delay is null (the
	        // action wasn't rescheduled) but was originally scheduled as an async
	        // action, then recycle as an async action.
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        // Otherwise flush the scheduler starting with this action.
	        return scheduler.flush(this);
	    };
	    return QueueAction;
	}(AsyncAction_1.AsyncAction));
	exports.QueueAction = QueueAction;
	//# sourceMappingURL=QueueAction.js.map

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AsyncScheduler_1 = __webpack_require__(93);
	var QueueScheduler = (function (_super) {
	    __extends(QueueScheduler, _super);
	    function QueueScheduler() {
	        _super.apply(this, arguments);
	    }
	    return QueueScheduler;
	}(AsyncScheduler_1.AsyncScheduler));
	exports.QueueScheduler = QueueScheduler;
	//# sourceMappingURL=QueueScheduler.js.map

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(12);
	function assignImpl(target) {
	    var sources = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        sources[_i - 1] = arguments[_i];
	    }
	    var len = sources.length;
	    for (var i = 0; i < len; i++) {
	        var source = sources[i];
	        for (var k in source) {
	            if (source.hasOwnProperty(k)) {
	                target[k] = source[k];
	            }
	        }
	    }
	    return target;
	}
	exports.assignImpl = assignImpl;
	;
	function getAssign(root) {
	    return root.Object.assign || assignImpl;
	}
	exports.getAssign = getAssign;
	exports.assign = getAssign(root_1.root);
	//# sourceMappingURL=assign.js.map

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var buffer_1 = __webpack_require__(140);
	Observable_1.Observable.prototype.buffer = buffer_1.buffer;
	//# sourceMappingURL=buffer.js.map

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Buffers the source Observable values until `closingNotifier` emits.
	 *
	 * <span class="informal">Collects values from the past as an array, and emits
	 * that array only when another Observable emits.</span>
	 *
	 * <img src="./img/buffer.png" width="100%">
	 *
	 * Buffers the incoming Observable values until the given `closingNotifier`
	 * Observable emits a value, at which point it emits the buffer on the output
	 * Observable and starts a new buffer internally, awaiting the next time
	 * `closingNotifier` emits.
	 *
	 * @example <caption>On every click, emit array of most recent interval events</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var interval = Rx.Observable.interval(1000);
	 * var buffered = interval.buffer(clicks);
	 * buffered.subscribe(x => console.log(x));
	 *
	 * @see {@link bufferCount}
	 * @see {@link bufferTime}
	 * @see {@link bufferToggle}
	 * @see {@link bufferWhen}
	 * @see {@link window}
	 *
	 * @param {Observable<any>} closingNotifier An Observable that signals the
	 * buffer to be emitted on the output Observable.
	 * @return {Observable<T[]>} An Observable of buffers, which are arrays of
	 * values.
	 * @method buffer
	 * @owner Observable
	 */
	function buffer(closingNotifier) {
	    return this.lift(new BufferOperator(closingNotifier));
	}
	exports.buffer = buffer;
	var BufferOperator = (function () {
	    function BufferOperator(closingNotifier) {
	        this.closingNotifier = closingNotifier;
	    }
	    BufferOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
	    };
	    return BufferOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var BufferSubscriber = (function (_super) {
	    __extends(BufferSubscriber, _super);
	    function BufferSubscriber(destination, closingNotifier) {
	        _super.call(this, destination);
	        this.buffer = [];
	        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
	    }
	    BufferSubscriber.prototype._next = function (value) {
	        this.buffer.push(value);
	    };
	    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var buffer = this.buffer;
	        this.buffer = [];
	        this.destination.next(buffer);
	    };
	    return BufferSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=buffer.js.map

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var bufferCount_1 = __webpack_require__(142);
	Observable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;
	//# sourceMappingURL=bufferCount.js.map

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Buffers the source Observable values until the size hits the maximum
	 * `bufferSize` given.
	 *
	 * <span class="informal">Collects values from the past as an array, and emits
	 * that array only when its size reaches `bufferSize`.</span>
	 *
	 * <img src="./img/bufferCount.png" width="100%">
	 *
	 * Buffers a number of values from the source Observable by `bufferSize` then
	 * emits the buffer and clears it, and starts a new buffer each
	 * `startBufferEvery` values. If `startBufferEvery` is not provided or is
	 * `null`, then new buffers are started immediately at the start of the source
	 * and when each buffer closes and is emitted.
	 *
	 * @example <caption>Emit the last two click events as an array</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var buffered = clicks.bufferCount(2);
	 * buffered.subscribe(x => console.log(x));
	 *
	 * @example <caption>On every click, emit the last two click events as an array</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var buffered = clicks.bufferCount(2, 1);
	 * buffered.subscribe(x => console.log(x));
	 *
	 * @see {@link buffer}
	 * @see {@link bufferTime}
	 * @see {@link bufferToggle}
	 * @see {@link bufferWhen}
	 * @see {@link pairwise}
	 * @see {@link windowCount}
	 *
	 * @param {number} bufferSize The maximum size of the buffer emitted.
	 * @param {number} [startBufferEvery] Interval at which to start a new buffer.
	 * For example if `startBufferEvery` is `2`, then a new buffer will be started
	 * on every other value from the source. A new buffer is started at the
	 * beginning of the source by default.
	 * @return {Observable<T[]>} An Observable of arrays of buffered values.
	 * @method bufferCount
	 * @owner Observable
	 */
	function bufferCount(bufferSize, startBufferEvery) {
	    if (startBufferEvery === void 0) { startBufferEvery = null; }
	    return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));
	}
	exports.bufferCount = bufferCount;
	var BufferCountOperator = (function () {
	    function BufferCountOperator(bufferSize, startBufferEvery) {
	        this.bufferSize = bufferSize;
	        this.startBufferEvery = startBufferEvery;
	    }
	    BufferCountOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));
	    };
	    return BufferCountOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var BufferCountSubscriber = (function (_super) {
	    __extends(BufferCountSubscriber, _super);
	    function BufferCountSubscriber(destination, bufferSize, startBufferEvery) {
	        _super.call(this, destination);
	        this.bufferSize = bufferSize;
	        this.startBufferEvery = startBufferEvery;
	        this.buffers = [];
	        this.count = 0;
	    }
	    BufferCountSubscriber.prototype._next = function (value) {
	        var count = this.count++;
	        var _a = this, destination = _a.destination, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers;
	        var startOn = (startBufferEvery == null) ? bufferSize : startBufferEvery;
	        if (count % startOn === 0) {
	            buffers.push([]);
	        }
	        for (var i = buffers.length; i--;) {
	            var buffer = buffers[i];
	            buffer.push(value);
	            if (buffer.length === bufferSize) {
	                buffers.splice(i, 1);
	                destination.next(buffer);
	            }
	        }
	    };
	    BufferCountSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        var buffers = this.buffers;
	        while (buffers.length > 0) {
	            var buffer = buffers.shift();
	            if (buffer.length > 0) {
	                destination.next(buffer);
	            }
	        }
	        _super.prototype._complete.call(this);
	    };
	    return BufferCountSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=bufferCount.js.map

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var bufferTime_1 = __webpack_require__(144);
	Observable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;
	//# sourceMappingURL=bufferTime.js.map

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var async_1 = __webpack_require__(90);
	var Subscriber_1 = __webpack_require__(14);
	var isScheduler_1 = __webpack_require__(46);
	/* tslint:disable:max-line-length */
	/**
	 * Buffers the source Observable values for a specific time period.
	 *
	 * <span class="informal">Collects values from the past as an array, and emits
	 * those arrays periodically in time.</span>
	 *
	 * <img src="./img/bufferTime.png" width="100%">
	 *
	 * Buffers values from the source for a specific time duration `bufferTimeSpan`.
	 * Unless the optional argument `bufferCreationInterval` is given, it emits and
	 * resets the buffer every `bufferTimeSpan` milliseconds. If
	 * `bufferCreationInterval` is given, this operator opens the buffer every
	 * `bufferCreationInterval` milliseconds and closes (emits and resets) the
	 * buffer every `bufferTimeSpan` milliseconds. When the optional argument
	 * `maxBufferSize` is specified, the buffer will be closed either after
	 * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.
	 *
	 * @example <caption>Every second, emit an array of the recent click events</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var buffered = clicks.bufferTime(1000);
	 * buffered.subscribe(x => console.log(x));
	 *
	 * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var buffered = clicks.bufferTime(2000, 5000);
	 * buffered.subscribe(x => console.log(x));
	 *
	 * @see {@link buffer}
	 * @see {@link bufferCount}
	 * @see {@link bufferToggle}
	 * @see {@link bufferWhen}
	 * @see {@link windowTime}
	 *
	 * @param {number} bufferTimeSpan The amount of time to fill each buffer array.
	 * @param {number} [bufferCreationInterval] The interval at which to start new
	 * buffers.
	 * @param {number} [maxBufferSize] The maximum buffer size.
	 * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
	 * intervals that determine buffer boundaries.
	 * @return {Observable<T[]>} An observable of arrays of buffered values.
	 * @method bufferTime
	 * @owner Observable
	 */
	function bufferTime(bufferTimeSpan) {
	    var length = arguments.length;
	    var scheduler = async_1.async;
	    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {
	        scheduler = arguments[arguments.length - 1];
	        length--;
	    }
	    var bufferCreationInterval = null;
	    if (length >= 2) {
	        bufferCreationInterval = arguments[1];
	    }
	    var maxBufferSize = Number.POSITIVE_INFINITY;
	    if (length >= 3) {
	        maxBufferSize = arguments[2];
	    }
	    return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
	}
	exports.bufferTime = bufferTime;
	var BufferTimeOperator = (function () {
	    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
	        this.bufferTimeSpan = bufferTimeSpan;
	        this.bufferCreationInterval = bufferCreationInterval;
	        this.maxBufferSize = maxBufferSize;
	        this.scheduler = scheduler;
	    }
	    BufferTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
	    };
	    return BufferTimeOperator;
	}());
	var Context = (function () {
	    function Context() {
	        this.buffer = [];
	    }
	    return Context;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var BufferTimeSubscriber = (function (_super) {
	    __extends(BufferTimeSubscriber, _super);
	    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
	        _super.call(this, destination);
	        this.bufferTimeSpan = bufferTimeSpan;
	        this.bufferCreationInterval = bufferCreationInterval;
	        this.maxBufferSize = maxBufferSize;
	        this.scheduler = scheduler;
	        this.contexts = [];
	        var context = this.openContext();
	        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
	        if (this.timespanOnly) {
	            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
	            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
	        }
	        else {
	            var closeState = { subscriber: this, context: context };
	            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };
	            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
	            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
	        }
	    }
	    BufferTimeSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        var len = contexts.length;
	        var filledBufferContext;
	        for (var i = 0; i < len; i++) {
	            var context = contexts[i];
	            var buffer = context.buffer;
	            buffer.push(value);
	            if (buffer.length == this.maxBufferSize) {
	                filledBufferContext = context;
	            }
	        }
	        if (filledBufferContext) {
	            this.onBufferFull(filledBufferContext);
	        }
	    };
	    BufferTimeSubscriber.prototype._error = function (err) {
	        this.contexts.length = 0;
	        _super.prototype._error.call(this, err);
	    };
	    BufferTimeSubscriber.prototype._complete = function () {
	        var _a = this, contexts = _a.contexts, destination = _a.destination;
	        while (contexts.length > 0) {
	            var context = contexts.shift();
	            destination.next(context.buffer);
	        }
	        _super.prototype._complete.call(this);
	    };
	    BufferTimeSubscriber.prototype._unsubscribe = function () {
	        this.contexts = null;
	    };
	    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
	        this.closeContext(context);
	        var closeAction = context.closeAction;
	        closeAction.unsubscribe();
	        this.remove(closeAction);
	        if (!this.closed && this.timespanOnly) {
	            context = this.openContext();
	            var bufferTimeSpan = this.bufferTimeSpan;
	            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
	            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
	        }
	    };
	    BufferTimeSubscriber.prototype.openContext = function () {
	        var context = new Context();
	        this.contexts.push(context);
	        return context;
	    };
	    BufferTimeSubscriber.prototype.closeContext = function (context) {
	        this.destination.next(context.buffer);
	        var contexts = this.contexts;
	        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
	        if (spliceIndex >= 0) {
	            contexts.splice(contexts.indexOf(context), 1);
	        }
	    };
	    return BufferTimeSubscriber;
	}(Subscriber_1.Subscriber));
	function dispatchBufferTimeSpanOnly(state) {
	    var subscriber = state.subscriber;
	    var prevContext = state.context;
	    if (prevContext) {
	        subscriber.closeContext(prevContext);
	    }
	    if (!subscriber.closed) {
	        state.context = subscriber.openContext();
	        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
	    }
	}
	function dispatchBufferCreation(state) {
	    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
	    var context = subscriber.openContext();
	    var action = this;
	    if (!subscriber.closed) {
	        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
	        action.schedule(state, bufferCreationInterval);
	    }
	}
	function dispatchBufferClose(arg) {
	    var subscriber = arg.subscriber, context = arg.context;
	    subscriber.closeContext(context);
	}
	//# sourceMappingURL=bufferTime.js.map

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var bufferToggle_1 = __webpack_require__(146);
	Observable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;
	//# sourceMappingURL=bufferToggle.js.map

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(16);
	var subscribeToResult_1 = __webpack_require__(52);
	var OuterSubscriber_1 = __webpack_require__(51);
	/**
	 * Buffers the source Observable values starting from an emission from
	 * `openings` and ending when the output of `closingSelector` emits.
	 *
	 * <span class="informal">Collects values from the past as an array. Starts
	 * collecting only when `opening` emits, and calls the `closingSelector`
	 * function to get an Observable that tells when to close the buffer.</span>
	 *
	 * <img src="./img/bufferToggle.png" width="100%">
	 *
	 * Buffers values from the source by opening the buffer via signals from an
	 * Observable provided to `openings`, and closing and sending the buffers when
	 * a Subscribable or Promise returned by the `closingSelector` function emits.
	 *
	 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var openings = Rx.Observable.interval(1000);
	 * var buffered = clicks.bufferToggle(openings, i =>
	 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
	 * );
	 * buffered.subscribe(x => console.log(x));
	 *
	 * @see {@link buffer}
	 * @see {@link bufferCount}
	 * @see {@link bufferTime}
	 * @see {@link bufferWhen}
	 * @see {@link windowToggle}
	 *
	 * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new
	 * buffers.
	 * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes
	 * the value emitted by the `openings` observable and returns a Subscribable or Promise,
	 * which, when it emits, signals that the associated buffer should be emitted
	 * and cleared.
	 * @return {Observable<T[]>} An observable of arrays of buffered values.
	 * @method bufferToggle
	 * @owner Observable
	 */
	function bufferToggle(openings, closingSelector) {
	    return this.lift(new BufferToggleOperator(openings, closingSelector));
	}
	exports.bufferToggle = bufferToggle;
	var BufferToggleOperator = (function () {
	    function BufferToggleOperator(openings, closingSelector) {
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	    }
	    BufferToggleOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
	    };
	    return BufferToggleOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var BufferToggleSubscriber = (function (_super) {
	    __extends(BufferToggleSubscriber, _super);
	    function BufferToggleSubscriber(destination, openings, closingSelector) {
	        _super.call(this, destination);
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	        this.contexts = [];
	        this.add(subscribeToResult_1.subscribeToResult(this, openings));
	    }
	    BufferToggleSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        var len = contexts.length;
	        for (var i = 0; i < len; i++) {
	            contexts[i].buffer.push(value);
	        }
	    };
	    BufferToggleSubscriber.prototype._error = function (err) {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context = contexts.shift();
	            context.subscription.unsubscribe();
	            context.buffer = null;
	            context.subscription = null;
	        }
	        this.contexts = null;
	        _super.prototype._error.call(this, err);
	    };
	    BufferToggleSubscriber.prototype._complete = function () {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context = contexts.shift();
	            this.destination.next(context.buffer);
	            context.subscription.unsubscribe();
	            context.buffer = null;
	            context.subscription = null;
	        }
	        this.contexts = null;
	        _super.prototype._complete.call(this);
	    };
	    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
	    };
	    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.closeBuffer(innerSub.context);
	    };
	    BufferToggleSubscriber.prototype.openBuffer = function (value) {
	        try {
	            var closingSelector = this.closingSelector;
	            var closingNotifier = closingSelector.call(this, value);
	            if (closingNotifier) {
	                this.trySubscribe(closingNotifier);
	            }
	        }
	        catch (err) {
	            this._error(err);
	        }
	    };
	    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
	        var contexts = this.contexts;
	        if (contexts && context) {
	            var buffer = context.buffer, subscription = context.subscription;
	            this.destination.next(buffer);
	            contexts.splice(contexts.indexOf(context), 1);
	            this.remove(subscription);
	            subscription.unsubscribe();
	        }
	    };
	    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
	        var contexts = this.contexts;
	        var buffer = [];
	        var subscription = new Subscription_1.Subscription();
	        var context = { buffer: buffer, subscription: subscription };
	        contexts.push(context);
	        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
	        if (!innerSubscription || innerSubscription.closed) {
	            this.closeBuffer(context);
	        }
	        else {
	            innerSubscription.context = context;
	            this.add(innerSubscription);
	            subscription.add(innerSubscription);
	        }
	    };
	    return BufferToggleSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=bufferToggle.js.map

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var bufferWhen_1 = __webpack_require__(148);
	Observable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;
	//# sourceMappingURL=bufferWhen.js.map

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(16);
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Buffers the source Observable values, using a factory function of closing
	 * Observables to determine when to close, emit, and reset the buffer.
	 *
	 * <span class="informal">Collects values from the past as an array. When it
	 * starts collecting values, it calls a function that returns an Observable that
	 * tells when to close the buffer and restart collecting.</span>
	 *
	 * <img src="./img/bufferWhen.png" width="100%">
	 *
	 * Opens a buffer immediately, then closes the buffer when the observable
	 * returned by calling `closingSelector` function emits a value. When it closes
	 * the buffer, it immediately opens a new buffer and repeats the process.
	 *
	 * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var buffered = clicks.bufferWhen(() =>
	 *   Rx.Observable.interval(1000 + Math.random() * 4000)
	 * );
	 * buffered.subscribe(x => console.log(x));
	 *
	 * @see {@link buffer}
	 * @see {@link bufferCount}
	 * @see {@link bufferTime}
	 * @see {@link bufferToggle}
	 * @see {@link windowWhen}
	 *
	 * @param {function(): Observable} closingSelector A function that takes no
	 * arguments and returns an Observable that signals buffer closure.
	 * @return {Observable<T[]>} An observable of arrays of buffered values.
	 * @method bufferWhen
	 * @owner Observable
	 */
	function bufferWhen(closingSelector) {
	    return this.lift(new BufferWhenOperator(closingSelector));
	}
	exports.bufferWhen = bufferWhen;
	var BufferWhenOperator = (function () {
	    function BufferWhenOperator(closingSelector) {
	        this.closingSelector = closingSelector;
	    }
	    BufferWhenOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
	    };
	    return BufferWhenOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var BufferWhenSubscriber = (function (_super) {
	    __extends(BufferWhenSubscriber, _super);
	    function BufferWhenSubscriber(destination, closingSelector) {
	        _super.call(this, destination);
	        this.closingSelector = closingSelector;
	        this.subscribing = false;
	        this.openBuffer();
	    }
	    BufferWhenSubscriber.prototype._next = function (value) {
	        this.buffer.push(value);
	    };
	    BufferWhenSubscriber.prototype._complete = function () {
	        var buffer = this.buffer;
	        if (buffer) {
	            this.destination.next(buffer);
	        }
	        _super.prototype._complete.call(this);
	    };
	    BufferWhenSubscriber.prototype._unsubscribe = function () {
	        this.buffer = null;
	        this.subscribing = false;
	    };
	    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.openBuffer();
	    };
	    BufferWhenSubscriber.prototype.notifyComplete = function () {
	        if (this.subscribing) {
	            this.complete();
	        }
	        else {
	            this.openBuffer();
	        }
	    };
	    BufferWhenSubscriber.prototype.openBuffer = function () {
	        var closingSubscription = this.closingSubscription;
	        if (closingSubscription) {
	            this.remove(closingSubscription);
	            closingSubscription.unsubscribe();
	        }
	        var buffer = this.buffer;
	        if (this.buffer) {
	            this.destination.next(buffer);
	        }
	        this.buffer = [];
	        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
	        if (closingNotifier === errorObject_1.errorObject) {
	            this.error(errorObject_1.errorObject.e);
	        }
	        else {
	            closingSubscription = new Subscription_1.Subscription();
	            this.closingSubscription = closingSubscription;
	            this.add(closingSubscription);
	            this.subscribing = true;
	            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));
	            this.subscribing = false;
	        }
	    };
	    return BufferWhenSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=bufferWhen.js.map

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var catch_1 = __webpack_require__(150);
	Observable_1.Observable.prototype.catch = catch_1._catch;
	Observable_1.Observable.prototype._catch = catch_1._catch;
	//# sourceMappingURL=catch.js.map

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
	 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
	 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
	 *  is returned by the `selector` will be used to continue the observable chain.
	 * @return {Observable} an observable that originates from either the source or the observable returned by the
	 *  catch `selector` function.
	 * @method catch
	 * @name catch
	 * @owner Observable
	 */
	function _catch(selector) {
	    var operator = new CatchOperator(selector);
	    var caught = this.lift(operator);
	    return (operator.caught = caught);
	}
	exports._catch = _catch;
	var CatchOperator = (function () {
	    function CatchOperator(selector) {
	        this.selector = selector;
	    }
	    CatchOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
	    };
	    return CatchOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var CatchSubscriber = (function (_super) {
	    __extends(CatchSubscriber, _super);
	    function CatchSubscriber(destination, selector, caught) {
	        _super.call(this, destination);
	        this.selector = selector;
	        this.caught = caught;
	    }
	    // NOTE: overriding `error` instead of `_error` because we don't want
	    // to have this flag this subscriber as `isStopped`.
	    CatchSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var result = void 0;
	            try {
	                result = this.selector(err, this.caught);
	            }
	            catch (err) {
	                this.destination.error(err);
	                return;
	            }
	            this.unsubscribe();
	            this.destination.remove(this);
	            subscribeToResult_1.subscribeToResult(this, result);
	        }
	    };
	    return CatchSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=catch.js.map

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var combineAll_1 = __webpack_require__(152);
	Observable_1.Observable.prototype.combineAll = combineAll_1.combineAll;
	//# sourceMappingURL=combineAll.js.map

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var combineLatest_1 = __webpack_require__(50);
	/**
	 * Converts a higher-order Observable into a first-order Observable by waiting
	 * for the outer Observable to complete, then applying {@link combineLatest}.
	 *
	 * <span class="informal">Flattens an Observable-of-Observables by applying
	 * {@link combineLatest} when the Observable-of-Observables completes.</span>
	 *
	 * <img src="./img/combineAll.png" width="100%">
	 *
	 * Takes an Observable of Observables, and collects all Observables from it.
	 * Once the outer Observable completes, it subscribes to all collected
	 * Observables and combines their values using the {@link combineLatest}
	 * strategy, such that:
	 * - Every time an inner Observable emits, the output Observable emits.
	 * - When the returned observable emits, it emits all of the latest values by:
	 *   - If a `project` function is provided, it is called with each recent value
	 *     from each inner Observable in whatever order they arrived, and the result
	 *     of the `project` function is what is emitted by the output Observable.
	 *   - If there is no `project` function, an array of all of the most recent
	 *     values is emitted by the output Observable.
	 *
	 * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var higherOrder = clicks.map(ev =>
	 *   Rx.Observable.interval(Math.random()*2000).take(3)
	 * ).take(2);
	 * var result = higherOrder.combineAll();
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link combineLatest}
	 * @see {@link mergeAll}
	 *
	 * @param {function} [project] An optional function to map the most recent
	 * values from each inner Observable into a new result. Takes each of the most
	 * recent values from each collected inner Observable as arguments, in order.
	 * @return {Observable} An Observable of projected results or arrays of recent
	 * values.
	 * @method combineAll
	 * @owner Observable
	 */
	function combineAll(project) {
	    return this.lift(new combineLatest_1.CombineLatestOperator(project));
	}
	exports.combineAll = combineAll;
	//# sourceMappingURL=combineAll.js.map

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var combineLatest_1 = __webpack_require__(50);
	Observable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;
	//# sourceMappingURL=combineLatest.js.map

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var concat_1 = __webpack_require__(58);
	Observable_1.Observable.prototype.concat = concat_1.concat;
	//# sourceMappingURL=concat.js.map

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var concatAll_1 = __webpack_require__(156);
	Observable_1.Observable.prototype.concatAll = concatAll_1.concatAll;
	//# sourceMappingURL=concatAll.js.map

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var mergeAll_1 = __webpack_require__(59);
	/* tslint:disable:max-line-length */
	/**
	 * Converts a higher-order Observable into a first-order Observable by
	 * concatenating the inner Observables in order.
	 *
	 * <span class="informal">Flattens an Observable-of-Observables by putting one
	 * inner Observable after the other.</span>
	 *
	 * <img src="./img/concatAll.png" width="100%">
	 *
	 * Joins every Observable emitted by the source (a higher-order Observable), in
	 * a serial fashion. It subscribes to each inner Observable only after the
	 * previous inner Observable has completed, and merges all of their values into
	 * the returned observable.
	 *
	 * __Warning:__ If the source Observable emits Observables quickly and
	 * endlessly, and the inner Observables it emits generally complete slower than
	 * the source emits, you can run into memory issues as the incoming Observables
	 * collect in an unbounded buffer.
	 *
	 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
	 * to `1`.
	 *
	 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
	 * var firstOrder = higherOrder.concatAll();
	 * firstOrder.subscribe(x => console.log(x));
	 *
	 * // Results in the following:
	 * // (results are not concurrent)
	 * // For every click on the "document" it will emit values 0 to 3 spaced
	 * // on a 1000ms interval
	 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
	 *
	 * @see {@link combineAll}
	 * @see {@link concat}
	 * @see {@link concatMap}
	 * @see {@link concatMapTo}
	 * @see {@link exhaust}
	 * @see {@link mergeAll}
	 * @see {@link switch}
	 * @see {@link zipAll}
	 *
	 * @return {Observable} An Observable emitting values from all the inner
	 * Observables concatenated.
	 * @method concatAll
	 * @owner Observable
	 */
	function concatAll() {
	    return this.lift(new mergeAll_1.MergeAllOperator(1));
	}
	exports.concatAll = concatAll;
	//# sourceMappingURL=concatAll.js.map

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var concatMap_1 = __webpack_require__(158);
	Observable_1.Observable.prototype.concatMap = concatMap_1.concatMap;
	//# sourceMappingURL=concatMap.js.map

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var mergeMap_1 = __webpack_require__(159);
	/* tslint:disable:max-line-length */
	/**
	 * Projects each source value to an Observable which is merged in the output
	 * Observable, in a serialized fashion waiting for each one to complete before
	 * merging the next.
	 *
	 * <span class="informal">Maps each value to an Observable, then flattens all of
	 * these inner Observables using {@link concatAll}.</span>
	 *
	 * <img src="./img/concatMap.png" width="100%">
	 *
	 * Returns an Observable that emits items based on applying a function that you
	 * supply to each item emitted by the source Observable, where that function
	 * returns an (so-called "inner") Observable. Each new inner Observable is
	 * concatenated with the previous inner Observable.
	 *
	 * __Warning:__ if source values arrive endlessly and faster than their
	 * corresponding inner Observables can complete, it will result in memory issues
	 * as inner Observables amass in an unbounded buffer waiting for their turn to
	 * be subscribed to.
	 *
	 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
	 * to `1`.
	 *
	 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
	 * result.subscribe(x => console.log(x));
	 *
	 * // Results in the following:
	 * // (results are not concurrent)
	 * // For every click on the "document" it will emit values 0 to 3 spaced
	 * // on a 1000ms interval
	 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
	 *
	 * @see {@link concat}
	 * @see {@link concatAll}
	 * @see {@link concatMapTo}
	 * @see {@link exhaustMap}
	 * @see {@link mergeMap}
	 * @see {@link switchMap}
	 *
	 * @param {function(value: T, ?index: number): Observable} project A function
	 * that, when applied to an item emitted by the source Observable, returns an
	 * Observable.
	 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
	 * A function to produce the value on the output Observable based on the values
	 * and the indices of the source (outer) emission and the inner Observable
	 * emission. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @return {Observable} an observable of values merged from the projected
	 * Observables as they were subscribed to, one at a time. Optionally, these
	 * values may have been projected from a passed `projectResult` argument.
	 * @return {Observable} An Observable that emits the result of applying the
	 * projection function (and the optional `resultSelector`) to each item emitted
	 * by the source Observable and taking values from each projected inner
	 * Observable sequentially.
	 * @method concatMap
	 * @owner Observable
	 */
	function concatMap(project, resultSelector) {
	    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
	}
	exports.concatMap = concatMap;
	//# sourceMappingURL=concatMap.js.map

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var subscribeToResult_1 = __webpack_require__(52);
	var OuterSubscriber_1 = __webpack_require__(51);
	/* tslint:disable:max-line-length */
	/**
	 * Projects each source value to an Observable which is merged in the output
	 * Observable.
	 *
	 * <span class="informal">Maps each value to an Observable, then flattens all of
	 * these inner Observables using {@link mergeAll}.</span>
	 *
	 * <img src="./img/mergeMap.png" width="100%">
	 *
	 * Returns an Observable that emits items based on applying a function that you
	 * supply to each item emitted by the source Observable, where that function
	 * returns an Observable, and then merging those resulting Observables and
	 * emitting the results of this merger.
	 *
	 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
	 * var letters = Rx.Observable.of('a', 'b', 'c');
	 * var result = letters.mergeMap(x =>
	 *   Rx.Observable.interval(1000).map(i => x+i)
	 * );
	 * result.subscribe(x => console.log(x));
	 *
	 * // Results in the following:
	 * // a0
	 * // b0
	 * // c0
	 * // a1
	 * // b1
	 * // c1
	 * // continues to list a,b,c with respective ascending integers
	 *
	 * @see {@link concatMap}
	 * @see {@link exhaustMap}
	 * @see {@link merge}
	 * @see {@link mergeAll}
	 * @see {@link mergeMapTo}
	 * @see {@link mergeScan}
	 * @see {@link switchMap}
	 *
	 * @param {function(value: T, ?index: number): Observable} project A function
	 * that, when applied to an item emitted by the source Observable, returns an
	 * Observable.
	 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
	 * A function to produce the value on the output Observable based on the values
	 * and the indices of the source (outer) emission and the inner Observable
	 * emission. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
	 * Observables being subscribed to concurrently.
	 * @return {Observable} An Observable that emits the result of applying the
	 * projection function (and the optional `resultSelector`) to each item emitted
	 * by the source Observable and merging the results of the Observables obtained
	 * from this transformation.
	 * @method mergeMap
	 * @owner Observable
	 */
	function mergeMap(project, resultSelector, concurrent) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	        resultSelector = null;
	    }
	    return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
	}
	exports.mergeMap = mergeMap;
	var MergeMapOperator = (function () {
	    function MergeMapOperator(project, resultSelector, concurrent) {
	        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	    }
	    MergeMapOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
	    };
	    return MergeMapOperator;
	}());
	exports.MergeMapOperator = MergeMapOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MergeMapSubscriber = (function (_super) {
	    __extends(MergeMapSubscriber, _super);
	    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
	        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	        _super.call(this, destination);
	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	        this.index = 0;
	    }
	    MergeMapSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            this._tryNext(value);
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeMapSubscriber.prototype._tryNext = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.active++;
	        this._innerSub(result, value, index);
	    };
	    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
	        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
	    };
	    MergeMapSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };
	    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        if (this.resultSelector) {
	            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        else {
	            this.destination.next(innerValue);
	        }
	    };
	    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
	        var result;
	        try {
	            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeMapSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	exports.MergeMapSubscriber = MergeMapSubscriber;
	//# sourceMappingURL=mergeMap.js.map

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var concatMapTo_1 = __webpack_require__(161);
	Observable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;
	//# sourceMappingURL=concatMapTo.js.map

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var mergeMapTo_1 = __webpack_require__(162);
	/* tslint:disable:max-line-length */
	/**
	 * Projects each source value to the same Observable which is merged multiple
	 * times in a serialized fashion on the output Observable.
	 *
	 * <span class="informal">It's like {@link concatMap}, but maps each value
	 * always to the same inner Observable.</span>
	 *
	 * <img src="./img/concatMapTo.png" width="100%">
	 *
	 * Maps each source value to the given Observable `innerObservable` regardless
	 * of the source value, and then flattens those resulting Observables into one
	 * single Observable, which is the output Observable. Each new `innerObservable`
	 * instance emitted on the output Observable is concatenated with the previous
	 * `innerObservable` instance.
	 *
	 * __Warning:__ if source values arrive endlessly and faster than their
	 * corresponding inner Observables can complete, it will result in memory issues
	 * as inner Observables amass in an unbounded buffer waiting for their turn to
	 * be subscribed to.
	 *
	 * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter
	 * set to `1`.
	 *
	 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));
	 * result.subscribe(x => console.log(x));
	 *
	 * // Results in the following:
	 * // (results are not concurrent)
	 * // For every click on the "document" it will emit values 0 to 3 spaced
	 * // on a 1000ms interval
	 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
	 *
	 * @see {@link concat}
	 * @see {@link concatAll}
	 * @see {@link concatMap}
	 * @see {@link mergeMapTo}
	 * @see {@link switchMapTo}
	 *
	 * @param {Observable} innerObservable An Observable to replace each value from
	 * the source Observable.
	 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
	 * A function to produce the value on the output Observable based on the values
	 * and the indices of the source (outer) emission and the inner Observable
	 * emission. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @return {Observable} An observable of values merged together by joining the
	 * passed observable with itself, one after the other, for each value emitted
	 * from the source.
	 * @method concatMapTo
	 * @owner Observable
	 */
	function concatMapTo(innerObservable, resultSelector) {
	    return this.lift(new mergeMapTo_1.MergeMapToOperator(innerObservable, resultSelector, 1));
	}
	exports.concatMapTo = concatMapTo;
	//# sourceMappingURL=concatMapTo.js.map

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/* tslint:disable:max-line-length */
	/**
	 * Projects each source value to the same Observable which is merged multiple
	 * times in the output Observable.
	 *
	 * <span class="informal">It's like {@link mergeMap}, but maps each value always
	 * to the same inner Observable.</span>
	 *
	 * <img src="./img/mergeMapTo.png" width="100%">
	 *
	 * Maps each source value to the given Observable `innerObservable` regardless
	 * of the source value, and then merges those resulting Observables into one
	 * single Observable, which is the output Observable.
	 *
	 * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link concatMapTo}
	 * @see {@link merge}
	 * @see {@link mergeAll}
	 * @see {@link mergeMap}
	 * @see {@link mergeScan}
	 * @see {@link switchMapTo}
	 *
	 * @param {Observable} innerObservable An Observable to replace each value from
	 * the source Observable.
	 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
	 * A function to produce the value on the output Observable based on the values
	 * and the indices of the source (outer) emission and the inner Observable
	 * emission. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
	 * Observables being subscribed to concurrently.
	 * @return {Observable} An Observable that emits items from the given
	 * `innerObservable` (and optionally transformed through `resultSelector`) every
	 * time a value is emitted on the source Observable.
	 * @method mergeMapTo
	 * @owner Observable
	 */
	function mergeMapTo(innerObservable, resultSelector, concurrent) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	        resultSelector = null;
	    }
	    return this.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));
	}
	exports.mergeMapTo = mergeMapTo;
	// TODO: Figure out correct signature here: an Operator<Observable<T>, R>
	//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>
	var MergeMapToOperator = (function () {
	    function MergeMapToOperator(ish, resultSelector, concurrent) {
	        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	        this.ish = ish;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	    }
	    MergeMapToOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));
	    };
	    return MergeMapToOperator;
	}());
	exports.MergeMapToOperator = MergeMapToOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MergeMapToSubscriber = (function (_super) {
	    __extends(MergeMapToSubscriber, _super);
	    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {
	        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	        _super.call(this, destination);
	        this.ish = ish;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	        this.index = 0;
	    }
	    MergeMapToSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            var resultSelector = this.resultSelector;
	            var index = this.index++;
	            var ish = this.ish;
	            var destination = this.destination;
	            this.active++;
	            this._innerSub(ish, destination, resultSelector, value, index);
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {
	        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
	    };
	    MergeMapToSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };
	    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
	        if (resultSelector) {
	            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        else {
	            destination.next(innerValue);
	        }
	    };
	    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
	        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
	        var result;
	        try {
	            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        catch (err) {
	            destination.error(err);
	            return;
	        }
	        destination.next(result);
	    };
	    MergeMapToSubscriber.prototype.notifyError = function (err) {
	        this.destination.error(err);
	    };
	    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeMapToSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	exports.MergeMapToSubscriber = MergeMapToSubscriber;
	//# sourceMappingURL=mergeMapTo.js.map

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var count_1 = __webpack_require__(164);
	Observable_1.Observable.prototype.count = count_1.count;
	//# sourceMappingURL=count.js.map

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Counts the number of emissions on the source and emits that number when the
	 * source completes.
	 *
	 * <span class="informal">Tells how many values were emitted, when the source
	 * completes.</span>
	 *
	 * <img src="./img/count.png" width="100%">
	 *
	 * `count` transforms an Observable that emits values into an Observable that
	 * emits a single value that represents the number of values emitted by the
	 * source Observable. If the source Observable terminates with an error, `count`
	 * will pass this error notification along without emitting an value first. If
	 * the source Observable does not terminate at all, `count` will neither emit
	 * a value nor terminate. This operator takes an optional `predicate` function
	 * as argument, in which case the output emission will represent the number of
	 * source values that matched `true` with the `predicate`.
	 *
	 * @example <caption>Counts how many seconds have passed before the first click happened</caption>
	 * var seconds = Rx.Observable.interval(1000);
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var secondsBeforeClick = seconds.takeUntil(clicks);
	 * var result = secondsBeforeClick.count();
	 * result.subscribe(x => console.log(x));
	 *
	 * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>
	 * var numbers = Rx.Observable.range(1, 7);
	 * var result = numbers.count(i => i % 2 === 1);
	 * result.subscribe(x => console.log(x));
	 *
	 * // Results in:
	 * // 4
	 *
	 * @see {@link max}
	 * @see {@link min}
	 * @see {@link reduce}
	 *
	 * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A
	 * boolean function to select what values are to be counted. It is provided with
	 * arguments of:
	 * - `value`: the value from the source Observable.
	 * - `index`: the (zero-based) "index" of the value from the source Observable.
	 * - `source`: the source Observable instance itself.
	 * @return {Observable} An Observable of one number that represents the count as
	 * described above.
	 * @method count
	 * @owner Observable
	 */
	function count(predicate) {
	    return this.lift(new CountOperator(predicate, this));
	}
	exports.count = count;
	var CountOperator = (function () {
	    function CountOperator(predicate, source) {
	        this.predicate = predicate;
	        this.source = source;
	    }
	    CountOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
	    };
	    return CountOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var CountSubscriber = (function (_super) {
	    __extends(CountSubscriber, _super);
	    function CountSubscriber(destination, predicate, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.source = source;
	        this.count = 0;
	        this.index = 0;
	    }
	    CountSubscriber.prototype._next = function (value) {
	        if (this.predicate) {
	            this._tryPredicate(value);
	        }
	        else {
	            this.count++;
	        }
	    };
	    CountSubscriber.prototype._tryPredicate = function (value) {
	        var result;
	        try {
	            result = this.predicate(value, this.index++, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            this.count++;
	        }
	    };
	    CountSubscriber.prototype._complete = function () {
	        this.destination.next(this.count);
	        this.destination.complete();
	    };
	    return CountSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=count.js.map

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var dematerialize_1 = __webpack_require__(166);
	Observable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;
	//# sourceMappingURL=dematerialize.js.map

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Converts an Observable of {@link Notification} objects into the emissions
	 * that they represent.
	 *
	 * <span class="informal">Unwraps {@link Notification} objects as actual `next`,
	 * `error` and `complete` emissions. The opposite of {@link materialize}.</span>
	 *
	 * <img src="./img/dematerialize.png" width="100%">
	 *
	 * `dematerialize` is assumed to operate an Observable that only emits
	 * {@link Notification} objects as `next` emissions, and does not emit any
	 * `error`. Such Observable is the output of a `materialize` operation. Those
	 * notifications are then unwrapped using the metadata they contain, and emitted
	 * as `next`, `error`, and `complete` on the output Observable.
	 *
	 * Use this operator in conjunction with {@link materialize}.
	 *
	 * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>
	 * var notifA = new Rx.Notification('N', 'A');
	 * var notifB = new Rx.Notification('N', 'B');
	 * var notifE = new Rx.Notification('E', void 0,
	 *   new TypeError('x.toUpperCase is not a function')
	 * );
	 * var materialized = Rx.Observable.of(notifA, notifB, notifE);
	 * var upperCase = materialized.dematerialize();
	 * upperCase.subscribe(x => console.log(x), e => console.error(e));
	 *
	 * // Results in:
	 * // A
	 * // B
	 * // TypeError: x.toUpperCase is not a function
	 *
	 * @see {@link Notification}
	 * @see {@link materialize}
	 *
	 * @return {Observable} An Observable that emits items and notifications
	 * embedded in Notification objects emitted by the source Observable.
	 * @method dematerialize
	 * @owner Observable
	 */
	function dematerialize() {
	    return this.lift(new DeMaterializeOperator());
	}
	exports.dematerialize = dematerialize;
	var DeMaterializeOperator = (function () {
	    function DeMaterializeOperator() {
	    }
	    DeMaterializeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DeMaterializeSubscriber(subscriber));
	    };
	    return DeMaterializeOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var DeMaterializeSubscriber = (function (_super) {
	    __extends(DeMaterializeSubscriber, _super);
	    function DeMaterializeSubscriber(destination) {
	        _super.call(this, destination);
	    }
	    DeMaterializeSubscriber.prototype._next = function (value) {
	        value.observe(this.destination);
	    };
	    return DeMaterializeSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=dematerialize.js.map

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var debounce_1 = __webpack_require__(168);
	Observable_1.Observable.prototype.debounce = debounce_1.debounce;
	//# sourceMappingURL=debounce.js.map

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Emits a value from the source Observable only after a particular time span
	 * determined by another Observable has passed without another source emission.
	 *
	 * <span class="informal">It's like {@link debounceTime}, but the time span of
	 * emission silence is determined by a second Observable.</span>
	 *
	 * <img src="./img/debounce.png" width="100%">
	 *
	 * `debounce` delays values emitted by the source Observable, but drops previous
	 * pending delayed emissions if a new value arrives on the source Observable.
	 * This operator keeps track of the most recent value from the source
	 * Observable, and spawns a duration Observable by calling the
	 * `durationSelector` function. The value is emitted only when the duration
	 * Observable emits a value or completes, and if no other value was emitted on
	 * the source Observable since the duration Observable was spawned. If a new
	 * value appears before the duration Observable emits, the previous value will
	 * be dropped and will not be emitted on the output Observable.
	 *
	 * Like {@link debounceTime}, this is a rate-limiting operator, and also a
	 * delay-like operator since output emissions do not necessarily occur at the
	 * same time as they did on the source Observable.
	 *
	 * @example <caption>Emit the most recent click after a burst of clicks</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.debounce(() => Rx.Observable.interval(1000));
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link audit}
	 * @see {@link debounceTime}
	 * @see {@link delayWhen}
	 * @see {@link throttle}
	 *
	 * @param {function(value: T): Observable|Promise} durationSelector A function
	 * that receives a value from the source Observable, for computing the timeout
	 * duration for each source value, returned as an Observable or a Promise.
	 * @return {Observable} An Observable that delays the emissions of the source
	 * Observable by the specified duration Observable returned by
	 * `durationSelector`, and may drop some values if they occur too frequently.
	 * @method debounce
	 * @owner Observable
	 */
	function debounce(durationSelector) {
	    return this.lift(new DebounceOperator(durationSelector));
	}
	exports.debounce = debounce;
	var DebounceOperator = (function () {
	    function DebounceOperator(durationSelector) {
	        this.durationSelector = durationSelector;
	    }
	    DebounceOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
	    };
	    return DebounceOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var DebounceSubscriber = (function (_super) {
	    __extends(DebounceSubscriber, _super);
	    function DebounceSubscriber(destination, durationSelector) {
	        _super.call(this, destination);
	        this.durationSelector = durationSelector;
	        this.hasValue = false;
	        this.durationSubscription = null;
	    }
	    DebounceSubscriber.prototype._next = function (value) {
	        try {
	            var result = this.durationSelector.call(this, value);
	            if (result) {
	                this._tryNext(value, result);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    DebounceSubscriber.prototype._complete = function () {
	        this.emitValue();
	        this.destination.complete();
	    };
	    DebounceSubscriber.prototype._tryNext = function (value, duration) {
	        var subscription = this.durationSubscription;
	        this.value = value;
	        this.hasValue = true;
	        if (subscription) {
	            subscription.unsubscribe();
	            this.remove(subscription);
	        }
	        subscription = subscribeToResult_1.subscribeToResult(this, duration);
	        if (!subscription.closed) {
	            this.add(this.durationSubscription = subscription);
	        }
	    };
	    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.emitValue();
	    };
	    DebounceSubscriber.prototype.notifyComplete = function () {
	        this.emitValue();
	    };
	    DebounceSubscriber.prototype.emitValue = function () {
	        if (this.hasValue) {
	            var value = this.value;
	            var subscription = this.durationSubscription;
	            if (subscription) {
	                this.durationSubscription = null;
	                subscription.unsubscribe();
	                this.remove(subscription);
	            }
	            this.value = null;
	            this.hasValue = false;
	            _super.prototype._next.call(this, value);
	        }
	    };
	    return DebounceSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=debounce.js.map

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var debounceTime_1 = __webpack_require__(170);
	Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;
	//# sourceMappingURL=debounceTime.js.map

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var async_1 = __webpack_require__(90);
	/**
	 * Emits a value from the source Observable only after a particular time span
	 * has passed without another source emission.
	 *
	 * <span class="informal">It's like {@link delay}, but passes only the most
	 * recent value from each burst of emissions.</span>
	 *
	 * <img src="./img/debounceTime.png" width="100%">
	 *
	 * `debounceTime` delays values emitted by the source Observable, but drops
	 * previous pending delayed emissions if a new value arrives on the source
	 * Observable. This operator keeps track of the most recent value from the
	 * source Observable, and emits that only when `dueTime` enough time has passed
	 * without any other value appearing on the source Observable. If a new value
	 * appears before `dueTime` silence occurs, the previous value will be dropped
	 * and will not be emitted on the output Observable.
	 *
	 * This is a rate-limiting operator, because it is impossible for more than one
	 * value to be emitted in any time window of duration `dueTime`, but it is also
	 * a delay-like operator since output emissions do not occur at the same time as
	 * they did on the source Observable. Optionally takes a {@link Scheduler} for
	 * managing timers.
	 *
	 * @example <caption>Emit the most recent click after a burst of clicks</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.debounceTime(1000);
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link auditTime}
	 * @see {@link debounce}
	 * @see {@link delay}
	 * @see {@link sampleTime}
	 * @see {@link throttleTime}
	 *
	 * @param {number} dueTime The timeout duration in milliseconds (or the time
	 * unit determined internally by the optional `scheduler`) for the window of
	 * time required to wait for emission silence before emitting the most recent
	 * source value.
	 * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
	 * managing the timers that handle the timeout for each value.
	 * @return {Observable} An Observable that delays the emissions of the source
	 * Observable by the specified `dueTime`, and may drop some values if they occur
	 * too frequently.
	 * @method debounceTime
	 * @owner Observable
	 */
	function debounceTime(dueTime, scheduler) {
	    if (scheduler === void 0) { scheduler = async_1.async; }
	    return this.lift(new DebounceTimeOperator(dueTime, scheduler));
	}
	exports.debounceTime = debounceTime;
	var DebounceTimeOperator = (function () {
	    function DebounceTimeOperator(dueTime, scheduler) {
	        this.dueTime = dueTime;
	        this.scheduler = scheduler;
	    }
	    DebounceTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
	    };
	    return DebounceTimeOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var DebounceTimeSubscriber = (function (_super) {
	    __extends(DebounceTimeSubscriber, _super);
	    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
	        _super.call(this, destination);
	        this.dueTime = dueTime;
	        this.scheduler = scheduler;
	        this.debouncedSubscription = null;
	        this.lastValue = null;
	        this.hasValue = false;
	    }
	    DebounceTimeSubscriber.prototype._next = function (value) {
	        this.clearDebounce();
	        this.lastValue = value;
	        this.hasValue = true;
	        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
	    };
	    DebounceTimeSubscriber.prototype._complete = function () {
	        this.debouncedNext();
	        this.destination.complete();
	    };
	    DebounceTimeSubscriber.prototype.debouncedNext = function () {
	        this.clearDebounce();
	        if (this.hasValue) {
	            this.destination.next(this.lastValue);
	            this.lastValue = null;
	            this.hasValue = false;
	        }
	    };
	    DebounceTimeSubscriber.prototype.clearDebounce = function () {
	        var debouncedSubscription = this.debouncedSubscription;
	        if (debouncedSubscription !== null) {
	            this.remove(debouncedSubscription);
	            debouncedSubscription.unsubscribe();
	            this.debouncedSubscription = null;
	        }
	    };
	    return DebounceTimeSubscriber;
	}(Subscriber_1.Subscriber));
	function dispatchNext(subscriber) {
	    subscriber.debouncedNext();
	}
	//# sourceMappingURL=debounceTime.js.map

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var defaultIfEmpty_1 = __webpack_require__(172);
	Observable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
	//# sourceMappingURL=defaultIfEmpty.js.map

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/* tslint:disable:max-line-length */
	/**
	 * Emits a given value if the source Observable completes without emitting any
	 * `next` value, otherwise mirrors the source Observable.
	 *
	 * <span class="informal">If the source Observable turns out to be empty, then
	 * this operator will emit a default value.</span>
	 *
	 * <img src="./img/defaultIfEmpty.png" width="100%">
	 *
	 * `defaultIfEmpty` emits the values emitted by the source Observable or a
	 * specified default value if the source Observable is empty (completes without
	 * having emitted any `next` value).
	 *
	 * @example <caption>If no clicks happen in 5 seconds, then emit "no clicks"</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));
	 * var result = clicksBeforeFive.defaultIfEmpty('no clicks');
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link empty}
	 * @see {@link last}
	 *
	 * @param {any} [defaultValue=null] The default value used if the source
	 * Observable is empty.
	 * @return {Observable} An Observable that emits either the specified
	 * `defaultValue` if the source Observable emits no items, or the values emitted
	 * by the source Observable.
	 * @method defaultIfEmpty
	 * @owner Observable
	 */
	function defaultIfEmpty(defaultValue) {
	    if (defaultValue === void 0) { defaultValue = null; }
	    return this.lift(new DefaultIfEmptyOperator(defaultValue));
	}
	exports.defaultIfEmpty = defaultIfEmpty;
	var DefaultIfEmptyOperator = (function () {
	    function DefaultIfEmptyOperator(defaultValue) {
	        this.defaultValue = defaultValue;
	    }
	    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
	    };
	    return DefaultIfEmptyOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var DefaultIfEmptySubscriber = (function (_super) {
	    __extends(DefaultIfEmptySubscriber, _super);
	    function DefaultIfEmptySubscriber(destination, defaultValue) {
	        _super.call(this, destination);
	        this.defaultValue = defaultValue;
	        this.isEmpty = true;
	    }
	    DefaultIfEmptySubscriber.prototype._next = function (value) {
	        this.isEmpty = false;
	        this.destination.next(value);
	    };
	    DefaultIfEmptySubscriber.prototype._complete = function () {
	        if (this.isEmpty) {
	            this.destination.next(this.defaultValue);
	        }
	        this.destination.complete();
	    };
	    return DefaultIfEmptySubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=defaultIfEmpty.js.map

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var delay_1 = __webpack_require__(174);
	Observable_1.Observable.prototype.delay = delay_1.delay;
	//# sourceMappingURL=delay.js.map

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var async_1 = __webpack_require__(90);
	var isDate_1 = __webpack_require__(123);
	var Subscriber_1 = __webpack_require__(14);
	var Notification_1 = __webpack_require__(75);
	/**
	 * Delays the emission of items from the source Observable by a given timeout or
	 * until a given Date.
	 *
	 * <span class="informal">Time shifts each item by some specified amount of
	 * milliseconds.</span>
	 *
	 * <img src="./img/delay.png" width="100%">
	 *
	 * If the delay argument is a Number, this operator time shifts the source
	 * Observable by that amount of time expressed in milliseconds. The relative
	 * time intervals between the values are preserved.
	 *
	 * If the delay argument is a Date, this operator time shifts the start of the
	 * Observable execution until the given date occurs.
	 *
	 * @example <caption>Delay each click by one second</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second
	 * delayedClicks.subscribe(x => console.log(x));
	 *
	 * @example <caption>Delay all clicks until a future date happens</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var date = new Date('March 15, 2050 12:00:00'); // in the future
	 * var delayedClicks = clicks.delay(date); // click emitted only after that date
	 * delayedClicks.subscribe(x => console.log(x));
	 *
	 * @see {@link debounceTime}
	 * @see {@link delayWhen}
	 *
	 * @param {number|Date} delay The delay duration in milliseconds (a `number`) or
	 * a `Date` until which the emission of the source items is delayed.
	 * @param {Scheduler} [scheduler=async] The Scheduler to use for
	 * managing the timers that handle the time-shift for each item.
	 * @return {Observable} An Observable that delays the emissions of the source
	 * Observable by the specified timeout or Date.
	 * @method delay
	 * @owner Observable
	 */
	function delay(delay, scheduler) {
	    if (scheduler === void 0) { scheduler = async_1.async; }
	    var absoluteDelay = isDate_1.isDate(delay);
	    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
	    return this.lift(new DelayOperator(delayFor, scheduler));
	}
	exports.delay = delay;
	var DelayOperator = (function () {
	    function DelayOperator(delay, scheduler) {
	        this.delay = delay;
	        this.scheduler = scheduler;
	    }
	    DelayOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
	    };
	    return DelayOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var DelaySubscriber = (function (_super) {
	    __extends(DelaySubscriber, _super);
	    function DelaySubscriber(destination, delay, scheduler) {
	        _super.call(this, destination);
	        this.delay = delay;
	        this.scheduler = scheduler;
	        this.queue = [];
	        this.active = false;
	        this.errored = false;
	    }
	    DelaySubscriber.dispatch = function (state) {
	        var source = state.source;
	        var queue = source.queue;
	        var scheduler = state.scheduler;
	        var destination = state.destination;
	        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
	            queue.shift().notification.observe(destination);
	        }
	        if (queue.length > 0) {
	            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
	            this.schedule(state, delay_1);
	        }
	        else {
	            source.active = false;
	        }
	    };
	    DelaySubscriber.prototype._schedule = function (scheduler) {
	        this.active = true;
	        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
	            source: this, destination: this.destination, scheduler: scheduler
	        }));
	    };
	    DelaySubscriber.prototype.scheduleNotification = function (notification) {
	        if (this.errored === true) {
	            return;
	        }
	        var scheduler = this.scheduler;
	        var message = new DelayMessage(scheduler.now() + this.delay, notification);
	        this.queue.push(message);
	        if (this.active === false) {
	            this._schedule(scheduler);
	        }
	    };
	    DelaySubscriber.prototype._next = function (value) {
	        this.scheduleNotification(Notification_1.Notification.createNext(value));
	    };
	    DelaySubscriber.prototype._error = function (err) {
	        this.errored = true;
	        this.queue = [];
	        this.destination.error(err);
	    };
	    DelaySubscriber.prototype._complete = function () {
	        this.scheduleNotification(Notification_1.Notification.createComplete());
	    };
	    return DelaySubscriber;
	}(Subscriber_1.Subscriber));
	var DelayMessage = (function () {
	    function DelayMessage(time, notification) {
	        this.time = time;
	        this.notification = notification;
	    }
	    return DelayMessage;
	}());
	//# sourceMappingURL=delay.js.map

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var delayWhen_1 = __webpack_require__(176);
	Observable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;
	//# sourceMappingURL=delayWhen.js.map

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var Observable_1 = __webpack_require__(11);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Delays the emission of items from the source Observable by a given time span
	 * determined by the emissions of another Observable.
	 *
	 * <span class="informal">It's like {@link delay}, but the time span of the
	 * delay duration is determined by a second Observable.</span>
	 *
	 * <img src="./img/delayWhen.png" width="100%">
	 *
	 * `delayWhen` time shifts each emitted value from the source Observable by a
	 * time span determined by another Observable. When the source emits a value,
	 * the `delayDurationSelector` function is called with the source value as
	 * argument, and should return an Observable, called the "duration" Observable.
	 * The source value is emitted on the output Observable only when the duration
	 * Observable emits a value or completes.
	 *
	 * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which
	 * is an Observable. When `subscriptionDelay` emits its first value or
	 * completes, the source Observable is subscribed to and starts behaving like
	 * described in the previous paragraph. If `subscriptionDelay` is not provided,
	 * `delayWhen` will subscribe to the source Observable as soon as the output
	 * Observable is subscribed.
	 *
	 * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var delayedClicks = clicks.delayWhen(event =>
	 *   Rx.Observable.interval(Math.random() * 5000)
	 * );
	 * delayedClicks.subscribe(x => console.log(x));
	 *
	 * @see {@link debounce}
	 * @see {@link delay}
	 *
	 * @param {function(value: T): Observable} delayDurationSelector A function that
	 * returns an Observable for each value emitted by the source Observable, which
	 * is then used to delay the emission of that item on the output Observable
	 * until the Observable returned from this function emits a value.
	 * @param {Observable} subscriptionDelay An Observable that triggers the
	 * subscription to the source Observable once it emits any value.
	 * @return {Observable} An Observable that delays the emissions of the source
	 * Observable by an amount of time specified by the Observable returned by
	 * `delayDurationSelector`.
	 * @method delayWhen
	 * @owner Observable
	 */
	function delayWhen(delayDurationSelector, subscriptionDelay) {
	    if (subscriptionDelay) {
	        return new SubscriptionDelayObservable(this, subscriptionDelay)
	            .lift(new DelayWhenOperator(delayDurationSelector));
	    }
	    return this.lift(new DelayWhenOperator(delayDurationSelector));
	}
	exports.delayWhen = delayWhen;
	var DelayWhenOperator = (function () {
	    function DelayWhenOperator(delayDurationSelector) {
	        this.delayDurationSelector = delayDurationSelector;
	    }
	    DelayWhenOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
	    };
	    return DelayWhenOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var DelayWhenSubscriber = (function (_super) {
	    __extends(DelayWhenSubscriber, _super);
	    function DelayWhenSubscriber(destination, delayDurationSelector) {
	        _super.call(this, destination);
	        this.delayDurationSelector = delayDurationSelector;
	        this.completed = false;
	        this.delayNotifierSubscriptions = [];
	        this.values = [];
	    }
	    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(outerValue);
	        this.removeSubscription(innerSub);
	        this.tryComplete();
	    };
	    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
	        var value = this.removeSubscription(innerSub);
	        if (value) {
	            this.destination.next(value);
	        }
	        this.tryComplete();
	    };
	    DelayWhenSubscriber.prototype._next = function (value) {
	        try {
	            var delayNotifier = this.delayDurationSelector(value);
	            if (delayNotifier) {
	                this.tryDelay(delayNotifier, value);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    DelayWhenSubscriber.prototype._complete = function () {
	        this.completed = true;
	        this.tryComplete();
	    };
	    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
	        subscription.unsubscribe();
	        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
	        var value = null;
	        if (subscriptionIdx !== -1) {
	            value = this.values[subscriptionIdx];
	            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
	            this.values.splice(subscriptionIdx, 1);
	        }
	        return value;
	    };
	    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
	        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);
	        this.add(notifierSubscription);
	        this.delayNotifierSubscriptions.push(notifierSubscription);
	        this.values.push(value);
	    };
	    DelayWhenSubscriber.prototype.tryComplete = function () {
	        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
	            this.destination.complete();
	        }
	    };
	    return DelayWhenSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubscriptionDelayObservable = (function (_super) {
	    __extends(SubscriptionDelayObservable, _super);
	    function SubscriptionDelayObservable(source, subscriptionDelay) {
	        _super.call(this);
	        this.source = source;
	        this.subscriptionDelay = subscriptionDelay;
	    }
	    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
	        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
	    };
	    return SubscriptionDelayObservable;
	}(Observable_1.Observable));
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubscriptionDelaySubscriber = (function (_super) {
	    __extends(SubscriptionDelaySubscriber, _super);
	    function SubscriptionDelaySubscriber(parent, source) {
	        _super.call(this);
	        this.parent = parent;
	        this.source = source;
	        this.sourceSubscribed = false;
	    }
	    SubscriptionDelaySubscriber.prototype._next = function (unused) {
	        this.subscribeToSource();
	    };
	    SubscriptionDelaySubscriber.prototype._error = function (err) {
	        this.unsubscribe();
	        this.parent.error(err);
	    };
	    SubscriptionDelaySubscriber.prototype._complete = function () {
	        this.subscribeToSource();
	    };
	    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
	        if (!this.sourceSubscribed) {
	            this.sourceSubscribed = true;
	            this.unsubscribe();
	            this.source.subscribe(this.parent);
	        }
	    };
	    return SubscriptionDelaySubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=delayWhen.js.map

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var distinct_1 = __webpack_require__(178);
	Observable_1.Observable.prototype.distinct = distinct_1.distinct;
	//# sourceMappingURL=distinct.js.map

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	var Set_1 = __webpack_require__(179);
	/**
	 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
	 * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will
	 * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the
	 * source observable directly with an equality check against previous values.
	 * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.
	 * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the
	 * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`
	 * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so
	 * that the internal `Set` can be "flushed", basically clearing it of values.
	 * @param {function} [keySelector] optional function to select which value you want to check as distinct.
	 * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.
	 * @return {Observable} an Observable that emits items from the source Observable with distinct values.
	 * @method distinct
	 * @owner Observable
	 */
	function distinct(keySelector, flushes) {
	    return this.lift(new DistinctOperator(keySelector, flushes));
	}
	exports.distinct = distinct;
	var DistinctOperator = (function () {
	    function DistinctOperator(keySelector, flushes) {
	        this.keySelector = keySelector;
	        this.flushes = flushes;
	    }
	    DistinctOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
	    };
	    return DistinctOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var DistinctSubscriber = (function (_super) {
	    __extends(DistinctSubscriber, _super);
	    function DistinctSubscriber(destination, keySelector, flushes) {
	        _super.call(this, destination);
	        this.keySelector = keySelector;
	        this.values = new Set_1.Set();
	        if (flushes) {
	            this.add(subscribeToResult_1.subscribeToResult(this, flushes));
	        }
	    }
	    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.values.clear();
	    };
	    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    DistinctSubscriber.prototype._next = function (value) {
	        if (this.keySelector) {
	            this._useKeySelector(value);
	        }
	        else {
	            this._finalizeNext(value, value);
	        }
	    };
	    DistinctSubscriber.prototype._useKeySelector = function (value) {
	        var key;
	        var destination = this.destination;
	        try {
	            key = this.keySelector(value);
	        }
	        catch (err) {
	            destination.error(err);
	            return;
	        }
	        this._finalizeNext(key, value);
	    };
	    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
	        var values = this.values;
	        if (!values.has(key)) {
	            values.add(key);
	            this.destination.next(value);
	        }
	    };
	    return DistinctSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	exports.DistinctSubscriber = DistinctSubscriber;
	//# sourceMappingURL=distinct.js.map

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(12);
	function minimalSetImpl() {
	    // THIS IS NOT a full impl of Set, this is just the minimum
	    // bits of functionality we need for this library.
	    return (function () {
	        function MinimalSet() {
	            this._values = [];
	        }
	        MinimalSet.prototype.add = function (value) {
	            if (!this.has(value)) {
	                this._values.push(value);
	            }
	        };
	        MinimalSet.prototype.has = function (value) {
	            return this._values.indexOf(value) !== -1;
	        };
	        Object.defineProperty(MinimalSet.prototype, "size", {
	            get: function () {
	                return this._values.length;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        MinimalSet.prototype.clear = function () {
	            this._values.length = 0;
	        };
	        return MinimalSet;
	    }());
	}
	exports.minimalSetImpl = minimalSetImpl;
	exports.Set = root_1.root.Set || minimalSetImpl();
	//# sourceMappingURL=Set.js.map

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var distinctUntilChanged_1 = __webpack_require__(181);
	Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
	//# sourceMappingURL=distinctUntilChanged.js.map

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	/* tslint:disable:max-line-length */
	/**
	 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
	 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
	 * If a comparator function is not provided, an equality check is used by default.
	 * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.
	 * @return {Observable} an Observable that emits items from the source Observable with distinct values.
	 * @method distinctUntilChanged
	 * @owner Observable
	 */
	function distinctUntilChanged(compare, keySelector) {
	    return this.lift(new DistinctUntilChangedOperator(compare, keySelector));
	}
	exports.distinctUntilChanged = distinctUntilChanged;
	var DistinctUntilChangedOperator = (function () {
	    function DistinctUntilChangedOperator(compare, keySelector) {
	        this.compare = compare;
	        this.keySelector = keySelector;
	    }
	    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
	    };
	    return DistinctUntilChangedOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var DistinctUntilChangedSubscriber = (function (_super) {
	    __extends(DistinctUntilChangedSubscriber, _super);
	    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
	        _super.call(this, destination);
	        this.keySelector = keySelector;
	        this.hasKey = false;
	        if (typeof compare === 'function') {
	            this.compare = compare;
	        }
	    }
	    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
	        return x === y;
	    };
	    DistinctUntilChangedSubscriber.prototype._next = function (value) {
	        var keySelector = this.keySelector;
	        var key = value;
	        if (keySelector) {
	            key = tryCatch_1.tryCatch(this.keySelector)(value);
	            if (key === errorObject_1.errorObject) {
	                return this.destination.error(errorObject_1.errorObject.e);
	            }
	        }
	        var result = false;
	        if (this.hasKey) {
	            result = tryCatch_1.tryCatch(this.compare)(this.key, key);
	            if (result === errorObject_1.errorObject) {
	                return this.destination.error(errorObject_1.errorObject.e);
	            }
	        }
	        else {
	            this.hasKey = true;
	        }
	        if (Boolean(result) === false) {
	            this.key = key;
	            this.destination.next(value);
	        }
	    };
	    return DistinctUntilChangedSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=distinctUntilChanged.js.map

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var distinctUntilKeyChanged_1 = __webpack_require__(183);
	Observable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;
	//# sourceMappingURL=distinctUntilKeyChanged.js.map

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var distinctUntilChanged_1 = __webpack_require__(181);
	/* tslint:disable:max-line-length */
	/**
	 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,
	 * using a property accessed by using the key provided to check if the two items are distinct.
	 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
	 * If a comparator function is not provided, an equality check is used by default.
	 * @param {string} key string key for object property lookup on each item.
	 * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.
	 * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.
	 * @method distinctUntilKeyChanged
	 * @owner Observable
	 */
	function distinctUntilKeyChanged(key, compare) {
	    return distinctUntilChanged_1.distinctUntilChanged.call(this, function (x, y) {
	        if (compare) {
	            return compare(x[key], y[key]);
	        }
	        return x[key] === y[key];
	    });
	}
	exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
	//# sourceMappingURL=distinctUntilKeyChanged.js.map

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var do_1 = __webpack_require__(185);
	Observable_1.Observable.prototype.do = do_1._do;
	Observable_1.Observable.prototype._do = do_1._do;
	//# sourceMappingURL=do.js.map

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/* tslint:disable:max-line-length */
	/**
	 * Perform a side effect for every emission on the source Observable, but return
	 * an Observable that is identical to the source.
	 *
	 * <span class="informal">Intercepts each emission on the source and runs a
	 * function, but returns an output which is identical to the source.</span>
	 *
	 * <img src="./img/do.png" width="100%">
	 *
	 * Returns a mirrored Observable of the source Observable, but modified so that
	 * the provided Observer is called to perform a side effect for every value,
	 * error, and completion emitted by the source. Any errors that are thrown in
	 * the aforementioned Observer or handlers are safely sent down the error path
	 * of the output Observable.
	 *
	 * This operator is useful for debugging your Observables for the correct values
	 * or performing other side effects.
	 *
	 * Note: this is different to a `subscribe` on the Observable. If the Observable
	 * returned by `do` is not subscribed, the side effects specified by the
	 * Observer will never happen. `do` therefore simply spies on existing
	 * execution, it does not trigger an execution to happen like `subscribe` does.
	 *
	 * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var positions = clicks
	 *   .do(ev => console.log(ev))
	 *   .map(ev => ev.clientX);
	 * positions.subscribe(x => console.log(x));
	 *
	 * @see {@link map}
	 * @see {@link subscribe}
	 *
	 * @param {Observer|function} [nextOrObserver] A normal Observer object or a
	 * callback for `next`.
	 * @param {function} [error] Callback for errors in the source.
	 * @param {function} [complete] Callback for the completion of the source.
	 * @return {Observable} An Observable identical to the source, but runs the
	 * specified Observer or callback(s) for each item.
	 * @method do
	 * @name do
	 * @owner Observable
	 */
	function _do(nextOrObserver, error, complete) {
	    return this.lift(new DoOperator(nextOrObserver, error, complete));
	}
	exports._do = _do;
	var DoOperator = (function () {
	    function DoOperator(nextOrObserver, error, complete) {
	        this.nextOrObserver = nextOrObserver;
	        this.error = error;
	        this.complete = complete;
	    }
	    DoOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
	    };
	    return DoOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var DoSubscriber = (function (_super) {
	    __extends(DoSubscriber, _super);
	    function DoSubscriber(destination, nextOrObserver, error, complete) {
	        _super.call(this, destination);
	        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	        safeSubscriber.syncErrorThrowable = true;
	        this.add(safeSubscriber);
	        this.safeSubscriber = safeSubscriber;
	    }
	    DoSubscriber.prototype._next = function (value) {
	        var safeSubscriber = this.safeSubscriber;
	        safeSubscriber.next(value);
	        if (safeSubscriber.syncErrorThrown) {
	            this.destination.error(safeSubscriber.syncErrorValue);
	        }
	        else {
	            this.destination.next(value);
	        }
	    };
	    DoSubscriber.prototype._error = function (err) {
	        var safeSubscriber = this.safeSubscriber;
	        safeSubscriber.error(err);
	        if (safeSubscriber.syncErrorThrown) {
	            this.destination.error(safeSubscriber.syncErrorValue);
	        }
	        else {
	            this.destination.error(err);
	        }
	    };
	    DoSubscriber.prototype._complete = function () {
	        var safeSubscriber = this.safeSubscriber;
	        safeSubscriber.complete();
	        if (safeSubscriber.syncErrorThrown) {
	            this.destination.error(safeSubscriber.syncErrorValue);
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    return DoSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=do.js.map

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var exhaust_1 = __webpack_require__(187);
	Observable_1.Observable.prototype.exhaust = exhaust_1.exhaust;
	//# sourceMappingURL=exhaust.js.map

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Converts a higher-order Observable into a first-order Observable by dropping
	 * inner Observables while the previous inner Observable has not yet completed.
	 *
	 * <span class="informal">Flattens an Observable-of-Observables by dropping the
	 * next inner Observables while the current inner is still executing.</span>
	 *
	 * <img src="./img/exhaust.png" width="100%">
	 *
	 * `exhaust` subscribes to an Observable that emits Observables, also known as a
	 * higher-order Observable. Each time it observes one of these emitted inner
	 * Observables, the output Observable begins emitting the items emitted by that
	 * inner Observable. So far, it behaves like {@link mergeAll}. However,
	 * `exhaust` ignores every new inner Observable if the previous Observable has
	 * not yet completed. Once that one completes, it will accept and flatten the
	 * next inner Observable and repeat this process.
	 *
	 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
	 * var result = higherOrder.exhaust();
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link combineAll}
	 * @see {@link concatAll}
	 * @see {@link switch}
	 * @see {@link mergeAll}
	 * @see {@link exhaustMap}
	 * @see {@link zipAll}
	 *
	 * @return {Observable} Returns an Observable that takes a source of Observables
	 * and propagates the first observable exclusively until it completes before
	 * subscribing to the next.
	 * @method exhaust
	 * @owner Observable
	 */
	function exhaust() {
	    return this.lift(new SwitchFirstOperator());
	}
	exports.exhaust = exhaust;
	var SwitchFirstOperator = (function () {
	    function SwitchFirstOperator() {
	    }
	    SwitchFirstOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SwitchFirstSubscriber(subscriber));
	    };
	    return SwitchFirstOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SwitchFirstSubscriber = (function (_super) {
	    __extends(SwitchFirstSubscriber, _super);
	    function SwitchFirstSubscriber(destination) {
	        _super.call(this, destination);
	        this.hasCompleted = false;
	        this.hasSubscription = false;
	    }
	    SwitchFirstSubscriber.prototype._next = function (value) {
	        if (!this.hasSubscription) {
	            this.hasSubscription = true;
	            this.add(subscribeToResult_1.subscribeToResult(this, value));
	        }
	    };
	    SwitchFirstSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (!this.hasSubscription) {
	            this.destination.complete();
	        }
	    };
	    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.remove(innerSub);
	        this.hasSubscription = false;
	        if (this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return SwitchFirstSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=exhaust.js.map

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var exhaustMap_1 = __webpack_require__(189);
	Observable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;
	//# sourceMappingURL=exhaustMap.js.map

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/* tslint:disable:max-line-length */
	/**
	 * Projects each source value to an Observable which is merged in the output
	 * Observable only if the previous projected Observable has completed.
	 *
	 * <span class="informal">Maps each value to an Observable, then flattens all of
	 * these inner Observables using {@link exhaust}.</span>
	 *
	 * <img src="./img/exhaustMap.png" width="100%">
	 *
	 * Returns an Observable that emits items based on applying a function that you
	 * supply to each item emitted by the source Observable, where that function
	 * returns an (so-called "inner") Observable. When it projects a source value to
	 * an Observable, the output Observable begins emitting the items emitted by
	 * that projected Observable. However, `exhaustMap` ignores every new projected
	 * Observable if the previous projected Observable has not yet completed. Once
	 * that one completes, it will accept and flatten the next projected Observable
	 * and repeat this process.
	 *
	 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link concatMap}
	 * @see {@link exhaust}
	 * @see {@link mergeMap}
	 * @see {@link switchMap}
	 *
	 * @param {function(value: T, ?index: number): Observable} project A function
	 * that, when applied to an item emitted by the source Observable, returns an
	 * Observable.
	 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
	 * A function to produce the value on the output Observable based on the values
	 * and the indices of the source (outer) emission and the inner Observable
	 * emission. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @return {Observable} An Observable containing projected Observables
	 * of each item of the source, ignoring projected Observables that start before
	 * their preceding Observable has completed.
	 * @method exhaustMap
	 * @owner Observable
	 */
	function exhaustMap(project, resultSelector) {
	    return this.lift(new SwitchFirstMapOperator(project, resultSelector));
	}
	exports.exhaustMap = exhaustMap;
	var SwitchFirstMapOperator = (function () {
	    function SwitchFirstMapOperator(project, resultSelector) {
	        this.project = project;
	        this.resultSelector = resultSelector;
	    }
	    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));
	    };
	    return SwitchFirstMapOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SwitchFirstMapSubscriber = (function (_super) {
	    __extends(SwitchFirstMapSubscriber, _super);
	    function SwitchFirstMapSubscriber(destination, project, resultSelector) {
	        _super.call(this, destination);
	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.hasSubscription = false;
	        this.hasCompleted = false;
	        this.index = 0;
	    }
	    SwitchFirstMapSubscriber.prototype._next = function (value) {
	        if (!this.hasSubscription) {
	            this.tryNext(value);
	        }
	    };
	    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {
	        var index = this.index++;
	        var destination = this.destination;
	        try {
	            var result = this.project(value, index);
	            this.hasSubscription = true;
	            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
	        }
	        catch (err) {
	            destination.error(err);
	        }
	    };
	    SwitchFirstMapSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (!this.hasSubscription) {
	            this.destination.complete();
	        }
	    };
	    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
	        if (resultSelector) {
	            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        else {
	            destination.next(innerValue);
	        }
	    };
	    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {
	        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
	        try {
	            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
	            destination.next(result);
	        }
	        catch (err) {
	            destination.error(err);
	        }
	    };
	    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {
	        this.destination.error(err);
	    };
	    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.remove(innerSub);
	        this.hasSubscription = false;
	        if (this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return SwitchFirstMapSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=exhaustMap.js.map

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var expand_1 = __webpack_require__(191);
	Observable_1.Observable.prototype.expand = expand_1.expand;
	//# sourceMappingURL=expand.js.map

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/* tslint:disable:max-line-length */
	/**
	 * Recursively projects each source value to an Observable which is merged in
	 * the output Observable.
	 *
	 * <span class="informal">It's similar to {@link mergeMap}, but applies the
	 * projection function to every source value as well as every output value.
	 * It's recursive.</span>
	 *
	 * <img src="./img/expand.png" width="100%">
	 *
	 * Returns an Observable that emits items based on applying a function that you
	 * supply to each item emitted by the source Observable, where that function
	 * returns an Observable, and then merging those resulting Observables and
	 * emitting the results of this merger. *Expand* will re-emit on the output
	 * Observable every source value. Then, each output value is given to the
	 * `project` function which returns an inner Observable to be merged on the
	 * output Observable. Those output values resulting from the projection are also
	 * given to the `project` function to produce new output values. This is how
	 * *expand* behaves recursively.
	 *
	 * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var powersOfTwo = clicks
	 *   .mapTo(1)
	 *   .expand(x => Rx.Observable.of(2 * x).delay(1000))
	 *   .take(10);
	 * powersOfTwo.subscribe(x => console.log(x));
	 *
	 * @see {@link mergeMap}
	 * @see {@link mergeScan}
	 *
	 * @param {function(value: T, index: number) => Observable} project A function
	 * that, when applied to an item emitted by the source or the output Observable,
	 * returns an Observable.
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
	 * Observables being subscribed to concurrently.
	 * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to
	 * each projected inner Observable.
	 * @return {Observable} An Observable that emits the source values and also
	 * result of applying the projection function to each value emitted on the
	 * output Observable and and merging the results of the Observables obtained
	 * from this transformation.
	 * @method expand
	 * @owner Observable
	 */
	function expand(project, concurrent, scheduler) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    if (scheduler === void 0) { scheduler = undefined; }
	    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
	    return this.lift(new ExpandOperator(project, concurrent, scheduler));
	}
	exports.expand = expand;
	var ExpandOperator = (function () {
	    function ExpandOperator(project, concurrent, scheduler) {
	        this.project = project;
	        this.concurrent = concurrent;
	        this.scheduler = scheduler;
	    }
	    ExpandOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
	    };
	    return ExpandOperator;
	}());
	exports.ExpandOperator = ExpandOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ExpandSubscriber = (function (_super) {
	    __extends(ExpandSubscriber, _super);
	    function ExpandSubscriber(destination, project, concurrent, scheduler) {
	        _super.call(this, destination);
	        this.project = project;
	        this.concurrent = concurrent;
	        this.scheduler = scheduler;
	        this.index = 0;
	        this.active = 0;
	        this.hasCompleted = false;
	        if (concurrent < Number.POSITIVE_INFINITY) {
	            this.buffer = [];
	        }
	    }
	    ExpandSubscriber.dispatch = function (arg) {
	        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
	        subscriber.subscribeToProjection(result, value, index);
	    };
	    ExpandSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        if (destination.closed) {
	            this._complete();
	            return;
	        }
	        var index = this.index++;
	        if (this.active < this.concurrent) {
	            destination.next(value);
	            var result = tryCatch_1.tryCatch(this.project)(value, index);
	            if (result === errorObject_1.errorObject) {
	                destination.error(errorObject_1.errorObject.e);
	            }
	            else if (!this.scheduler) {
	                this.subscribeToProjection(result, value, index);
	            }
	            else {
	                var state = { subscriber: this, result: result, value: value, index: index };
	                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
	            }
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
	        this.active++;
	        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
	    };
	    ExpandSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this._next(innerValue);
	    };
	    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer && buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    return ExpandSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	exports.ExpandSubscriber = ExpandSubscriber;
	//# sourceMappingURL=expand.js.map

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var elementAt_1 = __webpack_require__(193);
	Observable_1.Observable.prototype.elementAt = elementAt_1.elementAt;
	//# sourceMappingURL=elementAt.js.map

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var ArgumentOutOfRangeError_1 = __webpack_require__(194);
	/**
	 * Emits the single value at the specified `index` in a sequence of emissions
	 * from the source Observable.
	 *
	 * <span class="informal">Emits only the i-th value, then completes.</span>
	 *
	 * <img src="./img/elementAt.png" width="100%">
	 *
	 * `elementAt` returns an Observable that emits the item at the specified
	 * `index` in the source Observable, or a default value if that `index` is out
	 * of range and the `default` argument is provided. If the `default` argument is
	 * not given and the `index` is out of range, the output Observable will emit an
	 * `ArgumentOutOfRangeError` error.
	 *
	 * @example <caption>Emit only the third click event</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.elementAt(2);
	 * result.subscribe(x => console.log(x));
	 *
	 * // Results in:
	 * // click 1 = nothing
	 * // click 2 = nothing
	 * // click 3 = MouseEvent object logged to console
	 *
	 * @see {@link first}
	 * @see {@link last}
	 * @see {@link skip}
	 * @see {@link single}
	 * @see {@link take}
	 *
	 * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an
	 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the
	 * Observable has completed before emitting the i-th `next` notification.
	 *
	 * @param {number} index Is the number `i` for the i-th source emission that has
	 * happened since the subscription, starting from the number `0`.
	 * @param {T} [defaultValue] The default value returned for missing indices.
	 * @return {Observable} An Observable that emits a single item, if it is found.
	 * Otherwise, will emit the default value if given. If not, then emits an error.
	 * @method elementAt
	 * @owner Observable
	 */
	function elementAt(index, defaultValue) {
	    return this.lift(new ElementAtOperator(index, defaultValue));
	}
	exports.elementAt = elementAt;
	var ElementAtOperator = (function () {
	    function ElementAtOperator(index, defaultValue) {
	        this.index = index;
	        this.defaultValue = defaultValue;
	        if (index < 0) {
	            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
	        }
	    }
	    ElementAtOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));
	    };
	    return ElementAtOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ElementAtSubscriber = (function (_super) {
	    __extends(ElementAtSubscriber, _super);
	    function ElementAtSubscriber(destination, index, defaultValue) {
	        _super.call(this, destination);
	        this.index = index;
	        this.defaultValue = defaultValue;
	    }
	    ElementAtSubscriber.prototype._next = function (x) {
	        if (this.index-- === 0) {
	            this.destination.next(x);
	            this.destination.complete();
	        }
	    };
	    ElementAtSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (this.index >= 0) {
	            if (typeof this.defaultValue !== 'undefined') {
	                destination.next(this.defaultValue);
	            }
	            else {
	                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);
	            }
	        }
	        destination.complete();
	    };
	    return ElementAtSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=elementAt.js.map

/***/ },
/* 194 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an element was queried at a certain index of an
	 * Observable, but no such index or position exists in that sequence.
	 *
	 * @see {@link elementAt}
	 * @see {@link take}
	 * @see {@link takeLast}
	 *
	 * @class ArgumentOutOfRangeError
	 */
	var ArgumentOutOfRangeError = (function (_super) {
	    __extends(ArgumentOutOfRangeError, _super);
	    function ArgumentOutOfRangeError() {
	        var err = _super.call(this, 'argument out of range');
	        this.name = err.name = 'ArgumentOutOfRangeError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return ArgumentOutOfRangeError;
	}(Error));
	exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;
	//# sourceMappingURL=ArgumentOutOfRangeError.js.map

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var filter_1 = __webpack_require__(196);
	Observable_1.Observable.prototype.filter = filter_1.filter;
	//# sourceMappingURL=filter.js.map

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/* tslint:disable:max-line-length */
	/**
	 * Filter items emitted by the source Observable by only emitting those that
	 * satisfy a specified predicate.
	 *
	 * <span class="informal">Like
	 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
	 * it only emits a value from the source if it passes a criterion function.</span>
	 *
	 * <img src="./img/filter.png" width="100%">
	 *
	 * Similar to the well-known `Array.prototype.filter` method, this operator
	 * takes values from the source Observable, passes them through a `predicate`
	 * function and only emits those values that yielded `true`.
	 *
	 * @example <caption>Emit only click events whose target was a DIV element</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
	 * clicksOnDivs.subscribe(x => console.log(x));
	 *
	 * @see {@link distinct}
	 * @see {@link distinctUntilChanged}
	 * @see {@link distinctUntilKeyChanged}
	 * @see {@link ignoreElements}
	 * @see {@link partition}
	 * @see {@link skip}
	 *
	 * @param {function(value: T, index: number): boolean} predicate A function that
	 * evaluates each value emitted by the source Observable. If it returns `true`,
	 * the value is emitted, if `false` the value is not passed to the output
	 * Observable. The `index` parameter is the number `i` for the i-th source
	 * emission that has happened since the subscription, starting from the number
	 * `0`.
	 * @param {any} [thisArg] An optional argument to determine the value of `this`
	 * in the `predicate` function.
	 * @return {Observable} An Observable of values from the source that were
	 * allowed by the `predicate` function.
	 * @method filter
	 * @owner Observable
	 */
	function filter(predicate, thisArg) {
	    return this.lift(new FilterOperator(predicate, thisArg));
	}
	exports.filter = filter;
	var FilterOperator = (function () {
	    function FilterOperator(predicate, thisArg) {
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	    }
	    FilterOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
	    };
	    return FilterOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var FilterSubscriber = (function (_super) {
	    __extends(FilterSubscriber, _super);
	    function FilterSubscriber(destination, predicate, thisArg) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.count = 0;
	        this.predicate = predicate;
	    }
	    // the try catch block below is left specifically for
	    // optimization and perf reasons. a tryCatcher is not necessary here.
	    FilterSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.predicate.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            this.destination.next(value);
	        }
	    };
	    return FilterSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=filter.js.map

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var finally_1 = __webpack_require__(198);
	Observable_1.Observable.prototype.finally = finally_1._finally;
	Observable_1.Observable.prototype._finally = finally_1._finally;
	//# sourceMappingURL=finally.js.map

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var Subscription_1 = __webpack_require__(16);
	/**
	 * Returns an Observable that mirrors the source Observable, but will call a specified function when
	 * the source terminates on complete or error.
	 * @param {function} callback function to be called when source terminates.
	 * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.
	 * @method finally
	 * @owner Observable
	 */
	function _finally(callback) {
	    return this.lift(new FinallyOperator(callback));
	}
	exports._finally = _finally;
	var FinallyOperator = (function () {
	    function FinallyOperator(callback) {
	        this.callback = callback;
	    }
	    FinallyOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
	    };
	    return FinallyOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var FinallySubscriber = (function (_super) {
	    __extends(FinallySubscriber, _super);
	    function FinallySubscriber(destination, callback) {
	        _super.call(this, destination);
	        this.add(new Subscription_1.Subscription(callback));
	    }
	    return FinallySubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=finally.js.map

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var find_1 = __webpack_require__(200);
	Observable_1.Observable.prototype.find = find_1.find;
	//# sourceMappingURL=find.js.map

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/* tslint:disable:max-line-length */
	/**
	 * Emits only the first value emitted by the source Observable that meets some
	 * condition.
	 *
	 * <span class="informal">Finds the first value that passes some test and emits
	 * that.</span>
	 *
	 * <img src="./img/find.png" width="100%">
	 *
	 * `find` searches for the first item in the source Observable that matches the
	 * specified condition embodied by the `predicate`, and returns the first
	 * occurrence in the source. Unlike {@link first}, the `predicate` is required
	 * in `find`, and does not emit an error if a valid value is not found.
	 *
	 * @example <caption>Find and emit the first click that happens on a DIV element</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.find(ev => ev.target.tagName === 'DIV');
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link filter}
	 * @see {@link first}
	 * @see {@link findIndex}
	 * @see {@link take}
	 *
	 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
	 * A function called with each item to test for condition matching.
	 * @param {any} [thisArg] An optional argument to determine the value of `this`
	 * in the `predicate` function.
	 * @return {Observable<T>} An Observable of the first item that matches the
	 * condition.
	 * @method find
	 * @owner Observable
	 */
	function find(predicate, thisArg) {
	    if (typeof predicate !== 'function') {
	        throw new TypeError('predicate is not a function');
	    }
	    return this.lift(new FindValueOperator(predicate, this, false, thisArg));
	}
	exports.find = find;
	var FindValueOperator = (function () {
	    function FindValueOperator(predicate, source, yieldIndex, thisArg) {
	        this.predicate = predicate;
	        this.source = source;
	        this.yieldIndex = yieldIndex;
	        this.thisArg = thisArg;
	    }
	    FindValueOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
	    };
	    return FindValueOperator;
	}());
	exports.FindValueOperator = FindValueOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var FindValueSubscriber = (function (_super) {
	    __extends(FindValueSubscriber, _super);
	    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.source = source;
	        this.yieldIndex = yieldIndex;
	        this.thisArg = thisArg;
	        this.index = 0;
	    }
	    FindValueSubscriber.prototype.notifyComplete = function (value) {
	        var destination = this.destination;
	        destination.next(value);
	        destination.complete();
	    };
	    FindValueSubscriber.prototype._next = function (value) {
	        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
	        var index = this.index++;
	        try {
	            var result = predicate.call(thisArg || this, value, index, this.source);
	            if (result) {
	                this.notifyComplete(this.yieldIndex ? index : value);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    FindValueSubscriber.prototype._complete = function () {
	        this.notifyComplete(this.yieldIndex ? -1 : undefined);
	    };
	    return FindValueSubscriber;
	}(Subscriber_1.Subscriber));
	exports.FindValueSubscriber = FindValueSubscriber;
	//# sourceMappingURL=find.js.map

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var findIndex_1 = __webpack_require__(202);
	Observable_1.Observable.prototype.findIndex = findIndex_1.findIndex;
	//# sourceMappingURL=findIndex.js.map

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var find_1 = __webpack_require__(200);
	/**
	 * Emits only the index of the first value emitted by the source Observable that
	 * meets some condition.
	 *
	 * <span class="informal">It's like {@link find}, but emits the index of the
	 * found value, not the value itself.</span>
	 *
	 * <img src="./img/findIndex.png" width="100%">
	 *
	 * `findIndex` searches for the first item in the source Observable that matches
	 * the specified condition embodied by the `predicate`, and returns the
	 * (zero-based) index of the first occurrence in the source. Unlike
	 * {@link first}, the `predicate` is required in `findIndex`, and does not emit
	 * an error if a valid value is not found.
	 *
	 * @example <caption>Emit the index of first click that happens on a DIV element</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link filter}
	 * @see {@link find}
	 * @see {@link first}
	 * @see {@link take}
	 *
	 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
	 * A function called with each item to test for condition matching.
	 * @param {any} [thisArg] An optional argument to determine the value of `this`
	 * in the `predicate` function.
	 * @return {Observable} An Observable of the index of the first item that
	 * matches the condition.
	 * @method find
	 * @owner Observable
	 */
	function findIndex(predicate, thisArg) {
	    return this.lift(new find_1.FindValueOperator(predicate, this, true, thisArg));
	}
	exports.findIndex = findIndex;
	//# sourceMappingURL=findIndex.js.map

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var first_1 = __webpack_require__(204);
	Observable_1.Observable.prototype.first = first_1.first;
	//# sourceMappingURL=first.js.map

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var EmptyError_1 = __webpack_require__(205);
	/**
	 * Emits only the first value (or the first value that meets some condition)
	 * emitted by the source Observable.
	 *
	 * <span class="informal">Emits only the first value. Or emits only the first
	 * value that passes some test.</span>
	 *
	 * <img src="./img/first.png" width="100%">
	 *
	 * If called with no arguments, `first` emits the first value of the source
	 * Observable, then completes. If called with a `predicate` function, `first`
	 * emits the first value of the source that matches the specified condition. It
	 * may also take a `resultSelector` function to produce the output value from
	 * the input value, and a `defaultValue` to emit in case the source completes
	 * before it is able to emit a valid value. Throws an error if `defaultValue`
	 * was not provided and a matching element is not found.
	 *
	 * @example <caption>Emit only the first click that happens on the DOM</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.first();
	 * result.subscribe(x => console.log(x));
	 *
	 * @example <caption>Emits the first click that happens on a DIV</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link filter}
	 * @see {@link find}
	 * @see {@link take}
	 *
	 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
	 * callback if the Observable completes before any `next` notification was sent.
	 *
	 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
	 * An optional function called with each item to test for condition matching.
	 * @param {function(value: T, index: number): R} [resultSelector] A function to
	 * produce the value on the output Observable based on the values
	 * and the indices of the source Observable. The arguments passed to this
	 * function are:
	 * - `value`: the value that was emitted on the source.
	 * - `index`: the "index" of the value from the source.
	 * @param {R} [defaultValue] The default value emitted in case no valid value
	 * was found on the source.
	 * @return {Observable<T|R>} an Observable of the first item that matches the
	 * condition.
	 * @method first
	 * @owner Observable
	 */
	function first(predicate, resultSelector, defaultValue) {
	    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
	}
	exports.first = first;
	var FirstOperator = (function () {
	    function FirstOperator(predicate, resultSelector, defaultValue, source) {
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	    }
	    FirstOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
	    };
	    return FirstOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var FirstSubscriber = (function (_super) {
	    __extends(FirstSubscriber, _super);
	    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	        this.index = 0;
	        this.hasCompleted = false;
	        this._emitted = false;
	    }
	    FirstSubscriber.prototype._next = function (value) {
	        var index = this.index++;
	        if (this.predicate) {
	            this._tryPredicate(value, index);
	        }
	        else {
	            this._emit(value, index);
	        }
	    };
	    FirstSubscriber.prototype._tryPredicate = function (value, index) {
	        var result;
	        try {
	            result = this.predicate(value, index, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            this._emit(value, index);
	        }
	    };
	    FirstSubscriber.prototype._emit = function (value, index) {
	        if (this.resultSelector) {
	            this._tryResultSelector(value, index);
	            return;
	        }
	        this._emitFinal(value);
	    };
	    FirstSubscriber.prototype._tryResultSelector = function (value, index) {
	        var result;
	        try {
	            result = this.resultSelector(value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this._emitFinal(result);
	    };
	    FirstSubscriber.prototype._emitFinal = function (value) {
	        var destination = this.destination;
	        if (!this._emitted) {
	            this._emitted = true;
	            destination.next(value);
	            destination.complete();
	            this.hasCompleted = true;
	        }
	    };
	    FirstSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
	            destination.next(this.defaultValue);
	            destination.complete();
	        }
	        else if (!this.hasCompleted) {
	            destination.error(new EmptyError_1.EmptyError);
	        }
	    };
	    return FirstSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=first.js.map

/***/ },
/* 205 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an Observable or a sequence was queried but has no
	 * elements.
	 *
	 * @see {@link first}
	 * @see {@link last}
	 * @see {@link single}
	 *
	 * @class EmptyError
	 */
	var EmptyError = (function (_super) {
	    __extends(EmptyError, _super);
	    function EmptyError() {
	        var err = _super.call(this, 'no elements in sequence');
	        this.name = err.name = 'EmptyError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return EmptyError;
	}(Error));
	exports.EmptyError = EmptyError;
	//# sourceMappingURL=EmptyError.js.map

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var groupBy_1 = __webpack_require__(207);
	Observable_1.Observable.prototype.groupBy = groupBy_1.groupBy;
	//# sourceMappingURL=groupBy.js.map

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var Subscription_1 = __webpack_require__(16);
	var Observable_1 = __webpack_require__(11);
	var Subject_1 = __webpack_require__(34);
	var Map_1 = __webpack_require__(208);
	var FastMap_1 = __webpack_require__(210);
	/* tslint:disable:max-line-length */
	/**
	 * Groups the items emitted by an Observable according to a specified criterion,
	 * and emits these grouped items as `GroupedObservables`, one
	 * {@link GroupedObservable} per group.
	 *
	 * <img src="./img/groupBy.png" width="100%">
	 *
	 * @param {function(value: T): K} keySelector a function that extracts the key
	 * for each item.
	 * @param {function(value: T): R} [elementSelector] a function that extracts the
	 * return element for each item.
	 * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]
	 * a function that returns an Observable to determine how long each group should
	 * exist.
	 * @return {Observable<GroupedObservable<K,R>>} an Observable that emits
	 * GroupedObservables, each of which corresponds to a unique key value and each
	 * of which emits those items from the source Observable that share that key
	 * value.
	 * @method groupBy
	 * @owner Observable
	 */
	function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
	    return this.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
	}
	exports.groupBy = groupBy;
	var GroupByOperator = (function () {
	    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
	        this.keySelector = keySelector;
	        this.elementSelector = elementSelector;
	        this.durationSelector = durationSelector;
	        this.subjectSelector = subjectSelector;
	    }
	    GroupByOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
	    };
	    return GroupByOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var GroupBySubscriber = (function (_super) {
	    __extends(GroupBySubscriber, _super);
	    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
	        _super.call(this, destination);
	        this.keySelector = keySelector;
	        this.elementSelector = elementSelector;
	        this.durationSelector = durationSelector;
	        this.subjectSelector = subjectSelector;
	        this.groups = null;
	        this.attemptedToUnsubscribe = false;
	        this.count = 0;
	    }
	    GroupBySubscriber.prototype._next = function (value) {
	        var key;
	        try {
	            key = this.keySelector(value);
	        }
	        catch (err) {
	            this.error(err);
	            return;
	        }
	        this._group(value, key);
	    };
	    GroupBySubscriber.prototype._group = function (value, key) {
	        var groups = this.groups;
	        if (!groups) {
	            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();
	        }
	        var group = groups.get(key);
	        var element;
	        if (this.elementSelector) {
	            try {
	                element = this.elementSelector(value);
	            }
	            catch (err) {
	                this.error(err);
	            }
	        }
	        else {
	            element = value;
	        }
	        if (!group) {
	            group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();
	            groups.set(key, group);
	            var groupedObservable = new GroupedObservable(key, group, this);
	            this.destination.next(groupedObservable);
	            if (this.durationSelector) {
	                var duration = void 0;
	                try {
	                    duration = this.durationSelector(new GroupedObservable(key, group));
	                }
	                catch (err) {
	                    this.error(err);
	                    return;
	                }
	                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
	            }
	        }
	        if (!group.closed) {
	            group.next(element);
	        }
	    };
	    GroupBySubscriber.prototype._error = function (err) {
	        var groups = this.groups;
	        if (groups) {
	            groups.forEach(function (group, key) {
	                group.error(err);
	            });
	            groups.clear();
	        }
	        this.destination.error(err);
	    };
	    GroupBySubscriber.prototype._complete = function () {
	        var groups = this.groups;
	        if (groups) {
	            groups.forEach(function (group, key) {
	                group.complete();
	            });
	            groups.clear();
	        }
	        this.destination.complete();
	    };
	    GroupBySubscriber.prototype.removeGroup = function (key) {
	        this.groups.delete(key);
	    };
	    GroupBySubscriber.prototype.unsubscribe = function () {
	        if (!this.closed && !this.attemptedToUnsubscribe) {
	            this.attemptedToUnsubscribe = true;
	            if (this.count === 0) {
	                _super.prototype.unsubscribe.call(this);
	            }
	        }
	    };
	    return GroupBySubscriber;
	}(Subscriber_1.Subscriber));
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var GroupDurationSubscriber = (function (_super) {
	    __extends(GroupDurationSubscriber, _super);
	    function GroupDurationSubscriber(key, group, parent) {
	        _super.call(this);
	        this.key = key;
	        this.group = group;
	        this.parent = parent;
	    }
	    GroupDurationSubscriber.prototype._next = function (value) {
	        this._complete();
	    };
	    GroupDurationSubscriber.prototype._error = function (err) {
	        var group = this.group;
	        if (!group.closed) {
	            group.error(err);
	        }
	        this.parent.removeGroup(this.key);
	    };
	    GroupDurationSubscriber.prototype._complete = function () {
	        var group = this.group;
	        if (!group.closed) {
	            group.complete();
	        }
	        this.parent.removeGroup(this.key);
	    };
	    return GroupDurationSubscriber;
	}(Subscriber_1.Subscriber));
	/**
	 * An Observable representing values belonging to the same group represented by
	 * a common key. The values emitted by a GroupedObservable come from the source
	 * Observable. The common key is available as the field `key` on a
	 * GroupedObservable instance.
	 *
	 * @class GroupedObservable<K, T>
	 */
	var GroupedObservable = (function (_super) {
	    __extends(GroupedObservable, _super);
	    function GroupedObservable(key, groupSubject, refCountSubscription) {
	        _super.call(this);
	        this.key = key;
	        this.groupSubject = groupSubject;
	        this.refCountSubscription = refCountSubscription;
	    }
	    GroupedObservable.prototype._subscribe = function (subscriber) {
	        var subscription = new Subscription_1.Subscription();
	        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
	        if (refCountSubscription && !refCountSubscription.closed) {
	            subscription.add(new InnerRefCountSubscription(refCountSubscription));
	        }
	        subscription.add(groupSubject.subscribe(subscriber));
	        return subscription;
	    };
	    return GroupedObservable;
	}(Observable_1.Observable));
	exports.GroupedObservable = GroupedObservable;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var InnerRefCountSubscription = (function (_super) {
	    __extends(InnerRefCountSubscription, _super);
	    function InnerRefCountSubscription(parent) {
	        _super.call(this);
	        this.parent = parent;
	        parent.count++;
	    }
	    InnerRefCountSubscription.prototype.unsubscribe = function () {
	        var parent = this.parent;
	        if (!parent.closed && !this.closed) {
	            _super.prototype.unsubscribe.call(this);
	            parent.count -= 1;
	            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
	                parent.unsubscribe();
	            }
	        }
	    };
	    return InnerRefCountSubscription;
	}(Subscription_1.Subscription));
	//# sourceMappingURL=groupBy.js.map

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(12);
	var MapPolyfill_1 = __webpack_require__(209);
	exports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();
	//# sourceMappingURL=Map.js.map

/***/ },
/* 209 */
/***/ function(module, exports) {

	"use strict";
	var MapPolyfill = (function () {
	    function MapPolyfill() {
	        this.size = 0;
	        this._values = [];
	        this._keys = [];
	    }
	    MapPolyfill.prototype.get = function (key) {
	        var i = this._keys.indexOf(key);
	        return i === -1 ? undefined : this._values[i];
	    };
	    MapPolyfill.prototype.set = function (key, value) {
	        var i = this._keys.indexOf(key);
	        if (i === -1) {
	            this._keys.push(key);
	            this._values.push(value);
	            this.size++;
	        }
	        else {
	            this._values[i] = value;
	        }
	        return this;
	    };
	    MapPolyfill.prototype.delete = function (key) {
	        var i = this._keys.indexOf(key);
	        if (i === -1) {
	            return false;
	        }
	        this._values.splice(i, 1);
	        this._keys.splice(i, 1);
	        this.size--;
	        return true;
	    };
	    MapPolyfill.prototype.clear = function () {
	        this._keys.length = 0;
	        this._values.length = 0;
	        this.size = 0;
	    };
	    MapPolyfill.prototype.forEach = function (cb, thisArg) {
	        for (var i = 0; i < this.size; i++) {
	            cb.call(thisArg, this._values[i], this._keys[i]);
	        }
	    };
	    return MapPolyfill;
	}());
	exports.MapPolyfill = MapPolyfill;
	//# sourceMappingURL=MapPolyfill.js.map

/***/ },
/* 210 */
/***/ function(module, exports) {

	"use strict";
	var FastMap = (function () {
	    function FastMap() {
	        this.values = {};
	    }
	    FastMap.prototype.delete = function (key) {
	        this.values[key] = null;
	        return true;
	    };
	    FastMap.prototype.set = function (key, value) {
	        this.values[key] = value;
	        return this;
	    };
	    FastMap.prototype.get = function (key) {
	        return this.values[key];
	    };
	    FastMap.prototype.forEach = function (cb, thisArg) {
	        var values = this.values;
	        for (var key in values) {
	            if (values.hasOwnProperty(key) && values[key] !== null) {
	                cb.call(thisArg, values[key], key);
	            }
	        }
	    };
	    FastMap.prototype.clear = function () {
	        this.values = {};
	    };
	    return FastMap;
	}());
	exports.FastMap = FastMap;
	//# sourceMappingURL=FastMap.js.map

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var ignoreElements_1 = __webpack_require__(212);
	Observable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;
	//# sourceMappingURL=ignoreElements.js.map

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var noop_1 = __webpack_require__(103);
	/**
	 * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.
	 *
	 * <img src="./img/ignoreElements.png" width="100%">
	 *
	 * @return {Observable} an empty Observable that only calls `complete`
	 * or `error`, based on which one is called by the source Observable.
	 * @method ignoreElements
	 * @owner Observable
	 */
	function ignoreElements() {
	    return this.lift(new IgnoreElementsOperator());
	}
	exports.ignoreElements = ignoreElements;
	;
	var IgnoreElementsOperator = (function () {
	    function IgnoreElementsOperator() {
	    }
	    IgnoreElementsOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new IgnoreElementsSubscriber(subscriber));
	    };
	    return IgnoreElementsOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var IgnoreElementsSubscriber = (function (_super) {
	    __extends(IgnoreElementsSubscriber, _super);
	    function IgnoreElementsSubscriber() {
	        _super.apply(this, arguments);
	    }
	    IgnoreElementsSubscriber.prototype._next = function (unused) {
	        noop_1.noop();
	    };
	    return IgnoreElementsSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=ignoreElements.js.map

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var isEmpty_1 = __webpack_require__(214);
	Observable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;
	//# sourceMappingURL=isEmpty.js.map

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.
	 *
	 * <img src="./img/isEmpty.png" width="100%">
	 *
	 * @return {Observable} an Observable that emits a Boolean.
	 * @method isEmpty
	 * @owner Observable
	 */
	function isEmpty() {
	    return this.lift(new IsEmptyOperator());
	}
	exports.isEmpty = isEmpty;
	var IsEmptyOperator = (function () {
	    function IsEmptyOperator() {
	    }
	    IsEmptyOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new IsEmptySubscriber(observer));
	    };
	    return IsEmptyOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var IsEmptySubscriber = (function (_super) {
	    __extends(IsEmptySubscriber, _super);
	    function IsEmptySubscriber(destination) {
	        _super.call(this, destination);
	    }
	    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
	        var destination = this.destination;
	        destination.next(isEmpty);
	        destination.complete();
	    };
	    IsEmptySubscriber.prototype._next = function (value) {
	        this.notifyComplete(false);
	    };
	    IsEmptySubscriber.prototype._complete = function () {
	        this.notifyComplete(true);
	    };
	    return IsEmptySubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=isEmpty.js.map

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var audit_1 = __webpack_require__(216);
	Observable_1.Observable.prototype.audit = audit_1.audit;
	//# sourceMappingURL=audit.js.map

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Ignores source values for a duration determined by another Observable, then
	 * emits the most recent value from the source Observable, then repeats this
	 * process.
	 *
	 * <span class="informal">It's like {@link auditTime}, but the silencing
	 * duration is determined by a second Observable.</span>
	 *
	 * <img src="./img/audit.png" width="100%">
	 *
	 * `audit` is similar to `throttle`, but emits the last value from the silenced
	 * time window, instead of the first value. `audit` emits the most recent value
	 * from the source Observable on the output Observable as soon as its internal
	 * timer becomes disabled, and ignores source values while the timer is enabled.
	 * Initially, the timer is disabled. As soon as the first source value arrives,
	 * the timer is enabled by calling the `durationSelector` function with the
	 * source value, which returns the "duration" Observable. When the duration
	 * Observable emits a value or completes, the timer is disabled, then the most
	 * recent source value is emitted on the output Observable, and this process
	 * repeats for the next source value.
	 *
	 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.audit(ev => Rx.Observable.interval(1000));
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link auditTime}
	 * @see {@link debounce}
	 * @see {@link delayWhen}
	 * @see {@link sample}
	 * @see {@link throttle}
	 *
	 * @param {function(value: T): Observable|Promise} durationSelector A function
	 * that receives a value from the source Observable, for computing the silencing
	 * duration, returned as an Observable or a Promise.
	 * @return {Observable<T>} An Observable that performs rate-limiting of
	 * emissions from the source Observable.
	 * @method audit
	 * @owner Observable
	 */
	function audit(durationSelector) {
	    return this.lift(new AuditOperator(durationSelector));
	}
	exports.audit = audit;
	var AuditOperator = (function () {
	    function AuditOperator(durationSelector) {
	        this.durationSelector = durationSelector;
	    }
	    AuditOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
	    };
	    return AuditOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var AuditSubscriber = (function (_super) {
	    __extends(AuditSubscriber, _super);
	    function AuditSubscriber(destination, durationSelector) {
	        _super.call(this, destination);
	        this.durationSelector = durationSelector;
	        this.hasValue = false;
	    }
	    AuditSubscriber.prototype._next = function (value) {
	        this.value = value;
	        this.hasValue = true;
	        if (!this.throttled) {
	            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);
	            if (duration === errorObject_1.errorObject) {
	                this.destination.error(errorObject_1.errorObject.e);
	            }
	            else {
	                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
	            }
	        }
	    };
	    AuditSubscriber.prototype.clearThrottle = function () {
	        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
	        if (throttled) {
	            this.remove(throttled);
	            this.throttled = null;
	            throttled.unsubscribe();
	        }
	        if (hasValue) {
	            this.value = null;
	            this.hasValue = false;
	            this.destination.next(value);
	        }
	    };
	    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
	        this.clearThrottle();
	    };
	    AuditSubscriber.prototype.notifyComplete = function () {
	        this.clearThrottle();
	    };
	    return AuditSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=audit.js.map

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var auditTime_1 = __webpack_require__(218);
	Observable_1.Observable.prototype.auditTime = auditTime_1.auditTime;
	//# sourceMappingURL=auditTime.js.map

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var async_1 = __webpack_require__(90);
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Ignores source values for `duration` milliseconds, then emits the most recent
	 * value from the source Observable, then repeats this process.
	 *
	 * <span class="informal">When it sees a source values, it ignores that plus
	 * the next ones for `duration` milliseconds, and then it emits the most recent
	 * value from the source.</span>
	 *
	 * <img src="./img/auditTime.png" width="100%">
	 *
	 * `auditTime` is similar to `throttleTime`, but emits the last value from the
	 * silenced time window, instead of the first value. `auditTime` emits the most
	 * recent value from the source Observable on the output Observable as soon as
	 * its internal timer becomes disabled, and ignores source values while the
	 * timer is enabled. Initially, the timer is disabled. As soon as the first
	 * source value arrives, the timer is enabled. After `duration` milliseconds (or
	 * the time unit determined internally by the optional `scheduler`) has passed,
	 * the timer is disabled, then the most recent source value is emitted on the
	 * output Observable, and this process repeats for the next source value.
	 * Optionally takes a {@link Scheduler} for managing timers.
	 *
	 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.auditTime(1000);
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link audit}
	 * @see {@link debounceTime}
	 * @see {@link delay}
	 * @see {@link sampleTime}
	 * @see {@link throttleTime}
	 *
	 * @param {number} duration Time to wait before emitting the most recent source
	 * value, measured in milliseconds or the time unit determined internally
	 * by the optional `scheduler`.
	 * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
	 * managing the timers that handle the rate-limiting behavior.
	 * @return {Observable<T>} An Observable that performs rate-limiting of
	 * emissions from the source Observable.
	 * @method auditTime
	 * @owner Observable
	 */
	function auditTime(duration, scheduler) {
	    if (scheduler === void 0) { scheduler = async_1.async; }
	    return this.lift(new AuditTimeOperator(duration, scheduler));
	}
	exports.auditTime = auditTime;
	var AuditTimeOperator = (function () {
	    function AuditTimeOperator(duration, scheduler) {
	        this.duration = duration;
	        this.scheduler = scheduler;
	    }
	    AuditTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));
	    };
	    return AuditTimeOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var AuditTimeSubscriber = (function (_super) {
	    __extends(AuditTimeSubscriber, _super);
	    function AuditTimeSubscriber(destination, duration, scheduler) {
	        _super.call(this, destination);
	        this.duration = duration;
	        this.scheduler = scheduler;
	        this.hasValue = false;
	    }
	    AuditTimeSubscriber.prototype._next = function (value) {
	        this.value = value;
	        this.hasValue = true;
	        if (!this.throttled) {
	            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));
	        }
	    };
	    AuditTimeSubscriber.prototype.clearThrottle = function () {
	        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
	        if (throttled) {
	            this.remove(throttled);
	            this.throttled = null;
	            throttled.unsubscribe();
	        }
	        if (hasValue) {
	            this.value = null;
	            this.hasValue = false;
	            this.destination.next(value);
	        }
	    };
	    return AuditTimeSubscriber;
	}(Subscriber_1.Subscriber));
	function dispatchNext(subscriber) {
	    subscriber.clearThrottle();
	}
	//# sourceMappingURL=auditTime.js.map

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var last_1 = __webpack_require__(220);
	Observable_1.Observable.prototype.last = last_1.last;
	//# sourceMappingURL=last.js.map

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var EmptyError_1 = __webpack_require__(205);
	/* tslint:disable:max-line-length */
	/**
	 * Returns an Observable that emits only the last item emitted by the source Observable.
	 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
	 * the last item from the source Observable, the resulting Observable will emit the last item
	 * from the source Observable that satisfies the predicate.
	 *
	 * <img src="./img/last.png" width="100%">
	 *
	 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
	 * callback if the Observable completes before any `next` notification was sent.
	 * @param {function} predicate - the condition any source emitted item has to satisfy.
	 * @return {Observable} an Observable that emits only the last item satisfying the given condition
	 * from the source, or an NoSuchElementException if no such items are emitted.
	 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
	 * @method last
	 * @owner Observable
	 */
	function last(predicate, resultSelector, defaultValue) {
	    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
	}
	exports.last = last;
	var LastOperator = (function () {
	    function LastOperator(predicate, resultSelector, defaultValue, source) {
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	    }
	    LastOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
	    };
	    return LastOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var LastSubscriber = (function (_super) {
	    __extends(LastSubscriber, _super);
	    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	        this.hasValue = false;
	        this.index = 0;
	        if (typeof defaultValue !== 'undefined') {
	            this.lastValue = defaultValue;
	            this.hasValue = true;
	        }
	    }
	    LastSubscriber.prototype._next = function (value) {
	        var index = this.index++;
	        if (this.predicate) {
	            this._tryPredicate(value, index);
	        }
	        else {
	            if (this.resultSelector) {
	                this._tryResultSelector(value, index);
	                return;
	            }
	            this.lastValue = value;
	            this.hasValue = true;
	        }
	    };
	    LastSubscriber.prototype._tryPredicate = function (value, index) {
	        var result;
	        try {
	            result = this.predicate(value, index, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            if (this.resultSelector) {
	                this._tryResultSelector(value, index);
	                return;
	            }
	            this.lastValue = value;
	            this.hasValue = true;
	        }
	    };
	    LastSubscriber.prototype._tryResultSelector = function (value, index) {
	        var result;
	        try {
	            result = this.resultSelector(value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.lastValue = result;
	        this.hasValue = true;
	    };
	    LastSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (this.hasValue) {
	            destination.next(this.lastValue);
	            destination.complete();
	        }
	        else {
	            destination.error(new EmptyError_1.EmptyError);
	        }
	    };
	    return LastSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=last.js.map

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var let_1 = __webpack_require__(222);
	Observable_1.Observable.prototype.let = let_1.letProto;
	Observable_1.Observable.prototype.letBind = let_1.letProto;
	//# sourceMappingURL=let.js.map

/***/ },
/* 222 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @param func
	 * @return {Observable<R>}
	 * @method let
	 * @owner Observable
	 */
	function letProto(func) {
	    return func(this);
	}
	exports.letProto = letProto;
	//# sourceMappingURL=let.js.map

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var every_1 = __webpack_require__(224);
	Observable_1.Observable.prototype.every = every_1.every;
	//# sourceMappingURL=every.js.map

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
	 * @param {function} predicate a function for determining if an item meets a specified condition.
	 * @param {any} [thisArg] optional object to use for `this` in the callback
	 * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.
	 * @method every
	 * @owner Observable
	 */
	function every(predicate, thisArg) {
	    return this.lift(new EveryOperator(predicate, thisArg, this));
	}
	exports.every = every;
	var EveryOperator = (function () {
	    function EveryOperator(predicate, thisArg, source) {
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	    }
	    EveryOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
	    };
	    return EveryOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var EverySubscriber = (function (_super) {
	    __extends(EverySubscriber, _super);
	    function EverySubscriber(destination, predicate, thisArg, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	        this.index = 0;
	        this.thisArg = thisArg || this;
	    }
	    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
	        this.destination.next(everyValueMatch);
	        this.destination.complete();
	    };
	    EverySubscriber.prototype._next = function (value) {
	        var result = false;
	        try {
	            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (!result) {
	            this.notifyComplete(false);
	        }
	    };
	    EverySubscriber.prototype._complete = function () {
	        this.notifyComplete(true);
	    };
	    return EverySubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=every.js.map

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var map_1 = __webpack_require__(130);
	Observable_1.Observable.prototype.map = map_1.map;
	//# sourceMappingURL=map.js.map

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var mapTo_1 = __webpack_require__(227);
	Observable_1.Observable.prototype.mapTo = mapTo_1.mapTo;
	//# sourceMappingURL=mapTo.js.map

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Emits the given constant value on the output Observable every time the source
	 * Observable emits a value.
	 *
	 * <span class="informal">Like {@link map}, but it maps every source value to
	 * the same output value every time.</span>
	 *
	 * <img src="./img/mapTo.png" width="100%">
	 *
	 * Takes a constant `value` as argument, and emits that whenever the source
	 * Observable emits a value. In other words, ignores the actual source value,
	 * and simply uses the emission moment to know when to emit the given `value`.
	 *
	 * @example <caption>Map every every click to the string 'Hi'</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var greetings = clicks.mapTo('Hi');
	 * greetings.subscribe(x => console.log(x));
	 *
	 * @see {@link map}
	 *
	 * @param {any} value The value to map each source value to.
	 * @return {Observable} An Observable that emits the given `value` every time
	 * the source Observable emits something.
	 * @method mapTo
	 * @owner Observable
	 */
	function mapTo(value) {
	    return this.lift(new MapToOperator(value));
	}
	exports.mapTo = mapTo;
	var MapToOperator = (function () {
	    function MapToOperator(value) {
	        this.value = value;
	    }
	    MapToOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MapToSubscriber(subscriber, this.value));
	    };
	    return MapToOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MapToSubscriber = (function (_super) {
	    __extends(MapToSubscriber, _super);
	    function MapToSubscriber(destination, value) {
	        _super.call(this, destination);
	        this.value = value;
	    }
	    MapToSubscriber.prototype._next = function (x) {
	        this.destination.next(this.value);
	    };
	    return MapToSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=mapTo.js.map

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var materialize_1 = __webpack_require__(229);
	Observable_1.Observable.prototype.materialize = materialize_1.materialize;
	//# sourceMappingURL=materialize.js.map

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var Notification_1 = __webpack_require__(75);
	/**
	 * Represents all of the notifications from the source Observable as `next`
	 * emissions marked with their original types within {@link Notification}
	 * objects.
	 *
	 * <span class="informal">Wraps `next`, `error` and `complete` emissions in
	 * {@link Notification} objects, emitted as `next` on the output Observable.
	 * </span>
	 *
	 * <img src="./img/materialize.png" width="100%">
	 *
	 * `materialize` returns an Observable that emits a `next` notification for each
	 * `next`, `error`, or `complete` emission of the source Observable. When the
	 * source Observable emits `complete`, the output Observable will emit `next` as
	 * a Notification of type "complete", and then it will emit `complete` as well.
	 * When the source Observable emits `error`, the output will emit `next` as a
	 * Notification of type "error", and then `complete`.
	 *
	 * This operator is useful for producing metadata of the source Observable, to
	 * be consumed as `next` emissions. Use it in conjunction with
	 * {@link dematerialize}.
	 *
	 * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>
	 * var letters = Rx.Observable.of('a', 'b', 13, 'd');
	 * var upperCase = letters.map(x => x.toUpperCase());
	 * var materialized = upperCase.materialize();
	 * materialized.subscribe(x => console.log(x));
	 *
	 * // Results in the following:
	 * // - Notification {kind: "N", value: "A", error: undefined, hasValue: true}
	 * // - Notification {kind: "N", value: "B", error: undefined, hasValue: true}
	 * // - Notification {kind: "E", value: undefined, error: TypeError:
	 * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x
	 * //   [as project] (http://1…, hasValue: false}
	 *
	 * @see {@link Notification}
	 * @see {@link dematerialize}
	 *
	 * @return {Observable<Notification<T>>} An Observable that emits
	 * {@link Notification} objects that wrap the original emissions from the source
	 * Observable with metadata.
	 * @method materialize
	 * @owner Observable
	 */
	function materialize() {
	    return this.lift(new MaterializeOperator());
	}
	exports.materialize = materialize;
	var MaterializeOperator = (function () {
	    function MaterializeOperator() {
	    }
	    MaterializeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MaterializeSubscriber(subscriber));
	    };
	    return MaterializeOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MaterializeSubscriber = (function (_super) {
	    __extends(MaterializeSubscriber, _super);
	    function MaterializeSubscriber(destination) {
	        _super.call(this, destination);
	    }
	    MaterializeSubscriber.prototype._next = function (value) {
	        this.destination.next(Notification_1.Notification.createNext(value));
	    };
	    MaterializeSubscriber.prototype._error = function (err) {
	        var destination = this.destination;
	        destination.next(Notification_1.Notification.createError(err));
	        destination.complete();
	    };
	    MaterializeSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        destination.next(Notification_1.Notification.createComplete());
	        destination.complete();
	    };
	    return MaterializeSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=materialize.js.map

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var max_1 = __webpack_require__(231);
	Observable_1.Observable.prototype.max = max_1.max;
	//# sourceMappingURL=max.js.map

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var reduce_1 = __webpack_require__(232);
	/**
	 * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),
	 * and when source Observable completes it emits a single item: the item with the largest number.
	 *
	 * <img src="./img/max.png" width="100%">
	 *
	 * @param {Function} optional comparer function that it will use instead of its default to compare the value of two
	 * items.
	 * @return {Observable} an Observable that emits item with the largest number.
	 * @method max
	 * @owner Observable
	 */
	function max(comparer) {
	    var max = (typeof comparer === 'function')
	        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }
	        : function (x, y) { return x > y ? x : y; };
	    return this.lift(new reduce_1.ReduceOperator(max));
	}
	exports.max = max;
	//# sourceMappingURL=max.js.map

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/* tslint:disable:max-line-length */
	/**
	 * Applies an accumulator function over the source Observable, and returns the
	 * accumulated result when the source completes, given an optional seed value.
	 *
	 * <span class="informal">Combines together all values emitted on the source,
	 * using an accumulator function that knows how to join a new source value into
	 * the accumulation from the past.</span>
	 *
	 * <img src="./img/reduce.png" width="100%">
	 *
	 * Like
	 * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
	 * `reduce` applies an `accumulator` function against an accumulation and each
	 * value of the source Observable (from the past) to reduce it to a single
	 * value, emitted on the output Observable. Note that `reduce` will only emit
	 * one value, only when the source Observable completes. It is equivalent to
	 * applying operator {@link scan} followed by operator {@link last}.
	 *
	 * Returns an Observable that applies a specified `accumulator` function to each
	 * item emitted by the source Observable. If a `seed` value is specified, then
	 * that value will be used as the initial value for the accumulator. If no seed
	 * value is specified, the first item of the source is used as the seed.
	 *
	 * @example <caption>Count the number of click events that happened in 5 seconds</caption>
	 * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
	 *   .takeUntil(Rx.Observable.interval(5000));
	 * var ones = clicksInFiveSeconds.mapTo(1);
	 * var seed = 0;
	 * var count = ones.reduce((acc, one) => acc + one, seed);
	 * count.subscribe(x => console.log(x));
	 *
	 * @see {@link count}
	 * @see {@link expand}
	 * @see {@link mergeScan}
	 * @see {@link scan}
	 *
	 * @param {function(acc: R, value: T): R} accumulator The accumulator function
	 * called on each source value.
	 * @param {R} [seed] The initial accumulation value.
	 * @return {Observable<R>} An observable of the accumulated values.
	 * @return {Observable<R>} An Observable that emits a single value that is the
	 * result of accumulating the values emitted by the source Observable.
	 * @method reduce
	 * @owner Observable
	 */
	function reduce(accumulator, seed) {
	    var hasSeed = false;
	    // providing a seed of `undefined` *should* be valid and trigger
	    // hasSeed! so don't use `seed !== undefined` checks!
	    // For this reason, we have to check it here at the original call site
	    // otherwise inside Operator/Subscriber we won't know if `undefined`
	    // means they didn't provide anything or if they literally provided `undefined`
	    if (arguments.length >= 2) {
	        hasSeed = true;
	    }
	    return this.lift(new ReduceOperator(accumulator, seed, hasSeed));
	}
	exports.reduce = reduce;
	var ReduceOperator = (function () {
	    function ReduceOperator(accumulator, seed, hasSeed) {
	        if (hasSeed === void 0) { hasSeed = false; }
	        this.accumulator = accumulator;
	        this.seed = seed;
	        this.hasSeed = hasSeed;
	    }
	    ReduceOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
	    };
	    return ReduceOperator;
	}());
	exports.ReduceOperator = ReduceOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ReduceSubscriber = (function (_super) {
	    __extends(ReduceSubscriber, _super);
	    function ReduceSubscriber(destination, accumulator, seed, hasSeed) {
	        _super.call(this, destination);
	        this.accumulator = accumulator;
	        this.hasSeed = hasSeed;
	        this.hasValue = false;
	        this.acc = seed;
	    }
	    ReduceSubscriber.prototype._next = function (value) {
	        if (this.hasValue || (this.hasValue = this.hasSeed)) {
	            this._tryReduce(value);
	        }
	        else {
	            this.acc = value;
	            this.hasValue = true;
	        }
	    };
	    ReduceSubscriber.prototype._tryReduce = function (value) {
	        var result;
	        try {
	            result = this.accumulator(this.acc, value);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.acc = result;
	    };
	    ReduceSubscriber.prototype._complete = function () {
	        if (this.hasValue || this.hasSeed) {
	            this.destination.next(this.acc);
	        }
	        this.destination.complete();
	    };
	    return ReduceSubscriber;
	}(Subscriber_1.Subscriber));
	exports.ReduceSubscriber = ReduceSubscriber;
	//# sourceMappingURL=reduce.js.map

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var merge_1 = __webpack_require__(97);
	Observable_1.Observable.prototype.merge = merge_1.merge;
	//# sourceMappingURL=merge.js.map

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var mergeAll_1 = __webpack_require__(59);
	Observable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;
	//# sourceMappingURL=mergeAll.js.map

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var mergeMap_1 = __webpack_require__(159);
	Observable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;
	Observable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;
	//# sourceMappingURL=mergeMap.js.map

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var mergeMapTo_1 = __webpack_require__(162);
	Observable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;
	Observable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;
	//# sourceMappingURL=mergeMapTo.js.map

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var mergeScan_1 = __webpack_require__(238);
	Observable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;
	//# sourceMappingURL=mergeScan.js.map

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var subscribeToResult_1 = __webpack_require__(52);
	var OuterSubscriber_1 = __webpack_require__(51);
	/**
	 * @param project
	 * @param seed
	 * @param concurrent
	 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
	 * @method mergeScan
	 * @owner Observable
	 */
	function mergeScan(project, seed, concurrent) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    return this.lift(new MergeScanOperator(project, seed, concurrent));
	}
	exports.mergeScan = mergeScan;
	var MergeScanOperator = (function () {
	    function MergeScanOperator(project, seed, concurrent) {
	        this.project = project;
	        this.seed = seed;
	        this.concurrent = concurrent;
	    }
	    MergeScanOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MergeScanSubscriber(subscriber, this.project, this.seed, this.concurrent));
	    };
	    return MergeScanOperator;
	}());
	exports.MergeScanOperator = MergeScanOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MergeScanSubscriber = (function (_super) {
	    __extends(MergeScanSubscriber, _super);
	    function MergeScanSubscriber(destination, project, acc, concurrent) {
	        _super.call(this, destination);
	        this.project = project;
	        this.acc = acc;
	        this.concurrent = concurrent;
	        this.hasValue = false;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	        this.index = 0;
	    }
	    MergeScanSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            var index = this.index++;
	            var ish = tryCatch_1.tryCatch(this.project)(this.acc, value);
	            var destination = this.destination;
	            if (ish === errorObject_1.errorObject) {
	                destination.error(errorObject_1.errorObject.e);
	            }
	            else {
	                this.active++;
	                this._innerSub(ish, value, index);
	            }
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
	        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
	    };
	    MergeScanSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            if (this.hasValue === false) {
	                this.destination.next(this.acc);
	            }
	            this.destination.complete();
	        }
	    };
	    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var destination = this.destination;
	        this.acc = innerValue;
	        this.hasValue = true;
	        destination.next(innerValue);
	    };
	    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            if (this.hasValue === false) {
	                this.destination.next(this.acc);
	            }
	            this.destination.complete();
	        }
	    };
	    return MergeScanSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	exports.MergeScanSubscriber = MergeScanSubscriber;
	//# sourceMappingURL=mergeScan.js.map

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var min_1 = __webpack_require__(240);
	Observable_1.Observable.prototype.min = min_1.min;
	//# sourceMappingURL=min.js.map

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var reduce_1 = __webpack_require__(232);
	/**
	 * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),
	 * and when source Observable completes it emits a single item: the item with the smallest number.
	 *
	 * <img src="./img/min.png" width="100%">
	 *
	 * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.
	 * @return {Observable<R>} an Observable that emits item with the smallest number.
	 * @method min
	 * @owner Observable
	 */
	function min(comparer) {
	    var min = (typeof comparer === 'function')
	        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }
	        : function (x, y) { return x < y ? x : y; };
	    return this.lift(new reduce_1.ReduceOperator(min));
	}
	exports.min = min;
	//# sourceMappingURL=min.js.map

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var multicast_1 = __webpack_require__(242);
	Observable_1.Observable.prototype.multicast = multicast_1.multicast;
	//# sourceMappingURL=multicast.js.map

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ConnectableObservable_1 = __webpack_require__(243);
	/* tslint:disable:max-line-length */
	/**
	 * Returns an Observable that emits the results of invoking a specified selector on items
	 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
	 *
	 * <img src="./img/multicast.png" width="100%">
	 *
	 * @param {Function|Subject} Factory function to create an intermediate subject through
	 * which the source sequence's elements will be multicast to the selector function
	 * or Subject to push source elements into.
	 * @param {Function} Optional selector function that can use the multicasted source stream
	 * as many times as needed, without causing multiple subscriptions to the source stream.
	 * Subscribers to the given source will receive all notifications of the source from the
	 * time of the subscription forward.
	 * @return {Observable} an Observable that emits the results of invoking the selector
	 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
	 * the underlying stream.
	 * @method multicast
	 * @owner Observable
	 */
	function multicast(subjectOrSubjectFactory, selector) {
	    var subjectFactory;
	    if (typeof subjectOrSubjectFactory === 'function') {
	        subjectFactory = subjectOrSubjectFactory;
	    }
	    else {
	        subjectFactory = function subjectFactory() {
	            return subjectOrSubjectFactory;
	        };
	    }
	    if (typeof selector === 'function') {
	        return this.lift(new MulticastOperator(subjectFactory, selector));
	    }
	    var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
	    connectable.source = this;
	    connectable.subjectFactory = subjectFactory;
	    return connectable;
	}
	exports.multicast = multicast;
	var MulticastOperator = (function () {
	    function MulticastOperator(subjectFactory, selector) {
	        this.subjectFactory = subjectFactory;
	        this.selector = selector;
	    }
	    MulticastOperator.prototype.call = function (subscriber, source) {
	        var selector = this.selector;
	        var subject = this.subjectFactory();
	        var subscription = selector(subject).subscribe(subscriber);
	        subscription.add(source.subscribe(subject));
	        return subscription;
	    };
	    return MulticastOperator;
	}());
	exports.MulticastOperator = MulticastOperator;
	//# sourceMappingURL=multicast.js.map

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(34);
	var Observable_1 = __webpack_require__(11);
	var Subscriber_1 = __webpack_require__(14);
	var Subscription_1 = __webpack_require__(16);
	/**
	 * @class ConnectableObservable<T>
	 */
	var ConnectableObservable = (function (_super) {
	    __extends(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        _super.call(this);
	        this.source = source;
	        this.subjectFactory = subjectFactory;
	        this._refCount = 0;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var connection = this._connection;
	        if (!connection) {
	            connection = this._connection = new Subscription_1.Subscription();
	            connection.add(this.source
	                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription_1.Subscription.EMPTY;
	            }
	            else {
	                this._connection = connection;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return this.lift(new RefCountOperator(this));
	    };
	    return ConnectableObservable;
	}(Observable_1.Observable));
	exports.ConnectableObservable = ConnectableObservable;
	exports.connectableObservableDescriptor = {
	    operator: { value: null },
	    _refCount: { value: 0, writable: true },
	    _subscribe: { value: ConnectableObservable.prototype._subscribe },
	    getSubject: { value: ConnectableObservable.prototype.getSubject },
	    connect: { value: ConnectableObservable.prototype.connect },
	    refCount: { value: ConnectableObservable.prototype.refCount }
	};
	var ConnectableSubscriber = (function (_super) {
	    __extends(ConnectableSubscriber, _super);
	    function ConnectableSubscriber(destination, connectable) {
	        _super.call(this, destination);
	        this.connectable = connectable;
	    }
	    ConnectableSubscriber.prototype._error = function (err) {
	        this._unsubscribe();
	        _super.prototype._error.call(this, err);
	    };
	    ConnectableSubscriber.prototype._complete = function () {
	        this._unsubscribe();
	        _super.prototype._complete.call(this);
	    };
	    ConnectableSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (connectable) {
	            this.connectable = null;
	            var connection = connectable._connection;
	            connectable._refCount = 0;
	            connectable._subject = null;
	            connectable._connection = null;
	            if (connection) {
	                connection.unsubscribe();
	            }
	        }
	    };
	    return ConnectableSubscriber;
	}(Subject_1.SubjectSubscriber));
	var RefCountOperator = (function () {
	    function RefCountOperator(connectable) {
	        this.connectable = connectable;
	    }
	    RefCountOperator.prototype.call = function (subscriber, source) {
	        var connectable = this.connectable;
	        connectable._refCount++;
	        var refCounter = new RefCountSubscriber(subscriber, connectable);
	        var subscription = source.subscribe(refCounter);
	        if (!refCounter.closed) {
	            refCounter.connection = connectable.connect();
	        }
	        return subscription;
	    };
	    return RefCountOperator;
	}());
	var RefCountSubscriber = (function (_super) {
	    __extends(RefCountSubscriber, _super);
	    function RefCountSubscriber(destination, connectable) {
	        _super.call(this, destination);
	        this.connectable = connectable;
	    }
	    RefCountSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (!connectable) {
	            this.connection = null;
	            return;
	        }
	        this.connectable = null;
	        var refCount = connectable._refCount;
	        if (refCount <= 0) {
	            this.connection = null;
	            return;
	        }
	        connectable._refCount = refCount - 1;
	        if (refCount > 1) {
	            this.connection = null;
	            return;
	        }
	        ///
	        // Compare the local RefCountSubscriber's connection Subscription to the
	        // connection Subscription on the shared ConnectableObservable. In cases
	        // where the ConnectableObservable source synchronously emits values, and
	        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
	        // execution continues to here before the RefCountOperator has a chance to
	        // supply the RefCountSubscriber with the shared connection Subscription.
	        // For example:
	        // ```
	        // Observable.range(0, 10)
	        //   .publish()
	        //   .refCount()
	        //   .take(5)
	        //   .subscribe();
	        // ```
	        // In order to account for this case, RefCountSubscriber should only dispose
	        // the ConnectableObservable's shared connection Subscription if the
	        // connection Subscription exists, *and* either:
	        //   a. RefCountSubscriber doesn't have a reference to the shared connection
	        //      Subscription yet, or,
	        //   b. RefCountSubscriber's connection Subscription reference is identical
	        //      to the shared connection Subscription
	        ///
	        var connection = this.connection;
	        var sharedConnection = connectable._connection;
	        this.connection = null;
	        if (sharedConnection && (!connection || sharedConnection === connection)) {
	            sharedConnection.unsubscribe();
	        }
	    };
	    return RefCountSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=ConnectableObservable.js.map

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var observeOn_1 = __webpack_require__(74);
	Observable_1.Observable.prototype.observeOn = observeOn_1.observeOn;
	//# sourceMappingURL=observeOn.js.map

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var onErrorResumeNext_1 = __webpack_require__(107);
	Observable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
	//# sourceMappingURL=onErrorResumeNext.js.map

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var pairwise_1 = __webpack_require__(247);
	Observable_1.Observable.prototype.pairwise = pairwise_1.pairwise;
	//# sourceMappingURL=pairwise.js.map

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Groups pairs of consecutive emissions together and emits them as an array of
	 * two values.
	 *
	 * <span class="informal">Puts the current value and previous value together as
	 * an array, and emits that.</span>
	 *
	 * <img src="./img/pairwise.png" width="100%">
	 *
	 * The Nth emission from the source Observable will cause the output Observable
	 * to emit an array [(N-1)th, Nth] of the previous and the current value, as a
	 * pair. For this reason, `pairwise` emits on the second and subsequent
	 * emissions from the source Observable, but not on the first emission, because
	 * there is no previous value in that case.
	 *
	 * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var pairs = clicks.pairwise();
	 * var distance = pairs.map(pair => {
	 *   var x0 = pair[0].clientX;
	 *   var y0 = pair[0].clientY;
	 *   var x1 = pair[1].clientX;
	 *   var y1 = pair[1].clientY;
	 *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));
	 * });
	 * distance.subscribe(x => console.log(x));
	 *
	 * @see {@link buffer}
	 * @see {@link bufferCount}
	 *
	 * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of
	 * consecutive values from the source Observable.
	 * @method pairwise
	 * @owner Observable
	 */
	function pairwise() {
	    return this.lift(new PairwiseOperator());
	}
	exports.pairwise = pairwise;
	var PairwiseOperator = (function () {
	    function PairwiseOperator() {
	    }
	    PairwiseOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new PairwiseSubscriber(subscriber));
	    };
	    return PairwiseOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var PairwiseSubscriber = (function (_super) {
	    __extends(PairwiseSubscriber, _super);
	    function PairwiseSubscriber(destination) {
	        _super.call(this, destination);
	        this.hasPrev = false;
	    }
	    PairwiseSubscriber.prototype._next = function (value) {
	        if (this.hasPrev) {
	            this.destination.next([this.prev, value]);
	        }
	        else {
	            this.hasPrev = true;
	        }
	        this.prev = value;
	    };
	    return PairwiseSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=pairwise.js.map

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var partition_1 = __webpack_require__(249);
	Observable_1.Observable.prototype.partition = partition_1.partition;
	//# sourceMappingURL=partition.js.map

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var not_1 = __webpack_require__(250);
	var filter_1 = __webpack_require__(196);
	/**
	 * Splits the source Observable into two, one with values that satisfy a
	 * predicate, and another with values that don't satisfy the predicate.
	 *
	 * <span class="informal">It's like {@link filter}, but returns two Observables:
	 * one like the output of {@link filter}, and the other with values that did not
	 * pass the condition.</span>
	 *
	 * <img src="./img/partition.png" width="100%">
	 *
	 * `partition` outputs an array with two Observables that partition the values
	 * from the source Observable through the given `predicate` function. The first
	 * Observable in that array emits source values for which the predicate argument
	 * returns true. The second Observable emits source values for which the
	 * predicate returns false. The first behaves like {@link filter} and the second
	 * behaves like {@link filter} with the predicate negated.
	 *
	 * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');
	 * var clicksOnDivs = parts[0];
	 * var clicksElsewhere = parts[1];
	 * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));
	 * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));
	 *
	 * @see {@link filter}
	 *
	 * @param {function(value: T, index: number): boolean} predicate A function that
	 * evaluates each value emitted by the source Observable. If it returns `true`,
	 * the value is emitted on the first Observable in the returned array, if
	 * `false` the value is emitted on the second Observable in the array. The
	 * `index` parameter is the number `i` for the i-th source emission that has
	 * happened since the subscription, starting from the number `0`.
	 * @param {any} [thisArg] An optional argument to determine the value of `this`
	 * in the `predicate` function.
	 * @return {[Observable<T>, Observable<T>]} An array with two Observables: one
	 * with values that passed the predicate, and another with values that did not
	 * pass the predicate.
	 * @method partition
	 * @owner Observable
	 */
	function partition(predicate, thisArg) {
	    return [
	        filter_1.filter.call(this, predicate, thisArg),
	        filter_1.filter.call(this, not_1.not(predicate, thisArg))
	    ];
	}
	exports.partition = partition;
	//# sourceMappingURL=partition.js.map

/***/ },
/* 250 */
/***/ function(module, exports) {

	"use strict";
	function not(pred, thisArg) {
	    function notPred() {
	        return !(notPred.pred.apply(notPred.thisArg, arguments));
	    }
	    notPred.pred = pred;
	    notPred.thisArg = thisArg;
	    return notPred;
	}
	exports.not = not;
	//# sourceMappingURL=not.js.map

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var pluck_1 = __webpack_require__(252);
	Observable_1.Observable.prototype.pluck = pluck_1.pluck;
	//# sourceMappingURL=pluck.js.map

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var map_1 = __webpack_require__(130);
	/**
	 * Maps each source value (an object) to its specified nested property.
	 *
	 * <span class="informal">Like {@link map}, but meant only for picking one of
	 * the nested properties of every emitted object.</span>
	 *
	 * <img src="./img/pluck.png" width="100%">
	 *
	 * Given a list of strings describing a path to an object property, retrieves
	 * the value of a specified nested property from all values in the source
	 * Observable. If a property can't be resolved, it will return `undefined` for
	 * that value.
	 *
	 * @example <caption>Map every every click to the tagName of the clicked target element</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var tagNames = clicks.pluck('target', 'tagName');
	 * tagNames.subscribe(x => console.log(x));
	 *
	 * @see {@link map}
	 *
	 * @param {...string} properties The nested properties to pluck from each source
	 * value (an object).
	 * @return {Observable} Returns a new Observable of property values from the
	 * source values.
	 * @method pluck
	 * @owner Observable
	 */
	function pluck() {
	    var properties = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        properties[_i - 0] = arguments[_i];
	    }
	    var length = properties.length;
	    if (length === 0) {
	        throw new Error('list of properties cannot be empty.');
	    }
	    return map_1.map.call(this, plucker(properties, length));
	}
	exports.pluck = pluck;
	function plucker(props, length) {
	    var mapper = function (x) {
	        var currentProp = x;
	        for (var i = 0; i < length; i++) {
	            var p = currentProp[props[i]];
	            if (typeof p !== 'undefined') {
	                currentProp = p;
	            }
	            else {
	                return undefined;
	            }
	        }
	        return currentProp;
	    };
	    return mapper;
	}
	//# sourceMappingURL=pluck.js.map

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var publish_1 = __webpack_require__(254);
	Observable_1.Observable.prototype.publish = publish_1.publish;
	//# sourceMappingURL=publish.js.map

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Subject_1 = __webpack_require__(34);
	var multicast_1 = __webpack_require__(242);
	/* tslint:disable:max-line-length */
	/**
	 * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called
	 * before it begins emitting items to those Observers that have subscribed to it.
	 *
	 * <img src="./img/publish.png" width="100%">
	 *
	 * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,
	 * without causing multiple subscriptions to the source sequence.
	 * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
	 * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.
	 * @method publish
	 * @owner Observable
	 */
	function publish(selector) {
	    return selector ? multicast_1.multicast.call(this, function () { return new Subject_1.Subject(); }, selector) :
	        multicast_1.multicast.call(this, new Subject_1.Subject());
	}
	exports.publish = publish;
	//# sourceMappingURL=publish.js.map

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var publishBehavior_1 = __webpack_require__(256);
	Observable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;
	//# sourceMappingURL=publishBehavior.js.map

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var BehaviorSubject_1 = __webpack_require__(257);
	var multicast_1 = __webpack_require__(242);
	/**
	 * @param value
	 * @return {ConnectableObservable<T>}
	 * @method publishBehavior
	 * @owner Observable
	 */
	function publishBehavior(value) {
	    return multicast_1.multicast.call(this, new BehaviorSubject_1.BehaviorSubject(value));
	}
	exports.publishBehavior = publishBehavior;
	//# sourceMappingURL=publishBehavior.js.map

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(34);
	var ObjectUnsubscribedError_1 = __webpack_require__(35);
	/**
	 * @class BehaviorSubject<T>
	 */
	var BehaviorSubject = (function (_super) {
	    __extends(BehaviorSubject, _super);
	    function BehaviorSubject(_value) {
	        _super.call(this);
	        this._value = _value;
	    }
	    Object.defineProperty(BehaviorSubject.prototype, "value", {
	        get: function () {
	            return this.getValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BehaviorSubject.prototype._subscribe = function (subscriber) {
	        var subscription = _super.prototype._subscribe.call(this, subscriber);
	        if (subscription && !subscription.closed) {
	            subscriber.next(this._value);
	        }
	        return subscription;
	    };
	    BehaviorSubject.prototype.getValue = function () {
	        if (this.hasError) {
	            throw this.thrownError;
	        }
	        else if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else {
	            return this._value;
	        }
	    };
	    BehaviorSubject.prototype.next = function (value) {
	        _super.prototype.next.call(this, this._value = value);
	    };
	    return BehaviorSubject;
	}(Subject_1.Subject));
	exports.BehaviorSubject = BehaviorSubject;
	//# sourceMappingURL=BehaviorSubject.js.map

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var publishReplay_1 = __webpack_require__(259);
	Observable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;
	//# sourceMappingURL=publishReplay.js.map

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ReplaySubject_1 = __webpack_require__(134);
	var multicast_1 = __webpack_require__(242);
	/**
	 * @param bufferSize
	 * @param windowTime
	 * @param scheduler
	 * @return {ConnectableObservable<T>}
	 * @method publishReplay
	 * @owner Observable
	 */
	function publishReplay(bufferSize, windowTime, scheduler) {
	    if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
	    if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
	    return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));
	}
	exports.publishReplay = publishReplay;
	//# sourceMappingURL=publishReplay.js.map

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var publishLast_1 = __webpack_require__(261);
	Observable_1.Observable.prototype.publishLast = publishLast_1.publishLast;
	//# sourceMappingURL=publishLast.js.map

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var AsyncSubject_1 = __webpack_require__(40);
	var multicast_1 = __webpack_require__(242);
	/**
	 * @return {ConnectableObservable<T>}
	 * @method publishLast
	 * @owner Observable
	 */
	function publishLast() {
	    return multicast_1.multicast.call(this, new AsyncSubject_1.AsyncSubject());
	}
	exports.publishLast = publishLast;
	//# sourceMappingURL=publishLast.js.map

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var race_1 = __webpack_require__(99);
	Observable_1.Observable.prototype.race = race_1.race;
	//# sourceMappingURL=race.js.map

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var reduce_1 = __webpack_require__(232);
	Observable_1.Observable.prototype.reduce = reduce_1.reduce;
	//# sourceMappingURL=reduce.js.map

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var repeat_1 = __webpack_require__(265);
	Observable_1.Observable.prototype.repeat = repeat_1.repeat;
	//# sourceMappingURL=repeat.js.map

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var EmptyObservable_1 = __webpack_require__(49);
	/**
	 * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,
	 * on a particular Scheduler.
	 *
	 * <img src="./img/repeat.png" width="100%">
	 *
	 * @param {Scheduler} [scheduler] the Scheduler to emit the items on.
	 * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield
	 * an empty Observable.
	 * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most
	 * count times.
	 * @method repeat
	 * @owner Observable
	 */
	function repeat(count) {
	    if (count === void 0) { count = -1; }
	    if (count === 0) {
	        return new EmptyObservable_1.EmptyObservable();
	    }
	    else if (count < 0) {
	        return this.lift(new RepeatOperator(-1, this));
	    }
	    else {
	        return this.lift(new RepeatOperator(count - 1, this));
	    }
	}
	exports.repeat = repeat;
	var RepeatOperator = (function () {
	    function RepeatOperator(count, source) {
	        this.count = count;
	        this.source = source;
	    }
	    RepeatOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
	    };
	    return RepeatOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var RepeatSubscriber = (function (_super) {
	    __extends(RepeatSubscriber, _super);
	    function RepeatSubscriber(destination, count, source) {
	        _super.call(this, destination);
	        this.count = count;
	        this.source = source;
	    }
	    RepeatSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _a = this, source = _a.source, count = _a.count;
	            if (count === 0) {
	                return _super.prototype.complete.call(this);
	            }
	            else if (count > -1) {
	                this.count = count - 1;
	            }
	            this.unsubscribe();
	            this.isStopped = false;
	            this.closed = false;
	            source.subscribe(this);
	        }
	    };
	    return RepeatSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=repeat.js.map

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var repeatWhen_1 = __webpack_require__(267);
	Observable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;
	//# sourceMappingURL=repeatWhen.js.map

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(34);
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.
	 * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from
	 * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`
	 * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular
	 * Scheduler.
	 *
	 * <img src="./img/repeatWhen.png" width="100%">
	 *
	 * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,
	 * aborting the retry.
	 * @param {scheduler} the Scheduler on which to subscribe to the source Observable.
	 * @return {Observable} the source Observable modified with retry logic.
	 * @method repeatWhen
	 * @owner Observable
	 */
	function repeatWhen(notifier) {
	    return this.lift(new RepeatWhenOperator(notifier, this));
	}
	exports.repeatWhen = repeatWhen;
	var RepeatWhenOperator = (function () {
	    function RepeatWhenOperator(notifier, source) {
	        this.notifier = notifier;
	        this.source = source;
	    }
	    RepeatWhenOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));
	    };
	    return RepeatWhenOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var RepeatWhenSubscriber = (function (_super) {
	    __extends(RepeatWhenSubscriber, _super);
	    function RepeatWhenSubscriber(destination, notifier, source) {
	        _super.call(this, destination);
	        this.notifier = notifier;
	        this.source = source;
	    }
	    RepeatWhenSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var notifications = this.notifications;
	            var retries = this.retries;
	            var retriesSubscription = this.retriesSubscription;
	            if (!retries) {
	                notifications = new Subject_1.Subject();
	                retries = tryCatch_1.tryCatch(this.notifier)(notifications);
	                if (retries === errorObject_1.errorObject) {
	                    return _super.prototype.complete.call(this);
	                }
	                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
	            }
	            else {
	                this.notifications = null;
	                this.retriesSubscription = null;
	            }
	            this.unsubscribe();
	            this.closed = false;
	            this.notifications = notifications;
	            this.retries = retries;
	            this.retriesSubscription = retriesSubscription;
	            notifications.next();
	        }
	    };
	    RepeatWhenSubscriber.prototype._unsubscribe = function () {
	        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
	        if (notifications) {
	            notifications.unsubscribe();
	            this.notifications = null;
	        }
	        if (retriesSubscription) {
	            retriesSubscription.unsubscribe();
	            this.retriesSubscription = null;
	        }
	        this.retries = null;
	    };
	    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
	        this.notifications = null;
	        this.retries = null;
	        this.retriesSubscription = null;
	        this.unsubscribe();
	        this.isStopped = false;
	        this.closed = false;
	        this.notifications = notifications;
	        this.retries = retries;
	        this.retriesSubscription = retriesSubscription;
	        this.source.subscribe(this);
	    };
	    return RepeatWhenSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=repeatWhen.js.map

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var retry_1 = __webpack_require__(269);
	Observable_1.Observable.prototype.retry = retry_1.retry;
	//# sourceMappingURL=retry.js.map

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the
	 * predicate returns true for that specific exception and retry count.
	 * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of
	 * count resubscriptions (given as a number parameter) rather than propagating the `error` call.
	 *
	 * <img src="./img/retry.png" width="100%">
	 *
	 * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted
	 * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second
	 * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications
	 * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].
	 * @param {number} number of retry attempts before failing.
	 * @return {Observable} the source Observable modified with the retry logic.
	 * @method retry
	 * @owner Observable
	 */
	function retry(count) {
	    if (count === void 0) { count = -1; }
	    return this.lift(new RetryOperator(count, this));
	}
	exports.retry = retry;
	var RetryOperator = (function () {
	    function RetryOperator(count, source) {
	        this.count = count;
	        this.source = source;
	    }
	    RetryOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
	    };
	    return RetryOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var RetrySubscriber = (function (_super) {
	    __extends(RetrySubscriber, _super);
	    function RetrySubscriber(destination, count, source) {
	        _super.call(this, destination);
	        this.count = count;
	        this.source = source;
	    }
	    RetrySubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _a = this, source = _a.source, count = _a.count;
	            if (count === 0) {
	                return _super.prototype.error.call(this, err);
	            }
	            else if (count > -1) {
	                this.count = count - 1;
	            }
	            this.unsubscribe();
	            this.isStopped = false;
	            this.closed = false;
	            source.subscribe(this);
	        }
	    };
	    return RetrySubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=retry.js.map

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var retryWhen_1 = __webpack_require__(271);
	Observable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;
	//# sourceMappingURL=retryWhen.js.map

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(34);
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Returns an Observable that emits the same values as the source observable with the exception of an `error`.
	 * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from
	 * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`
	 * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular
	 * Scheduler.
	 *
	 * <img src="./img/retryWhen.png" width="100%">
	 *
	 * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,
	 * aborting the retry.
	 * @param {scheduler} the Scheduler on which to subscribe to the source Observable.
	 * @return {Observable} the source Observable modified with retry logic.
	 * @method retryWhen
	 * @owner Observable
	 */
	function retryWhen(notifier) {
	    return this.lift(new RetryWhenOperator(notifier, this));
	}
	exports.retryWhen = retryWhen;
	var RetryWhenOperator = (function () {
	    function RetryWhenOperator(notifier, source) {
	        this.notifier = notifier;
	        this.source = source;
	    }
	    RetryWhenOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
	    };
	    return RetryWhenOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var RetryWhenSubscriber = (function (_super) {
	    __extends(RetryWhenSubscriber, _super);
	    function RetryWhenSubscriber(destination, notifier, source) {
	        _super.call(this, destination);
	        this.notifier = notifier;
	        this.source = source;
	    }
	    RetryWhenSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var errors = this.errors;
	            var retries = this.retries;
	            var retriesSubscription = this.retriesSubscription;
	            if (!retries) {
	                errors = new Subject_1.Subject();
	                retries = tryCatch_1.tryCatch(this.notifier)(errors);
	                if (retries === errorObject_1.errorObject) {
	                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);
	                }
	                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
	            }
	            else {
	                this.errors = null;
	                this.retriesSubscription = null;
	            }
	            this.unsubscribe();
	            this.closed = false;
	            this.errors = errors;
	            this.retries = retries;
	            this.retriesSubscription = retriesSubscription;
	            errors.next(err);
	        }
	    };
	    RetryWhenSubscriber.prototype._unsubscribe = function () {
	        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
	        if (errors) {
	            errors.unsubscribe();
	            this.errors = null;
	        }
	        if (retriesSubscription) {
	            retriesSubscription.unsubscribe();
	            this.retriesSubscription = null;
	        }
	        this.retries = null;
	    };
	    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;
	        this.errors = null;
	        this.retries = null;
	        this.retriesSubscription = null;
	        this.unsubscribe();
	        this.isStopped = false;
	        this.closed = false;
	        this.errors = errors;
	        this.retries = retries;
	        this.retriesSubscription = retriesSubscription;
	        this.source.subscribe(this);
	    };
	    return RetryWhenSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=retryWhen.js.map

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var sample_1 = __webpack_require__(273);
	Observable_1.Observable.prototype.sample = sample_1.sample;
	//# sourceMappingURL=sample.js.map

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Emits the most recently emitted value from the source Observable whenever
	 * another Observable, the `notifier`, emits.
	 *
	 * <span class="informal">It's like {@link sampleTime}, but samples whenever
	 * the `notifier` Observable emits something.</span>
	 *
	 * <img src="./img/sample.png" width="100%">
	 *
	 * Whenever the `notifier` Observable emits a value or completes, `sample`
	 * looks at the source Observable and emits whichever value it has most recently
	 * emitted since the previous sampling, unless the source has not emitted
	 * anything since the previous sampling. The `notifier` is subscribed to as soon
	 * as the output Observable is subscribed.
	 *
	 * @example <caption>On every click, sample the most recent "seconds" timer</caption>
	 * var seconds = Rx.Observable.interval(1000);
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = seconds.sample(clicks);
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link audit}
	 * @see {@link debounce}
	 * @see {@link sampleTime}
	 * @see {@link throttle}
	 *
	 * @param {Observable<any>} notifier The Observable to use for sampling the
	 * source Observable.
	 * @return {Observable<T>} An Observable that emits the results of sampling the
	 * values emitted by the source Observable whenever the notifier Observable
	 * emits value or completes.
	 * @method sample
	 * @owner Observable
	 */
	function sample(notifier) {
	    return this.lift(new SampleOperator(notifier));
	}
	exports.sample = sample;
	var SampleOperator = (function () {
	    function SampleOperator(notifier) {
	        this.notifier = notifier;
	    }
	    SampleOperator.prototype.call = function (subscriber, source) {
	        var sampleSubscriber = new SampleSubscriber(subscriber);
	        var subscription = source.subscribe(sampleSubscriber);
	        subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));
	        return subscription;
	    };
	    return SampleOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SampleSubscriber = (function (_super) {
	    __extends(SampleSubscriber, _super);
	    function SampleSubscriber() {
	        _super.apply(this, arguments);
	        this.hasValue = false;
	    }
	    SampleSubscriber.prototype._next = function (value) {
	        this.value = value;
	        this.hasValue = true;
	    };
	    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.emitValue();
	    };
	    SampleSubscriber.prototype.notifyComplete = function () {
	        this.emitValue();
	    };
	    SampleSubscriber.prototype.emitValue = function () {
	        if (this.hasValue) {
	            this.hasValue = false;
	            this.destination.next(this.value);
	        }
	    };
	    return SampleSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=sample.js.map

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var sampleTime_1 = __webpack_require__(275);
	Observable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;
	//# sourceMappingURL=sampleTime.js.map

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var async_1 = __webpack_require__(90);
	/**
	 * Emits the most recently emitted value from the source Observable within
	 * periodic time intervals.
	 *
	 * <span class="informal">Samples the source Observable at periodic time
	 * intervals, emitting what it samples.</span>
	 *
	 * <img src="./img/sampleTime.png" width="100%">
	 *
	 * `sampleTime` periodically looks at the source Observable and emits whichever
	 * value it has most recently emitted since the previous sampling, unless the
	 * source has not emitted anything since the previous sampling. The sampling
	 * happens periodically in time every `period` milliseconds (or the time unit
	 * defined by the optional `scheduler` argument). The sampling starts as soon as
	 * the output Observable is subscribed.
	 *
	 * @example <caption>Every second, emit the most recent click at most once</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.sampleTime(1000);
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link auditTime}
	 * @see {@link debounceTime}
	 * @see {@link delay}
	 * @see {@link sample}
	 * @see {@link throttleTime}
	 *
	 * @param {number} period The sampling period expressed in milliseconds or the
	 * time unit determined internally by the optional `scheduler`.
	 * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
	 * managing the timers that handle the sampling.
	 * @return {Observable<T>} An Observable that emits the results of sampling the
	 * values emitted by the source Observable at the specified time interval.
	 * @method sampleTime
	 * @owner Observable
	 */
	function sampleTime(period, scheduler) {
	    if (scheduler === void 0) { scheduler = async_1.async; }
	    return this.lift(new SampleTimeOperator(period, scheduler));
	}
	exports.sampleTime = sampleTime;
	var SampleTimeOperator = (function () {
	    function SampleTimeOperator(period, scheduler) {
	        this.period = period;
	        this.scheduler = scheduler;
	    }
	    SampleTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
	    };
	    return SampleTimeOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SampleTimeSubscriber = (function (_super) {
	    __extends(SampleTimeSubscriber, _super);
	    function SampleTimeSubscriber(destination, period, scheduler) {
	        _super.call(this, destination);
	        this.period = period;
	        this.scheduler = scheduler;
	        this.hasValue = false;
	        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));
	    }
	    SampleTimeSubscriber.prototype._next = function (value) {
	        this.lastValue = value;
	        this.hasValue = true;
	    };
	    SampleTimeSubscriber.prototype.notifyNext = function () {
	        if (this.hasValue) {
	            this.hasValue = false;
	            this.destination.next(this.lastValue);
	        }
	    };
	    return SampleTimeSubscriber;
	}(Subscriber_1.Subscriber));
	function dispatchNotification(state) {
	    var subscriber = state.subscriber, period = state.period;
	    subscriber.notifyNext();
	    this.schedule(state, period);
	}
	//# sourceMappingURL=sampleTime.js.map

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var scan_1 = __webpack_require__(277);
	Observable_1.Observable.prototype.scan = scan_1.scan;
	//# sourceMappingURL=scan.js.map

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/* tslint:disable:max-line-length */
	/**
	 * Applies an accumulator function over the source Observable, and returns each
	 * intermediate result, with an optional seed value.
	 *
	 * <span class="informal">It's like {@link reduce}, but emits the current
	 * accumulation whenever the source emits a value.</span>
	 *
	 * <img src="./img/scan.png" width="100%">
	 *
	 * Combines together all values emitted on the source, using an accumulator
	 * function that knows how to join a new source value into the accumulation from
	 * the past. Is similar to {@link reduce}, but emits the intermediate
	 * accumulations.
	 *
	 * Returns an Observable that applies a specified `accumulator` function to each
	 * item emitted by the source Observable. If a `seed` value is specified, then
	 * that value will be used as the initial value for the accumulator. If no seed
	 * value is specified, the first item of the source is used as the seed.
	 *
	 * @example <caption>Count the number of click events</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var ones = clicks.mapTo(1);
	 * var seed = 0;
	 * var count = ones.scan((acc, one) => acc + one, seed);
	 * count.subscribe(x => console.log(x));
	 *
	 * @see {@link expand}
	 * @see {@link mergeScan}
	 * @see {@link reduce}
	 *
	 * @param {function(acc: R, value: T, index: number): R} accumulator
	 * The accumulator function called on each source value.
	 * @param {T|R} [seed] The initial accumulation value.
	 * @return {Observable<R>} An observable of the accumulated values.
	 * @method scan
	 * @owner Observable
	 */
	function scan(accumulator, seed) {
	    var hasSeed = false;
	    // providing a seed of `undefined` *should* be valid and trigger
	    // hasSeed! so don't use `seed !== undefined` checks!
	    // For this reason, we have to check it here at the original call site
	    // otherwise inside Operator/Subscriber we won't know if `undefined`
	    // means they didn't provide anything or if they literally provided `undefined`
	    if (arguments.length >= 2) {
	        hasSeed = true;
	    }
	    return this.lift(new ScanOperator(accumulator, seed, hasSeed));
	}
	exports.scan = scan;
	var ScanOperator = (function () {
	    function ScanOperator(accumulator, seed, hasSeed) {
	        if (hasSeed === void 0) { hasSeed = false; }
	        this.accumulator = accumulator;
	        this.seed = seed;
	        this.hasSeed = hasSeed;
	    }
	    ScanOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
	    };
	    return ScanOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ScanSubscriber = (function (_super) {
	    __extends(ScanSubscriber, _super);
	    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
	        _super.call(this, destination);
	        this.accumulator = accumulator;
	        this._seed = _seed;
	        this.hasSeed = hasSeed;
	        this.index = 0;
	    }
	    Object.defineProperty(ScanSubscriber.prototype, "seed", {
	        get: function () {
	            return this._seed;
	        },
	        set: function (value) {
	            this.hasSeed = true;
	            this._seed = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ScanSubscriber.prototype._next = function (value) {
	        if (!this.hasSeed) {
	            this.seed = value;
	            this.destination.next(value);
	        }
	        else {
	            return this._tryNext(value);
	        }
	    };
	    ScanSubscriber.prototype._tryNext = function (value) {
	        var index = this.index++;
	        var result;
	        try {
	            result = this.accumulator(this.seed, value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	        this.seed = result;
	        this.destination.next(result);
	    };
	    return ScanSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=scan.js.map

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var sequenceEqual_1 = __webpack_require__(279);
	Observable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;
	//# sourceMappingURL=sequenceEqual.js.map

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	/**
	 * Compares all values of two observables in sequence using an optional comparor function
	 * and returns an observable of a single boolean value representing whether or not the two sequences
	 * are equal.
	 *
	 * <span class="informal">Checks to see of all values emitted by both observables are equal, in order.</span>
	 *
	 * <img src="./img/sequenceEqual.png" width="100%">
	 *
	 * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either
	 * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom
	 * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the
	 * observables completes, the operator will wait for the other observable to complete; If the other
	 * observable emits before completing, the returned observable will emit `false` and complete. If one observable never
	 * completes or emits after the other complets, the returned observable will never complete.
	 *
	 * @example <caption>figure out if the Konami code matches</caption>
	 * var code = Rx.Observable.from([
	 *  "ArrowUp",
	 *  "ArrowUp",
	 *  "ArrowDown",
	 *  "ArrowDown",
	 *  "ArrowLeft",
	 *  "ArrowRight",
	 *  "ArrowLeft",
	 *  "ArrowRight",
	 *  "KeyB",
	 *  "KeyA",
	 *  "Enter" // no start key, clearly.
	 * ]);
	 *
	 * var keys = Rx.Observable.fromEvent(document, 'keyup')
	 *  .map(e => e.code);
	 * var matches = keys.bufferCount(11, 1)
	 *  .mergeMap(
	 *    last11 =>
	 *      Rx.Observable.from(last11)
	 *        .sequenceEqual(code)
	 *   );
	 * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));
	 *
	 * @see {@link combineLatest}
	 * @see {@link zip}
	 * @see {@link withLatestFrom}
	 *
	 * @param {Observable} compareTo the observable sequence to compare the source sequence to.
	 * @param {function} [comparor] An optional function to compare each value pair
	 * @return {Observable} An Observable of a single boolean value representing whether or not
	 * the values emitted by both observables were equal in sequence
	 * @method sequenceEqual
	 * @owner Observable
	 */
	function sequenceEqual(compareTo, comparor) {
	    return this.lift(new SequenceEqualOperator(compareTo, comparor));
	}
	exports.sequenceEqual = sequenceEqual;
	var SequenceEqualOperator = (function () {
	    function SequenceEqualOperator(compareTo, comparor) {
	        this.compareTo = compareTo;
	        this.comparor = comparor;
	    }
	    SequenceEqualOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));
	    };
	    return SequenceEqualOperator;
	}());
	exports.SequenceEqualOperator = SequenceEqualOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SequenceEqualSubscriber = (function (_super) {
	    __extends(SequenceEqualSubscriber, _super);
	    function SequenceEqualSubscriber(destination, compareTo, comparor) {
	        _super.call(this, destination);
	        this.compareTo = compareTo;
	        this.comparor = comparor;
	        this._a = [];
	        this._b = [];
	        this._oneComplete = false;
	        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));
	    }
	    SequenceEqualSubscriber.prototype._next = function (value) {
	        if (this._oneComplete && this._b.length === 0) {
	            this.emit(false);
	        }
	        else {
	            this._a.push(value);
	            this.checkValues();
	        }
	    };
	    SequenceEqualSubscriber.prototype._complete = function () {
	        if (this._oneComplete) {
	            this.emit(this._a.length === 0 && this._b.length === 0);
	        }
	        else {
	            this._oneComplete = true;
	        }
	    };
	    SequenceEqualSubscriber.prototype.checkValues = function () {
	        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
	        while (_a.length > 0 && _b.length > 0) {
	            var a = _a.shift();
	            var b = _b.shift();
	            var areEqual = false;
	            if (comparor) {
	                areEqual = tryCatch_1.tryCatch(comparor)(a, b);
	                if (areEqual === errorObject_1.errorObject) {
	                    this.destination.error(errorObject_1.errorObject.e);
	                }
	            }
	            else {
	                areEqual = a === b;
	            }
	            if (!areEqual) {
	                this.emit(false);
	            }
	        }
	    };
	    SequenceEqualSubscriber.prototype.emit = function (value) {
	        var destination = this.destination;
	        destination.next(value);
	        destination.complete();
	    };
	    SequenceEqualSubscriber.prototype.nextB = function (value) {
	        if (this._oneComplete && this._a.length === 0) {
	            this.emit(false);
	        }
	        else {
	            this._b.push(value);
	            this.checkValues();
	        }
	    };
	    return SequenceEqualSubscriber;
	}(Subscriber_1.Subscriber));
	exports.SequenceEqualSubscriber = SequenceEqualSubscriber;
	var SequenceEqualCompareToSubscriber = (function (_super) {
	    __extends(SequenceEqualCompareToSubscriber, _super);
	    function SequenceEqualCompareToSubscriber(destination, parent) {
	        _super.call(this, destination);
	        this.parent = parent;
	    }
	    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
	        this.parent.nextB(value);
	    };
	    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	    };
	    SequenceEqualCompareToSubscriber.prototype._complete = function () {
	        this.parent._complete();
	    };
	    return SequenceEqualCompareToSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=sequenceEqual.js.map

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var share_1 = __webpack_require__(281);
	Observable_1.Observable.prototype.share = share_1.share;
	//# sourceMappingURL=share.js.map

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var multicast_1 = __webpack_require__(242);
	var Subject_1 = __webpack_require__(34);
	function shareSubjectFactory() {
	    return new Subject_1.Subject();
	}
	/**
	 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
	 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
	 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
	 * This is an alias for .publish().refCount().
	 *
	 * <img src="./img/share.png" width="100%">
	 *
	 * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers
	 * @method share
	 * @owner Observable
	 */
	function share() {
	    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
	}
	exports.share = share;
	;
	//# sourceMappingURL=share.js.map

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var single_1 = __webpack_require__(283);
	Observable_1.Observable.prototype.single = single_1.single;
	//# sourceMappingURL=single.js.map

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var EmptyError_1 = __webpack_require__(205);
	/**
	 * Returns an Observable that emits the single item emitted by the source Observable that matches a specified
	 * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no
	 * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.
	 *
	 * <img src="./img/single.png" width="100%">
	 *
	 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
	 * callback if the Observable completes before any `next` notification was sent.
	 * @param {Function} a predicate function to evaluate items emitted by the source Observable.
	 * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches
	 * the predicate.
	 .
	 * @method single
	 * @owner Observable
	 */
	function single(predicate) {
	    return this.lift(new SingleOperator(predicate, this));
	}
	exports.single = single;
	var SingleOperator = (function () {
	    function SingleOperator(predicate, source) {
	        this.predicate = predicate;
	        this.source = source;
	    }
	    SingleOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
	    };
	    return SingleOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SingleSubscriber = (function (_super) {
	    __extends(SingleSubscriber, _super);
	    function SingleSubscriber(destination, predicate, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.source = source;
	        this.seenValue = false;
	        this.index = 0;
	    }
	    SingleSubscriber.prototype.applySingleValue = function (value) {
	        if (this.seenValue) {
	            this.destination.error('Sequence contains more than one element');
	        }
	        else {
	            this.seenValue = true;
	            this.singleValue = value;
	        }
	    };
	    SingleSubscriber.prototype._next = function (value) {
	        var predicate = this.predicate;
	        this.index++;
	        if (predicate) {
	            this.tryNext(value);
	        }
	        else {
	            this.applySingleValue(value);
	        }
	    };
	    SingleSubscriber.prototype.tryNext = function (value) {
	        try {
	            var result = this.predicate(value, this.index, this.source);
	            if (result) {
	                this.applySingleValue(value);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    SingleSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (this.index > 0) {
	            destination.next(this.seenValue ? this.singleValue : undefined);
	            destination.complete();
	        }
	        else {
	            destination.error(new EmptyError_1.EmptyError);
	        }
	    };
	    return SingleSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=single.js.map

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var skip_1 = __webpack_require__(285);
	Observable_1.Observable.prototype.skip = skip_1.skip;
	//# sourceMappingURL=skip.js.map

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Returns an Observable that skips `n` items emitted by an Observable.
	 *
	 * <img src="./img/skip.png" width="100%">
	 *
	 * @param {Number} the `n` of times, items emitted by source Observable should be skipped.
	 * @return {Observable} an Observable that skips values emitted by the source Observable.
	 *
	 * @method skip
	 * @owner Observable
	 */
	function skip(total) {
	    return this.lift(new SkipOperator(total));
	}
	exports.skip = skip;
	var SkipOperator = (function () {
	    function SkipOperator(total) {
	        this.total = total;
	    }
	    SkipOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SkipSubscriber(subscriber, this.total));
	    };
	    return SkipOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SkipSubscriber = (function (_super) {
	    __extends(SkipSubscriber, _super);
	    function SkipSubscriber(destination, total) {
	        _super.call(this, destination);
	        this.total = total;
	        this.count = 0;
	    }
	    SkipSubscriber.prototype._next = function (x) {
	        if (++this.count > this.total) {
	            this.destination.next(x);
	        }
	    };
	    return SkipSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=skip.js.map

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var skipUntil_1 = __webpack_require__(287);
	Observable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;
	//# sourceMappingURL=skipUntil.js.map

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.
	 *
	 * <img src="./img/skipUntil.png" width="100%">
	 *
	 * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to
	 * be mirrored by the resulting Observable.
	 * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits
	 * an item, then emits the remaining items.
	 * @method skipUntil
	 * @owner Observable
	 */
	function skipUntil(notifier) {
	    return this.lift(new SkipUntilOperator(notifier));
	}
	exports.skipUntil = skipUntil;
	var SkipUntilOperator = (function () {
	    function SkipUntilOperator(notifier) {
	        this.notifier = notifier;
	    }
	    SkipUntilOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));
	    };
	    return SkipUntilOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SkipUntilSubscriber = (function (_super) {
	    __extends(SkipUntilSubscriber, _super);
	    function SkipUntilSubscriber(destination, notifier) {
	        _super.call(this, destination);
	        this.hasValue = false;
	        this.isInnerStopped = false;
	        this.add(subscribeToResult_1.subscribeToResult(this, notifier));
	    }
	    SkipUntilSubscriber.prototype._next = function (value) {
	        if (this.hasValue) {
	            _super.prototype._next.call(this, value);
	        }
	    };
	    SkipUntilSubscriber.prototype._complete = function () {
	        if (this.isInnerStopped) {
	            _super.prototype._complete.call(this);
	        }
	        else {
	            this.unsubscribe();
	        }
	    };
	    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.hasValue = true;
	    };
	    SkipUntilSubscriber.prototype.notifyComplete = function () {
	        this.isInnerStopped = true;
	        if (this.isStopped) {
	            _super.prototype._complete.call(this);
	        }
	    };
	    return SkipUntilSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=skipUntil.js.map

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var skipWhile_1 = __webpack_require__(289);
	Observable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;
	//# sourceMappingURL=skipWhile.js.map

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds
	 * true, but emits all further source items as soon as the condition becomes false.
	 *
	 * <img src="./img/skipWhile.png" width="100%">
	 *
	 * @param {Function} predicate - a function to test each item emitted from the source Observable.
	 * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the
	 * specified predicate becomes false.
	 * @method skipWhile
	 * @owner Observable
	 */
	function skipWhile(predicate) {
	    return this.lift(new SkipWhileOperator(predicate));
	}
	exports.skipWhile = skipWhile;
	var SkipWhileOperator = (function () {
	    function SkipWhileOperator(predicate) {
	        this.predicate = predicate;
	    }
	    SkipWhileOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
	    };
	    return SkipWhileOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SkipWhileSubscriber = (function (_super) {
	    __extends(SkipWhileSubscriber, _super);
	    function SkipWhileSubscriber(destination, predicate) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.skipping = true;
	        this.index = 0;
	    }
	    SkipWhileSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        if (this.skipping) {
	            this.tryCallPredicate(value);
	        }
	        if (!this.skipping) {
	            destination.next(value);
	        }
	    };
	    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
	        try {
	            var result = this.predicate(value, this.index++);
	            this.skipping = Boolean(result);
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    return SkipWhileSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=skipWhile.js.map

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var startWith_1 = __webpack_require__(291);
	Observable_1.Observable.prototype.startWith = startWith_1.startWith;
	//# sourceMappingURL=startWith.js.map

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ArrayObservable_1 = __webpack_require__(47);
	var ScalarObservable_1 = __webpack_require__(48);
	var EmptyObservable_1 = __webpack_require__(49);
	var concat_1 = __webpack_require__(58);
	var isScheduler_1 = __webpack_require__(46);
	/* tslint:disable:max-line-length */
	/**
	 * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the
	 * source Observable.
	 *
	 * <img src="./img/startWith.png" width="100%">
	 *
	 * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.
	 * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items
	 * emitted by the source Observable.
	 * @method startWith
	 * @owner Observable
	 */
	function startWith() {
	    var array = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        array[_i - 0] = arguments[_i];
	    }
	    var scheduler = array[array.length - 1];
	    if (isScheduler_1.isScheduler(scheduler)) {
	        array.pop();
	    }
	    else {
	        scheduler = null;
	    }
	    var len = array.length;
	    if (len === 1) {
	        return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);
	    }
	    else if (len > 1) {
	        return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);
	    }
	    else {
	        return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);
	    }
	}
	exports.startWith = startWith;
	//# sourceMappingURL=startWith.js.map

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var subscribeOn_1 = __webpack_require__(293);
	Observable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;
	//# sourceMappingURL=subscribeOn.js.map

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var SubscribeOnObservable_1 = __webpack_require__(294);
	/**
	 * Asynchronously subscribes Observers to this Observable on the specified Scheduler.
	 *
	 * <img src="./img/subscribeOn.png" width="100%">
	 *
	 * @param {Scheduler} the Scheduler to perform subscription actions on.
	 * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler
	 .
	 * @method subscribeOn
	 * @owner Observable
	 */
	function subscribeOn(scheduler, delay) {
	    if (delay === void 0) { delay = 0; }
	    return this.lift(new SubscribeOnOperator(scheduler, delay));
	}
	exports.subscribeOn = subscribeOn;
	var SubscribeOnOperator = (function () {
	    function SubscribeOnOperator(scheduler, delay) {
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    SubscribeOnOperator.prototype.call = function (subscriber, source) {
	        return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
	    };
	    return SubscribeOnOperator;
	}());
	//# sourceMappingURL=subscribeOn.js.map

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var asap_1 = __webpack_require__(295);
	var isNumeric_1 = __webpack_require__(89);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var SubscribeOnObservable = (function (_super) {
	    __extends(SubscribeOnObservable, _super);
	    function SubscribeOnObservable(source, delayTime, scheduler) {
	        if (delayTime === void 0) { delayTime = 0; }
	        if (scheduler === void 0) { scheduler = asap_1.asap; }
	        _super.call(this);
	        this.source = source;
	        this.delayTime = delayTime;
	        this.scheduler = scheduler;
	        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {
	            this.delayTime = 0;
	        }
	        if (!scheduler || typeof scheduler.schedule !== 'function') {
	            this.scheduler = asap_1.asap;
	        }
	    }
	    SubscribeOnObservable.create = function (source, delay, scheduler) {
	        if (delay === void 0) { delay = 0; }
	        if (scheduler === void 0) { scheduler = asap_1.asap; }
	        return new SubscribeOnObservable(source, delay, scheduler);
	    };
	    SubscribeOnObservable.dispatch = function (arg) {
	        var source = arg.source, subscriber = arg.subscriber;
	        return this.add(source.subscribe(subscriber));
	    };
	    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
	        var delay = this.delayTime;
	        var source = this.source;
	        var scheduler = this.scheduler;
	        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
	            source: source, subscriber: subscriber
	        });
	    };
	    return SubscribeOnObservable;
	}(Observable_1.Observable));
	exports.SubscribeOnObservable = SubscribeOnObservable;
	//# sourceMappingURL=SubscribeOnObservable.js.map

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var AsapAction_1 = __webpack_require__(296);
	var AsapScheduler_1 = __webpack_require__(300);
	exports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
	//# sourceMappingURL=asap.js.map

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Immediate_1 = __webpack_require__(297);
	var AsyncAction_1 = __webpack_require__(91);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var AsapAction = (function (_super) {
	    __extends(AsapAction, _super);
	    function AsapAction(scheduler, work) {
	        _super.call(this, scheduler, work);
	        this.scheduler = scheduler;
	        this.work = work;
	    }
	    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        // If delay is greater than 0, request as an async action.
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        // Push the action to the end of the scheduler queue.
	        scheduler.actions.push(this);
	        // If a microtask has already been scheduled, don't schedule another
	        // one. If a microtask hasn't been scheduled yet, schedule one now. Return
	        // the current scheduled microtask id.
	        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
	    };
	    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        // If delay exists and is greater than 0, or if the delay is null (the
	        // action wasn't rescheduled) but was originally scheduled as an async
	        // action, then recycle as an async action.
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        // If the scheduler queue is empty, cancel the requested microtask and
	        // set the scheduled flag to undefined so the next AsapAction will schedule
	        // its own.
	        if (scheduler.actions.length === 0) {
	            Immediate_1.Immediate.clearImmediate(id);
	            scheduler.scheduled = undefined;
	        }
	        // Return undefined so the action knows to request a new async id if it's rescheduled.
	        return undefined;
	    };
	    return AsapAction;
	}(AsyncAction_1.AsyncAction));
	exports.AsapAction = AsapAction;
	//# sourceMappingURL=AsapAction.js.map

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(clearImmediate, setImmediate) {/**
	Some credit for this helper goes to http://github.com/YuzuJS/setImmediate
	*/
	"use strict";
	var root_1 = __webpack_require__(12);
	var ImmediateDefinition = (function () {
	    function ImmediateDefinition(root) {
	        this.root = root;
	        if (root.setImmediate && typeof root.setImmediate === 'function') {
	            this.setImmediate = root.setImmediate.bind(root);
	            this.clearImmediate = root.clearImmediate.bind(root);
	        }
	        else {
	            this.nextHandle = 1;
	            this.tasksByHandle = {};
	            this.currentlyRunningATask = false;
	            // Don't get fooled by e.g. browserify environments.
	            if (this.canUseProcessNextTick()) {
	                // For Node.js before 0.9
	                this.setImmediate = this.createProcessNextTickSetImmediate();
	            }
	            else if (this.canUsePostMessage()) {
	                // For non-IE10 modern browsers
	                this.setImmediate = this.createPostMessageSetImmediate();
	            }
	            else if (this.canUseMessageChannel()) {
	                // For web workers, where supported
	                this.setImmediate = this.createMessageChannelSetImmediate();
	            }
	            else if (this.canUseReadyStateChange()) {
	                // For IE 6–8
	                this.setImmediate = this.createReadyStateChangeSetImmediate();
	            }
	            else {
	                // For older browsers
	                this.setImmediate = this.createSetTimeoutSetImmediate();
	            }
	            var ci = function clearImmediate(handle) {
	                delete clearImmediate.instance.tasksByHandle[handle];
	            };
	            ci.instance = this;
	            this.clearImmediate = ci;
	        }
	    }
	    ImmediateDefinition.prototype.identify = function (o) {
	        return this.root.Object.prototype.toString.call(o);
	    };
	    ImmediateDefinition.prototype.canUseProcessNextTick = function () {
	        return this.identify(this.root.process) === '[object process]';
	    };
	    ImmediateDefinition.prototype.canUseMessageChannel = function () {
	        return Boolean(this.root.MessageChannel);
	    };
	    ImmediateDefinition.prototype.canUseReadyStateChange = function () {
	        var document = this.root.document;
	        return Boolean(document && 'onreadystatechange' in document.createElement('script'));
	    };
	    ImmediateDefinition.prototype.canUsePostMessage = function () {
	        var root = this.root;
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `root.postMessage` means something completely different and can't be used for this purpose.
	        if (root.postMessage && !root.importScripts) {
	            var postMessageIsAsynchronous_1 = true;
	            var oldOnMessage = root.onmessage;
	            root.onmessage = function () {
	                postMessageIsAsynchronous_1 = false;
	            };
	            root.postMessage('', '*');
	            root.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous_1;
	        }
	        return false;
	    };
	    // This function accepts the same arguments as setImmediate, but
	    // returns a function that requires no arguments.
	    ImmediateDefinition.prototype.partiallyApplied = function (handler) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var fn = function result() {
	            var _a = result, handler = _a.handler, args = _a.args;
	            if (typeof handler === 'function') {
	                handler.apply(undefined, args);
	            }
	            else {
	                (new Function('' + handler))();
	            }
	        };
	        fn.handler = handler;
	        fn.args = args;
	        return fn;
	    };
	    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {
	        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);
	        return this.nextHandle++;
	    };
	    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {
	        var fn = function setImmediate() {
	            var instance = setImmediate.instance;
	            var handle = instance.addFromSetImmediateArguments(arguments);
	            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));
	            return handle;
	        };
	        fn.instance = this;
	        return fn;
	    };
	    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	        var root = this.root;
	        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';
	        var onGlobalMessage = function globalMessageHandler(event) {
	            var instance = globalMessageHandler.instance;
	            if (event.source === root &&
	                typeof event.data === 'string' &&
	                event.data.indexOf(messagePrefix) === 0) {
	                instance.runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };
	        onGlobalMessage.instance = this;
	        root.addEventListener('message', onGlobalMessage, false);
	        var fn = function setImmediate() {
	            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;
	            var handle = instance.addFromSetImmediateArguments(arguments);
	            instance.root.postMessage(messagePrefix + handle, '*');
	            return handle;
	        };
	        fn.instance = this;
	        fn.messagePrefix = messagePrefix;
	        return fn;
	    };
	    ImmediateDefinition.prototype.runIfPresent = function (handle) {
	        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (this.currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // 'too much recursion' error.
	            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);
	        }
	        else {
	            var task = this.tasksByHandle[handle];
	            if (task) {
	                this.currentlyRunningATask = true;
	                try {
	                    task();
	                }
	                finally {
	                    this.clearImmediate(handle);
	                    this.currentlyRunningATask = false;
	                }
	            }
	        }
	    };
	    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {
	        var _this = this;
	        var channel = new this.root.MessageChannel();
	        channel.port1.onmessage = function (event) {
	            var handle = event.data;
	            _this.runIfPresent(handle);
	        };
	        var fn = function setImmediate() {
	            var _a = setImmediate, channel = _a.channel, instance = _a.instance;
	            var handle = instance.addFromSetImmediateArguments(arguments);
	            channel.port2.postMessage(handle);
	            return handle;
	        };
	        fn.channel = channel;
	        fn.instance = this;
	        return fn;
	    };
	    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {
	        var fn = function setImmediate() {
	            var instance = setImmediate.instance;
	            var root = instance.root;
	            var doc = root.document;
	            var html = doc.documentElement;
	            var handle = instance.addFromSetImmediateArguments(arguments);
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement('script');
	            script.onreadystatechange = function () {
	                instance.runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	            return handle;
	        };
	        fn.instance = this;
	        return fn;
	    };
	    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {
	        var fn = function setImmediate() {
	            var instance = setImmediate.instance;
	            var handle = instance.addFromSetImmediateArguments(arguments);
	            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);
	            return handle;
	        };
	        fn.instance = this;
	        return fn;
	    };
	    return ImmediateDefinition;
	}());
	exports.ImmediateDefinition = ImmediateDefinition;
	exports.Immediate = new ImmediateDefinition(root_1.root);
	//# sourceMappingURL=Immediate.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(298).clearImmediate, __webpack_require__(298).setImmediate))

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	var apply = Function.prototype.apply;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// setimmediate attaches itself to the global object
	__webpack_require__(299);
	exports.setImmediate = setImmediate;
	exports.clearImmediate = clearImmediate;


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";
	
	    if (global.setImmediate) {
	        return;
	    }
	
	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;
	
	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }
	
	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }
	
	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }
	
	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }
	
	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }
	
	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }
	
	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	
	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };
	
	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }
	
	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }
	
	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };
	
	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }
	
	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }
	
	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }
	
	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
	
	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();
	
	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();
	
	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();
	
	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();
	
	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }
	
	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)))

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AsyncScheduler_1 = __webpack_require__(93);
	var AsapScheduler = (function (_super) {
	    __extends(AsapScheduler, _super);
	    function AsapScheduler() {
	        _super.apply(this, arguments);
	    }
	    AsapScheduler.prototype.flush = function (action) {
	        this.active = true;
	        this.scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        var count = actions.length;
	        action = action || actions.shift();
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this.active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsapScheduler;
	}(AsyncScheduler_1.AsyncScheduler));
	exports.AsapScheduler = AsapScheduler;
	//# sourceMappingURL=AsapScheduler.js.map

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var switch_1 = __webpack_require__(302);
	Observable_1.Observable.prototype.switch = switch_1._switch;
	Observable_1.Observable.prototype._switch = switch_1._switch;
	//# sourceMappingURL=switch.js.map

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Converts a higher-order Observable into a first-order Observable by
	 * subscribing to only the most recently emitted of those inner Observables.
	 *
	 * <span class="informal">Flattens an Observable-of-Observables by dropping the
	 * previous inner Observable once a new one appears.</span>
	 *
	 * <img src="./img/switch.png" width="100%">
	 *
	 * `switch` subscribes to an Observable that emits Observables, also known as a
	 * higher-order Observable. Each time it observes one of these emitted inner
	 * Observables, the output Observable subscribes to the inner Observable and
	 * begins emitting the items emitted by that. So far, it behaves
	 * like {@link mergeAll}. However, when a new inner Observable is emitted,
	 * `switch` unsubscribes from the earlier-emitted inner Observable and
	 * subscribes to the new inner Observable and begins emitting items from it. It
	 * continues to behave like this for subsequent inner Observables.
	 *
	 * @example <caption>Rerun an interval Observable on every click event</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * // Each click event is mapped to an Observable that ticks every second
	 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
	 * var switched = higherOrder.switch();
	 * // The outcome is that `switched` is essentially a timer that restarts
	 * // on every click. The interval Observables from older clicks do not merge
	 * // with the current interval Observable.
	 * switched.subscribe(x => console.log(x));
	 *
	 * @see {@link combineAll}
	 * @see {@link concatAll}
	 * @see {@link exhaust}
	 * @see {@link mergeAll}
	 * @see {@link switchMap}
	 * @see {@link switchMapTo}
	 * @see {@link zipAll}
	 *
	 * @return {Observable<T>} An Observable that emits the items emitted by the
	 * Observable most recently emitted by the source Observable.
	 * @method switch
	 * @name switch
	 * @owner Observable
	 */
	function _switch() {
	    return this.lift(new SwitchOperator());
	}
	exports._switch = _switch;
	var SwitchOperator = (function () {
	    function SwitchOperator() {
	    }
	    SwitchOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SwitchSubscriber(subscriber));
	    };
	    return SwitchOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SwitchSubscriber = (function (_super) {
	    __extends(SwitchSubscriber, _super);
	    function SwitchSubscriber(destination) {
	        _super.call(this, destination);
	        this.active = 0;
	        this.hasCompleted = false;
	    }
	    SwitchSubscriber.prototype._next = function (value) {
	        this.unsubscribeInner();
	        this.active++;
	        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, value));
	    };
	    SwitchSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    SwitchSubscriber.prototype.unsubscribeInner = function () {
	        this.active = this.active > 0 ? this.active - 1 : 0;
	        var innerSubscription = this.innerSubscription;
	        if (innerSubscription) {
	            innerSubscription.unsubscribe();
	            this.remove(innerSubscription);
	        }
	    };
	    SwitchSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    SwitchSubscriber.prototype.notifyError = function (err) {
	        this.destination.error(err);
	    };
	    SwitchSubscriber.prototype.notifyComplete = function () {
	        this.unsubscribeInner();
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    return SwitchSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=switch.js.map

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var switchMap_1 = __webpack_require__(304);
	Observable_1.Observable.prototype.switchMap = switchMap_1.switchMap;
	//# sourceMappingURL=switchMap.js.map

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/* tslint:disable:max-line-length */
	/**
	 * Projects each source value to an Observable which is merged in the output
	 * Observable, emitting values only from the most recently projected Observable.
	 *
	 * <span class="informal">Maps each value to an Observable, then flattens all of
	 * these inner Observables using {@link switch}.</span>
	 *
	 * <img src="./img/switchMap.png" width="100%">
	 *
	 * Returns an Observable that emits items based on applying a function that you
	 * supply to each item emitted by the source Observable, where that function
	 * returns an (so-called "inner") Observable. Each time it observes one of these
	 * inner Observables, the output Observable begins emitting the items emitted by
	 * that inner Observable. When a new inner Observable is emitted, `switchMap`
	 * stops emitting items from the earlier-emitted inner Observable and begins
	 * emitting items from the new one. It continues to behave like this for
	 * subsequent inner Observables.
	 *
	 * @example <caption>Rerun an interval Observable on every click event</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link concatMap}
	 * @see {@link exhaustMap}
	 * @see {@link mergeMap}
	 * @see {@link switch}
	 * @see {@link switchMapTo}
	 *
	 * @param {function(value: T, ?index: number): Observable} project A function
	 * that, when applied to an item emitted by the source Observable, returns an
	 * Observable.
	 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
	 * A function to produce the value on the output Observable based on the values
	 * and the indices of the source (outer) emission and the inner Observable
	 * emission. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @return {Observable} An Observable that emits the result of applying the
	 * projection function (and the optional `resultSelector`) to each item emitted
	 * by the source Observable and taking only the values from the most recently
	 * projected inner Observable.
	 * @method switchMap
	 * @owner Observable
	 */
	function switchMap(project, resultSelector) {
	    return this.lift(new SwitchMapOperator(project, resultSelector));
	}
	exports.switchMap = switchMap;
	var SwitchMapOperator = (function () {
	    function SwitchMapOperator(project, resultSelector) {
	        this.project = project;
	        this.resultSelector = resultSelector;
	    }
	    SwitchMapOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));
	    };
	    return SwitchMapOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SwitchMapSubscriber = (function (_super) {
	    __extends(SwitchMapSubscriber, _super);
	    function SwitchMapSubscriber(destination, project, resultSelector) {
	        _super.call(this, destination);
	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.index = 0;
	    }
	    SwitchMapSubscriber.prototype._next = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (error) {
	            this.destination.error(error);
	            return;
	        }
	        this._innerSub(result, value, index);
	    };
	    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
	        var innerSubscription = this.innerSubscription;
	        if (innerSubscription) {
	            innerSubscription.unsubscribe();
	        }
	        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
	    };
	    SwitchMapSubscriber.prototype._complete = function () {
	        var innerSubscription = this.innerSubscription;
	        if (!innerSubscription || innerSubscription.closed) {
	            _super.prototype._complete.call(this);
	        }
	    };
	    SwitchMapSubscriber.prototype._unsubscribe = function () {
	        this.innerSubscription = null;
	    };
	    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.remove(innerSub);
	        this.innerSubscription = null;
	        if (this.isStopped) {
	            _super.prototype._complete.call(this);
	        }
	    };
	    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        if (this.resultSelector) {
	            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        else {
	            this.destination.next(innerValue);
	        }
	    };
	    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
	        var result;
	        try {
	            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return SwitchMapSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=switchMap.js.map

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var switchMapTo_1 = __webpack_require__(306);
	Observable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;
	//# sourceMappingURL=switchMapTo.js.map

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/* tslint:disable:max-line-length */
	/**
	 * Projects each source value to the same Observable which is flattened multiple
	 * times with {@link switch} in the output Observable.
	 *
	 * <span class="informal">It's like {@link switchMap}, but maps each value
	 * always to the same inner Observable.</span>
	 *
	 * <img src="./img/switchMapTo.png" width="100%">
	 *
	 * Maps each source value to the given Observable `innerObservable` regardless
	 * of the source value, and then flattens those resulting Observables into one
	 * single Observable, which is the output Observable. The output Observables
	 * emits values only from the most recently emitted instance of
	 * `innerObservable`.
	 *
	 * @example <caption>Rerun an interval Observable on every click event</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.switchMapTo(Rx.Observable.interval(1000));
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link concatMapTo}
	 * @see {@link switch}
	 * @see {@link switchMap}
	 * @see {@link mergeMapTo}
	 *
	 * @param {Observable} innerObservable An Observable to replace each value from
	 * the source Observable.
	 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
	 * A function to produce the value on the output Observable based on the values
	 * and the indices of the source (outer) emission and the inner Observable
	 * emission. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @return {Observable} An Observable that emits items from the given
	 * `innerObservable` every time a value is emitted on the source Observable.
	 * @return {Observable} An Observable that emits items from the given
	 * `innerObservable` (and optionally transformed through `resultSelector`) every
	 * time a value is emitted on the source Observable, and taking only the values
	 * from the most recently projected inner Observable.
	 * @method switchMapTo
	 * @owner Observable
	 */
	function switchMapTo(innerObservable, resultSelector) {
	    return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));
	}
	exports.switchMapTo = switchMapTo;
	var SwitchMapToOperator = (function () {
	    function SwitchMapToOperator(observable, resultSelector) {
	        this.observable = observable;
	        this.resultSelector = resultSelector;
	    }
	    SwitchMapToOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));
	    };
	    return SwitchMapToOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SwitchMapToSubscriber = (function (_super) {
	    __extends(SwitchMapToSubscriber, _super);
	    function SwitchMapToSubscriber(destination, inner, resultSelector) {
	        _super.call(this, destination);
	        this.inner = inner;
	        this.resultSelector = resultSelector;
	        this.index = 0;
	    }
	    SwitchMapToSubscriber.prototype._next = function (value) {
	        var innerSubscription = this.innerSubscription;
	        if (innerSubscription) {
	            innerSubscription.unsubscribe();
	        }
	        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));
	    };
	    SwitchMapToSubscriber.prototype._complete = function () {
	        var innerSubscription = this.innerSubscription;
	        if (!innerSubscription || innerSubscription.closed) {
	            _super.prototype._complete.call(this);
	        }
	    };
	    SwitchMapToSubscriber.prototype._unsubscribe = function () {
	        this.innerSubscription = null;
	    };
	    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.remove(innerSub);
	        this.innerSubscription = null;
	        if (this.isStopped) {
	            _super.prototype._complete.call(this);
	        }
	    };
	    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
	        if (resultSelector) {
	            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        else {
	            destination.next(innerValue);
	        }
	    };
	    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
	        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
	        var result;
	        try {
	            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        catch (err) {
	            destination.error(err);
	            return;
	        }
	        destination.next(result);
	    };
	    return SwitchMapToSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=switchMapTo.js.map

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var take_1 = __webpack_require__(308);
	Observable_1.Observable.prototype.take = take_1.take;
	//# sourceMappingURL=take.js.map

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var ArgumentOutOfRangeError_1 = __webpack_require__(194);
	var EmptyObservable_1 = __webpack_require__(49);
	/**
	 * Emits only the first `count` values emitted by the source Observable.
	 *
	 * <span class="informal">Takes the first `count` values from the source, then
	 * completes.</span>
	 *
	 * <img src="./img/take.png" width="100%">
	 *
	 * `take` returns an Observable that emits only the first `count` values emitted
	 * by the source Observable. If the source emits fewer than `count` values then
	 * all of its values are emitted. After that, it completes, regardless if the
	 * source completes.
	 *
	 * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>
	 * var interval = Rx.Observable.interval(1000);
	 * var five = interval.take(5);
	 * five.subscribe(x => console.log(x));
	 *
	 * @see {@link takeLast}
	 * @see {@link takeUntil}
	 * @see {@link takeWhile}
	 * @see {@link skip}
	 *
	 * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an
	 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
	 *
	 * @param {number} count The maximum number of `next` values to emit.
	 * @return {Observable<T>} An Observable that emits only the first `count`
	 * values emitted by the source Observable, or all of the values from the source
	 * if the source emits fewer than `count` values.
	 * @method take
	 * @owner Observable
	 */
	function take(count) {
	    if (count === 0) {
	        return new EmptyObservable_1.EmptyObservable();
	    }
	    else {
	        return this.lift(new TakeOperator(count));
	    }
	}
	exports.take = take;
	var TakeOperator = (function () {
	    function TakeOperator(total) {
	        this.total = total;
	        if (this.total < 0) {
	            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
	        }
	    }
	    TakeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TakeSubscriber(subscriber, this.total));
	    };
	    return TakeOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var TakeSubscriber = (function (_super) {
	    __extends(TakeSubscriber, _super);
	    function TakeSubscriber(destination, total) {
	        _super.call(this, destination);
	        this.total = total;
	        this.count = 0;
	    }
	    TakeSubscriber.prototype._next = function (value) {
	        var total = this.total;
	        var count = ++this.count;
	        if (count <= total) {
	            this.destination.next(value);
	            if (count === total) {
	                this.destination.complete();
	                this.unsubscribe();
	            }
	        }
	    };
	    return TakeSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=take.js.map

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var takeLast_1 = __webpack_require__(310);
	Observable_1.Observable.prototype.takeLast = takeLast_1.takeLast;
	//# sourceMappingURL=takeLast.js.map

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var ArgumentOutOfRangeError_1 = __webpack_require__(194);
	var EmptyObservable_1 = __webpack_require__(49);
	/**
	 * Emits only the last `count` values emitted by the source Observable.
	 *
	 * <span class="informal">Remembers the latest `count` values, then emits those
	 * only when the source completes.</span>
	 *
	 * <img src="./img/takeLast.png" width="100%">
	 *
	 * `takeLast` returns an Observable that emits at most the last `count` values
	 * emitted by the source Observable. If the source emits fewer than `count`
	 * values then all of its values are emitted. This operator must wait until the
	 * `complete` notification emission from the source in order to emit the `next`
	 * values on the output Observable, because otherwise it is impossible to know
	 * whether or not more values will be emitted on the source. For this reason,
	 * all values are emitted synchronously, followed by the complete notification.
	 *
	 * @example <caption>Take the last 3 values of an Observable with many values</caption>
	 * var many = Rx.Observable.range(1, 100);
	 * var lastThree = many.takeLast(3);
	 * lastThree.subscribe(x => console.log(x));
	 *
	 * @see {@link take}
	 * @see {@link takeUntil}
	 * @see {@link takeWhile}
	 * @see {@link skip}
	 *
	 * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an
	 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
	 *
	 * @param {number} count The maximum number of values to emit from the end of
	 * the sequence of values emitted by the source Observable.
	 * @return {Observable<T>} An Observable that emits at most the last count
	 * values emitted by the source Observable.
	 * @method takeLast
	 * @owner Observable
	 */
	function takeLast(count) {
	    if (count === 0) {
	        return new EmptyObservable_1.EmptyObservable();
	    }
	    else {
	        return this.lift(new TakeLastOperator(count));
	    }
	}
	exports.takeLast = takeLast;
	var TakeLastOperator = (function () {
	    function TakeLastOperator(total) {
	        this.total = total;
	        if (this.total < 0) {
	            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
	        }
	    }
	    TakeLastOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
	    };
	    return TakeLastOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var TakeLastSubscriber = (function (_super) {
	    __extends(TakeLastSubscriber, _super);
	    function TakeLastSubscriber(destination, total) {
	        _super.call(this, destination);
	        this.total = total;
	        this.ring = new Array();
	        this.count = 0;
	    }
	    TakeLastSubscriber.prototype._next = function (value) {
	        var ring = this.ring;
	        var total = this.total;
	        var count = this.count++;
	        if (ring.length < total) {
	            ring.push(value);
	        }
	        else {
	            var index = count % total;
	            ring[index] = value;
	        }
	    };
	    TakeLastSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        var count = this.count;
	        if (count > 0) {
	            var total = this.count >= this.total ? this.total : this.count;
	            var ring = this.ring;
	            for (var i = 0; i < total; i++) {
	                var idx = (count++) % total;
	                destination.next(ring[idx]);
	            }
	        }
	        destination.complete();
	    };
	    return TakeLastSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=takeLast.js.map

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var takeUntil_1 = __webpack_require__(312);
	Observable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;
	//# sourceMappingURL=takeUntil.js.map

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Emits the values emitted by the source Observable until a `notifier`
	 * Observable emits a value.
	 *
	 * <span class="informal">Lets values pass until a second Observable,
	 * `notifier`, emits something. Then, it completes.</span>
	 *
	 * <img src="./img/takeUntil.png" width="100%">
	 *
	 * `takeUntil` subscribes and begins mirroring the source Observable. It also
	 * monitors a second Observable, `notifier` that you provide. If the `notifier`
	 * emits a value or a complete notification, the output Observable stops
	 * mirroring the source Observable and completes.
	 *
	 * @example <caption>Tick every second until the first click happens</caption>
	 * var interval = Rx.Observable.interval(1000);
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = interval.takeUntil(clicks);
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link take}
	 * @see {@link takeLast}
	 * @see {@link takeWhile}
	 * @see {@link skip}
	 *
	 * @param {Observable} notifier The Observable whose first emitted value will
	 * cause the output Observable of `takeUntil` to stop emitting values from the
	 * source Observable.
	 * @return {Observable<T>} An Observable that emits the values from the source
	 * Observable until such time as `notifier` emits its first value.
	 * @method takeUntil
	 * @owner Observable
	 */
	function takeUntil(notifier) {
	    return this.lift(new TakeUntilOperator(notifier));
	}
	exports.takeUntil = takeUntil;
	var TakeUntilOperator = (function () {
	    function TakeUntilOperator(notifier) {
	        this.notifier = notifier;
	    }
	    TakeUntilOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));
	    };
	    return TakeUntilOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var TakeUntilSubscriber = (function (_super) {
	    __extends(TakeUntilSubscriber, _super);
	    function TakeUntilSubscriber(destination, notifier) {
	        _super.call(this, destination);
	        this.notifier = notifier;
	        this.add(subscribeToResult_1.subscribeToResult(this, notifier));
	    }
	    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.complete();
	    };
	    TakeUntilSubscriber.prototype.notifyComplete = function () {
	        // noop
	    };
	    return TakeUntilSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=takeUntil.js.map

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var takeWhile_1 = __webpack_require__(314);
	Observable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;
	//# sourceMappingURL=takeWhile.js.map

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Emits values emitted by the source Observable so long as each value satisfies
	 * the given `predicate`, and then completes as soon as this `predicate` is not
	 * satisfied.
	 *
	 * <span class="informal">Takes values from the source only while they pass the
	 * condition given. When the first value does not satisfy, it completes.</span>
	 *
	 * <img src="./img/takeWhile.png" width="100%">
	 *
	 * `takeWhile` subscribes and begins mirroring the source Observable. Each value
	 * emitted on the source is given to the `predicate` function which returns a
	 * boolean, representing a condition to be satisfied by the source values. The
	 * output Observable emits the source values until such time as the `predicate`
	 * returns false, at which point `takeWhile` stops mirroring the source
	 * Observable and completes the output Observable.
	 *
	 * @example <caption>Emit click events only while the clientX property is greater than 200</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.takeWhile(ev => ev.clientX > 200);
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link take}
	 * @see {@link takeLast}
	 * @see {@link takeUntil}
	 * @see {@link skip}
	 *
	 * @param {function(value: T, index: number): boolean} predicate A function that
	 * evaluates a value emitted by the source Observable and returns a boolean.
	 * Also takes the (zero-based) index as the second argument.
	 * @return {Observable<T>} An Observable that emits the values from the source
	 * Observable so long as each value satisfies the condition defined by the
	 * `predicate`, then completes.
	 * @method takeWhile
	 * @owner Observable
	 */
	function takeWhile(predicate) {
	    return this.lift(new TakeWhileOperator(predicate));
	}
	exports.takeWhile = takeWhile;
	var TakeWhileOperator = (function () {
	    function TakeWhileOperator(predicate) {
	        this.predicate = predicate;
	    }
	    TakeWhileOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));
	    };
	    return TakeWhileOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var TakeWhileSubscriber = (function (_super) {
	    __extends(TakeWhileSubscriber, _super);
	    function TakeWhileSubscriber(destination, predicate) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.index = 0;
	    }
	    TakeWhileSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        var result;
	        try {
	            result = this.predicate(value, this.index++);
	        }
	        catch (err) {
	            destination.error(err);
	            return;
	        }
	        this.nextOrComplete(value, result);
	    };
	    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
	        var destination = this.destination;
	        if (Boolean(predicateResult)) {
	            destination.next(value);
	        }
	        else {
	            destination.complete();
	        }
	    };
	    return TakeWhileSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=takeWhile.js.map

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var throttle_1 = __webpack_require__(316);
	Observable_1.Observable.prototype.throttle = throttle_1.throttle;
	//# sourceMappingURL=throttle.js.map

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Emits a value from the source Observable, then ignores subsequent source
	 * values for a duration determined by another Observable, then repeats this
	 * process.
	 *
	 * <span class="informal">It's like {@link throttleTime}, but the silencing
	 * duration is determined by a second Observable.</span>
	 *
	 * <img src="./img/throttle.png" width="100%">
	 *
	 * `throttle` emits the source Observable values on the output Observable
	 * when its internal timer is disabled, and ignores source values when the timer
	 * is enabled. Initially, the timer is disabled. As soon as the first source
	 * value arrives, it is forwarded to the output Observable, and then the timer
	 * is enabled by calling the `durationSelector` function with the source value,
	 * which returns the "duration" Observable. When the duration Observable emits a
	 * value or completes, the timer is disabled, and this process repeats for the
	 * next source value.
	 *
	 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.throttle(ev => Rx.Observable.interval(1000));
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link audit}
	 * @see {@link debounce}
	 * @see {@link delayWhen}
	 * @see {@link sample}
	 * @see {@link throttleTime}
	 *
	 * @param {function(value: T): Observable|Promise} durationSelector A function
	 * that receives a value from the source Observable, for computing the silencing
	 * duration for each source value, returned as an Observable or a Promise.
	 * @return {Observable<T>} An Observable that performs the throttle operation to
	 * limit the rate of emissions from the source.
	 * @method throttle
	 * @owner Observable
	 */
	function throttle(durationSelector) {
	    return this.lift(new ThrottleOperator(durationSelector));
	}
	exports.throttle = throttle;
	var ThrottleOperator = (function () {
	    function ThrottleOperator(durationSelector) {
	        this.durationSelector = durationSelector;
	    }
	    ThrottleOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));
	    };
	    return ThrottleOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ThrottleSubscriber = (function (_super) {
	    __extends(ThrottleSubscriber, _super);
	    function ThrottleSubscriber(destination, durationSelector) {
	        _super.call(this, destination);
	        this.destination = destination;
	        this.durationSelector = durationSelector;
	    }
	    ThrottleSubscriber.prototype._next = function (value) {
	        if (!this.throttled) {
	            this.tryDurationSelector(value);
	        }
	    };
	    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
	        var duration = null;
	        try {
	            duration = this.durationSelector(value);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.emitAndThrottle(value, duration);
	    };
	    ThrottleSubscriber.prototype.emitAndThrottle = function (value, duration) {
	        this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));
	        this.destination.next(value);
	    };
	    ThrottleSubscriber.prototype._unsubscribe = function () {
	        var throttled = this.throttled;
	        if (throttled) {
	            this.remove(throttled);
	            this.throttled = null;
	            throttled.unsubscribe();
	        }
	    };
	    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this._unsubscribe();
	    };
	    ThrottleSubscriber.prototype.notifyComplete = function () {
	        this._unsubscribe();
	    };
	    return ThrottleSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=throttle.js.map

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var throttleTime_1 = __webpack_require__(318);
	Observable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;
	//# sourceMappingURL=throttleTime.js.map

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var async_1 = __webpack_require__(90);
	/**
	 * Emits a value from the source Observable, then ignores subsequent source
	 * values for `duration` milliseconds, then repeats this process.
	 *
	 * <span class="informal">Lets a value pass, then ignores source values for the
	 * next `duration` milliseconds.</span>
	 *
	 * <img src="./img/throttleTime.png" width="100%">
	 *
	 * `throttleTime` emits the source Observable values on the output Observable
	 * when its internal timer is disabled, and ignores source values when the timer
	 * is enabled. Initially, the timer is disabled. As soon as the first source
	 * value arrives, it is forwarded to the output Observable, and then the timer
	 * is enabled. After `duration` milliseconds (or the time unit determined
	 * internally by the optional `scheduler`) has passed, the timer is disabled,
	 * and this process repeats for the next source value. Optionally takes a
	 * {@link Scheduler} for managing timers.
	 *
	 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.throttleTime(1000);
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link auditTime}
	 * @see {@link debounceTime}
	 * @see {@link delay}
	 * @see {@link sampleTime}
	 * @see {@link throttle}
	 *
	 * @param {number} duration Time to wait before emitting another value after
	 * emitting the last value, measured in milliseconds or the time unit determined
	 * internally by the optional `scheduler`.
	 * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for
	 * managing the timers that handle the sampling.
	 * @return {Observable<T>} An Observable that performs the throttle operation to
	 * limit the rate of emissions from the source.
	 * @method throttleTime
	 * @owner Observable
	 */
	function throttleTime(duration, scheduler) {
	    if (scheduler === void 0) { scheduler = async_1.async; }
	    return this.lift(new ThrottleTimeOperator(duration, scheduler));
	}
	exports.throttleTime = throttleTime;
	var ThrottleTimeOperator = (function () {
	    function ThrottleTimeOperator(duration, scheduler) {
	        this.duration = duration;
	        this.scheduler = scheduler;
	    }
	    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));
	    };
	    return ThrottleTimeOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ThrottleTimeSubscriber = (function (_super) {
	    __extends(ThrottleTimeSubscriber, _super);
	    function ThrottleTimeSubscriber(destination, duration, scheduler) {
	        _super.call(this, destination);
	        this.duration = duration;
	        this.scheduler = scheduler;
	    }
	    ThrottleTimeSubscriber.prototype._next = function (value) {
	        if (!this.throttled) {
	            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));
	            this.destination.next(value);
	        }
	    };
	    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
	        var throttled = this.throttled;
	        if (throttled) {
	            throttled.unsubscribe();
	            this.remove(throttled);
	            this.throttled = null;
	        }
	    };
	    return ThrottleTimeSubscriber;
	}(Subscriber_1.Subscriber));
	function dispatchNext(arg) {
	    var subscriber = arg.subscriber;
	    subscriber.clearThrottle();
	}
	//# sourceMappingURL=throttleTime.js.map

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var timeInterval_1 = __webpack_require__(320);
	Observable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;
	//# sourceMappingURL=timeInterval.js.map

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var async_1 = __webpack_require__(90);
	/**
	 * @param scheduler
	 * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}
	 * @method timeInterval
	 * @owner Observable
	 */
	function timeInterval(scheduler) {
	    if (scheduler === void 0) { scheduler = async_1.async; }
	    return this.lift(new TimeIntervalOperator(scheduler));
	}
	exports.timeInterval = timeInterval;
	var TimeInterval = (function () {
	    function TimeInterval(value, interval) {
	        this.value = value;
	        this.interval = interval;
	    }
	    return TimeInterval;
	}());
	exports.TimeInterval = TimeInterval;
	;
	var TimeIntervalOperator = (function () {
	    function TimeIntervalOperator(scheduler) {
	        this.scheduler = scheduler;
	    }
	    TimeIntervalOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));
	    };
	    return TimeIntervalOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var TimeIntervalSubscriber = (function (_super) {
	    __extends(TimeIntervalSubscriber, _super);
	    function TimeIntervalSubscriber(destination, scheduler) {
	        _super.call(this, destination);
	        this.scheduler = scheduler;
	        this.lastTime = 0;
	        this.lastTime = scheduler.now();
	    }
	    TimeIntervalSubscriber.prototype._next = function (value) {
	        var now = this.scheduler.now();
	        var span = now - this.lastTime;
	        this.lastTime = now;
	        this.destination.next(new TimeInterval(value, span));
	    };
	    return TimeIntervalSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=timeInterval.js.map

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var timeout_1 = __webpack_require__(322);
	Observable_1.Observable.prototype.timeout = timeout_1.timeout;
	//# sourceMappingURL=timeout.js.map

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var async_1 = __webpack_require__(90);
	var isDate_1 = __webpack_require__(123);
	var Subscriber_1 = __webpack_require__(14);
	var TimeoutError_1 = __webpack_require__(323);
	/**
	 * @param {number} due
	 * @param {Scheduler} [scheduler]
	 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
	 * @method timeout
	 * @owner Observable
	 */
	function timeout(due, scheduler) {
	    if (scheduler === void 0) { scheduler = async_1.async; }
	    var absoluteTimeout = isDate_1.isDate(due);
	    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
	    return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError()));
	}
	exports.timeout = timeout;
	var TimeoutOperator = (function () {
	    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {
	        this.waitFor = waitFor;
	        this.absoluteTimeout = absoluteTimeout;
	        this.scheduler = scheduler;
	        this.errorInstance = errorInstance;
	    }
	    TimeoutOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));
	    };
	    return TimeoutOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var TimeoutSubscriber = (function (_super) {
	    __extends(TimeoutSubscriber, _super);
	    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {
	        _super.call(this, destination);
	        this.absoluteTimeout = absoluteTimeout;
	        this.waitFor = waitFor;
	        this.scheduler = scheduler;
	        this.errorInstance = errorInstance;
	        this.index = 0;
	        this._previousIndex = 0;
	        this._hasCompleted = false;
	        this.scheduleTimeout();
	    }
	    Object.defineProperty(TimeoutSubscriber.prototype, "previousIndex", {
	        get: function () {
	            return this._previousIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TimeoutSubscriber.prototype, "hasCompleted", {
	        get: function () {
	            return this._hasCompleted;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TimeoutSubscriber.dispatchTimeout = function (state) {
	        var source = state.subscriber;
	        var currentIndex = state.index;
	        if (!source.hasCompleted && source.previousIndex === currentIndex) {
	            source.notifyTimeout();
	        }
	    };
	    TimeoutSubscriber.prototype.scheduleTimeout = function () {
	        var currentIndex = this.index;
	        this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });
	        this.index++;
	        this._previousIndex = currentIndex;
	    };
	    TimeoutSubscriber.prototype._next = function (value) {
	        this.destination.next(value);
	        if (!this.absoluteTimeout) {
	            this.scheduleTimeout();
	        }
	    };
	    TimeoutSubscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this._hasCompleted = true;
	    };
	    TimeoutSubscriber.prototype._complete = function () {
	        this.destination.complete();
	        this._hasCompleted = true;
	    };
	    TimeoutSubscriber.prototype.notifyTimeout = function () {
	        this.error(this.errorInstance);
	    };
	    return TimeoutSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=timeout.js.map

/***/ },
/* 323 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when duetime elapses.
	 *
	 * @see {@link timeout}
	 *
	 * @class TimeoutError
	 */
	var TimeoutError = (function (_super) {
	    __extends(TimeoutError, _super);
	    function TimeoutError() {
	        var err = _super.call(this, 'Timeout has occurred');
	        this.name = err.name = 'TimeoutError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return TimeoutError;
	}(Error));
	exports.TimeoutError = TimeoutError;
	//# sourceMappingURL=TimeoutError.js.map

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var timeoutWith_1 = __webpack_require__(325);
	Observable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;
	//# sourceMappingURL=timeoutWith.js.map

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var async_1 = __webpack_require__(90);
	var isDate_1 = __webpack_require__(123);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/* tslint:disable:max-line-length */
	/**
	 * @param due
	 * @param withObservable
	 * @param scheduler
	 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
	 * @method timeoutWith
	 * @owner Observable
	 */
	function timeoutWith(due, withObservable, scheduler) {
	    if (scheduler === void 0) { scheduler = async_1.async; }
	    var absoluteTimeout = isDate_1.isDate(due);
	    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
	    return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
	}
	exports.timeoutWith = timeoutWith;
	var TimeoutWithOperator = (function () {
	    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
	        this.waitFor = waitFor;
	        this.absoluteTimeout = absoluteTimeout;
	        this.withObservable = withObservable;
	        this.scheduler = scheduler;
	    }
	    TimeoutWithOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
	    };
	    return TimeoutWithOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var TimeoutWithSubscriber = (function (_super) {
	    __extends(TimeoutWithSubscriber, _super);
	    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
	        _super.call(this);
	        this.destination = destination;
	        this.absoluteTimeout = absoluteTimeout;
	        this.waitFor = waitFor;
	        this.withObservable = withObservable;
	        this.scheduler = scheduler;
	        this.timeoutSubscription = undefined;
	        this.index = 0;
	        this._previousIndex = 0;
	        this._hasCompleted = false;
	        destination.add(this);
	        this.scheduleTimeout();
	    }
	    Object.defineProperty(TimeoutWithSubscriber.prototype, "previousIndex", {
	        get: function () {
	            return this._previousIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TimeoutWithSubscriber.prototype, "hasCompleted", {
	        get: function () {
	            return this._hasCompleted;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TimeoutWithSubscriber.dispatchTimeout = function (state) {
	        var source = state.subscriber;
	        var currentIndex = state.index;
	        if (!source.hasCompleted && source.previousIndex === currentIndex) {
	            source.handleTimeout();
	        }
	    };
	    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
	        var currentIndex = this.index;
	        var timeoutState = { subscriber: this, index: currentIndex };
	        this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);
	        this.index++;
	        this._previousIndex = currentIndex;
	    };
	    TimeoutWithSubscriber.prototype._next = function (value) {
	        this.destination.next(value);
	        if (!this.absoluteTimeout) {
	            this.scheduleTimeout();
	        }
	    };
	    TimeoutWithSubscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this._hasCompleted = true;
	    };
	    TimeoutWithSubscriber.prototype._complete = function () {
	        this.destination.complete();
	        this._hasCompleted = true;
	    };
	    TimeoutWithSubscriber.prototype.handleTimeout = function () {
	        if (!this.closed) {
	            var withObservable = this.withObservable;
	            this.unsubscribe();
	            this.destination.add(this.timeoutSubscription = subscribeToResult_1.subscribeToResult(this, withObservable));
	        }
	    };
	    return TimeoutWithSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=timeoutWith.js.map

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var timestamp_1 = __webpack_require__(327);
	Observable_1.Observable.prototype.timestamp = timestamp_1.timestamp;
	//# sourceMappingURL=timestamp.js.map

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var async_1 = __webpack_require__(90);
	/**
	 * @param scheduler
	 * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}
	 * @method timestamp
	 * @owner Observable
	 */
	function timestamp(scheduler) {
	    if (scheduler === void 0) { scheduler = async_1.async; }
	    return this.lift(new TimestampOperator(scheduler));
	}
	exports.timestamp = timestamp;
	var Timestamp = (function () {
	    function Timestamp(value, timestamp) {
	        this.value = value;
	        this.timestamp = timestamp;
	    }
	    return Timestamp;
	}());
	exports.Timestamp = Timestamp;
	;
	var TimestampOperator = (function () {
	    function TimestampOperator(scheduler) {
	        this.scheduler = scheduler;
	    }
	    TimestampOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new TimestampSubscriber(observer, this.scheduler));
	    };
	    return TimestampOperator;
	}());
	var TimestampSubscriber = (function (_super) {
	    __extends(TimestampSubscriber, _super);
	    function TimestampSubscriber(destination, scheduler) {
	        _super.call(this, destination);
	        this.scheduler = scheduler;
	    }
	    TimestampSubscriber.prototype._next = function (value) {
	        var now = this.scheduler.now();
	        this.destination.next(new Timestamp(value, now));
	    };
	    return TimestampSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=timestamp.js.map

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var toArray_1 = __webpack_require__(329);
	Observable_1.Observable.prototype.toArray = toArray_1.toArray;
	//# sourceMappingURL=toArray.js.map

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}
	 * @method toArray
	 * @owner Observable
	 */
	function toArray() {
	    return this.lift(new ToArrayOperator());
	}
	exports.toArray = toArray;
	var ToArrayOperator = (function () {
	    function ToArrayOperator() {
	    }
	    ToArrayOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ToArraySubscriber(subscriber));
	    };
	    return ToArrayOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ToArraySubscriber = (function (_super) {
	    __extends(ToArraySubscriber, _super);
	    function ToArraySubscriber(destination) {
	        _super.call(this, destination);
	        this.array = [];
	    }
	    ToArraySubscriber.prototype._next = function (x) {
	        this.array.push(x);
	    };
	    ToArraySubscriber.prototype._complete = function () {
	        this.destination.next(this.array);
	        this.destination.complete();
	    };
	    return ToArraySubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=toArray.js.map

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var toPromise_1 = __webpack_require__(331);
	Observable_1.Observable.prototype.toPromise = toPromise_1.toPromise;
	//# sourceMappingURL=toPromise.js.map

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(12);
	/* tslint:disable:max-line-length */
	/**
	 * @param PromiseCtor
	 * @return {Promise<T>}
	 * @method toPromise
	 * @owner Observable
	 */
	function toPromise(PromiseCtor) {
	    var _this = this;
	    if (!PromiseCtor) {
	        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	            PromiseCtor = root_1.root.Rx.config.Promise;
	        }
	        else if (root_1.root.Promise) {
	            PromiseCtor = root_1.root.Promise;
	        }
	    }
	    if (!PromiseCtor) {
	        throw new Error('no Promise impl found');
	    }
	    return new PromiseCtor(function (resolve, reject) {
	        var value;
	        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
	    });
	}
	exports.toPromise = toPromise;
	//# sourceMappingURL=toPromise.js.map

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var window_1 = __webpack_require__(333);
	Observable_1.Observable.prototype.window = window_1.window;
	//# sourceMappingURL=window.js.map

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(34);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Branch out the source Observable values as a nested Observable whenever
	 * `windowBoundaries` emits.
	 *
	 * <span class="informal">It's like {@link buffer}, but emits a nested Observable
	 * instead of an array.</span>
	 *
	 * <img src="./img/window.png" width="100%">
	 *
	 * Returns an Observable that emits windows of items it collects from the source
	 * Observable. The output Observable emits connected, non-overlapping
	 * windows. It emits the current window and opens a new one whenever the
	 * Observable `windowBoundaries` emits an item. Because each window is an
	 * Observable, the output is a higher-order Observable.
	 *
	 * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var interval = Rx.Observable.interval(1000);
	 * var result = clicks.window(interval)
	 *   .map(win => win.take(2)) // each window has at most 2 emissions
	 *   .mergeAll(); // flatten the Observable-of-Observables
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link windowCount}
	 * @see {@link windowTime}
	 * @see {@link windowToggle}
	 * @see {@link windowWhen}
	 * @see {@link buffer}
	 *
	 * @param {Observable<any>} windowBoundaries An Observable that completes the
	 * previous window and starts a new window.
	 * @return {Observable<Observable<T>>} An Observable of windows, which are
	 * Observables emitting values of the source Observable.
	 * @method window
	 * @owner Observable
	 */
	function window(windowBoundaries) {
	    return this.lift(new WindowOperator(windowBoundaries));
	}
	exports.window = window;
	var WindowOperator = (function () {
	    function WindowOperator(windowBoundaries) {
	        this.windowBoundaries = windowBoundaries;
	    }
	    WindowOperator.prototype.call = function (subscriber, source) {
	        var windowSubscriber = new WindowSubscriber(subscriber);
	        var sourceSubscription = source.subscribe(windowSubscriber);
	        if (!sourceSubscription.closed) {
	            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));
	        }
	        return sourceSubscription;
	    };
	    return WindowOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var WindowSubscriber = (function (_super) {
	    __extends(WindowSubscriber, _super);
	    function WindowSubscriber(destination) {
	        _super.call(this, destination);
	        this.window = new Subject_1.Subject();
	        destination.next(this.window);
	    }
	    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.openWindow();
	    };
	    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
	        this._complete();
	    };
	    WindowSubscriber.prototype._next = function (value) {
	        this.window.next(value);
	    };
	    WindowSubscriber.prototype._error = function (err) {
	        this.window.error(err);
	        this.destination.error(err);
	    };
	    WindowSubscriber.prototype._complete = function () {
	        this.window.complete();
	        this.destination.complete();
	    };
	    WindowSubscriber.prototype._unsubscribe = function () {
	        this.window = null;
	    };
	    WindowSubscriber.prototype.openWindow = function () {
	        var prevWindow = this.window;
	        if (prevWindow) {
	            prevWindow.complete();
	        }
	        var destination = this.destination;
	        var newWindow = this.window = new Subject_1.Subject();
	        destination.next(newWindow);
	    };
	    return WindowSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=window.js.map

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var windowCount_1 = __webpack_require__(335);
	Observable_1.Observable.prototype.windowCount = windowCount_1.windowCount;
	//# sourceMappingURL=windowCount.js.map

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var Subject_1 = __webpack_require__(34);
	/**
	 * Branch out the source Observable values as a nested Observable with each
	 * nested Observable emitting at most `windowSize` values.
	 *
	 * <span class="informal">It's like {@link bufferCount}, but emits a nested
	 * Observable instead of an array.</span>
	 *
	 * <img src="./img/windowCount.png" width="100%">
	 *
	 * Returns an Observable that emits windows of items it collects from the source
	 * Observable. The output Observable emits windows every `startWindowEvery`
	 * items, each containing no more than `windowSize` items. When the source
	 * Observable completes or encounters an error, the output Observable emits
	 * the current window and propagates the notification from the source
	 * Observable. If `startWindowEvery` is not provided, then new windows are
	 * started immediately at the start of the source and when each window completes
	 * with size `windowSize`.
	 *
	 * @example <caption>Ignore every 3rd click event, starting from the first one</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.windowCount(3)
	 *   .map(win => win.skip(1)) // skip first of every 3 clicks
	 *   .mergeAll(); // flatten the Observable-of-Observables
	 * result.subscribe(x => console.log(x));
	 *
	 * @example <caption>Ignore every 3rd click event, starting from the third one</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.windowCount(2, 3)
	 *   .mergeAll(); // flatten the Observable-of-Observables
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link window}
	 * @see {@link windowTime}
	 * @see {@link windowToggle}
	 * @see {@link windowWhen}
	 * @see {@link bufferCount}
	 *
	 * @param {number} windowSize The maximum number of values emitted by each
	 * window.
	 * @param {number} [startWindowEvery] Interval at which to start a new window.
	 * For example if `startWindowEvery` is `2`, then a new window will be started
	 * on every other value from the source. A new window is started at the
	 * beginning of the source by default.
	 * @return {Observable<Observable<T>>} An Observable of windows, which in turn
	 * are Observable of values.
	 * @method windowCount
	 * @owner Observable
	 */
	function windowCount(windowSize, startWindowEvery) {
	    if (startWindowEvery === void 0) { startWindowEvery = 0; }
	    return this.lift(new WindowCountOperator(windowSize, startWindowEvery));
	}
	exports.windowCount = windowCount;
	var WindowCountOperator = (function () {
	    function WindowCountOperator(windowSize, startWindowEvery) {
	        this.windowSize = windowSize;
	        this.startWindowEvery = startWindowEvery;
	    }
	    WindowCountOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
	    };
	    return WindowCountOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var WindowCountSubscriber = (function (_super) {
	    __extends(WindowCountSubscriber, _super);
	    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
	        _super.call(this, destination);
	        this.destination = destination;
	        this.windowSize = windowSize;
	        this.startWindowEvery = startWindowEvery;
	        this.windows = [new Subject_1.Subject()];
	        this.count = 0;
	        destination.next(this.windows[0]);
	    }
	    WindowCountSubscriber.prototype._next = function (value) {
	        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
	        var destination = this.destination;
	        var windowSize = this.windowSize;
	        var windows = this.windows;
	        var len = windows.length;
	        for (var i = 0; i < len && !this.closed; i++) {
	            windows[i].next(value);
	        }
	        var c = this.count - windowSize + 1;
	        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
	            windows.shift().complete();
	        }
	        if (++this.count % startWindowEvery === 0 && !this.closed) {
	            var window_1 = new Subject_1.Subject();
	            windows.push(window_1);
	            destination.next(window_1);
	        }
	    };
	    WindowCountSubscriber.prototype._error = function (err) {
	        var windows = this.windows;
	        if (windows) {
	            while (windows.length > 0 && !this.closed) {
	                windows.shift().error(err);
	            }
	        }
	        this.destination.error(err);
	    };
	    WindowCountSubscriber.prototype._complete = function () {
	        var windows = this.windows;
	        if (windows) {
	            while (windows.length > 0 && !this.closed) {
	                windows.shift().complete();
	            }
	        }
	        this.destination.complete();
	    };
	    WindowCountSubscriber.prototype._unsubscribe = function () {
	        this.count = 0;
	        this.windows = null;
	    };
	    return WindowCountSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=windowCount.js.map

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var windowTime_1 = __webpack_require__(337);
	Observable_1.Observable.prototype.windowTime = windowTime_1.windowTime;
	//# sourceMappingURL=windowTime.js.map

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(34);
	var async_1 = __webpack_require__(90);
	var Subscriber_1 = __webpack_require__(14);
	/**
	 * Branch out the source Observable values as a nested Observable periodically
	 * in time.
	 *
	 * <span class="informal">It's like {@link bufferTime}, but emits a nested
	 * Observable instead of an array.</span>
	 *
	 * <img src="./img/windowTime.png" width="100%">
	 *
	 * Returns an Observable that emits windows of items it collects from the source
	 * Observable. The output Observable starts a new window periodically, as
	 * determined by the `windowCreationInterval` argument. It emits each window
	 * after a fixed timespan, specified by the `windowTimeSpan` argument. When the
	 * source Observable completes or encounters an error, the output Observable
	 * emits the current window and propagates the notification from the source
	 * Observable. If `windowCreationInterval` is not provided, the output
	 * Observable starts a new window when the previous window of duration
	 * `windowTimeSpan` completes.
	 *
	 * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.windowTime(1000)
	 *   .map(win => win.take(2)) // each window has at most 2 emissions
	 *   .mergeAll(); // flatten the Observable-of-Observables
	 * result.subscribe(x => console.log(x));
	 *
	 * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.windowTime(1000, 5000)
	 *   .map(win => win.take(2)) // each window has at most 2 emissions
	 *   .mergeAll(); // flatten the Observable-of-Observables
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link window}
	 * @see {@link windowCount}
	 * @see {@link windowToggle}
	 * @see {@link windowWhen}
	 * @see {@link bufferTime}
	 *
	 * @param {number} windowTimeSpan The amount of time to fill each window.
	 * @param {number} [windowCreationInterval] The interval at which to start new
	 * windows.
	 * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
	 * intervals that determine window boundaries.
	 * @return {Observable<Observable<T>>} An observable of windows, which in turn
	 * are Observables.
	 * @method windowTime
	 * @owner Observable
	 */
	function windowTime(windowTimeSpan, windowCreationInterval, scheduler) {
	    if (windowCreationInterval === void 0) { windowCreationInterval = null; }
	    if (scheduler === void 0) { scheduler = async_1.async; }
	    return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler));
	}
	exports.windowTime = windowTime;
	var WindowTimeOperator = (function () {
	    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler) {
	        this.windowTimeSpan = windowTimeSpan;
	        this.windowCreationInterval = windowCreationInterval;
	        this.scheduler = scheduler;
	    }
	    WindowTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler));
	    };
	    return WindowTimeOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var WindowTimeSubscriber = (function (_super) {
	    __extends(WindowTimeSubscriber, _super);
	    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, scheduler) {
	        _super.call(this, destination);
	        this.destination = destination;
	        this.windowTimeSpan = windowTimeSpan;
	        this.windowCreationInterval = windowCreationInterval;
	        this.scheduler = scheduler;
	        this.windows = [];
	        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
	            var window_1 = this.openWindow();
	            var closeState = { subscriber: this, window: window_1, context: null };
	            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };
	            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
	            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
	        }
	        else {
	            var window_2 = this.openWindow();
	            var timeSpanOnlyState = { subscriber: this, window: window_2, windowTimeSpan: windowTimeSpan };
	            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
	        }
	    }
	    WindowTimeSubscriber.prototype._next = function (value) {
	        var windows = this.windows;
	        var len = windows.length;
	        for (var i = 0; i < len; i++) {
	            var window_3 = windows[i];
	            if (!window_3.closed) {
	                window_3.next(value);
	            }
	        }
	    };
	    WindowTimeSubscriber.prototype._error = function (err) {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            windows.shift().error(err);
	        }
	        this.destination.error(err);
	    };
	    WindowTimeSubscriber.prototype._complete = function () {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            var window_4 = windows.shift();
	            if (!window_4.closed) {
	                window_4.complete();
	            }
	        }
	        this.destination.complete();
	    };
	    WindowTimeSubscriber.prototype.openWindow = function () {
	        var window = new Subject_1.Subject();
	        this.windows.push(window);
	        var destination = this.destination;
	        destination.next(window);
	        return window;
	    };
	    WindowTimeSubscriber.prototype.closeWindow = function (window) {
	        window.complete();
	        var windows = this.windows;
	        windows.splice(windows.indexOf(window), 1);
	    };
	    return WindowTimeSubscriber;
	}(Subscriber_1.Subscriber));
	function dispatchWindowTimeSpanOnly(state) {
	    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
	    if (window) {
	        window.complete();
	    }
	    state.window = subscriber.openWindow();
	    this.schedule(state, windowTimeSpan);
	}
	function dispatchWindowCreation(state) {
	    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
	    var window = subscriber.openWindow();
	    var action = this;
	    var context = { action: action, subscription: null };
	    var timeSpanState = { subscriber: subscriber, window: window, context: context };
	    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
	    action.add(context.subscription);
	    action.schedule(state, windowCreationInterval);
	}
	function dispatchWindowClose(arg) {
	    var subscriber = arg.subscriber, window = arg.window, context = arg.context;
	    if (context && context.action && context.subscription) {
	        context.action.remove(context.subscription);
	    }
	    subscriber.closeWindow(window);
	}
	//# sourceMappingURL=windowTime.js.map

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var windowToggle_1 = __webpack_require__(339);
	Observable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;
	//# sourceMappingURL=windowToggle.js.map

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(34);
	var Subscription_1 = __webpack_require__(16);
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Branch out the source Observable values as a nested Observable starting from
	 * an emission from `openings` and ending when the output of `closingSelector`
	 * emits.
	 *
	 * <span class="informal">It's like {@link bufferToggle}, but emits a nested
	 * Observable instead of an array.</span>
	 *
	 * <img src="./img/windowToggle.png" width="100%">
	 *
	 * Returns an Observable that emits windows of items it collects from the source
	 * Observable. The output Observable emits windows that contain those items
	 * emitted by the source Observable between the time when the `openings`
	 * Observable emits an item and when the Observable returned by
	 * `closingSelector` emits an item.
	 *
	 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var openings = Rx.Observable.interval(1000);
	 * var result = clicks.windowToggle(openings, i =>
	 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
	 * ).mergeAll();
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link window}
	 * @see {@link windowCount}
	 * @see {@link windowTime}
	 * @see {@link windowWhen}
	 * @see {@link bufferToggle}
	 *
	 * @param {Observable<O>} openings An observable of notifications to start new
	 * windows.
	 * @param {function(value: O): Observable} closingSelector A function that takes
	 * the value emitted by the `openings` observable and returns an Observable,
	 * which, when it emits (either `next` or `complete`), signals that the
	 * associated window should complete.
	 * @return {Observable<Observable<T>>} An observable of windows, which in turn
	 * are Observables.
	 * @method windowToggle
	 * @owner Observable
	 */
	function windowToggle(openings, closingSelector) {
	    return this.lift(new WindowToggleOperator(openings, closingSelector));
	}
	exports.windowToggle = windowToggle;
	var WindowToggleOperator = (function () {
	    function WindowToggleOperator(openings, closingSelector) {
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	    }
	    WindowToggleOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
	    };
	    return WindowToggleOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var WindowToggleSubscriber = (function (_super) {
	    __extends(WindowToggleSubscriber, _super);
	    function WindowToggleSubscriber(destination, openings, closingSelector) {
	        _super.call(this, destination);
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	        this.contexts = [];
	        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));
	    }
	    WindowToggleSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        if (contexts) {
	            var len = contexts.length;
	            for (var i = 0; i < len; i++) {
	                contexts[i].window.next(value);
	            }
	        }
	    };
	    WindowToggleSubscriber.prototype._error = function (err) {
	        var contexts = this.contexts;
	        this.contexts = null;
	        if (contexts) {
	            var len = contexts.length;
	            var index = -1;
	            while (++index < len) {
	                var context = contexts[index];
	                context.window.error(err);
	                context.subscription.unsubscribe();
	            }
	        }
	        _super.prototype._error.call(this, err);
	    };
	    WindowToggleSubscriber.prototype._complete = function () {
	        var contexts = this.contexts;
	        this.contexts = null;
	        if (contexts) {
	            var len = contexts.length;
	            var index = -1;
	            while (++index < len) {
	                var context = contexts[index];
	                context.window.complete();
	                context.subscription.unsubscribe();
	            }
	        }
	        _super.prototype._complete.call(this);
	    };
	    WindowToggleSubscriber.prototype._unsubscribe = function () {
	        var contexts = this.contexts;
	        this.contexts = null;
	        if (contexts) {
	            var len = contexts.length;
	            var index = -1;
	            while (++index < len) {
	                var context = contexts[index];
	                context.window.unsubscribe();
	                context.subscription.unsubscribe();
	            }
	        }
	    };
	    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        if (outerValue === this.openings) {
	            var closingSelector = this.closingSelector;
	            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);
	            if (closingNotifier === errorObject_1.errorObject) {
	                return this.error(errorObject_1.errorObject.e);
	            }
	            else {
	                var window_1 = new Subject_1.Subject();
	                var subscription = new Subscription_1.Subscription();
	                var context = { window: window_1, subscription: subscription };
	                this.contexts.push(context);
	                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);
	                if (innerSubscription.closed) {
	                    this.closeWindow(this.contexts.length - 1);
	                }
	                else {
	                    innerSubscription.context = context;
	                    subscription.add(innerSubscription);
	                }
	                this.destination.next(window_1);
	            }
	        }
	        else {
	            this.closeWindow(this.contexts.indexOf(outerValue));
	        }
	    };
	    WindowToggleSubscriber.prototype.notifyError = function (err) {
	        this.error(err);
	    };
	    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
	        if (inner !== this.openSubscription) {
	            this.closeWindow(this.contexts.indexOf(inner.context));
	        }
	    };
	    WindowToggleSubscriber.prototype.closeWindow = function (index) {
	        if (index === -1) {
	            return;
	        }
	        var contexts = this.contexts;
	        var context = contexts[index];
	        var window = context.window, subscription = context.subscription;
	        contexts.splice(index, 1);
	        window.complete();
	        subscription.unsubscribe();
	    };
	    return WindowToggleSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=windowToggle.js.map

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var windowWhen_1 = __webpack_require__(341);
	Observable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;
	//# sourceMappingURL=windowWhen.js.map

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(34);
	var tryCatch_1 = __webpack_require__(19);
	var errorObject_1 = __webpack_require__(20);
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/**
	 * Branch out the source Observable values as a nested Observable using a
	 * factory function of closing Observables to determine when to start a new
	 * window.
	 *
	 * <span class="informal">It's like {@link bufferWhen}, but emits a nested
	 * Observable instead of an array.</span>
	 *
	 * <img src="./img/windowWhen.png" width="100%">
	 *
	 * Returns an Observable that emits windows of items it collects from the source
	 * Observable. The output Observable emits connected, non-overlapping windows.
	 * It emits the current window and opens a new one whenever the Observable
	 * produced by the specified `closingSelector` function emits an item. The first
	 * window is opened immediately when subscribing to the output Observable.
	 *
	 * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks
	 *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))
	 *   .map(win => win.take(2)) // each window has at most 2 emissions
	 *   .mergeAll(); // flatten the Observable-of-Observables
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link window}
	 * @see {@link windowCount}
	 * @see {@link windowTime}
	 * @see {@link windowToggle}
	 * @see {@link bufferWhen}
	 *
	 * @param {function(): Observable} closingSelector A function that takes no
	 * arguments and returns an Observable that signals (on either `next` or
	 * `complete`) when to close the previous window and start a new one.
	 * @return {Observable<Observable<T>>} An observable of windows, which in turn
	 * are Observables.
	 * @method windowWhen
	 * @owner Observable
	 */
	function windowWhen(closingSelector) {
	    return this.lift(new WindowOperator(closingSelector));
	}
	exports.windowWhen = windowWhen;
	var WindowOperator = (function () {
	    function WindowOperator(closingSelector) {
	        this.closingSelector = closingSelector;
	    }
	    WindowOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
	    };
	    return WindowOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var WindowSubscriber = (function (_super) {
	    __extends(WindowSubscriber, _super);
	    function WindowSubscriber(destination, closingSelector) {
	        _super.call(this, destination);
	        this.destination = destination;
	        this.closingSelector = closingSelector;
	        this.openWindow();
	    }
	    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.openWindow(innerSub);
	    };
	    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.openWindow(innerSub);
	    };
	    WindowSubscriber.prototype._next = function (value) {
	        this.window.next(value);
	    };
	    WindowSubscriber.prototype._error = function (err) {
	        this.window.error(err);
	        this.destination.error(err);
	        this.unsubscribeClosingNotification();
	    };
	    WindowSubscriber.prototype._complete = function () {
	        this.window.complete();
	        this.destination.complete();
	        this.unsubscribeClosingNotification();
	    };
	    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
	        if (this.closingNotification) {
	            this.closingNotification.unsubscribe();
	        }
	    };
	    WindowSubscriber.prototype.openWindow = function (innerSub) {
	        if (innerSub === void 0) { innerSub = null; }
	        if (innerSub) {
	            this.remove(innerSub);
	            innerSub.unsubscribe();
	        }
	        var prevWindow = this.window;
	        if (prevWindow) {
	            prevWindow.complete();
	        }
	        var window = this.window = new Subject_1.Subject();
	        this.destination.next(window);
	        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
	        if (closingNotifier === errorObject_1.errorObject) {
	            var err = errorObject_1.errorObject.e;
	            this.destination.error(err);
	            this.window.error(err);
	        }
	        else {
	            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));
	        }
	    };
	    return WindowSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=windowWhen.js.map

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var withLatestFrom_1 = __webpack_require__(343);
	Observable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;
	//# sourceMappingURL=withLatestFrom.js.map

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(51);
	var subscribeToResult_1 = __webpack_require__(52);
	/* tslint:disable:max-line-length */
	/**
	 * Combines the source Observable with other Observables to create an Observable
	 * whose values are calculated from the latest values of each, only when the
	 * source emits.
	 *
	 * <span class="informal">Whenever the source Observable emits a value, it
	 * computes a formula using that value plus the latest values from other input
	 * Observables, then emits the output of that formula.</span>
	 *
	 * <img src="./img/withLatestFrom.png" width="100%">
	 *
	 * `withLatestFrom` combines each value from the source Observable (the
	 * instance) with the latest values from the other input Observables only when
	 * the source emits a value, optionally using a `project` function to determine
	 * the value to be emitted on the output Observable. All input Observables must
	 * emit at least one value before the output Observable will emit a value.
	 *
	 * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var timer = Rx.Observable.interval(1000);
	 * var result = clicks.withLatestFrom(timer);
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link combineLatest}
	 *
	 * @param {Observable} other An input Observable to combine with the source
	 * Observable. More than one input Observables may be given as argument.
	 * @param {Function} [project] Projection function for combining values
	 * together. Receives all values in order of the Observables passed, where the
	 * first parameter is a value from the source Observable. (e.g.
	 * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not
	 * passed, arrays will be emitted on the output Observable.
	 * @return {Observable} An Observable of projected values from the most recent
	 * values from each input Observable, or an array of the most recent values from
	 * each input Observable.
	 * @method withLatestFrom
	 * @owner Observable
	 */
	function withLatestFrom() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i - 0] = arguments[_i];
	    }
	    var project;
	    if (typeof args[args.length - 1] === 'function') {
	        project = args.pop();
	    }
	    var observables = args;
	    return this.lift(new WithLatestFromOperator(observables, project));
	}
	exports.withLatestFrom = withLatestFrom;
	var WithLatestFromOperator = (function () {
	    function WithLatestFromOperator(observables, project) {
	        this.observables = observables;
	        this.project = project;
	    }
	    WithLatestFromOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
	    };
	    return WithLatestFromOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var WithLatestFromSubscriber = (function (_super) {
	    __extends(WithLatestFromSubscriber, _super);
	    function WithLatestFromSubscriber(destination, observables, project) {
	        _super.call(this, destination);
	        this.observables = observables;
	        this.project = project;
	        this.toRespond = [];
	        var len = observables.length;
	        this.values = new Array(len);
	        for (var i = 0; i < len; i++) {
	            this.toRespond.push(i);
	        }
	        for (var i = 0; i < len; i++) {
	            var observable = observables[i];
	            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
	        }
	    }
	    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.values[outerIndex] = innerValue;
	        var toRespond = this.toRespond;
	        if (toRespond.length > 0) {
	            var found = toRespond.indexOf(outerIndex);
	            if (found !== -1) {
	                toRespond.splice(found, 1);
	            }
	        }
	    };
	    WithLatestFromSubscriber.prototype.notifyComplete = function () {
	        // noop
	    };
	    WithLatestFromSubscriber.prototype._next = function (value) {
	        if (this.toRespond.length === 0) {
	            var args = [value].concat(this.values);
	            if (this.project) {
	                this._tryProject(args);
	            }
	            else {
	                this.destination.next(args);
	            }
	        }
	    };
	    WithLatestFromSubscriber.prototype._tryProject = function (args) {
	        var result;
	        try {
	            result = this.project.apply(this, args);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return WithLatestFromSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=withLatestFrom.js.map

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var zip_1 = __webpack_require__(126);
	Observable_1.Observable.prototype.zip = zip_1.zipProto;
	//# sourceMappingURL=zip.js.map

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(11);
	var zipAll_1 = __webpack_require__(346);
	Observable_1.Observable.prototype.zipAll = zipAll_1.zipAll;
	//# sourceMappingURL=zipAll.js.map

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var zip_1 = __webpack_require__(126);
	/**
	 * @param project
	 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
	 * @method zipAll
	 * @owner Observable
	 */
	function zipAll(project) {
	    return this.lift(new zip_1.ZipOperator(project));
	}
	exports.zipAll = zipAll;
	//# sourceMappingURL=zipAll.js.map

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var Notification_1 = __webpack_require__(75);
	var ColdObservable_1 = __webpack_require__(348);
	var HotObservable_1 = __webpack_require__(352);
	var SubscriptionLog_1 = __webpack_require__(350);
	var VirtualTimeScheduler_1 = __webpack_require__(353);
	var defaultMaxFrame = 750;
	var TestScheduler = (function (_super) {
	    __extends(TestScheduler, _super);
	    function TestScheduler(assertDeepEqual) {
	        _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);
	        this.assertDeepEqual = assertDeepEqual;
	        this.hotObservables = [];
	        this.coldObservables = [];
	        this.flushTests = [];
	    }
	    TestScheduler.prototype.createTime = function (marbles) {
	        var indexOf = marbles.indexOf('|');
	        if (indexOf === -1) {
	            throw new Error('marble diagram for time should have a completion marker "|"');
	        }
	        return indexOf * TestScheduler.frameTimeFactor;
	    };
	    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {
	        if (marbles.indexOf('^') !== -1) {
	            throw new Error('cold observable cannot have subscription offset "^"');
	        }
	        if (marbles.indexOf('!') !== -1) {
	            throw new Error('cold observable cannot have unsubscription marker "!"');
	        }
	        var messages = TestScheduler.parseMarbles(marbles, values, error);
	        var cold = new ColdObservable_1.ColdObservable(messages, this);
	        this.coldObservables.push(cold);
	        return cold;
	    };
	    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {
	        if (marbles.indexOf('!') !== -1) {
	            throw new Error('hot observable cannot have unsubscription marker "!"');
	        }
	        var messages = TestScheduler.parseMarbles(marbles, values, error);
	        var subject = new HotObservable_1.HotObservable(messages, this);
	        this.hotObservables.push(subject);
	        return subject;
	    };
	    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {
	        var _this = this;
	        var messages = [];
	        observable.subscribe(function (value) {
	            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });
	        }, function (err) {
	            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });
	        }, function () {
	            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });
	        });
	        return messages;
	    };
	    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {
	        var _this = this;
	        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }
	        var actual = [];
	        var flushTest = { actual: actual, ready: false };
	        var unsubscriptionFrame = TestScheduler
	            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;
	        var subscription;
	        this.schedule(function () {
	            subscription = observable.subscribe(function (x) {
	                var value = x;
	                // Support Observable-of-Observables
	                if (x instanceof Observable_1.Observable) {
	                    value = _this.materializeInnerObservable(value, _this.frame);
	                }
	                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });
	            }, function (err) {
	                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });
	            }, function () {
	                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });
	            });
	        }, 0);
	        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
	            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);
	        }
	        this.flushTests.push(flushTest);
	        return {
	            toBe: function (marbles, values, errorValue) {
	                flushTest.ready = true;
	                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);
	            }
	        };
	    };
	    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {
	        var flushTest = { actual: actualSubscriptionLogs, ready: false };
	        this.flushTests.push(flushTest);
	        return {
	            toBe: function (marbles) {
	                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;
	                flushTest.ready = true;
	                flushTest.expected = marblesArray.map(function (marbles) {
	                    return TestScheduler.parseMarblesAsSubscriptions(marbles);
	                });
	            }
	        };
	    };
	    TestScheduler.prototype.flush = function () {
	        var hotObservables = this.hotObservables;
	        while (hotObservables.length > 0) {
	            hotObservables.shift().setup();
	        }
	        _super.prototype.flush.call(this);
	        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });
	        while (readyFlushTests.length > 0) {
	            var test = readyFlushTests.shift();
	            this.assertDeepEqual(test.actual, test.expected);
	        }
	    };
	    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {
	        if (typeof marbles !== 'string') {
	            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);
	        }
	        var len = marbles.length;
	        var groupStart = -1;
	        var subscriptionFrame = Number.POSITIVE_INFINITY;
	        var unsubscriptionFrame = Number.POSITIVE_INFINITY;
	        for (var i = 0; i < len; i++) {
	            var frame = i * this.frameTimeFactor;
	            var c = marbles[i];
	            switch (c) {
	                case '-':
	                case ' ':
	                    break;
	                case '(':
	                    groupStart = frame;
	                    break;
	                case ')':
	                    groupStart = -1;
	                    break;
	                case '^':
	                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {
	                        throw new Error('found a second subscription point \'^\' in a ' +
	                            'subscription marble diagram. There can only be one.');
	                    }
	                    subscriptionFrame = groupStart > -1 ? groupStart : frame;
	                    break;
	                case '!':
	                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {
	                        throw new Error('found a second subscription point \'^\' in a ' +
	                            'subscription marble diagram. There can only be one.');
	                    }
	                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;
	                    break;
	                default:
	                    throw new Error('there can only be \'^\' and \'!\' markers in a ' +
	                        'subscription marble diagram. Found instead \'' + c + '\'.');
	            }
	        }
	        if (unsubscriptionFrame < 0) {
	            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);
	        }
	        else {
	            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);
	        }
	    };
	    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {
	        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }
	        if (marbles.indexOf('!') !== -1) {
	            throw new Error('conventional marble diagrams cannot have the ' +
	                'unsubscription marker "!"');
	        }
	        var len = marbles.length;
	        var testMessages = [];
	        var subIndex = marbles.indexOf('^');
	        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);
	        var getValue = typeof values !== 'object' ?
	            function (x) { return x; } :
	            function (x) {
	                // Support Observable-of-Observables
	                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {
	                    return values[x].messages;
	                }
	                return values[x];
	            };
	        var groupStart = -1;
	        for (var i = 0; i < len; i++) {
	            var frame = i * this.frameTimeFactor + frameOffset;
	            var notification = void 0;
	            var c = marbles[i];
	            switch (c) {
	                case '-':
	                case ' ':
	                    break;
	                case '(':
	                    groupStart = frame;
	                    break;
	                case ')':
	                    groupStart = -1;
	                    break;
	                case '|':
	                    notification = Notification_1.Notification.createComplete();
	                    break;
	                case '^':
	                    break;
	                case '#':
	                    notification = Notification_1.Notification.createError(errorValue || 'error');
	                    break;
	                default:
	                    notification = Notification_1.Notification.createNext(getValue(c));
	                    break;
	            }
	            if (notification) {
	                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });
	            }
	        }
	        return testMessages;
	    };
	    return TestScheduler;
	}(VirtualTimeScheduler_1.VirtualTimeScheduler));
	exports.TestScheduler = TestScheduler;
	//# sourceMappingURL=TestScheduler.js.map

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(11);
	var Subscription_1 = __webpack_require__(16);
	var SubscriptionLoggable_1 = __webpack_require__(349);
	var applyMixins_1 = __webpack_require__(351);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ColdObservable = (function (_super) {
	    __extends(ColdObservable, _super);
	    function ColdObservable(messages, scheduler) {
	        _super.call(this, function (subscriber) {
	            var observable = this;
	            var index = observable.logSubscribedFrame();
	            subscriber.add(new Subscription_1.Subscription(function () {
	                observable.logUnsubscribedFrame(index);
	            }));
	            observable.scheduleMessages(subscriber);
	            return subscriber;
	        });
	        this.messages = messages;
	        this.subscriptions = [];
	        this.scheduler = scheduler;
	    }
	    ColdObservable.prototype.scheduleMessages = function (subscriber) {
	        var messagesLength = this.messages.length;
	        for (var i = 0; i < messagesLength; i++) {
	            var message = this.messages[i];
	            subscriber.add(this.scheduler.schedule(function (_a) {
	                var message = _a.message, subscriber = _a.subscriber;
	                message.notification.observe(subscriber);
	            }, message.frame, { message: message, subscriber: subscriber }));
	        }
	    };
	    return ColdObservable;
	}(Observable_1.Observable));
	exports.ColdObservable = ColdObservable;
	applyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);
	//# sourceMappingURL=ColdObservable.js.map

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var SubscriptionLog_1 = __webpack_require__(350);
	var SubscriptionLoggable = (function () {
	    function SubscriptionLoggable() {
	        this.subscriptions = [];
	    }
	    SubscriptionLoggable.prototype.logSubscribedFrame = function () {
	        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));
	        return this.subscriptions.length - 1;
	    };
	    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {
	        var subscriptionLogs = this.subscriptions;
	        var oldSubscriptionLog = subscriptionLogs[index];
	        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());
	    };
	    return SubscriptionLoggable;
	}());
	exports.SubscriptionLoggable = SubscriptionLoggable;
	//# sourceMappingURL=SubscriptionLoggable.js.map

/***/ },
/* 350 */
/***/ function(module, exports) {

	"use strict";
	var SubscriptionLog = (function () {
	    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {
	        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }
	        this.subscribedFrame = subscribedFrame;
	        this.unsubscribedFrame = unsubscribedFrame;
	    }
	    return SubscriptionLog;
	}());
	exports.SubscriptionLog = SubscriptionLog;
	//# sourceMappingURL=SubscriptionLog.js.map

/***/ },
/* 351 */
/***/ function(module, exports) {

	"use strict";
	function applyMixins(derivedCtor, baseCtors) {
	    for (var i = 0, len = baseCtors.length; i < len; i++) {
	        var baseCtor = baseCtors[i];
	        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);
	        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {
	            var name_1 = propertyKeys[j];
	            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];
	        }
	    }
	}
	exports.applyMixins = applyMixins;
	//# sourceMappingURL=applyMixins.js.map

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(34);
	var Subscription_1 = __webpack_require__(16);
	var SubscriptionLoggable_1 = __webpack_require__(349);
	var applyMixins_1 = __webpack_require__(351);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var HotObservable = (function (_super) {
	    __extends(HotObservable, _super);
	    function HotObservable(messages, scheduler) {
	        _super.call(this);
	        this.messages = messages;
	        this.subscriptions = [];
	        this.scheduler = scheduler;
	    }
	    HotObservable.prototype._subscribe = function (subscriber) {
	        var subject = this;
	        var index = subject.logSubscribedFrame();
	        subscriber.add(new Subscription_1.Subscription(function () {
	            subject.logUnsubscribedFrame(index);
	        }));
	        return _super.prototype._subscribe.call(this, subscriber);
	    };
	    HotObservable.prototype.setup = function () {
	        var subject = this;
	        var messagesLength = subject.messages.length;
	        /* tslint:disable:no-var-keyword */
	        for (var i = 0; i < messagesLength; i++) {
	            (function () {
	                var message = subject.messages[i];
	                /* tslint:enable */
	                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);
	            })();
	        }
	    };
	    return HotObservable;
	}(Subject_1.Subject));
	exports.HotObservable = HotObservable;
	applyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);
	//# sourceMappingURL=HotObservable.js.map

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AsyncAction_1 = __webpack_require__(91);
	var AsyncScheduler_1 = __webpack_require__(93);
	var VirtualTimeScheduler = (function (_super) {
	    __extends(VirtualTimeScheduler, _super);
	    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
	        var _this = this;
	        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }
	        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }
	        _super.call(this, SchedulerAction, function () { return _this.frame; });
	        this.maxFrames = maxFrames;
	        this.frame = 0;
	        this.index = -1;
	    }
	    /**
	     * Prompt the Scheduler to execute all of its queued actions, therefore
	     * clearing its queue.
	     * @return {void}
	     */
	    VirtualTimeScheduler.prototype.flush = function () {
	        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
	        var error, action;
	        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        }
	        if (error) {
	            while (action = actions.shift()) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    VirtualTimeScheduler.frameTimeFactor = 10;
	    return VirtualTimeScheduler;
	}(AsyncScheduler_1.AsyncScheduler));
	exports.VirtualTimeScheduler = VirtualTimeScheduler;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var VirtualAction = (function (_super) {
	    __extends(VirtualAction, _super);
	    function VirtualAction(scheduler, work, index) {
	        if (index === void 0) { index = scheduler.index += 1; }
	        _super.call(this, scheduler, work);
	        this.scheduler = scheduler;
	        this.work = work;
	        this.index = index;
	        this.index = scheduler.index = index;
	    }
	    VirtualAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        return !this.id ?
	            _super.prototype.schedule.call(this, state, delay) : this.add(new VirtualAction(this.scheduler, this.work)).schedule(state, delay);
	    };
	    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        this.delay = scheduler.frame + delay;
	        var actions = scheduler.actions;
	        actions.push(this);
	        actions.sort(VirtualAction.sortActions);
	        return true;
	    };
	    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        return undefined;
	    };
	    VirtualAction.sortActions = function (a, b) {
	        if (a.delay === b.delay) {
	            if (a.index === b.index) {
	                return 0;
	            }
	            else if (a.index > b.index) {
	                return 1;
	            }
	            else {
	                return -1;
	            }
	        }
	        else if (a.delay > b.delay) {
	            return 1;
	        }
	        else {
	            return -1;
	        }
	    };
	    return VirtualAction;
	}(AsyncAction_1.AsyncAction));
	exports.VirtualAction = VirtualAction;
	//# sourceMappingURL=VirtualTimeScheduler.js.map

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var AnimationFrameAction_1 = __webpack_require__(355);
	var AnimationFrameScheduler_1 = __webpack_require__(357);
	exports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
	//# sourceMappingURL=animationFrame.js.map

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AsyncAction_1 = __webpack_require__(91);
	var AnimationFrame_1 = __webpack_require__(356);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var AnimationFrameAction = (function (_super) {
	    __extends(AnimationFrameAction, _super);
	    function AnimationFrameAction(scheduler, work) {
	        _super.call(this, scheduler, work);
	        this.scheduler = scheduler;
	        this.work = work;
	    }
	    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        // If delay is greater than 0, request as an async action.
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        // Push the action to the end of the scheduler queue.
	        scheduler.actions.push(this);
	        // If an animation frame has already been requested, don't request another
	        // one. If an animation frame hasn't been requested yet, request one. Return
	        // the current animation frame request id.
	        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));
	    };
	    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        // If delay exists and is greater than 0, or if the delay is null (the
	        // action wasn't rescheduled) but was originally scheduled as an async
	        // action, then recycle as an async action.
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        // If the scheduler queue is empty, cancel the requested animation frame and
	        // set the scheduled flag to undefined so the next AnimationFrameAction will
	        // request its own.
	        if (scheduler.actions.length === 0) {
	            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);
	            scheduler.scheduled = undefined;
	        }
	        // Return undefined so the action knows to request a new async id if it's rescheduled.
	        return undefined;
	    };
	    return AnimationFrameAction;
	}(AsyncAction_1.AsyncAction));
	exports.AnimationFrameAction = AnimationFrameAction;
	//# sourceMappingURL=AnimationFrameAction.js.map

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(12);
	var RequestAnimationFrameDefinition = (function () {
	    function RequestAnimationFrameDefinition(root) {
	        if (root.requestAnimationFrame) {
	            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);
	            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);
	        }
	        else if (root.mozRequestAnimationFrame) {
	            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);
	            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);
	        }
	        else if (root.webkitRequestAnimationFrame) {
	            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);
	            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);
	        }
	        else if (root.msRequestAnimationFrame) {
	            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);
	            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);
	        }
	        else if (root.oRequestAnimationFrame) {
	            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);
	            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);
	        }
	        else {
	            this.cancelAnimationFrame = root.clearTimeout.bind(root);
	            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };
	        }
	    }
	    return RequestAnimationFrameDefinition;
	}());
	exports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;
	exports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);
	//# sourceMappingURL=AnimationFrame.js.map

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AsyncScheduler_1 = __webpack_require__(93);
	var AnimationFrameScheduler = (function (_super) {
	    __extends(AnimationFrameScheduler, _super);
	    function AnimationFrameScheduler() {
	        _super.apply(this, arguments);
	    }
	    AnimationFrameScheduler.prototype.flush = function (action) {
	        this.active = true;
	        this.scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        var count = actions.length;
	        action = action || actions.shift();
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this.active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AnimationFrameScheduler;
	}(AsyncScheduler_1.AsyncScheduler));
	exports.AnimationFrameScheduler = AnimationFrameScheduler;
	//# sourceMappingURL=AnimationFrameScheduler.js.map

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name App Rate
	 * @description
	 * The AppRate plugin makes it easy to prompt the user to rate your app, either now, later, or never.
	 *
	 * Requires Cordova plugin: cordova-plugin-apprate. For more info, please see the [AppRate plugin docs](https://github.com/pushandplay/cordova-plugin-apprate).
	 *
	 * @usage
	 * ```typescript
	 * import { AppRate } from 'ionic-native';
	 *
	 *  AppRate.preferences.storeAppURL = {
	 *    ios: '<my_app_id>',
	 *    android: 'market://details?id=<package_name>',
	 *    windows: 'ms-windows-store://review/?ProductId=<Store_ID>'
	 *  };
	 *
	 * AppRate.promptForRating(false);
	 * ```
	 *
	 * @interfaces
	 * AppRatePreferences
	 * AppRateStoreAppUrls
	 * AppRateCallbacks
	 *
	 */
	var AppRate = (function () {
	    function AppRate() {
	    }
	    /**
	     * Prompts the user for rating
	     * @param {boolean} immediately  Show the rating prompt immediately.
	     */
	    AppRate.promptForRating = function (immediately) { };
	    ;
	    __decorate([
	        plugin_1.CordovaProperty
	    ], AppRate, "preferences", void 0);
	    __decorate([
	        plugin_1.Cordova()
	    ], AppRate, "promptForRating", null);
	    AppRate = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'AppRate',
	            plugin: 'cordova-plugin-apprate',
	            pluginRef: 'AppRate',
	            repo: 'https://github.com/pushandplay/cordova-plugin-apprate',
	            platforms: ['Android', 'iOS', 'Windows (experimental)']
	        })
	    ], AppRate);
	    return AppRate;
	}());
	exports.AppRate = AppRate;
	//# sourceMappingURL=apprate.js.map

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name AppPreferences
	 * @description
	 * This plugin allows you to read and write app preferences
	 *
	 * @usage
	 * ```
	 * import { AppPreferences } from 'ionic-native';
	 *
	 * AppPreferences.fetch('key').then((res) => { console.log(res); });
	 *
	 *```
	 */
	var AppPreferences = (function () {
	    function AppPreferences() {
	    }
	    /**
	     * Get a preference value
	     *
	     * @param {string} dict Dictionary for key (OPTIONAL)
	     * @param {string} key Key
	     * @return {Promise<any>} Returns a promise
	     */
	    AppPreferences.fetch = function (dict, key) { return; };
	    /**
	     * Set a preference value
	     *
	     * @param {string} dict Dictionary for key (OPTIONAL)
	     * @param {string} key Key
	     * @param {string} value Value
	     * @return {Promise<any>} Returns a promise
	     */
	    AppPreferences.store = function (dict, key, value) {
	        return;
	    };
	    /**
	     * Remove value from preferences
	     *
	     * @param {string} dict Dictionary for key (OPTIONAL)
	     * @param {string} key Key
	     * @return {Promise<any>} Returns a promise
	     */
	    AppPreferences.remove = function (dict, key) { return; };
	    /**
	     * Clear preferences
	     *
	     * @return {Promise<any>} Returns a promise
	     */
	    AppPreferences.clearAll = function () { return; };
	    /**
	     * Show native preferences interface
	     *
	     * @return {Promise<any>} Returns a promise
	     */
	    AppPreferences.show = function () { return; };
	    /**
	     * Show native preferences interface
	     *
	     * @param {boolean} subscribe true value to subscribe, false - unsubscribe
	     * @return {Observable<any>} Returns an observable
	     */
	    AppPreferences.watch = function (subscribe) { return; };
	    /**
	     * Return named configuration context
	     * In iOS you'll get a suite configuration, on Android — named file
	     * Supports: Android, iOS
	     * @param {string} suiteName suite name
	     * @returns {Object} Custom object, bound to that suite
	     */
	    AppPreferences.suite = function (suiteName) { return; };
	    AppPreferences.iosSuite = function (suiteName) { return; };
	    /**
	     * Return cloud synchronized configuration context
	     * Currently supports Windows and iOS/macOS
	     * @returns {Object} Custom object, bound to that suite
	     */
	    AppPreferences.cloudSync = function () { return; };
	    /**
	     * Return default configuration context
	     * Currently supports Windows and iOS/macOS
	     * @returns {Object} Custom Object, bound to that suite
	     */
	    AppPreferences.defaults = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            sync: true,
	            callbackOrder: 'reverse'
	        })
	    ], AppPreferences, "fetch", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], AppPreferences, "store", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], AppPreferences, "remove", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], AppPreferences, "clearAll", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], AppPreferences, "show", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true
	        })
	    ], AppPreferences, "watch", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], AppPreferences, "suite", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS']
	        })
	    ], AppPreferences, "iosSuite", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS', 'Windows', 'Windows Phone 8']
	        })
	    ], AppPreferences, "cloudSync", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS', 'Windows', 'Windows Phone 8']
	        })
	    ], AppPreferences, "defaults", null);
	    AppPreferences = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'AppPreferences',
	            plugin: 'cordova-plugin-app-preferences',
	            pluginRef: 'plugins.appPreferences',
	            repo: 'https://github.com/apla/me.apla.cordova.app-preferences',
	        })
	    ], AppPreferences);
	    return AppPreferences;
	}());
	exports.AppPreferences = AppPreferences;
	//# sourceMappingURL=apppreferences.js.map

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name AppUpdate
	 * @description
	 * This plugin does self-update for android
	 *
	 * @usage
	 *
	 * You should first host an XML file on your server with the following data in it:
	 * ```xml
	 * <update>
	 *     <version>302048</version>
	 *     <name>APK Name</name>
	 *     <url>https://your-remote-api.com/YourApp.apk</url>
	 * </update>
	 * ```
	 *
	 * Then use the following code:
	 *
	 * ```
	 * import { AppUpdate } from 'ionic-native';
	 *
	 * let updateUrl = 'http://your-remote-api.com/update.xml';
	 *
	 * AppUpdate.checkAppUpdate(updateUrl);
	 * ```
	 *
	 * The plugin will compare the app version and update it automatically if the API has a newer version to install.
	 */
	var AppUpdate = (function () {
	    function AppUpdate() {
	    }
	    /**
	     * Check and update
	     * @param updateUrl {string} update api url
	     * @return {Promise<any>} Returns a promise that resolves when something happens
	     */
	    AppUpdate.checkAppUpdate = function (updateUrl) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], AppUpdate, "checkAppUpdate", null);
	    AppUpdate = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'AppUpdate',
	            plugin: 'cordova-plugin-app-update',
	            pluginRef: 'AppUpdate',
	            repo: 'https://github.com/vaenow/cordova-plugin-app-update',
	            platforms: ['Android']
	        })
	    ], AppUpdate);
	    return AppUpdate;
	}());
	exports.AppUpdate = AppUpdate;
	//# sourceMappingURL=app-update.js.map

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name App Version
	 * @description
	 * Reads the version of your app from the target build settings.
	 *
	 * Requires Cordova plugin: `cordova-plugin-app-version`. For more info, please see the [Cordova App Version docs](https://github.com/whiteoctober/cordova-plugin-app-version).
	 *
	 * @usage
	 * ```typescript
	 * import { AppVersion } from 'ionic-native';
	 *
	 *
	 *  AppVersion.getAppName();
	 *  AppVersion.getPackageName();
	 *  AppVersion.getVersionCode();
	 *  AppVersion.getVersionNumber();
	 * ```
	 */
	var AppVersion = (function () {
	    function AppVersion() {
	    }
	    /**
	     * Returns the name of the app
	     * @returns {Promise<any>}
	     */
	    AppVersion.getAppName = function () { return; };
	    /**
	     * Returns the package name of the app
	     * @returns {Promise<any>}
	     */
	    AppVersion.getPackageName = function () { return; };
	    /**
	     * Returns the build identifier of the app
	     * @returns {Promise<any>}
	     */
	    AppVersion.getVersionCode = function () { return; };
	    /**
	     * Returns the version of the app
	     * @returns {Promise<any>}
	     */
	    AppVersion.getVersionNumber = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], AppVersion, "getAppName", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], AppVersion, "getPackageName", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], AppVersion, "getVersionCode", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], AppVersion, "getVersionNumber", null);
	    AppVersion = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'AppVersion',
	            plugin: 'cordova-plugin-app-version',
	            pluginRef: 'cordova.getAppVersion',
	            repo: 'https://github.com/whiteoctober/cordova-plugin-app-version',
	            platforms: ['Android', 'iOS']
	        })
	    ], AppVersion);
	    return AppVersion;
	}());
	exports.AppVersion = AppVersion;
	//# sourceMappingURL=appversion.js.map

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Badge
	 * @description
	 * The essential purpose of badge numbers is to enable an application to inform its users that it has something for them — for example, unread messages — when the application isn’t running in the foreground.
	 *
	 * Requires Cordova plugin: cordova-plugin-badge. For more info, please see the [Badge plugin docs](https://github.com/katzer/cordova-plugin-badge).
	 *
	 * @usage
	 * ```typescript
	 * import { Badge } from 'ionic-native';
	 *
	 *
	 * Badge.set(10);
	 * Badge.increase(1);
	 * Badge.clear();
	 * ```
	 */
	var Badge = (function () {
	    function Badge() {
	    }
	    /**
	     * Clear the badge of the app icon.
	     * @returns {Promise<boolean>}
	     */
	    Badge.clear = function () { return; };
	    /**
	     * Set the badge of the app icon.
	     * @param {number} badgeNumber  The new badge number.
	     * @returns {Promise<any>}
	     */
	    Badge.set = function (badgeNumber) { return; };
	    /**
	     * Get the badge of the app icon.
	     * @returns {Promise<any>}
	     */
	    Badge.get = function () { return; };
	    /**
	     * Increase the badge number.
	     * @param {number} increaseBy  Count to add to the current badge number
	     * @returns {Promise<any>}
	     */
	    Badge.increase = function (increaseBy) { return; };
	    /**
	     * Decrease the badge number.
	     * @param {number} decreaseBy  Count to subtract from the current badge number
	     * @returns {Promise<any>}
	     */
	    Badge.decrease = function (decreaseBy) { return; };
	    /**
	     * Determine if the app has permission to show badges.
	     * @returns {Promise<any>}
	     */
	    Badge.hasPermission = function () { return; };
	    /**
	     * Register permission to set badge notifications
	     * @returns {Promise<any>}
	     */
	    Badge.registerPermission = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Badge, "clear", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Badge, "set", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Badge, "get", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Badge, "increase", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Badge, "decrease", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Badge, "hasPermission", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Badge, "registerPermission", null);
	    Badge = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Badge',
	            plugin: 'cordova-plugin-badge',
	            pluginRef: 'cordova.plugins.notification.badge',
	            repo: 'https://github.com/katzer/cordova-plugin-badge',
	            platforms: ['Android', 'iOS', 'Browser', 'Windows', 'Amazon FireOS', 'Windows Phone 8']
	        })
	    ], Badge);
	    return Badge;
	}());
	exports.Badge = Badge;
	//# sourceMappingURL=badge.js.map

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name BackgroundFetch
	 * @description
	 * iOS Background Fetch Implementation. See: https://developer.apple.com/reference/uikit/uiapplication#1657399
	 * iOS Background Fetch is basically an API which wakes up your app about every 15 minutes (during the user's prime-time hours) and provides your app exactly 30s of background running-time. This plugin will execute your provided callbackFn whenever a background-fetch event occurs. There is no way to increase the rate which a fetch-event occurs and this plugin sets the rate to the most frequent possible value of UIApplicationBackgroundFetchIntervalMinimum -- iOS determines the rate automatically based upon device usage and time-of-day (ie: fetch-rate is about ~15min during prime-time hours; less frequently when the user is presumed to be sleeping, at 3am for example).
	 * For more detail, please see https://github.com/transistorsoft/cordova-plugin-background-fetch
	 *
	 * @usage
	 *
	 * ```typescript
	 * import { BackgroundFetch } from 'ionic-native';
	 *
	 *
	 * // When device is ready :
	 * platform.ready().then(() => {
	 *
	 *   let config = {
	 *     stopOnTerminate: false, // Set true to cease background-fetch from operating after user "closes" the app. Defaults to true.
	 *   };
	 *
	 *   BackgroundFetch.configure(() => {
	       console.log('[js] BackgroundFetch initiated');
	
	       // perform some ajax request to server here
	
	       You MUST called #finish so that native-side can signal completion of the background-thread to the os.
	       BackgroundFetch.finish();
	
	 *   }, (error) => {
	 *     console.log('- BackgroundFetch failed', error);
	 *   }, config);
	 *
	 * });
	 *
	 * // Start the background-fetch API. Your callbackFn provided to #configure will be executed each time a background-fetch event occurs. NOTE the #configure method automatically calls #start. You do not have to call this method after you #configure the plugin
	 * BackgroundFetch.start();
	 *
	 * // Stop the background-fetch API from firing fetch events. Your callbackFn provided to #configure will no longer be executed.
	 * BackgroundFetch.stop();
	 *
	 * ```
	 * @interfaces
	 * BackgroundFetchConfig
	 *
	 */
	var BackgroundFetch = (function () {
	    function BackgroundFetch() {
	    }
	    /**
	     * Configures the plugin's fetch callbackFn
	     *
	     * @param {Function} callbackFn This callback will fire each time an iOS background-fetch event occurs (typically every 15 min).
	     * @param {Function} errorCallback The failureFn will be called if the device doesn't support background-fetch.
	     * @param {BackgroundFetchConfig} config Configuration for plugin
	     * @return Location object, which tries to mimic w3c Coordinates interface.
	     * See http://dev.w3.org/geo/api/spec-source.html#coordinates_interface
	     * Callback to be executed every time a geolocation is recorded in the background.
	     */
	    BackgroundFetch.configure = function (callbackFn, errorCallback, config) { return; };
	    /**
	     * Start the background-fetch API.
	     * Your callbackFn provided to #configure will be executed each time a background-fetch event occurs. NOTE the #configure method automatically calls #start. You do not have to call this method after you #configure the plugin
	     * @returns {Promise<any>}
	     */
	    BackgroundFetch.start = function () { return; };
	    /**
	     * Stop the background-fetch API from firing fetch events. Your callbackFn provided to #configure will no longer be executed.
	     * @returns {Promise<any>}
	     */
	    BackgroundFetch.stop = function () { return; };
	    /**
	     * You MUST call this method in your fetch callbackFn provided to #configure in order to signal to iOS that your fetch action is complete. iOS provides only 30s of background-time for a fetch-event -- if you exceed this 30s, iOS will kill your app.
	     */
	    BackgroundFetch.finish = function () { };
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], BackgroundFetch, "configure", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BackgroundFetch, "start", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BackgroundFetch, "stop", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BackgroundFetch, "finish", null);
	    BackgroundFetch = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'BackgroundFetch',
	            plugin: 'cordova-plugin-background-fetch',
	            pluginRef: 'BackgroundFetch',
	            repo: 'https://github.com/transistorsoft/cordova-plugin-background-fetch',
	            platforms: ['iOS']
	        })
	    ], BackgroundFetch);
	    return BackgroundFetch;
	}());
	exports.BackgroundFetch = BackgroundFetch;
	//# sourceMappingURL=background-fetch.js.map

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name BackgroundGeolocation
	 * @description
	 * This plugin provides foreground and background geolocation with battery-saving "circular region monitoring" and "stop detection". For
	 * more detail, please see https://github.com/mauron85/cordova-plugin-background-geolocation
	 *
	 * @usage
	 *
	 * ```typescript
	 * import { BackgroundGeolocation } from 'ionic-native';
	 *
	 *
	 * // When device is ready :
	 * platform.ready().then(() => {
	 *     // IMPORTANT: BackgroundGeolocation must be called within app.ts and or before Geolocation. Otherwise the platform will not ask you for background tracking permission.
	 *
	 *     // BackgroundGeolocation is highly configurable. See platform specific configuration options
	 *     let config = {
	 *             desiredAccuracy: 10,
	 *             stationaryRadius: 20,
	 *             distanceFilter: 30,
	 *             debug: true, //  enable this hear sounds for background-geolocation life-cycle.
	 *             stopOnTerminate: false, // enable this to clear background location settings when the app terminates
	 *     };
	 *
	 *     BackgroundGeolocation.configure((location) => {
	         console.log('[js] BackgroundGeolocation callback:  ' + location.latitude + ',' + location.longitude);
	
	          // IMPORTANT:  You must execute the finish method here to inform the native plugin that you're finished,
	          // and the background-task may be completed.  You must do this regardless if your HTTP request is successful or not.
	          // IF YOU DON'T, ios will CRASH YOUR APP for spending too much time in the background.
	          BackgroundGeolocation.finish(); // FOR IOS ONLY
	
	 *      }, (error) => {
	 *        console.log('BackgroundGeolocation error');
	 *      }, config);
	 *
	 *     // Turn ON the background-geolocation system.  The user will be tracked whenever they suspend the app.
	 *     BackgroundGeolocation.start();
	 * })
	 *
	 * // If you wish to turn OFF background-tracking, call the #stop method.
	 * BackgroundGeolocation.stop();
	 *
	 * ```
	 * @interfaces
	 * BackgroundGeolocationResponse
	 * BackgroundGeolocationConfig
	 */
	var BackgroundGeolocation = (function () {
	    function BackgroundGeolocation() {
	    }
	    /**
	     * Configure the plugin.
	     *
	     * @param options {BackgroundGeolocationConfig} options An object of type Config
	     * @return {Observable<any>}
	     */
	    BackgroundGeolocation.configure = function (options) { return; };
	    /**
	     * Turn ON the background-geolocation system.
	     * The user will be tracked whenever they suspend the app.
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.start = function () { return; };
	    /**
	     * Turn OFF background-tracking
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.stop = function () { return; };
	    /**
	     * Inform the native plugin that you're finished, the background-task may be completed
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.finish = function () { return; };
	    /**
	     * Force the plugin to enter "moving" or "stationary" state
	     * @param isMoving {boolean}
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.changePace = function (isMoving) { return; };
	    /**
	     * Setup configuration
	     * @param options {BackgroundGeolocationConfig}
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.setConfig = function (options) { return; };
	    /**
	     * Returns current stationaryLocation if available. null if not
	     * @returns {Promise<Location>}
	     */
	    BackgroundGeolocation.getStationaryLocation = function () { return; };
	    /**
	     * Add a stationary-region listener. Whenever the devices enters "stationary-mode",
	     * your #success callback will be executed with #location param containing #radius of region
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.onStationary = function () { return; };
	    /**
	     * Check if location is enabled on the device
	     * @returns {Promise<number>} Returns a promise with int argument that takes values 0, 1 (true).
	     */
	    BackgroundGeolocation.isLocationEnabled = function () { return; };
	    /**
	     * Display app settings to change permissions
	     */
	    BackgroundGeolocation.showAppSettings = function () { };
	    /**
	     * Display device location settings
	     */
	    BackgroundGeolocation.showLocationSettings = function () { };
	    /**
	     * Method can be used to detect user changes in location services settings.
	     * If user enable or disable location services then success callback will be executed.
	     * In case or error (SettingNotFoundException) fail callback will be executed.
	     * @returns {Promise<boolean>}
	     */
	    BackgroundGeolocation.watchLocationMode = function () { return; };
	    /**
	     * Stop watching for location mode changes.
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.stopWatchingLocationMode = function () { return; };
	    /**
	     * Method will return all stored locations.
	     * Locations are stored when:
	     *  - config.stopOnTerminate is false and main activity was killed
	     *    by the system
	     *  or
	     *  - option.debug is true
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.getLocations = function () { return; };
	    /**
	  
	     * Method will return locations, which has not been yet posted to server. NOTE: Locations does contain locationId.
	  
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.getValidLocations = function () { return; };
	    /**
	     * Delete stored location by given locationId.
	     * @param locationId {number}
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.deleteLocation = function (locationId) { return; };
	    /**
	     * Delete all stored locations.
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.deleteAllLocations = function () { return; };
	    /**
	     * Normally plugin will handle switching between BACKGROUND and FOREGROUND mode itself.
	     * Calling switchMode you can override plugin behavior and force plugin to switch into other mode.
	     *
	     * In FOREGROUND mode plugin uses iOS local manager to receive locations and behavior is affected by option.desiredAccuracy and option.distanceFilter.
	     * In BACKGROUND mode plugin uses significant changes and region monitoring to receive locations and uses option.stationaryRadius only.
	  
	     *
	     * BackgroundGeolocation.Mode.FOREGROUND
	     * BackgroundGeolocation.Mode.BACKGROUND
	  
	     **
	     * @param modeId {number}
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.switchMode = function (modeId) { return; };
	    /**
	  
	     * Return all logged events. Useful for plugin debugging. Parameter limit limits number of returned entries.
	  
	     * @see https://github.com/mauron85/cordova-plugin-background-geolocation/tree/v2.2.1#debugging for more information.
	  
	     *
	     * @param limit {number} Limits the number of entries
	  
	     * @returns {Promise<any>}
	     */
	    BackgroundGeolocation.getLogEntries = function (limit) { return; };
	    /**
	  
	     * Set location service provider @see https://github.com/mauron85/cordova-plugin-background-geolocation/wiki/Android-providers
	  
	     *
	     * Possible values:
	     *  ANDROID_DISTANCE_FILTER_PROVIDER: 0,
	  
	     *  ANDROID_ACTIVITY_PROVIDER: 1
	  
	     *
	     * @enum {number}
	  
	     */
	    BackgroundGeolocation.LocationProvider = {
	        ANDROID_DISTANCE_FILTER_PROVIDER: 0,
	        ANDROID_ACTIVITY_PROVIDER: 1
	    };
	    /**
	     * Desired accuracy in meters. Possible values [0, 10, 100, 1000].
	  
	     * The lower the number, the more power devoted to GeoLocation resulting in higher accuracy readings.
	  
	     * 1000 results in lowest power drain and least accurate readings.
	  
	     *
	     * Possible values:
	     *  HIGH: 0
	  
	     *  MEDIUM: 10
	  
	     *  LOW: 100
	  
	     *  PASSIVE: 1000
	     *
	     * enum {number}
	  
	     */
	    BackgroundGeolocation.Accuracy = {
	        HIGH: 0,
	        MEDIUM: 10,
	        LOW: 100,
	        PASSIVE: 1000
	    };
	    /**
	  
	     * Used in the switchMode function
	  
	     *
	     * Possible values:
	     *  BACKGROUND: 0
	     *  FOREGROUND: 1
	  
	     *
	     * @enum {number}
	  
	     */
	    BackgroundGeolocation.Mode = {
	        BACKGROUND: 0,
	        FOREGROUND: 1
	    };
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse',
	            observable: true
	        })
	    ], BackgroundGeolocation, "configure", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BackgroundGeolocation, "start", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BackgroundGeolocation, "stop", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS', 'Windows Phone']
	        })
	    ], BackgroundGeolocation, "finish", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS', 'Windows Phone']
	        })
	    ], BackgroundGeolocation, "changePace", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], BackgroundGeolocation, "setConfig", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS', 'Windows Phone']
	        })
	    ], BackgroundGeolocation, "getStationaryLocation", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS', 'Windows Phone']
	        })
	    ], BackgroundGeolocation, "onStationary", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], BackgroundGeolocation, "isLocationEnabled", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], BackgroundGeolocation, "showAppSettings", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], BackgroundGeolocation, "showLocationSettings", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], BackgroundGeolocation, "watchLocationMode", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], BackgroundGeolocation, "stopWatchingLocationMode", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], BackgroundGeolocation, "getLocations", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BackgroundGeolocation, "getValidLocations", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], BackgroundGeolocation, "deleteLocation", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], BackgroundGeolocation, "deleteAllLocations", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS']
	        })
	    ], BackgroundGeolocation, "switchMode", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BackgroundGeolocation, "getLogEntries", null);
	    BackgroundGeolocation = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'BackgroundGeolocation',
	            plugin: 'cordova-plugin-mauron85-background-geolocation',
	            pluginRef: 'backgroundGeolocation',
	            repo: 'https://github.com/mauron85/cordova-plugin-background-geolocation',
	            platforms: ['iOS', 'Android', 'Windows Phone 8']
	        })
	    ], BackgroundGeolocation);
	    return BackgroundGeolocation;
	}());
	exports.BackgroundGeolocation = BackgroundGeolocation;
	//# sourceMappingURL=background-geolocation.js.map

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	* @name Background Mode
	* @description
	* Cordova plugin to prevent the app from going to sleep while in background.
	* Requires Cordova plugin: cordova-plugin-background-mode. For more info about plugin, vist: https://github.com/katzer/cordova-plugin-background-mode
	*@usage
	* ```typescript
	* import { BackgroundMode } from 'ionic-native';
	*
	* BackgroundMode.enable();
	* ```
	 *
	 * @interfaces
	 * BackgroundModeConfiguration
	*/
	var BackgroundMode = (function () {
	    function BackgroundMode() {
	    }
	    /**
	    * Enable the background mode.
	    * Once called, prevents the app from being paused while in background.
	    */
	    BackgroundMode.enable = function () { };
	    /**
	    * Disable the background mode.
	    * Once the background mode has been disabled, the app will be paused when in background.
	    */
	    BackgroundMode.disable = function () { return; };
	    /**
	    * Checks if background mode is enabled or not.
	    * @returns {boolean} returns a boolean that indicates if the background mode is enabled.
	    */
	    BackgroundMode.isEnabled = function () { return; };
	    /**
	    * Can be used to get the information if the background mode is active.
	    * @returns {boolean} returns a boolean that indicates if the background mode is active.
	    */
	    BackgroundMode.isActive = function () { return; };
	    /**
	    * Override the default title, ticker and text.
	    * Available only for Android platform.
	    * @param {Configure} options List of option to configure. See table below
	    */
	    BackgroundMode.setDefaults = function (options) { return; };
	    /**
	    * Modify the displayed information.
	    * Available only for Android platform.
	    * @param {Configure} options Any options you want to update. See table below.
	    */
	    BackgroundMode.configure = function (options) { return; };
	    /**
	     * Listen for events that the plugin fires. Available events are `enable`, `disable`, `activate`, `deactivate` and `failure`.
	     * @param event {string} Event name
	     * @returns {Observable<any>}
	     */
	    BackgroundMode.on = function (event) { return; };
	    /**
	     * Android allows to programmatically move from foreground to background.
	     */
	    BackgroundMode.moveToBackground = function () { };
	    /**
	     * Android allows to programmatically move from background to foreground.
	     */
	    BackgroundMode.moveToForeground = function () { };
	    /**
	     * Override the back button on Android to go to background instead of closing the app.
	     */
	    BackgroundMode.overrideBackButton = function () { };
	    /**
	     * Exclude the app from the recent task list works on Android 5.0+.
	     */
	    BackgroundMode.excludeFromTaskList = function () { };
	    /**
	     * The method works async instead of isActive() or isEnabled().
	     */
	    BackgroundMode.isScreenOff = function () { return; };
	    /**
	     * Turn screen on
	     */
	    BackgroundMode.wakeUp = function () { };
	    /**
	     * Turn screen on and show app even locked
	     */
	    BackgroundMode.unlock = function () { };
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], BackgroundMode, "enable", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BackgroundMode, "disable", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], BackgroundMode, "isEnabled", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], BackgroundMode, "isActive", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], BackgroundMode, "setDefaults", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], BackgroundMode, "configure", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'un',
	            clearWithArgs: true
	        })
	    ], BackgroundMode, "on", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            sync: true
	        })
	    ], BackgroundMode, "moveToBackground", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            sync: true
	        })
	    ], BackgroundMode, "moveToForeground", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            sync: true
	        })
	    ], BackgroundMode, "overrideBackButton", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            sync: true
	        })
	    ], BackgroundMode, "excludeFromTaskList", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], BackgroundMode, "isScreenOff", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            sync: true
	        })
	    ], BackgroundMode, "wakeUp", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            sync: true
	        })
	    ], BackgroundMode, "unlock", null);
	    BackgroundMode = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'BackgroundMode',
	            plugin: 'cordova-plugin-background-mode',
	            pluginRef: 'cordova.plugins.backgroundMode',
	            repo: 'https://github.com/katzer/cordova-plugin-background-mode',
	            platforms: ['Android', 'iOS', 'Windows Phone 8']
	        })
	    ], BackgroundMode);
	    return BackgroundMode;
	}());
	exports.BackgroundMode = BackgroundMode;
	//# sourceMappingURL=backgroundmode.js.map

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @beta
	 * @name Backlight
	 * @description
	 * This plugin adds turning on/off the device backlight.
	 *
	 * @usage
	 * ```
	 * import { Backlight } from 'ionic-native';
	 *
	 * // Turn backlight on
	 * Backlight.on().then(() => console.log('backlight on'));
	 *
	 * // Turn backlight off
	 * Backlight.off().then(() => console.log('backlight off'));
	 *
	 * ```
	 */
	var Backlight = (function () {
	    function Backlight() {
	    }
	    /**
	     * This function turns backlight on
	     * @return {Promise<any>} Returns a promise that resolves when the backlight is on
	     */
	    Backlight.on = function () { return; };
	    /**
	     * This function turns backlight off
	     * @return {Promise<any>} Returns a promise that resolves when the backlight is off
	     */
	    Backlight.off = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Backlight, "on", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Backlight, "off", null);
	    Backlight = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Backlight',
	            plugin: 'cordova-plugin-backlight',
	            pluginRef: 'cordova.plugins.Backlight',
	            repo: 'https://github.com/mebibou/cordova-plugin-backlight',
	            platforms: ['Android']
	        })
	    ], Backlight);
	    return Backlight;
	}());
	exports.Backlight = Backlight;
	//# sourceMappingURL=backlight.js.map

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Barcode Scanner
	 * @description
	 * The Barcode Scanner Plugin opens a camera view and automatically scans a barcode, returning the data back to you.
	 *
	 * Requires Cordova plugin: `phonegap-plugin-barcodescanner`. For more info, please see the [BarcodeScanner plugin docs](https://github.com/phonegap/phonegap-plugin-barcodescanner).
	 *
	 * @usage
	 * ```typescript
	 * import { BarcodeScanner } from 'ionic-native';
	 *
	 *
	 * BarcodeScanner.scan().then((barcodeData) => {
	 *  // Success! Barcode data is here
	 * }, (err) => {
	 * 	// An error occurred
	 * });
	 * ```
	 * @interfaces
	 * BarcodeScannerOptions
	 */
	var BarcodeScanner = (function () {
	    function BarcodeScanner() {
	    }
	    /**
	     * Open the barcode scanner.
	     * @param options {BarcodeScannerOptions} Optional options to pass to the scanner
	     * @returns {Promise<any>} Returns a Promise that resolves with scanner data, or rejects with an error.
	     */
	    BarcodeScanner.scan = function (options) { return; };
	    /**
	     * Encodes data into a barcode.
	     * NOTE: not well supported on Android
	     * @param type {string} Type of encoding
	     * @param data {any} Data to encode
	     * @returns {Promise<any>}
	     */
	    BarcodeScanner.encode = function (type, data) { return; };
	    /**
	     * @private
	     */
	    BarcodeScanner.Encode = {
	        TEXT_TYPE: 'TEXT_TYPE',
	        EMAIL_TYPE: 'EMAIL_TYPE',
	        PHONE_TYPE: 'PHONE_TYPE',
	        SMS_TYPE: 'SMS_TYPE'
	    };
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], BarcodeScanner, "scan", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BarcodeScanner, "encode", null);
	    BarcodeScanner = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'BarcodeScanner',
	            plugin: 'phonegap-plugin-barcodescanner',
	            pluginRef: 'cordova.plugins.barcodeScanner',
	            repo: 'https://github.com/phonegap/phonegap-plugin-barcodescanner',
	            platforms: ['Android', 'iOS', 'Windows Phone 8', 'Windows 10', 'Windows 8', 'BlackBerry 10', 'Browser']
	        })
	    ], BarcodeScanner);
	    return BarcodeScanner;
	}());
	exports.BarcodeScanner = BarcodeScanner;
	//# sourceMappingURL=barcodescanner.js.map

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Base64 To Gallery
	 * @description This plugin allows you to save base64 data as a png image into the device
	 * @usage
	 * ```typescript
	 * import { Base64ToGallery } from 'ionic-native';
	 *
	 *
	 * Base64ToGallery.base64ToGallery(base64Data, 'img_').then(
	 *   res => console.log('Saved image to gallery ', res),
	 *   err => console.log('Error saving image to gallery ', err)
	 * );
	 * ```
	 */
	var Base64ToGallery = (function () {
	    function Base64ToGallery() {
	    }
	    /**
	     * Converts a base64 string to an image file in the device gallery
	     * @param {string} data The actual base64 string that you want to save
	     * @param {any} options (optional) An object with properties: prefix: string, mediaScanner: boolean. Prefix will be prepended to the filename. If true, mediaScanner runs Media Scanner on Android and saves to Camera Roll on iOS; if false, saves to Library folder on iOS.
	     * @returns {Promise<any>} returns a promise that resolves when the image is saved.
	     */
	    Base64ToGallery.base64ToGallery = function (data, options) {
	        return;
	    };
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 2,
	            errorIndex: 3
	        })
	    ], Base64ToGallery, "base64ToGallery", null);
	    Base64ToGallery = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Base64ToGallery',
	            plugin: 'cordova-base64-to-gallery',
	            pluginRef: 'cordova',
	            repo: 'https://github.com/Nexxa/cordova-base64-to-gallery',
	            platforms: ['Android', 'iOS', 'Windows Phone 8']
	        })
	    ], Base64ToGallery);
	    return Base64ToGallery;
	}());
	exports.Base64ToGallery = Base64ToGallery;
	//# sourceMappingURL=base64togallery.js.map

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Battery Status
	 * @description
	 * Requires Cordova plugin: cordova-plugin-batterystatus. For more info, please see the [BatteryStatus plugin docs](https://github.com/apache/cordova-plugin-battery-status).
	 *
	 * @usage
	 * ```typescript
	 * import { BatteryStatus } from 'ionic-native';
	 *
	 *
	 * // watch change in battery status
	 * let subscription = BatteryStatus.onChange().subscribe(
	 *  (status: StatusObject) => {
	 *    console.log(status.level, status.isPlugged);
	 *  }
	 * );
	 *
	 * // stop watch
	 * subscription.unsubscribe();
	 *
	 * ```
	 * @interfaces
	 * BatteryStatusResponse
	 */
	var BatteryStatus = (function () {
	    function BatteryStatus() {
	    }
	    /**
	     * Watch the change in battery level
	     * @returns {Observable<BatteryStatusResponse>} Returns an observable that pushes a status object
	     */
	    BatteryStatus.onChange = function () { return; };
	    /**
	     * Watch when the battery level goes low
	     * @returns {Observable<BatteryStatusResponse>} Returns an observable that pushes a status object
	     */
	    BatteryStatus.onLow = function () { return; };
	    /**
	     * Watch when the battery level goes to critial
	     * @returns {Observable<BatteryStatusResponse>} Returns an observable that pushes a status object
	     */
	    BatteryStatus.onCritical = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'batterystatus'
	        })
	    ], BatteryStatus, "onChange", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'batterylow'
	        })
	    ], BatteryStatus, "onLow", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'batterycritical'
	        })
	    ], BatteryStatus, "onCritical", null);
	    BatteryStatus = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'BatteryStatus',
	            plugin: 'cordova-plugin-battery-status',
	            pluginRef: 'navigator.battery',
	            repo: 'https://github.com/apache/cordova-plugin-battery-status',
	            platforms: ['Amazon Fire OS', 'iOS', 'Android', 'BlackBerry 10', 'Windows Phone 7', 'Windows Phone 8', 'Windows', 'Firefox OS', 'Browser']
	        })
	    ], BatteryStatus);
	    return BatteryStatus;
	}());
	exports.BatteryStatus = BatteryStatus;
	//# sourceMappingURL=batterystatus.js.map

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Brightness
	 * @description
	 * The Brightness plugin let you control the display brightness of your device.
	 *
	 * Requires Cordova plugin: `cordova-plugin-brightness`. For more info, please see the [Brightness plugin docs](https://github.com/mgcrea/cordova-plugin-brightness).
	 *
	 * @usage
	 * ```typescript
	 * import { Brightness } from 'ionic-native';
	 *
	 *
	 * let brightnessValue: number = 0.8;
	 * Brightness.setBrightness(brightnessValue);
	 * ```
	 *
	 */
	var Brightness = (function () {
	    function Brightness() {
	    }
	    /**
	     * Sets the brightness of the display.
	     *
	     * @param {value} Floating number between 0 and 1 in which case 1 means 100% brightness and 0 means 0% brightness.
	     * @returns {Promise<any>} Returns a Promise that resolves if setting brightness was successful.
	     */
	    Brightness.setBrightness = function (value) { return; };
	    /**
	     * Reads the current brightness of the device display.
	     *
	     * @returns {Promise<any>} Returns a Promise that resolves with the
	     * brightness value of the device display (floating number between 0 and 1).
	     */
	    Brightness.getBrightness = function () { return; };
	    /**
	    * Keeps the screen on. Prevents the device from setting the screen to sleep.
	    */
	    Brightness.setKeepScreenOn = function (value) { };
	    __decorate([
	        plugin_1.Cordova()
	    ], Brightness, "setBrightness", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Brightness, "getBrightness", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Brightness, "setKeepScreenOn", null);
	    Brightness = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Brightness',
	            plugin: 'cordova-plugin-brightness',
	            pluginRef: 'cordova.plugins.brightness',
	            repo: 'https://github.com/mgcrea/cordova-plugin-brightness',
	            platforms: ['Android', 'iOS']
	        })
	    ], Brightness);
	    return Brightness;
	}());
	exports.Brightness = Brightness;
	//# sourceMappingURL=brightness.js.map

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name BrowserTab
	 * @description
	 * This plugin provides an interface to in-app browser tabs that exist on some mobile platforms, specifically [Custom Tabs](http://developer.android.com/tools/support-library/features.html#custom-tabs) on Android (including the [Chrome Custom Tabs](https://developer.chrome.com/multidevice/android/customtabs) implementation), and [SFSafariViewController](https://developer.apple.com/library/ios/documentation/SafariServices/Reference/SFSafariViewController_Ref/) on iOS.
	 *
	 * @usage
	 * ```
	 * import { BrowserTab } from 'ionic-native';
	 *
	 * BrowserTab.isAvailable()
	 *   .then((isAvailable: boolean) => {
	 *
	 *     if (isAvailable) {
	 *
	 *       BrowserTab.openUrl('https://ionic.io');
	 *
	 *     } else {
	 *       // open url with InAppBrowser instead
	 *     }
	 *
	 *   });
	 *
	 * ```
	 */
	var BrowserTab = (function () {
	    function BrowserTab() {
	    }
	    /**
	     * Check if BrowserTab option is available
	     * @return {Promise<any>} Returns a promise that resolves when check is successful and returns true or false
	     */
	    BrowserTab.isAvailable = function () { return; };
	    /**
	     * Opens the provided URL using a browser tab
	     * @param {string} url  The URL you want to open
	     * @return {Promise<any>} Returns a promise that resolves when check open was successful
	     */
	    BrowserTab.openUrl = function (url) { return; };
	    /**
	     * Closes browser tab
	     * @return {Promise<any>} Returns a promise that resolves when close was finished
	     */
	    BrowserTab.close = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], BrowserTab, "isAvailable", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BrowserTab, "openUrl", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BrowserTab, "close", null);
	    BrowserTab = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'BrowserTab',
	            plugin: 'cordova-plugin-browsertab',
	            pluginRef: 'cordova.plugins.browsertab',
	            repo: 'https://github.com/google/cordova-plugin-browsertab',
	            platforms: ['Android', 'iOS']
	        })
	    ], BrowserTab);
	    return BrowserTab;
	}());
	exports.BrowserTab = BrowserTab;
	//# sourceMappingURL=browser-tab.js.map

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name BLE
	 * @description
	 * This plugin enables communication between a phone and Bluetooth Low Energy (BLE) peripherals.
	 *
	 * The plugin provides a simple JavaScript API for iOS and Android.
	 *
	 * - Scan for peripherals
	 * - Connect to a peripheral
	 * - Read the value of a characteristic
	 * - Write new value to a characteristic
	 * - Get notified when characteristic's value changes
	 *
	 * Advertising information is returned when scanning for peripherals. Service, characteristic, and property info is returned when connecting to a peripheral. All access is via service and characteristic UUIDs. The plugin manages handles internally.
	 *
	 * Simultaneous connections to multiple peripherals are supported.
	 *
	 * @usage
	 *
	 * ## Peripheral Data
	 *
	 * Peripheral Data is passed to the success callback when scanning and connecting. Limited data is passed when scanning.
	 *
	 * ```typescript
	 *   {
	 *       "name": "Battery Demo",
	 *       "id": "20:FF:D0:FF:D1:C0",
	 *       "advertising": [2,1,6,3,3,15,24,8,9,66,97,116,116,101,114,121],
	 *       "rssi": -55
	 *   }
	 * ```
	 * After connecting, the peripheral object also includes service, characteristic and descriptor information.
	 *
	 * ```typescript
	 *   {
	 *       "name": "Battery Demo",
	 *       "id": "20:FF:D0:FF:D1:C0",
	 *       "advertising": [2,1,6,3,3,15,24,8,9,66,97,116,116,101,114,121],
	 *       "rssi": -55,
	 *       "services": [
	 *           "1800",
	 *           "1801",
	 *           "180f"
	 *       ],
	 *       "characteristics": [
	 *           {
	 *               "service": "1800",
	 *               "characteristic": "2a00",
	 *               "properties": [
	 *                   "Read"
	 *               ]
	 *           },
	 *           {
	 *               "service": "1800",
	 *               "characteristic": "2a01",
	 *               "properties": [
	 *                   "Read"
	 *               ]
	 *           },
	 *           {
	 *               "service": "1801",
	 *               "characteristic": "2a05",
	 *               "properties": [
	 *                   "Read"
	 *               ]
	 *           },
	 *           {
	 *               "service": "180f",
	 *               "characteristic": "2a19",
	 *               "properties": [
	 *                   "Read"
	 *               ],
	 *               "descriptors": [
	 *                   {
	 *                       "uuid": "2901"
	 *                   },
	 *                   {
	 *                       "uuid": "2904"
	 *                   }
	 *               ]
	 *           }
	 *       ]
	 *   }
	 * ```
	 *
	 * ## Advertising Data
	 * Bluetooth advertising data is returned in when scanning for devices. The format format varies depending on your platform. On Android advertising data will be the raw advertising bytes. iOS does not allow access to raw advertising data, so a dictionary of data is returned.
	 *
	 * The advertising information for both Android and iOS appears to be a combination of advertising data and scan response data.
	 *
	 * ### Android
	 *
	 * ```typescript
	 *   {
	 *       "name": "demo",
	 *       "id": "00:1A:7D:DA:71:13",
	 *       "advertising": ArrayBuffer,
	 *      "rssi": -37
	 *  }
	 * ```
	 *
	 * Convert the advertising info to a Uint8Array for processing. `var adData = new Uint8Array(peripheral.advertising)`
	 *
	 * ### iOS
	 *
	 * Note that iOS uses the string value of the constants for the [Advertisement Data Retrieval Keys](https://developer.apple.com/library/ios/documentation/CoreBluetooth/Reference/CBCentralManagerDelegate_Protocol/index.html#//apple_ref/doc/constant_group/Advertisement_Data_Retrieval_Keys). This will likely change in the future.
	 *
	 * ```typescript
	 *   {
	 *       "name": "demo",
	 *       "id": "D8479A4F-7517-BCD3-91B5-3302B2F81802",
	 *       "advertising": {
	 *           "kCBAdvDataChannel": 37,
	 *           "kCBAdvDataServiceData": {
	 *               "FED8": {
	 *                   "byteLength": 7 // data not shown
	 *               }
	 *           },
	 *           "kCBAdvDataLocalName": "demo",
	 *           "kCBAdvDataServiceUUIDs": ["FED8"],
	 *           "kCBAdvDataManufacturerData": {
	 *               "byteLength": 7  // data not shown
	 *           },
	 *           "kCBAdvDataTxPowerLevel": 32,
	 *           "kCBAdvDataIsConnectable": true
	 *       },
	 *       "rssi": -53
	 *   }
	 * ```
	 *
	 * ## Typed Arrays
	 *
	 * This plugin uses typed Arrays or ArrayBuffers for sending and receiving data.
	 *
	 * This means that you need convert your data to ArrayBuffers before sending and from ArrayBuffers when receiving.
	 *
	 * ```typescript
	 *   // ASCII only
	 *   function stringToBytes(string) {
	 *      var array = new Uint8Array(string.length);
	 *      for (var i = 0, l = string.length; i < l; i++) {
	 *          array[i] = string.charCodeAt(i);
	 *       }
	 *       return array.buffer;
	 *   }
	 *
	 *   // ASCII only
	 *   function bytesToString(buffer) {
	 *       return String.fromCharCode.apply(null, new Uint8Array(buffer));
	 *   }
	 * ```
	 * You can read more about typed arrays in these articles on [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) and [HTML5 Rocks](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/).
	 *
	 * ## UUIDs
	 *
	 * UUIDs are always strings and not numbers. Some 16-bit UUIDs, such as '2220' look like integers, but they're not. (The integer 2220 is 0x8AC in hex.) This isn't a problem with 128 bit UUIDs since they look like strings 82b9e6e1-593a-456f-be9b-9215160ebcac. All 16-bit UUIDs should also be passed to methods as strings.
	 *
	 */
	var BLE = (function () {
	    function BLE() {
	    }
	    /**
	     * Scan and discover BLE peripherals for the specified amount of time.
	     *
	     * @usage
	     * ```
	     * BLE.scan([], 5).subscribe(device => {
	     *   console.log(JSON.stringify(device));
	     * });
	     * ```
	     * @param {string[]} services  List of service UUIDs to discover, or `[]` to find all devices
	     * @param {number} seconds  Number of seconds to run discovery
	     * @returns {Observable<any>} Returns an Observable that notifies of each peripheral that is discovered during the specified time.
	     */
	    BLE.scan = function (services, seconds) { return; };
	    /**
	     * Scan and discover BLE peripherals until `stopScan` is called.
	     *
	     * @usage
	     * ```
	     * BLE.startScan([]).subscribe(device => {
	     *   console.log(JSON.stringify(device));
	     * });
	     *
	     * setTimeout(() => {
	     *   BLE.stopScan();
	     * }, 5000);
	     * ```
	     * @param {string[]} services  List of service UUIDs to discover, or `[]` to find all devices
	     * @returns {Observable<any>} Returns an Observable that notifies of each peripheral discovered.
	     */
	    BLE.startScan = function (services) { return; };
	    /**
	     * Scans for BLE devices. This function operates similarly to the `startScan` function, but allows you to specify extra options (like allowing duplicate device reports).
	     * @param {string[]} services  List of service UUIDs to discover, or `[]` to find all devices
	     * @param options {any}
	     * @returns {Observable<any>} Returns an Observable that notifies of each peripheral discovered.
	     */
	    BLE.startScanWithOptions = function (services, options) { return; };
	    /**
	     * Stop a scan started by `startScan`.
	     *
	     * @usage
	     * ```
	     * BLE.startScan([]).subscribe(device => {
	     *   console.log(JSON.stringify(device));
	     * });
	     * setTimeout(() => {
	     *   BLE.stopScan().then(() => { console.log('scan stopped'); });
	     * }, 5000);
	     * ```
	     * @return returns a Promise.
	     */
	    BLE.stopScan = function () { return; };
	    /**
	     * Connect to a peripheral.
	     * @usage
	     * ```
	     *   BLE.connect('12:34:56:78:9A:BC').subscribe(peripheralData => {
	     *     console.log(peripheralData);
	     *   },
	     *   peripheralData => {
	     *     console.log('disconnected');
	     *   });
	     * ```
	     * @param deviceId {string}  UUID or MAC address of the peripheral
	     * @return Returns an Observable that notifies of connect/disconnect.
	     */
	    BLE.connect = function (deviceId) { return; };
	    /**
	     * Disconnect from a peripheral.
	     * @usage
	     * ```
	     *   BLE.disconnect('12:34:56:78:9A:BC').then(() => {
	     *     console.log('Disconnected');
	     *   });
	     * ```
	     * @param deviceId {string}  UUID or MAC address of the peripheral
	     * @return Returns a Promise
	     */
	    BLE.disconnect = function (deviceId) { return; };
	    /**
	     * Read the value of a characteristic.
	     *
	     * @param {string} deviceId  UUID or MAC address of the peripheral
	     * @param {string} serviceUUID  UUID of the BLE service
	     * @param {string} characteristicUUID  UUID of the BLE characteristic
	     * @return Returns a Promise
	     */
	    BLE.read = function (deviceId, serviceUUID, characteristicUUID) { return; };
	    ;
	    /**
	     * Write the value of a characteristic.
	     * @usage
	     * ```
	     * // send 1 byte to switch a light on
	     * var data = new Uint8Array(1);
	     * data[0] = 1;
	     * BLE.write(device_id, "FF10", "FF11", data.buffer);
	     *
	     * // send a 3 byte value with RGB color
	     * var data = new Uint8Array(3);
	     * data[0] = 0xFF;  // red
	     * data[0] = 0x00; // green
	     * data[0] = 0xFF; // blue
	     * BLE.write(device_id, "ccc0", "ccc1", data.buffer);
	     *
	     * // send a 32 bit integer
	     * var data = new Uint32Array(1);
	     * data[0] = counterInput.value;
	     * BLE.write(device_id, SERVICE, CHARACTERISTIC, data.buffer);
	     *
	     * ```
	     * @param {string} deviceId  UUID or MAC address of the peripheral
	     * @param {string} serviceUUID  UUID of the BLE service
	     * @param {string} characteristicUUID  UUID of the BLE characteristic
	     * @param {ArrayBuffer} value  Data to write to the characteristic, as an ArrayBuffer.
	     * @return Returns a Promise
	     */
	    BLE.write = function (deviceId, serviceUUID, characteristicUUID, value) { return; };
	    /**
	     * Write the value of a characteristic without waiting for confirmation from the peripheral.
	     *
	     * @param {string} deviceId  UUID or MAC address of the peripheral
	     * @param {string} serviceUUID  UUID of the BLE service
	     * @param {string} characteristicUUID  UUID of the BLE characteristic
	     * @param {ArrayBuffer} value  Data to write to the characteristic, as an ArrayBuffer.
	     * @return Returns a Promise
	     */
	    BLE.writeWithoutResponse = function (deviceId, serviceUUID, characteristicUUID, value) { return; };
	    /**
	     * Register to be notified when the value of a characteristic changes.
	     *
	     * @usage
	     * ```
	     * BLE.startNotification(device_id, "FF10", "FF11").subscribe(buffer => {
	     *   console.log(String.fromCharCode.apply(null, new Uint8Array(buffer));
	     * });
	     * ```
	     *
	     * @param {string} deviceId  UUID or MAC address of the peripheral
	     * @param {string} serviceUUID  UUID of the BLE service
	     * @param {string} characteristicUUID  UUID of the BLE characteristic
	     * @return Returns an Observable that notifies of characteristic changes.
	     */
	    BLE.startNotification = function (deviceId, serviceUUID, characteristicUUID) { return; };
	    /**
	     * Stop being notified when the value of a characteristic changes.
	     *
	     * @param {string} deviceId  UUID or MAC address of the peripheral
	     * @param {string} serviceUUID  UUID of the BLE service
	     * @param {string} characteristicUUID  UUID of the BLE characteristic
	     * @returns {Promise<any>}
	     */
	    BLE.stopNotification = function (deviceId, serviceUUID, characteristicUUID) { return; };
	    /**
	     * Report the connection status.
	     *
	     * @usage
	     * ```
	     * BLE.isConnected('FFCA0B09-CB1D-4DC0-A1EF-31AFD3EDFB53').then(
	     *   () => { console.log('connected'); },
	     *   () => { console.log('not connected'); }
	     * );
	     * ```
	     * @param {string} deviceId  UUID or MAC address of the peripheral
	     * @returns {Promise<any>}
	     */
	    BLE.isConnected = function (deviceId) { return; };
	    /**
	     * Report if bluetooth is enabled.
	     *
	     * @returns {Promise<void>} Returns a Promise that resolves if Bluetooth is enabled, and rejects if disabled.
	     */
	    BLE.isEnabled = function () { return; };
	    /**
	     * Open System Bluetooth settings (Android only).
	     *
	     * @returns {Promise<any>}
	     */
	    BLE.showBluetoothSettings = function () { return; };
	    /**
	     * Enable Bluetooth on the device (Android only).
	     *
	     * @returns {Promise<any>}
	     */
	    BLE.enable = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            observable: true
	        })
	    ], BLE, "scan", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'stopScan',
	            clearWithArgs: false
	        })
	    ], BLE, "startScan", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'stopScan',
	            clearWithArgs: false
	        })
	    ], BLE, "startScanWithOptions", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BLE, "stopScan", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'disconnect',
	            clearWithArgs: true
	        })
	    ], BLE, "connect", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BLE, "disconnect", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BLE, "read", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BLE, "write", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BLE, "writeWithoutResponse", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'stopNotification',
	            clearWithArgs: true
	        })
	    ], BLE, "startNotification", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BLE, "stopNotification", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BLE, "isConnected", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BLE, "isEnabled", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BLE, "showBluetoothSettings", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BLE, "enable", null);
	    BLE = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'BLE',
	            plugin: 'cordova-plugin-ble-central',
	            pluginRef: 'ble',
	            repo: 'https://github.com/don/cordova-plugin-ble-central',
	            platforms: ['iOS', 'Android']
	        })
	    ], BLE);
	    return BLE;
	}());
	exports.BLE = BLE;
	//# sourceMappingURL=ble.js.map

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Bluetooth Serial
	 * @description This plugin enables serial communication over Bluetooth. It was written for communicating between Android or iOS and an Arduino.
	 * @usage
	 * ```typescript
	 * import { BluetoothSerial } from 'ionic-native';
	 *
	 *
	 * // Write a string
	 * BluetoothSerial.write("hello world").then(success, failure);
	 *
	 * // Array of int or bytes
	 * BluetoothSerial.write([186, 220, 222]).then(success, failure);
	 *
	 * // Typed Array
	 * var data = new Uint8Array(4);
	 * data[0] = 0x41;
	 * data[1] = 0x42;
	 * data[2] = 0x43;
	 * data[3] = 0x44;
	 * BluetoothSerial.write(data).then(success, failure);
	 *
	 * // Array Buffer
	 * BluetoothSerial.write(data.buffer).then(success, failure);
	 * ```
	 */
	var BluetoothSerial = (function () {
	    function BluetoothSerial() {
	    }
	    /**
	     * Connect to a Bluetooth device
	     * @param {string} macAddress_or_uuid Identifier of the remote device
	     * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.
	     */
	    BluetoothSerial.connect = function (macAddress_or_uuid) { return; };
	    /**
	     * Connect insecurely to a Bluetooth device
	     * @param {string} macAddress Identifier of the remote device
	     * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.
	     */
	    BluetoothSerial.connectInsecure = function (macAddress) { return; };
	    /**
	     * Disconnect from the connected device
	     * @returns {Promise<any>}
	     */
	    BluetoothSerial.disconnect = function () { return; };
	    /**
	     * Writes data to the serial port
	     * @param {any} data ArrayBuffer of data
	     * @returns {Promise<any>} returns a promise when data has been written
	     */
	    BluetoothSerial.write = function (data) { return; };
	    /**
	     * Gets the number of bytes of data available
	     * @returns {Promise<any>} returns a promise that contains the available bytes
	     */
	    BluetoothSerial.available = function () { return; };
	    /**
	     * Reads data from the buffer
	     * @returns {Promise<any>} returns a promise with data from the buffer
	     */
	    BluetoothSerial.read = function () { return; };
	    /**
	     * Reads data from the buffer until it reaches a delimiter
	     * @param {string} delimiter string that you want to search until
	     * @returns {Promise<any>} returns a promise
	     */
	    BluetoothSerial.readUntil = function (delimiter) { return; };
	    /**
	     * Subscribe to be notified when data is received
	     * @param {string} delimiter the string you want to watch for
	     * @returns {Observable<any>} returns an observable.
	     */
	    BluetoothSerial.subscribe = function (delimiter) { return; };
	    /**
	     * Subscribe to be notified when data is received
	     * @returns {Observable<any>} returns an observable
	     */
	    BluetoothSerial.subscribeRawData = function () { return; };
	    /**
	     * Clears data in buffer
	     * @returns {Promise<any>} returns a promise when completed
	     */
	    BluetoothSerial.clear = function () { return; };
	    /**
	     * Lists bonded devices
	     * @returns {Promise<any>} returns a promise
	     */
	    BluetoothSerial.list = function () { return; };
	    /**
	     * Reports if bluetooth is enabled
	     * @returns {Promise<any>} returns a promise
	     */
	    BluetoothSerial.isEnabled = function () { return; };
	    /**
	     * Reports the connection status
	     * @returns {Promise<any>} returns a promise
	     */
	    BluetoothSerial.isConnected = function () { return; };
	    /**
	     * Reads the RSSI from the connected peripheral
	     * @returns {Promise<any>} returns a promise
	     */
	    BluetoothSerial.readRSSI = function () { return; };
	    /**
	     * Show the Bluetooth settings on the device
	     * @returns {Promise<any>} returns a promise
	     */
	    BluetoothSerial.showBluetoothSettings = function () { return; };
	    /**
	     * Enable Bluetooth on the device
	     * @returns {Promise<any>} returns a promise
	     */
	    BluetoothSerial.enable = function () { return; };
	    /**
	     * Discover unpaired devices
	     * @returns {Promise<any>} returns a promise
	     */
	    BluetoothSerial.discoverUnpaired = function () { return; };
	    /**
	     * Subscribe to be notified on Bluetooth device discovery. Discovery process must be initiated with the `discoverUnpaired` function.
	     * @returns {Observable<any>} Returns an observable
	     */
	    BluetoothSerial.setDeviceDiscoveredListener = function () { return; };
	    /**
	     * Sets the human readable device name that is broadcasted to other devices
	     * @param {string} newName Desired name of device
	     */
	    BluetoothSerial.setName = function (newName) { };
	    /**
	     * Makes the device discoverable by other devices
	     * @param {number} discoverableDuration Desired number of seconds device should be discoverable for
	     */
	    BluetoothSerial.setDiscoverable = function (discoverableDuration) { };
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone'],
	            observable: true,
	            clearFunction: 'disconnect'
	        })
	    ], BluetoothSerial, "connect", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            observable: true,
	            clearFunction: 'disconnect'
	        })
	    ], BluetoothSerial, "connectInsecure", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], BluetoothSerial, "disconnect", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], BluetoothSerial, "write", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], BluetoothSerial, "available", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], BluetoothSerial, "read", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], BluetoothSerial, "readUntil", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone'],
	            observable: true,
	            clearFunction: 'unsubscribe'
	        })
	    ], BluetoothSerial, "subscribe", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone'],
	            observable: true,
	            clearFunction: 'unsubscribeRawData'
	        })
	    ], BluetoothSerial, "subscribeRawData", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], BluetoothSerial, "clear", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], BluetoothSerial, "list", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], BluetoothSerial, "isEnabled", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], BluetoothSerial, "isConnected", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], BluetoothSerial, "readRSSI", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], BluetoothSerial, "showBluetoothSettings", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], BluetoothSerial, "enable", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], BluetoothSerial, "discoverUnpaired", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android', 'iOS', 'Windows Phone'],
	            observable: true,
	            clearFunction: 'clearDeviceDiscoveredListener'
	        })
	    ], BluetoothSerial, "setDeviceDiscoveredListener", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            sync: true
	        })
	    ], BluetoothSerial, "setName", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            sync: true
	        })
	    ], BluetoothSerial, "setDiscoverable", null);
	    BluetoothSerial = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'BluetoothSerial',
	            repo: 'https://github.com/don/BluetoothSerial',
	            plugin: 'cordova-plugin-bluetooth-serial',
	            pluginRef: 'bluetoothSerial',
	            platforms: ['Android', 'iOS', 'Windows Phone', 'Browser']
	        })
	    ], BluetoothSerial);
	    return BluetoothSerial;
	}());
	exports.BluetoothSerial = BluetoothSerial;
	//# sourceMappingURL=bluetoothserial.js.map

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Broadcaster
	 * @description
	 * This plugin adds exchanging events between native code and your app.
	 *
	 * @usage
	 * ```
	 * import { Broadcaster } from 'ionic-native';
	 *
	 * // Listen to events from Native
	 * Broadcaster.addEventListener('eventName').then((event) => console.log(event));
	 *
	 * // Send event to Native
	 * Broadcaster.fireNativeEvent('eventName', {}).then(() => console.log('success'));
	 *
	 * ```
	 */
	var Broadcaster = (function () {
	    function Broadcaster() {
	    }
	    /**
	     * This function listen to an event sent from the native code
	     * @param eventName {string}
	     * @return {Observable<any>} Returns an observable to watch when an event is received
	     */
	    Broadcaster.addEventListener = function (eventName) { return; };
	    /**
	     * This function sends data to the native code
	     * @param eventName {string}
	     * @param eventData {any}
	     * @return {Promise<any>} Returns a promise that resolves when an event is successfully fired
	     */
	    Broadcaster.fireNativeEvent = function (eventName, eventData) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'removeEventListener',
	            clearWithArgs: true
	        })
	    ], Broadcaster, "addEventListener", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Broadcaster, "fireNativeEvent", null);
	    Broadcaster = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Broadcaster',
	            plugin: 'cordova-plugin-broadcaster',
	            pluginRef: 'broadcaster',
	            repo: 'https://github.com/bsorrentino/cordova-broadcaster',
	            platforms: ['Android', 'iOS']
	        })
	    ], Broadcaster);
	    return Broadcaster;
	}());
	exports.Broadcaster = Broadcaster;
	//# sourceMappingURL=broadcaster.js.map

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Calendar
	 * @description
	 * This plugin allows you to add events to the Calendar of the mobile device.
	 *
	 * Requires Cordova plugin: `cordova-plugin-calendar`. For more info, please see the [Calendar plugin docs](https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin).
	 *
	 *
	 * @usage
	 * ```
	 * import {Calendar} from 'ionic-native';
	 *
	 *
	 *
	 * Calendar.createCalendar('MyCalendar').then(
	 *   (msg) => { console.log(msg); },
	 *   (err) => { console.log(err); }
	 * );
	 * ```
	 * @interfaces
	 * CalendarOptions
	 */
	var Calendar = (function () {
	    function Calendar() {
	    }
	    /**
	     * This function checks if we have permission to read/write from/to the calendar.
	     * The promise will resolve with `true` when:
	     * - You're running on iOS, or
	     * - You're targetting API level lower than 23, or
	     * - You're using Android < 6, or
	     * - You've already granted permission
	     *
	     * If this returns false, you should call the `requestReadWritePermission` function
	     * @returns {Promise<boolean>}
	     */
	    Calendar.hasReadWritePermission = function () { return; };
	    /**
	     * Check if we have read permission
	     * @returns {Promise<boolean>}
	     */
	    Calendar.hasReadPermission = function () { return; };
	    /**
	     * Check if we have write permission
	     * @returns {Promise<boolean>}
	     */
	    Calendar.hasWritePermission = function () { return; };
	    /**
	     * Request write permission
	     * @returns {Promise<any>}
	     */
	    Calendar.requestWritePermission = function () { return; };
	    /**
	     * Request read permission
	     * @returns {Promise<any>}
	     */
	    Calendar.requestReadPermission = function () { return; };
	    /**
	     * Requests read/write permissions
	     * @returns {Promise<any>}
	     */
	    Calendar.requestReadWritePermission = function () { return; };
	    /**
	     * Create a calendar. (iOS only)
	     *
	     * @param {string | Object} nameOrOptions  either a string name or a options object. If string, provide the calendar name. IF an object, provide a calendar name as a string and a calendar color in hex format as a string
	     * @returns {Promise<any>} Returns a Promise
	     */
	    Calendar.createCalendar = function (nameOrOptions) { return; };
	    /**
	     * Delete a calendar. (iOS only)
	     * @param {string} name  Name of the calendar to delete.
	     * @returns {Promise<any>} Returns a Promise
	     */
	    Calendar.deleteCalendar = function (name) { return; };
	    /**
	     * Returns the default calendar options.
	     *
	     * @return {CalendarOptions} Returns an object with the default calendar options
	     */
	    Calendar.getCalendarOptions = function () { return; };
	    /**
	     * Silently create an event.
	     * @param {string} [title]  The event title
	     * @param {string} [location]  The event location
	     * @param {string} [notes]  The event notes
	     * @param {Date} [startDate]  The event start date
	     * @param {Date} [endDate]  The event end date
	     * @returns {Promise<any>} Returns a Promise
	     */
	    Calendar.createEvent = function (title, location, notes, startDate, endDate) { return; };
	    /**
	     * Silently create an event with additional options.
	     *
	     * @param {string} [title]  The event title
	     * @param {string} [location]  The event location
	     * @param {string} [notes]  The event notes
	     * @param {Date} [startDate]  The event start date
	     * @param {Date} [endDate]  The event end date
	     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`
	     * @returns {Promise<any>} Returns a Promise
	     */
	    Calendar.createEventWithOptions = function (title, location, notes, startDate, endDate, options) { return; };
	    /**
	     * Interactively create an event.
	     *
	     * @param {string} [title]  The event title
	     * @param {string} [location]  The event location
	     * @param {string} [notes]  The event notes
	     * @param {Date} [startDate]  The event start date
	     * @param {Date} [endDate]  The event end date
	     * @returns {Promise<any>} Returns a Promise
	     */
	    Calendar.createEventInteractively = function (title, location, notes, startDate, endDate) { return; };
	    /**
	     * Interactively create an event with additional options.
	     *
	     * @param {string} [title]  The event title
	     * @param {string} [location]  The event location
	     * @param {string} [notes]  The event notes
	     * @param {Date} [startDate]  The event start date
	     * @param {Date} [endDate]  The event end date
	     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`
	     * @returns {Promise<any>}
	     */
	    Calendar.createEventInteractivelyWithOptions = function (title, location, notes, startDate, endDate, options) { return; };
	    // deprecated
	    // @Cordova()
	    // static createEventInNamedCalendar(
	    //   title?: string,
	    //   location?: string,
	    //   notes?: string,
	    //   startDate?: Date,
	    //   endDate?: Date,
	    //   calendarName?: string
	    // ) {}
	    /**
	     * Find an event.
	     *
	     * @param {string} [title]  The event title
	     * @param {string} [location]  The event location
	     * @param {string} [notes]  The event notes
	     * @param {Date} [startDate]  The event start date
	     * @param {Date} [endDate]  The event end date
	     * @returns {Promise<any>}
	     */
	    Calendar.findEvent = function (title, location, notes, startDate, endDate) { return; };
	    /**
	     * Find an event with additional options.
	     * @param {string} [title]  The event title
	     * @param {string} [location]  The event location
	     * @param {string} [notes]  The event notes
	     * @param {Date} [startDate]  The event start date
	     * @param {Date} [endDate]  The event end date
	     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`
	     * @returns {Promise<any>} Returns a Promise that resolves with the event, or rejects with an error.
	     */
	    Calendar.findEventWithOptions = function (title, location, notes, startDate, endDate, options) { return; };
	    /**
	     * Find a list of events within the specified date range. (Android only)
	     *
	     * @param {Date} [startDate]  The start date
	     * @param {Date} [endDate]  The end date
	     * @returns {Promise<any>} Returns a Promise that resolves with the list of events, or rejects with an error.
	     */
	    Calendar.listEventsInRange = function (startDate, endDate) { return; };
	    /**
	     * Get a list of all calendars.
	     * @returns {Promise<any>} A Promise that resolves with the list of calendars, or rejects with an error.
	     */
	    Calendar.listCalendars = function () { return; };
	    /**
	     * Get a list of all future events in the specified calendar. (iOS only)
	     * @returns {Promise<any>} Returns a Promise that resolves with the list of events, or rejects with an error.
	     */
	    Calendar.findAllEventsInNamedCalendar = function (calendarName) { return; };
	    /**
	     * Modify an event. (iOS only)
	     *
	     * @param {string} [title]  The event title
	     * @param {string} [location]  The event location
	     * @param {string} [notes]  The event notes
	     * @param {Date} [startDate]  The event start date
	     * @param {Date} [endDate]  The event end date
	     * @param {string} [newTitle]  The new event title
	     * @param {string} [newLocation]  The new event location
	     * @param {string} [newNotes]  The new event notes
	     * @param {Date} [newStartDate]  The new event start date
	     * @param {Date} [newEndDate]  The new event end date
	     * @return Returns a Promise
	     */
	    Calendar.modifyEvent = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate) { return; };
	    /**
	     * Modify an event with additional options. (iOS only)
	     *
	     * @param {string} [title]  The event title
	     * @param {string} [location]  The event location
	     * @param {string} [notes]  The event notes
	     * @param {Date} [startDate]  The event start date
	     * @param {Date} [endDate]  The event end date
	     * @param {string} [newTitle]  The new event title
	     * @param {string} [newLocation]  The new event location
	     * @param {string} [newNotes]  The new event notes
	     * @param {Date} [newStartDate]  The new event start date
	     * @param {Date} [newEndDate]  The new event end date
	     * @param {CalendarOptions} [filterOptions] Event Options, see `getCalendarOptions`
	     * @param {CalendarOptions} [newOptions]  New event options, see `getCalendarOptions`
	     * @return Returns a Promise
	     */
	    Calendar.modifyEventWithOptions = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate, filterOptions, newOptions) { return; };
	    /**
	     * Delete an event.
	     *
	     * @param {string} [title]  The event title
	     * @param {string} [location]  The event location
	     * @param {string} [notes]  The event notes
	     * @param {Date} [startDate]  The event start date
	     * @param {Date} [endDate]  The event end date
	     * @return Returns a Promise
	     */
	    Calendar.deleteEvent = function (title, location, notes, startDate, endDate) { return; };
	    /**
	     * Delete an event from the specified Calendar. (iOS only)
	     *
	     * @param {string} [title]  The event title
	     * @param {string} [location]  The event location
	     * @param {string} [notes]  The event notes
	     * @param {Date} [startDate]  The event start date
	     * @param {Date} [endDate]  The event end date
	     * @param {string} calendarName
	     * @return Returns a Promise
	     */
	    Calendar.deleteEventFromNamedCalendar = function (title, location, notes, startDate, endDate, calendarName) { return; };
	    /**
	     * Open the calendar at the specified date.
	     * @param {Date} date The date you want to open the calendar on
	     * @return {Promise<any>} Promise returns a promise
	     */
	    Calendar.openCalendar = function (date) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "hasReadWritePermission", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "hasReadPermission", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "hasWritePermission", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "requestWritePermission", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "requestReadPermission", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "requestReadWritePermission", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "createCalendar", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "deleteCalendar", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], Calendar, "getCalendarOptions", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "createEvent", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "createEventWithOptions", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "createEventInteractively", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "createEventInteractivelyWithOptions", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "findEvent", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "findEventWithOptions", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], Calendar, "listEventsInRange", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "listCalendars", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS']
	        })
	    ], Calendar, "findAllEventsInNamedCalendar", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS']
	        })
	    ], Calendar, "modifyEvent", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS']
	        })
	    ], Calendar, "modifyEventWithOptions", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "deleteEvent", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS']
	        })
	    ], Calendar, "deleteEventFromNamedCalendar", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Calendar, "openCalendar", null);
	    Calendar = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Calendar',
	            plugin: 'cordova-plugin-calendar',
	            pluginRef: 'plugins.calendar',
	            repo: 'https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin',
	            platforms: ['Android', 'iOS']
	        })
	    ], Calendar);
	    return Calendar;
	}());
	exports.Calendar = Calendar;
	//# sourceMappingURL=calendar.js.map

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name CallNumber
	 * @description
	 * Call a number directly from your Cordova/Ionic application.
	 *
	 * @usage
	 * ```
	 * import {CallNumber} from 'ionic-native';
	 *
	 * CallNumber.callNumber(18001010101, true)
	 *   .then(() => console.log('Launched dialer!'))
	 *   .catch(() => console.log('Error launching dialer'));
	 *
	 * ```
	 */
	var CallNumber = (function () {
	    function CallNumber() {
	    }
	    /**
	     * Calls a phone number
	     * @param numberToCall {string} The phone number to call as a string
	     * @param bypassAppChooser {boolean} Set to true to bypass the app chooser and go directly to dialer
	     * @return {Promise<any>}
	     */
	    CallNumber.callNumber = function (numberToCall, bypassAppChooser) {
	        return;
	    };
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], CallNumber, "callNumber", null);
	    CallNumber = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'CallNumber',
	            plugin: 'call-number',
	            pluginRef: 'plugins.CallNumber',
	            repo: 'https://github.com/Rohfosho/CordovaCallNumberPlugin',
	            platforms: ['iOS', 'Android']
	        })
	    ], CallNumber);
	    return CallNumber;
	}());
	exports.CallNumber = CallNumber;
	//# sourceMappingURL=call-number.js.map

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Camera
	 * @description
	 * Take a photo or capture video.
	 *
	 * Requires {@link module:driftyco/ionic-native} and the Cordova plugin: `cordova-plugin-camera`. For more info, please see the [Cordova Camera Plugin Docs](https://github.com/apache/cordova-plugin-camera).
	 *
	 * @usage
	 * ```typescript
	 * import { Camera } from 'ionic-native';
	 *
	 *
	 * Camera.getPicture(options).then((imageData) => {
	 *  // imageData is either a base64 encoded string or a file URI
	 *  // If it's base64:
	 *  let base64Image = 'data:image/jpeg;base64,' + imageData;
	 * }, (err) => {
	 *  // Handle error
	 * });
	 * ```
	 * @interfaces
	 * CameraOptions
	 * CameraPopoverOptions
	 */
	var Camera = (function () {
	    function Camera() {
	    }
	    /**
	     * Take a picture or video, or load one from the library.
	     * @param {CameraOptions?} options optional. Options that you want to pass to the camera. Encoding type, quality, etc. Platform-specific quirks are described in the [Cordova plugin docs](https://github.com/apache/cordova-plugin-camera#cameraoptions-errata-).
	     * @returns {Promise<any>} Returns a Promise that resolves with Base64 encoding of the image data, or the image file URI, depending on cameraOptions, otherwise rejects with an error.
	     */
	    Camera.getPicture = function (options) { return; };
	    /**
	     * Remove intermediate image files that are kept in temporary storage after calling camera.getPicture.
	     * Applies only when the value of Camera.sourceType equals Camera.PictureSourceType.CAMERA and the Camera.destinationType equals Camera.DestinationType.FILE_URI.
	     * @returns {Promise<any>}
	     */
	    Camera.cleanup = function () { return; };
	    ;
	    /**
	     * @private
	     * @enum {number}
	     */
	    Camera.DestinationType = {
	        /** Return base64 encoded string. DATA_URL can be very memory intensive and cause app crashes or out of memory errors. Use FILE_URI or NATIVE_URI if possible */
	        DATA_URL: 0,
	        /** Return file uri (content://media/external/images/media/2 for Android) */
	        FILE_URI: 1,
	        /** Return native uri (eg. asset-library://... for iOS) */
	        NATIVE_URI: 2
	    };
	    /**
	     * @private
	     * @enum {number}
	     */
	    Camera.EncodingType = {
	        /** Return JPEG encoded image */
	        JPEG: 0,
	        /** Return PNG encoded image */
	        PNG: 1
	    };
	    /**
	     * @private
	     * @enum {number}
	     */
	    Camera.MediaType = {
	        /** Allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType */
	        PICTURE: 0,
	        /** Allow selection of video only, ONLY RETURNS URL */
	        VIDEO: 1,
	        /** Allow selection from all media types */
	        ALLMEDIA: 2
	    };
	    /**
	     * @private
	     * @enum {number}
	     */
	    Camera.PictureSourceType = {
	        /** Choose image from picture library (same as SAVEDPHOTOALBUM for Android) */
	        PHOTOLIBRARY: 0,
	        /** Take picture from camera */
	        CAMERA: 1,
	        /** Choose image from picture library (same as PHOTOLIBRARY for Android) */
	        SAVEDPHOTOALBUM: 2
	    };
	    /**
	     * @private
	     * Matches iOS UIPopoverArrowDirection constants to specify arrow location on popover.
	     * @enum {number}
	     */
	    Camera.PopoverArrowDirection = {
	        ARROW_UP: 1,
	        ARROW_DOWN: 2,
	        ARROW_LEFT: 4,
	        ARROW_RIGHT: 8,
	        ARROW_ANY: 15
	    };
	    /**
	     * @private
	     * @enum {number}
	     */
	    Camera.Direction = {
	        /** Use the back-facing camera */
	        BACK: 0,
	        /** Use the front-facing camera */
	        FRONT: 1
	    };
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Camera, "getPicture", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS']
	        })
	    ], Camera, "cleanup", null);
	    Camera = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Camera',
	            plugin: 'cordova-plugin-camera',
	            pluginRef: 'navigator.camera',
	            repo: 'https://github.com/apache/cordova-plugin-camera',
	            platforms: ['Android', 'BlackBerry', 'Browser', 'Firefox', 'FireOS', 'iOS', 'Windows', 'Windows Phone 8', 'Ubuntu']
	        })
	    ], Camera);
	    return Camera;
	}());
	exports.Camera = Camera;
	//# sourceMappingURL=camera.js.map

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @beta
	 * @name CameraPreview
	 * @description
	 * Showing camera preview in HTML
	 *
	 * For more info, please see the [Cordova Camera Preview Plugin Docs](https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview).
	 *
	 * @usage
	 * ```
	 * import { CameraPreview, CameraPreviewRect } from 'ionic-native';
	 *
	 * // camera options (Size and location)
	 * let cameraRect: CameraPreviewRect = {
	 *   x: 100,
	 *   y: 100,
	 *   width: 200,
	 *   height: 200
	 * };
	 *
	 *
	 * // start camera
	 * CameraPreview.startCamera(
	 *   cameraRect, // position and size of preview
	 *   'front', // default camera
	 *   true, // tap to take picture
	 *   false, // disable drag
	 *   false, // keep preview in front. Set to true (back of the screen) to apply overlaying elements
	 *   1 // set the preview alpha
	 * );
	 *
	 * // Set the handler to run every time we take a picture
	 * CameraPreview.setOnPictureTakenHandler().subscribe((result) => {
	 *   console.log(result);
	 *   // do something with the result
	 * });
	 *
	 *
	 * // take a picture
	 * CameraPreview.takePicture({
	 *   maxWidth: 640,
	 *   maxHeight: 640
	 * });
	 *
	 * // Switch camera
	 * CameraPreview.switchCamera();
	 *
	 * // set color effect to negative
	 * CameraPreview.setColorEffect('negative');
	 *
	 * // Stop the camera preview
	 * CameraPreview.stopCamera();
	 *
	 * ```
	 *
	 * @interfaces
	 * CameraPreviewRect
	 * CameraPreviewSize
	 */
	var CameraPreview = (function () {
	    function CameraPreview() {
	    }
	    /**
	     * Starts the camera preview instance.
	     * @param {CameraPreviewRect} position and size of the preview window - {x: number, y: number, width: number, height: number}
	     * @param {string} which camera to use - 'front' | 'back'
	     * @param {boolean} enable tap to take picture
	     * @param {boolean} enable preview box drag across the screen
	     * @param {boolean} send preview box to the back of the webview
	     * @param {number} alpha of the preview box
	     */
	    CameraPreview.startCamera = function (rect, defaultCamera, tapEnabled, dragEnabled, toBack, alpha) { };
	    /**
	     * Stops the camera preview instance.
	     */
	    CameraPreview.stopCamera = function () { };
	    /**
	     * Take the picture, the parameter size is optional
	     * @param {CameraPreviewSize} optional - size of the picture to take
	     */
	    CameraPreview.takePicture = function (size) { };
	    /**
	     * Register a callback function that receives the original picture and the image captured from the preview box.
	     * @returns {Observable<any>}
	     */
	    CameraPreview.setOnPictureTakenHandler = function () { return; };
	    /**
	     * Switch from the rear camera and front camera, if available.
	     */
	    CameraPreview.switchCamera = function () { };
	    /**
	     * Show the camera preview box.
	     */
	    CameraPreview.show = function () { };
	    /**
	     * Hide the camera preview box.
	     */
	    CameraPreview.hide = function () { };
	    /**
	     * Disables the camera preview
	     */
	    CameraPreview.disable = function () { };
	    /**
	     * Set camera color effect.
	     */
	    CameraPreview.setColorEffect = function (effect) { };
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], CameraPreview, "startCamera", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], CameraPreview, "stopCamera", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], CameraPreview, "takePicture", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true
	        })
	    ], CameraPreview, "setOnPictureTakenHandler", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], CameraPreview, "switchCamera", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], CameraPreview, "show", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], CameraPreview, "hide", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], CameraPreview, "disable", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], CameraPreview, "setColorEffect", null);
	    CameraPreview = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'CameraPreview',
	            plugin: 'cordova-plugin-camera-preview',
	            pluginRef: 'cordova.plugins.camerapreview',
	            repo: 'https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview',
	            platforms: ['Android', 'iOS']
	        })
	    ], CameraPreview);
	    return CameraPreview;
	}());
	exports.CameraPreview = CameraPreview;
	//# sourceMappingURL=camera-preview.js.map

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name CardIO
	 * @description
	 * @usage
	 * ```
	 * import { CardIO } from 'ionic-native';
	 *
	 *
	 * CardIO.canScan()
	 *   .then(
	 *     (res: boolean) => {
	 *       if(res){
	 *         let options = {
	 *           requireExpiry: true,
	 *           requireCCV: false,
	 *           requirePostalCode: false
	 *         };
	 *         CardIO.scan(options);
	 *       }
	 *     }
	 *   );
	 * ```
	 * @interfaces
	 * CardIOOptions
	 * CardIOResponse
	 */
	var CardIO = (function () {
	    function CardIO() {
	    }
	    /**
	     * Check whether card scanning is currently available. (May vary by
	     * device, OS version, network connectivity, etc.)
	     *
	     * @returns {Promise<boolean>}
	     */
	    CardIO.canScan = function () { return; };
	    /**
	     * Scan a credit card with card.io.
	     * @param {CardIOOptions} options Options for configuring the plugin
	     * @returns {Promise<any>}
	     */
	    CardIO.scan = function (options) { return; };
	    /**
	     * Retrieve the version of the card.io library. Useful when contacting support.
	     * @returns {Promise<string>}
	     */
	    CardIO.version = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], CardIO, "canScan", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], CardIO, "scan", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], CardIO, "version", null);
	    CardIO = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'CardIO',
	            plugin: 'card.io.cordova.mobilesdk',
	            pluginRef: 'CardIO',
	            repo: 'https://github.com/card-io/card.io-Cordova-Plugin',
	            platforms: ['iOS', 'Android']
	        })
	    ], CardIO);
	    return CardIO;
	}());
	exports.CardIO = CardIO;
	//# sourceMappingURL=card-io.js.map

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Clipboard
	 * @description
	 * Clipboard management plugin for Cordova that supports iOS, Android, and Windows Phone 8.
	 *
	 * Requires Cordova plugin: https://github.com/VersoSolutions/CordovaClipboard
	 * For more info, please see the [Clipboard plugin docs](https://github.com/VersoSolutions/CordovaClipboard.git).
	 *
	 * @usage
	 * ```typescript
	 * import { Clipboard } from 'ionic-native';
	 *
	 *
	 * Clipboard.copy('Hello world');
	 *
	 * Clipboard.paste().then(
	 *    (resolve: string) => {
	 *     alert(resolve);
	 *     },
	 *     (reject: string) => {
	 *     alert('Error: ' + reject);
	 *     }
	 *     );
	 * );
	 * ```
	 */
	var Clipboard = (function () {
	    function Clipboard() {
	    }
	    /**
	     * Copies the given text
	     * @param {string} text Text that gets copied on the system clipboard
	     * @returns {Promise<any>} Returns a promise after the text has been copied
	     */
	    Clipboard.copy = function (text) { return; };
	    /**
	     * Pastes the text stored in clipboard
	     * @returns {Promise<any>} Returns a promise after the text has been pasted
	     */
	    Clipboard.paste = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Clipboard, "copy", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Clipboard, "paste", null);
	    Clipboard = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Clipboard',
	            plugin: 'https://github.com/VersoSolutions/CordovaClipboard.git',
	            pluginRef: 'cordova.plugins.clipboard',
	            repo: 'https://github.com/VersoSolutions/CordovaClipboard',
	            platforms: ['Amazon Fire OS', 'iOS', 'Android', 'BlackBerry 10', 'Windows Phone 7', 'Windows Phone 8', 'Windows', 'Firefox OS', 'Browser']
	        })
	    ], Clipboard);
	    return Clipboard;
	}());
	exports.Clipboard = Clipboard;
	//# sourceMappingURL=clipboard.js.map

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * Defines the possible result statuses of the window.codePush.sync operation.
	 */
	(function (SyncStatus) {
	    /**
	     * The application is up to date.
	     */
	    SyncStatus[SyncStatus["UP_TO_DATE"] = 0] = "UP_TO_DATE";
	    /**
	     * An update is available, it has been downloaded, unzipped and copied to the deployment folder.
	     * After the completion of the callback invoked with SyncStatus.UPDATE_INSTALLED, the application will be reloaded with the updated code and resources.
	     */
	    SyncStatus[SyncStatus["UPDATE_INSTALLED"] = 1] = "UPDATE_INSTALLED";
	    /**
	     * An optional update is available, but the user declined to install it. The update was not downloaded.
	     */
	    SyncStatus[SyncStatus["UPDATE_IGNORED"] = 2] = "UPDATE_IGNORED";
	    /**
	     * An error happened during the sync operation. This might be an error while communicating with the server, downloading or unziping the update.
	     * The console logs should contain more information about what happened. No update has been applied in this case.
	     */
	    SyncStatus[SyncStatus["ERROR"] = 3] = "ERROR";
	    /**
	     * There is an ongoing sync in progress, so this attempt to sync has been aborted.
	     */
	    SyncStatus[SyncStatus["IN_PROGRESS"] = 4] = "IN_PROGRESS";
	    /**
	     * Intermediate status - the plugin is about to check for updates.
	     */
	    SyncStatus[SyncStatus["CHECKING_FOR_UPDATE"] = 5] = "CHECKING_FOR_UPDATE";
	    /**
	     * Intermediate status - a user dialog is about to be displayed. This status will be reported only if user interaction is enabled.
	     */
	    SyncStatus[SyncStatus["AWAITING_USER_ACTION"] = 6] = "AWAITING_USER_ACTION";
	    /**
	     * Intermediate status - the update package is about to be downloaded.
	     */
	    SyncStatus[SyncStatus["DOWNLOADING_PACKAGE"] = 7] = "DOWNLOADING_PACKAGE";
	    /**
	     * Intermediate status - the update package is about to be installed.
	     */
	    SyncStatus[SyncStatus["INSTALLING_UPDATE"] = 8] = "INSTALLING_UPDATE";
	})(exports.SyncStatus || (exports.SyncStatus = {}));
	var SyncStatus = exports.SyncStatus;
	/**
	 * Defines the available install modes for updates.
	 */
	(function (InstallMode) {
	    /**
	     * The update will be applied to the running application immediately. The application will be reloaded with the new content immediately.
	     */
	    InstallMode[InstallMode["IMMEDIATE"] = 0] = "IMMEDIATE";
	    /**
	     * The update is downloaded but not installed immediately. The new content will be available the next time the application is started.
	     */
	    InstallMode[InstallMode["ON_NEXT_RESTART"] = 1] = "ON_NEXT_RESTART";
	    /**
	     * The udpate is downloaded but not installed immediately. The new content will be available the next time the application is resumed or restarted, whichever event happends first.
	     */
	    InstallMode[InstallMode["ON_NEXT_RESUME"] = 2] = "ON_NEXT_RESUME";
	})(exports.InstallMode || (exports.InstallMode = {}));
	var InstallMode = exports.InstallMode;
	/**
	 * @name CodePush
	 * @description
	 * CodePush plugin for Cordova by Microsoft that supports iOS and Android.
	 *
	 * For more info, please see https://github.com/ksachdeva/ionic2-code-push-example
	 *
	 * @usage
	 * ```typescript
	 * import { CodePush } from 'ionic-native';
	 *
	 * // note - mostly error & completed methods of observable will not fire
	 * // as syncStatus will contain the current state of the update
	 * CodePush.sync().subscribe((syncStatus) => console.log(syncStatus));
	 *
	 * const downloadProgress = (progress) => { console.log(`Downloaded ${progress.receivedBytes} of ${progress.totalBytes}`); }
	 * CodePush.sync({}, downloadProgress).subscribe((syncStatus) => console.log(syncStatus));
	 *
	 * ```
	 */
	var CodePush = (function () {
	    function CodePush() {
	    }
	    /**
	     * Get the current package information.
	     *
	     * @param packageSuccess Callback invoked with the currently deployed package information.
	     * @param packageError Optional callback invoked in case of an error.
	     * @returns {Promise<ILocalPackage>}
	     */
	    CodePush.getCurrentPackage = function () {
	        return;
	    };
	    /**
	     * Gets the pending package information, if any. A pending package is one that has been installed but the application still runs the old code.
	     * This happends only after a package has been installed using ON_NEXT_RESTART or ON_NEXT_RESUME mode, but the application was not restarted/resumed yet.
	     * @returns {Promise<ILocalPackage>}
	     */
	    CodePush.getPendingPackage = function () {
	        return;
	    };
	    /**
	     * Checks with the CodePush server if an update package is available for download.
	     *
	     * @param querySuccess Callback invoked in case of a successful response from the server.
	     *                     The callback takes one RemotePackage parameter. A non-null package is a valid update.
	     *                     A null package means the application is up to date for the current native application version.
	     * @param queryError Optional callback invoked in case of an error.
	     * @param deploymentKey Optional deployment key that overrides the config.xml setting.
	     * @returns {Promise<IRemotePackage>}
	     */
	    CodePush.checkForUpdate = function (deploymentKey) {
	        return;
	    };
	    /**
	     * Notifies the plugin that the update operation succeeded and that the application is ready.
	     * Calling this function is required on the first run after an update. On every subsequent application run, calling this function is a noop.
	     * If using sync API, calling this function is not required since sync calls it internally.
	     *
	     * @param notifySucceeded Optional callback invoked if the plugin was successfully notified.
	     * @param notifyFailed Optional callback invoked in case of an error during notifying the plugin.
	     * @returns {Promise<void>}
	     */
	    CodePush.notifyApplicationReady = function () {
	        return;
	    };
	    /**
	     * Reloads the application. If there is a pending update package installed using ON_NEXT_RESTART or ON_NEXT_RESUME modes, the update
	     * will be immediately visible to the user. Otherwise, calling this function will simply reload the current version of the application.
	     * @returns {Promise<void>}
	     */
	    CodePush.restartApplication = function () {
	        return;
	    };
	    /**
	     * Convenience method for installing updates in one method call.
	     * This method is provided for simplicity, and its behavior can be replicated by using window.codePush.checkForUpdate(), RemotePackage's download() and LocalPackage's install() methods.
	     *
	     * The algorithm of this method is the following:
	     * - Checks for an update on the CodePush server.
	     * - If an update is available
	     *         - If the update is mandatory and the alertMessage is set in options, the user will be informed that the application will be updated to the latest version.
	     *           The update package will then be downloaded and applied.
	     *         - If the update is not mandatory and the confirmMessage is set in options, the user will be asked if they want to update to the latest version.
	     *           If they decline, the syncCallback will be invoked with SyncStatus.UPDATE_IGNORED.
	     *         - Otherwise, the update package will be downloaded and applied with no user interaction.
	     * - If no update is available on the server, or if a previously rolled back update is available and the ignoreFailedUpdates is set to true, the syncCallback will be invoked with the SyncStatus.UP_TO_DATE.
	     * - If an error occurs during checking for update, downloading or installing it, the syncCallback will be invoked with the SyncStatus.ERROR.
	     *
	     * @param syncCallback Optional callback to be called with the status of the sync operation.
	     * @param syncOptions Optional SyncOptions parameter configuring the behavior of the sync operation.
	     * @param downloadProgress Optional callback invoked during the download process. It is called several times with one DownloadProgress parameter.
	     * @returns {Observable<SyncStatus>}
	     *
	     */
	    CodePush.sync = function (syncOptions, downloadProgress) {
	        return;
	    };
	    __decorate([
	        plugin_1.Cordova()
	    ], CodePush, "getCurrentPackage", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], CodePush, "getPendingPackage", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], CodePush, "checkForUpdate", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], CodePush, "notifyApplicationReady", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], CodePush, "restartApplication", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            successIndex: 0,
	            errorIndex: 3 // we don't need this, so we set it to a value higher than # of args
	        })
	    ], CodePush, "sync", null);
	    CodePush = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'CodePush',
	            plugin: 'cordova-plugin-code-push',
	            pluginRef: 'codePush',
	            repo: 'https://github.com/Microsoft/cordova-plugin-code-push',
	            platforms: ['Android', 'iOS']
	        })
	    ], CodePush);
	    return CodePush;
	}());
	exports.CodePush = CodePush;
	//# sourceMappingURL=code-push.js.map

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @private
	 */
	var Contact = (function () {
	    function Contact() {
	        this._objectInstance = navigator.contacts.create();
	    }
	    Contact.prototype.clone = function () {
	        var newContact = new Contact();
	        for (var prop in this) {
	            if (prop === 'id')
	                return;
	            newContact[prop] = this[prop];
	        }
	        return newContact;
	    };
	    Contact.prototype.remove = function () { return; };
	    Contact.prototype.save = function () {
	        var _this = this;
	        return plugin_1.getPromise(function (resolve, reject) {
	            _this._objectInstance.save(function (contact) {
	                _this._objectInstance = contact;
	                resolve(_this);
	            }, reject);
	        });
	    };
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "id", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "displayName", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "name", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "nickname", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "phoneNumbers", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "emails", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "addresses", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "ims", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "organizations", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "birthday", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "note", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "photos", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "categories", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], Contact.prototype, "urls", void 0);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], Contact.prototype, "remove", null);
	    return Contact;
	}());
	exports.Contact = Contact;
	/**
	 * @private
	 */
	var ContactName = (function () {
	    function ContactName(formatted, familyName, givenName, middleName, honorificPrefix, honorificSuffix) {
	        this.formatted = formatted;
	        this.familyName = familyName;
	        this.givenName = givenName;
	        this.middleName = middleName;
	        this.honorificPrefix = honorificPrefix;
	        this.honorificSuffix = honorificSuffix;
	    }
	    return ContactName;
	}());
	exports.ContactName = ContactName;
	/**
	 * @private
	 */
	var ContactField = (function () {
	    function ContactField(type, value, pref) {
	        this.type = type;
	        this.value = value;
	        this.pref = pref;
	    }
	    return ContactField;
	}());
	exports.ContactField = ContactField;
	/**
	 * @private
	 */
	var ContactAddress = (function () {
	    function ContactAddress(pref, type, formatted, streetAddress, locality, region, postalCode, country) {
	        this.pref = pref;
	        this.type = type;
	        this.formatted = formatted;
	        this.streetAddress = streetAddress;
	        this.locality = locality;
	        this.region = region;
	        this.postalCode = postalCode;
	        this.country = country;
	    }
	    return ContactAddress;
	}());
	exports.ContactAddress = ContactAddress;
	/**
	 * @private
	 */
	var ContactOrganization = (function () {
	    function ContactOrganization(type, name, department, title, pref) {
	        this.type = type;
	        this.name = name;
	        this.department = department;
	        this.title = title;
	        this.pref = pref;
	    }
	    return ContactOrganization;
	}());
	exports.ContactOrganization = ContactOrganization;
	/**
	 * @private
	 */
	var ContactFindOptions = (function () {
	    function ContactFindOptions(filter, multiple, desiredFields, hasPhoneNumber) {
	        this.filter = filter;
	        this.multiple = multiple;
	        this.desiredFields = desiredFields;
	        this.hasPhoneNumber = hasPhoneNumber;
	    }
	    return ContactFindOptions;
	}());
	exports.ContactFindOptions = ContactFindOptions;
	/**
	 * @name Contacts
	 * @description
	 * Access and manage Contacts on the device.
	 *
	 * @usage
	 *
	 * ```typescript
	 * import { Contacts, Contact, ContactField, ContactName } from 'ionic-native';
	 *
	 *
	 * let contact: Contact = Contacts.create();
	 *
	 * contact.name = new ContactName(null, 'Smith', 'John');
	 * contact.phoneNumbers = [new ContactField('mobile', '6471234567')];
	 * contact.save().then(
	 *   () => console.log('Contact saved!', contact),
	 *   (error: any) => console.error('Error saving contact.', error)
	 * );
	 *
	 * ```
	 * @interfaces
	 * IContactProperties
	 * IContactError
	 * IContactName
	 * IContactField
	 * IContactAddress
	 * IContactOrganization
	 * IContactFindOptions
	 */
	var Contacts = (function () {
	    function Contacts() {
	    }
	    /**
	     * Create a single contact.
	     * @returns {Contact} Returns a Contact object
	     */
	    Contacts.create = function () {
	        return new Contact();
	    };
	    /**
	     * Search for contacts in the Contacts list.
	     * @param fields {ContactFieldType[]}  Contact fields to be used as a search qualifier
	     * @param options {IContactFindOptions} Optional options for the query
	     * @returns {Promise<Contact[]>} Returns a Promise that resolves with the search results (an array of Contact objects)
	     */
	    Contacts.find = function (fields, options) {
	        return plugin_1.getPromise(function (resolve, reject) {
	            navigator.contacts.find(fields, function (contacts) {
	                resolve(contacts.map(processContact));
	            }, reject, options);
	        });
	    };
	    /**
	     * Select a single Contact.
	     * @returns {Promise<Contact>} Returns a Promise that resolves with the selected Contact
	     */
	    Contacts.pickContact = function () {
	        return plugin_1.getPromise(function (resolve, reject) {
	            navigator.contacts.pickContact(function (contact) { return resolve(processContact(contact)); }, reject);
	        });
	    };
	    Contacts = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Contacts',
	            plugin: 'cordova-plugin-contacts',
	            pluginRef: 'navigator.contacts',
	            repo: 'https://github.com/apache/cordova-plugin-contacts'
	        })
	    ], Contacts);
	    return Contacts;
	}());
	exports.Contacts = Contacts;
	/**
	 * @private
	 */
	function processContact(contact) {
	    var newContact = new Contact();
	    for (var prop in contact) {
	        if (typeof contact[prop] === 'function')
	            continue;
	        newContact[prop] = contact[prop];
	    }
	    return newContact;
	}
	//# sourceMappingURL=contacts.js.map

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Couchbase Lite
	 * @description
	 * Plugin to install Couchbase Lite in your PhoneGap app on iOS or Android
	 *
	 * @usage
	 * ```
	 * import { CouchbaseLite } from 'ionic-native';
	 *
	 * CouchbaseLite.getURL()
	 *   .then((url: any) => console.log(url))
	 *   .catch((error: any) => console.log(error));
	 *
	 * ```
	 */
	var CouchbaseLite = (function () {
	    function CouchbaseLite() {
	    }
	    /**
	     * Get the database url
	     * @return {Promise<any>} Returns a promise that resolves with the local database url
	     */
	    CouchbaseLite.getURL = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            callbackStyle: 'node'
	        })
	    ], CouchbaseLite, "getURL", null);
	    CouchbaseLite = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'CouchbaseLite',
	            plugin: 'https://github.com/couchbaselabs/Couchbase-Lite-PhoneGap-Plugin',
	            pluginRef: 'cblite',
	            repo: 'https://github.com/couchbaselabs/Couchbase-Lite-PhoneGap-Plugin',
	        })
	    ], CouchbaseLite);
	    return CouchbaseLite;
	}());
	exports.CouchbaseLite = CouchbaseLite;
	//# sourceMappingURL=couchbase-lite.js.map

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Crop
	 * @description Crops images
	 * @usage
	 * ```
	 * import {Crop} from 'ionic-native';
	 *
	 * ...
	 *
	 * Crop.crop('path/to/image.jpg', {quality: 75})
	 *   .then(
	 *     newImage => console.log("new image path is: " + newImage),
	 *     error => console.error("Error cropping image", error)
	 *   );
	 * ```
	 */
	var Crop = (function () {
	    function Crop() {
	    }
	    /**
	     * Crops an image
	     * @param pathToImage
	     * @param options
	     * @returns {Promise<string>} Returns a promise that resolves with the new image path, or rejects if failed to crop.
	     */
	    Crop.crop = function (pathToImage, options) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Crop, "crop", null);
	    Crop = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Crop',
	            plugin: 'cordova-plugin-crop',
	            pluginRef: 'plugins',
	            repo: 'https://github.com/jeduan/cordova-plugin-crop'
	        })
	    ], Crop);
	    return Crop;
	}());
	exports.Crop = Crop;
	//# sourceMappingURL=crop.js.map

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Date Picker
	 * @description
	 * The DatePicker plugin allows the user to fetch date or time using native dialogs.
	 *
	 * @usage
	 * ```typescript
	 * import { DatePicker } from 'ionic-native';
	 *
	 *
	 * DatePicker.show({
	 *   date: new Date(),
	 *   mode: 'date'
	 * }).then(
	 *   date => console.log('Got date: ', date),
	 *   err => console.log('Error occurred while getting date: ', err)
	 * );
	 * ```
	 * @interfaces
	 * DatePickerOptions
	 */
	var DatePicker = (function () {
	    function DatePicker() {
	    }
	    /**
	     * Shows the date and/or time picker dialog(s)
	     * @param {DatePickerOptions} options Options for the date picker.
	     * @returns {Promise<Date>} Returns a promise that resolves with the picked date and/or time, or rejects with an error.
	     */
	    DatePicker.show = function (options) {
	        return;
	    };
	    /**
	     * @private
	     */
	    DatePicker.ANDROID_THEMES = {
	        THEME_TRADITIONAL: 1,
	        THEME_HOLO_DARK: 2,
	        THEME_HOLO_LIGHT: 3,
	        THEME_DEVICE_DEFAULT_DARK: 4,
	        THEME_DEVICE_DEFAULT_LIGHT: 5
	    };
	    __decorate([
	        plugin_1.Cordova()
	    ], DatePicker, "show", null);
	    DatePicker = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'DatePicker',
	            plugin: 'cordova-plugin-datepicker',
	            pluginRef: 'datePicker',
	            repo: 'https://github.com/VitaliiBlagodir/cordova-plugin-datepicker',
	            platforms: ['Android', 'iOS', 'Windows']
	        })
	    ], DatePicker);
	    return DatePicker;
	}());
	exports.DatePicker = DatePicker;
	//# sourceMappingURL=datepicker.js.map

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name DB Meter
	 * @description This plugin defines a global DBMeter object, which permits to get the decibel values from the microphone.
	 * @usage
	 * ```typescript
	 * import { DBMeter } from 'ionic-native';
	 *
	 *
	 * // Start listening
	 * let subscription = DBMeter.start().subscribe(
	 *   data => console.log(data)
	 * );
	 *
	 * // Check if we are listening
	 * DBMeter.isListening().then(
	 *   (isListening: boolean) => console.log(isListening)
	 * );
	 *
	 * // Stop listening
	 * subscription.unsubscribe();
	 *
	 * // Delete DBMeter instance from memory
	 * DBMeter.delete().then(
	 *   () => console.log('Deleted DB Meter instance'),
	 *   error => console.log('Error occurred while deleting DB Meter instance')
	 * );
	 * ```
	 */
	var DBMeter = (function () {
	    function DBMeter() {
	    }
	    /**
	     * Starts listening
	     * @returns {Observable<any>} Returns an observable. Subscribe to start listening. Unsubscribe to stop listening.
	     */
	    DBMeter.start = function () { return; };
	    /**
	     * Stops listening
	     * @private
	     */
	    DBMeter.stop = function () { return; };
	    /**
	     * Check if the DB Meter is listening
	     * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that tells us whether the DB meter is listening
	     */
	    DBMeter.isListening = function () { return; };
	    /**
	     * Delete the DB Meter instance
	     * @returns {Promise<any>} Returns a promise that will resolve if the instance has been deleted, and rejects if errors occur.
	     */
	    DBMeter.delete = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'stop'
	        })
	    ], DBMeter, "start", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], DBMeter, "stop", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], DBMeter, "isListening", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], DBMeter, "delete", null);
	    DBMeter = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'DBMeter',
	            plugin: 'cordova-plugin-dbmeter',
	            pluginRef: 'DBMeter',
	            repo: 'https://github.com/akofman/cordova-plugin-dbmeter',
	            platforms: ['iOS', 'Android']
	        })
	    ], DBMeter);
	    return DBMeter;
	}());
	exports.DBMeter = DBMeter;
	//# sourceMappingURL=dbmeter.js.map

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Ionic Deeplinks
	 * @description This plugin handles deeplinks on iOS and Android for both custom URL scheme links
	 * and Universal App Links.
	 *
	 * @usage
	 * ```typescript
	 * import { Deeplinks } from 'ionic-native';
	 *
	 * Deeplinks.route({
	      '/about-us': AboutPage,
	      '/universal-links-test': AboutPage,
	      '/products/:productId': ProductPage
	    }).subscribe((match) => {
	      // match.$route - the route we matched, which is the matched entry from the arguments to route()
	      // match.$args - the args passed in the link
	      // match.$link - the full link data
	      console.log('Successfully matched route', match);
	    }, (nomatch) => {
	      // nomatch.$link - the full link data
	      console.error('Got a deeplink that didn\'t match', nomatch);
	    });
	 * ```
	 *
	 * Alternatively, if you're using Ionic 2, there's a convenience method that takes a reference to a `NavController` and handles
	 * the actual navigation for you:
	 *
	 * ```typescript
	 * Deeplinks.routeWithNavController(this.navController, {
	    '/about-us': AboutPage,
	    '/products/:productId': ProductPage
	  }).subscribe((match) => {
	      // match.$route - the route we matched, which is the matched entry from the arguments to route()
	      // match.$args - the args passed in the link
	      // match.$link - the full link data
	      console.log('Successfully matched route', match);
	    }, (nomatch) => {
	      // nomatch.$link - the full link data
	      console.error('Got a deeplink that didn\'t match', nomatch);
	    });
	 * ```
	 *
	 * See the [Ionic 2 Deeplinks Demo](https://github.com/driftyco/ionic2-deeplinks-demo/blob/master/app/app.ts) for an example of how to
	 * retrieve the `NavController` reference at runtime.
	 *
	 * @interfaces
	 * DeeplinkMatch
	 */
	var Deeplinks = (function () {
	    function Deeplinks() {
	    }
	    /**
	     * Define a set of paths to match against incoming deeplinks.
	     *
	     * @param {paths} Define a set of paths to match against incoming deeplinks.
	     * paths takes an object of the form { 'path': data }. If a deeplink
	     * matches the path, the resulting path-data pair will be returned in the
	     * promise result which you can then use to navigate in the app as you see fit.
	     * @returns {Observable<DeeplinkMatch>} Returns an Observable that is called each time a deeplink comes through, and
	     * errors if a deeplink comes through that does not match a given path.
	     */
	    Deeplinks.route = function (paths) { return; };
	    /**
	     *
	     * This is a convenience version of `route` that takes a reference to a NavController
	     * from Ionic 2, or a custom class that conforms to this protocol:
	     *
	     * NavController.push = function(View, Params){}
	     *
	     * This handler will automatically navigate when a route matches. If you need finer-grained
	     * control over the behavior of a matching deeplink, use the plain `route` method.
	     *
	     * @param {paths} Define a set of paths to match against incoming deeplinks.
	     * paths takes an object of the form { 'path': data }. If a deeplink
	     * matches the path, the resulting path-data pair will be returned in the
	     * promise result which you can then use to navigate in the app as you see fit.
	     *
	     * @returns {Observable<DeeplinkMatch>} Returns an Observable that resolves each time a deeplink comes through, and
	     * errors if a deeplink comes through that does not match a given path.
	     */
	    Deeplinks.routeWithNavController = function (navController, paths) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            observable: true
	        })
	    ], Deeplinks, "route", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true
	        })
	    ], Deeplinks, "routeWithNavController", null);
	    Deeplinks = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Deeplinks',
	            plugin: 'ionic-plugin-deeplinks',
	            pluginRef: 'IonicDeeplink',
	            repo: 'https://github.com/driftyco/ionic-plugin-deeplinks',
	            platforms: ['iOS', 'Android'],
	            install: 'ionic plugin add ionic-plugin-deeplinks --variable URL_SCHEME=myapp --variable DEEPLINK_SCHEME=https --variable DEEPLINK_HOST=example.com --variable ANDROID_PATH_PREFIX=/'
	        })
	    ], Deeplinks);
	    return Deeplinks;
	}());
	exports.Deeplinks = Deeplinks;
	//# sourceMappingURL=deeplinks.js.map

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Device
	 * @description
	 * Access information about the underlying device and platform.
	 *
	 * @usage
	 * ```typescript
	 * import { Device } from 'ionic-native';
	 *
	 *
	 * console.log('Device UUID is: ' + Device.uuid);
	 * ```
	 */
	var Device = (function () {
	    function Device() {
	    }
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Device, "cordova", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Device, "model", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Device, "platform", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Device, "uuid", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Device, "version", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Device, "manufacturer", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Device, "isVirtual", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Device, "serial", void 0);
	    Device = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Device',
	            plugin: 'cordova-plugin-device',
	            pluginRef: 'device',
	            repo: 'https://github.com/apache/cordova-plugin-device'
	        })
	    ], Device);
	    return Device;
	}());
	exports.Device = Device;
	//# sourceMappingURL=device.js.map

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name DeviceFeedback
	 * @description
	 *
	 * Plugin that lets you provide haptic or acoustic feedback on Android devices.
	 *
	 * @usage
	 * ```
	 * import { DeviceFeedback } from 'ionic-native';
	 *
	 * DeviceFeedback.acoustic();
	 *
	 * DeviceFeedback.haptic(0);
	 *
	 * DeviceFeedback.isFeedbackEnabled()
	 *   .then((feedback) => {
	 *     console.log(feedback);
	 *     // {
	 *     //   acoustic: true,
	 *     //   haptic: true
	 *     // }
	 *   });
	 *
	 * ```
	 */
	var DeviceFeedback = (function () {
	    function DeviceFeedback() {
	    }
	    /**
	     * Provide sound feedback to user, nevertheless respect user's settings and current active device profile as native feedback do.
	     */
	    DeviceFeedback.acoustic = function () { };
	    /**
	     * Provide vibrate feedback to user, nevertheless respect user's tactile feedback setting as native feedback do.
	     * @param type {Number} Specify type of vibration feedback. 0 for long press, 1 for virtual key, or 3 for keyboard tap.
	     */
	    DeviceFeedback.haptic = function (type) { };
	    /**
	     * Check if haptic and acoustic feedback is enabled by user settings.
	     * @returns {Promise<any>}
	     */
	    DeviceFeedback.isFeedbackEnabled = function () { return; };
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], DeviceFeedback, "acoustic", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], DeviceFeedback, "haptic", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], DeviceFeedback, "isFeedbackEnabled", null);
	    DeviceFeedback = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'DeviceFeedback',
	            plugin: 'cordova-plugin-velda-devicefeedback',
	            pluginRef: 'plugins.deviceFeedback',
	            repo: 'https://github.com/VVelda/device-feedback',
	            platforms: ['Android']
	        })
	    ], DeviceFeedback);
	    return DeviceFeedback;
	}());
	exports.DeviceFeedback = DeviceFeedback;
	//# sourceMappingURL=device-feedback.js.map

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	var DeviceAccounts = (function () {
	    function DeviceAccounts() {
	    }
	    /**
	     *  Gets all accounts registered on the Android Device
	     * @returns {Promise<any>}
	     */
	    DeviceAccounts.get = function () { return; };
	    /**
	     *  Get all accounts registered on Android device for requested type
	     * @returns {Promise<any>}
	     */
	    DeviceAccounts.getByType = function (type) { return; };
	    /**
	     *  Get all emails registered on Android device (accounts with 'com.google' type)
	     * @returns {Promise<any>}
	     */
	    DeviceAccounts.getEmails = function () { return; };
	    /**
	     *  Get the first email registered on Android device
	     * @returns {Promise<any>}
	     */
	    DeviceAccounts.getEmail = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], DeviceAccounts, "get", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], DeviceAccounts, "getByType", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], DeviceAccounts, "getEmails", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], DeviceAccounts, "getEmail", null);
	    DeviceAccounts = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'DeviceAccounts',
	            plugin: 'https://github.com/loicknuchel/cordova-device-accounts.git',
	            pluginRef: 'plugins.DeviceAccounts',
	            repo: 'https://github.com/loicknuchel/cordova-device-accounts',
	            platforms: ['Android']
	        })
	    ], DeviceAccounts);
	    return DeviceAccounts;
	}());
	exports.DeviceAccounts = DeviceAccounts;
	//# sourceMappingURL=deviceaccounts.js.map

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Device Motion
	 * @description
	 * Requires Cordova plugin: `cordova-plugin-device-motion`. For more info, please see the [Device Motion docs](https://github.com/apache/cordova-plugin-device-motion).
	 *
	 * @usage
	 * ```typescript
	 * import { DeviceMotion, DeviceMotionAccelerationData } from 'ionic-native';
	 *
	 *
	 * // Get the device current acceleration
	 * DeviceMotion.getCurrentAcceleration().then(
	 *   (acceleration: DeviceMotionAccelerationData) => console.log(acceleration),
	 *   (error: any) => console.log(error)
	 * );
	 *
	 * // Watch device acceleration
	 * var subscription = DeviceMotion.watchAcceleration().subscribe((acceleration: DeviceMotionAccelerationData) => {
	 *   console.log(acceleration);
	 * });
	 *
	 * // Stop watch
	 * subscription.unsubscribe();
	 *
	 * ```
	 * @interfaces
	 * DeviceMotionAccelerationData
	 * DeviceMotionAccelerometerOptions
	 */
	var DeviceMotion = (function () {
	    function DeviceMotion() {
	    }
	    /**
	     * Get the current acceleration along the x, y, and z axes.
	     * @returns {Promise<DeviceMotionAccelerationData>} Returns object with x, y, z, and timestamp properties
	     */
	    DeviceMotion.getCurrentAcceleration = function () { return; };
	    /**
	     * Watch the device acceleration. Clear the watch by unsubscribing from the observable.
	     * @param {AccelerometerOptions} options list of options for the accelerometer.
	     * @returns {Observable<DeviceMotionAccelerationData>} Observable returns an observable that you can subscribe to
	     */
	    DeviceMotion.watchAcceleration = function (options) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], DeviceMotion, "getCurrentAcceleration", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse',
	            observable: true,
	            clearFunction: 'clearWatch'
	        })
	    ], DeviceMotion, "watchAcceleration", null);
	    DeviceMotion = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'DeviceMotion',
	            plugin: 'cordova-plugin-device-motion',
	            pluginRef: 'navigator.accelerometer',
	            repo: 'https://github.com/apache/cordova-plugin-device-motion'
	        })
	    ], DeviceMotion);
	    return DeviceMotion;
	}());
	exports.DeviceMotion = DeviceMotion;
	//# sourceMappingURL=devicemotion.js.map

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Device Orientation
	 * @description
	 * Requires Cordova plugin: `cordova-plugin-device-orientation`. For more info, please see the [Device Orientation docs](https://github.com/apache/cordova-plugin-device-orientation).
	 *
	 * @usage
	 * ```typescript
	 * // DeviceOrientationCompassHeading is an interface for compass
	 * import { DeviceOrientation, DeviceOrientationCompassHeading } from 'ionic-native';
	 *
	 *
	 * // Get the device current compass heading
	 * DeviceOrientation.getCurrentHeading().then(
	 *   (data: DeviceOrientationCompassHeading) => console.log(data),
	 *   (error: any) => console.log(error)
	 * );
	 *
	 * // Watch the device compass heading change
	 * var subscription = DeviceOrientation.watchHeading().subscribe(
	 *   (data: DeviceOrientationCompassHeading) => console.log(data)
	 * );
	 *
	 * // Stop watching heading change
	 * subscription.unsubscribe();
	 * ```
	 * @interfaces
	 * DeviceOrientationCompassOptions
	 * DeviceOrientationCompassHeading
	 */
	var DeviceOrientation = (function () {
	    function DeviceOrientation() {
	    }
	    /**
	     * Get the current compass heading.
	     * @returns {Promise<DeviceOrientationCompassHeading>}
	     */
	    DeviceOrientation.getCurrentHeading = function () { return; };
	    /**
	     * Get the device current heading at a regular interval
	     *
	     * Stop the watch by unsubscribing from the observable
	     * @param {DeviceOrientationCompassOptions} options Options for compass. Frequency and Filter. Optional
	     * @returns {Observable<DeviceOrientationCompassHeading>} Returns an observable that contains the compass heading
	     */
	    DeviceOrientation.watchHeading = function (options) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], DeviceOrientation, "getCurrentHeading", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse',
	            observable: true,
	            clearFunction: 'clearWatch'
	        })
	    ], DeviceOrientation, "watchHeading", null);
	    DeviceOrientation = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'DeviceOrientation',
	            plugin: 'cordova-plugin-device-orientation',
	            pluginRef: 'navigator.compass',
	            repo: 'https://github.com/apache/cordova-plugin-device-orientation'
	        })
	    ], DeviceOrientation);
	    return DeviceOrientation;
	}());
	exports.DeviceOrientation = DeviceOrientation;
	//# sourceMappingURL=deviceorientation.js.map

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Diagnostic
	 * @description
	 * Checks whether device hardware features are enabled or available to the app, e.g. camera, GPS, wifi
	 *
	 * @usage
	 * ```typescript
	 * import { Diagnostic } from 'ionic-native';
	 *
	 * let successCallback = (isAvailable) => { console.log('Is available? ' + isAvailable); };
	 * let errorCallback = (e) => console.error(e);
	 *
	 * Diagnostic.isCameraAvailable().then(successCallback).catch(errorCallback);
	 *
	 * Diagnostic.isBluetoothAvailable().then(successCallback, errorCallback);
	 *
	 *
	 * Diagnostic.getBluetoothState()
	 *   .then((state) => {
	 *     if (state == Diagnostic.bluetoothStates.POWERED_ON){
	 *       // do something
	 *     } else {
	 *       // do something else
	 *     }
	 *   }).catch(e => console.error(e));
	 *
	 * ```
	 *
	 */
	var Diagnostic = (function () {
	    function Diagnostic() {
	    }
	    /**
	     * Checks if app is able to access device location.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.isLocationAvailable = function () { return; };
	    /**
	     * Checks if Wifi is connected/enabled. On iOS this returns true if the device is connected to a network by WiFi. On Android and Windows 10 Mobile this returns true if the WiFi setting is set to enabled.
	     * On Android this requires permission. `<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />`
	     * @returns {Promise<any>}
	     */
	    Diagnostic.isWifiAvailable = function () { return; };
	    /**
	     * Checks if the device has a camera. On Android this returns true if the device has a camera. On iOS this returns true if both the device has a camera AND the application is authorized to use it. On Windows 10 Mobile this returns true if both the device has a rear-facing camera AND the
	     * application is authorized to use it.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.isCameraAvailable = function () { return; };
	    /**
	     * Checks if the device has Bluetooth capabilities and if so that Bluetooth is switched on (same on Android, iOS and Windows 10 Mobile)
	     * On Android this requires permission <uses-permission android:name="android.permission.BLUETOOTH" />
	     * @returns {Promise<any>}
	     */
	    Diagnostic.isBluetoothAvailable = function () { return; };
	    /**
	     * Displays the device location settings to allow user to enable location services/change location mode.
	     */
	    Diagnostic.switchToLocationSettings = function () { };
	    /**
	     * Displays mobile settings to allow user to enable mobile data.
	     */
	    Diagnostic.switchToMobileDataSettings = function () { };
	    /**
	     * Displays Bluetooth settings to allow user to enable Bluetooth.
	     */
	    Diagnostic.switchToBluetoothSettings = function () { };
	    /**
	     * Displays WiFi settings to allow user to enable WiFi.
	     */
	    Diagnostic.switchToWifiSettings = function () { };
	    /**
	     * Returns true if the WiFi setting is set to enabled, and is the same as `isWifiAvailable()`
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isWifiEnabled = function () { return; };
	    /**
	     * Enables/disables WiFi on the device.
	     * Requires `ACCESS_WIFI_STATE` and `CHANGE_WIFI_STATE` permissions on Android
	     * @param state {boolean}
	     * @returns {Promise<any>}
	     */
	    Diagnostic.setWifiState = function (state) { return; };
	    /**
	     * Enables/disables Bluetooth on the device.
	     * Requires `BLUETOOTH` and `BLUETOOTH_ADMIN` permissions on Android
	     * @param state {boolean}
	     * @returns {Promise<any>}
	     */
	    Diagnostic.setBluetoothState = function (state) { return; };
	    // ANDROID AND IOS ONLY
	    /**
	     * Returns true if the device setting for location is on. On Android this returns true if Location Mode is switched on. On iOS this returns true if Location Services is switched on.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isLocationEnabled = function () { return; };
	    /**
	     * Checks if the application is authorized to use location.
	     * Note for Android: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.isLocationAuthorized = function () { return; };
	    /**
	     * Returns the location authorization status for the application.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getLocationAuthorizationStatus = function () { return; };
	    /**
	     * Returns the location authorization status for the application.
	     * Note for Android: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
	     *
	     * mode - (iOS-only / optional) location authorization mode: "always" or "when_in_use". If not specified, defaults to "when_in_use".
	     * @returns {Promise<any>}
	     */
	    Diagnostic.requestLocationAuthorization = function (mode) { return; };
	    /**
	     * Checks if camera hardware is present on device.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.isCameraPresent = function () { return; };
	    /**
	     * Checks if the application is authorized to use the camera.
	     * Note for Android: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.isCameraAuthorized = function () { return; };
	    /**
	     * Returns the camera authorization status for the application.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getCameraAuthorizationStatus = function () { return; };
	    /**
	     * Requests camera authorization for the application.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.requestCameraAuthorization = function () { return; };
	    /**
	     * Checks if the application is authorized to use the microphone.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isMicrophoneAuthorized = function () { return; };
	    /**
	     * Returns the microphone authorization status for the application.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getMicrophoneAuthorizationStatus = function () { return; };
	    /**
	     * Requests microphone authorization for the application.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.requestMicrophoneAuthorization = function () { return; };
	    /**
	     * Checks if the application is authorized to use contacts (address book).
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isContactsAuthorized = function () { return; };
	    /**
	     * Returns the contacts authorization status for the application.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getContactsAuthorizationStatus = function () { return; };
	    /**
	     * Requests contacts authorization for the application.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.requestContactsAuthorization = function () { return; };
	    /**
	     * Checks if the application is authorized to use the calendar.
	     *
	     * Notes for Android:
	     *   - This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.
	     *
	     * Notes for iOS:
	     *   - This relates to Calendar Events (not Calendar Reminders)
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isCalendarAuthorized = function () { return; };
	    /**
	     * Returns the calendar authorization status for the application.
	     *
	     * Notes for Android:
	     *   - This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return `GRANTED` status as permissions are already granted at installation time.
	     *
	     * Notes for iOS:
	     *   - This relates to Calendar Events (not Calendar Reminders)
	     *
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getCalendarAuthorizationStatus = function () { return; };
	    /**
	     * Requests calendar authorization for the application.
	     *
	     * Notes for iOS:
	     *   - Should only be called if authorization status is NOT_DETERMINED. Calling it when in any other state will have no effect and just return the current authorization status.
	     *   - This relates to Calendar Events (not Calendar Reminders)
	     *
	     * Notes for Android:
	     *   - This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.
	     *   - This requests permission for `READ_CALENDAR` run-time permission
	     *   - Required permissions must be added to `AndroidManifest.xml` as appropriate - see Android permissions: `READ_CALENDAR`, `WRITE_CALENDAR`
	     *
	     * @returns {Promise<any>}
	     */
	    Diagnostic.requestCalendarAuthorization = function () { return; };
	    /**
	     * Opens settings page for this app.
	     * On Android, this opens the "App Info" page in the Settings app.
	     * On iOS, this opens the app settings page in the Settings app. This works only on iOS 8+ - iOS 7 and below will invoke the errorCallback.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.switchToSettings = function () { return; };
	    /**
	     * Returns the state of Bluetooth on the device.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getBluetoothState = function () { return; };
	    /**
	     * Registers a function to be called when a change in Bluetooth state occurs.
	     * @param handler
	     */
	    Diagnostic.registerBluetoothStateChangeHandler = function (handler) { };
	    /**
	     * Registers a function to be called when a change in Location state occurs.
	     * @param handler
	     */
	    Diagnostic.registerLocationStateChangeHandler = function (handler) { };
	    // ANDROID ONLY
	    /**
	     * Checks if high-accuracy locations are available to the app from GPS hardware.
	     * Returns true if Location mode is enabled and is set to "Device only" or "High accuracy" AND if the app is authorised to use location.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isGpsLocationAvailable = function () { return; };
	    /**
	     * Checks if location mode is set to return high-accuracy locations from GPS hardware.
	     *   Returns true if Location mode is enabled and is set to either:
	     *   - Device only = GPS hardware only (high accuracy)
	     *   - High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)
	     * @returns {Promise<any>}
	     */
	    Diagnostic.isGpsLocationEnabled = function () { return; };
	    /**
	     * Checks if low-accuracy locations are available to the app from network triangulation/WiFi access points.
	     * Returns true if Location mode is enabled and is set to "Battery saving" or "High accuracy" AND if the app is authorised to use location.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.isNetworkLocationAvailable = function () { return; };
	    /**
	     * Checks if location mode is set to return low-accuracy locations from network triangulation/WiFi access points.
	     * Returns true if Location mode is enabled and is set to either:
	     *   - Battery saving = network triangulation and Wifi network IDs (low accuracy)
	     *   - High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)
	     * @returns {Promise<any>}
	     */
	    Diagnostic.isNetworkLocationEnabled = function () { return; };
	    /**
	     * Returns the current location mode setting for the device.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getLocationMode = function () { return; };
	    /**
	     * Returns the current authorisation status for a given permission.
	     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
	     * @param permission
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getPermissionAuthorizationStatus = function (permission) { return; };
	    /**
	     * Returns the current authorisation status for multiple permissions.
	     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
	     * @param permissions
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getPermissionsAuthorizationStatus = function (permissions) { return; };
	    /**
	     * Requests app to be granted authorisation for a runtime permission.
	     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.
	     * @param permission
	     * @returns {Promise<any>}
	     */
	    Diagnostic.requestRuntimePermission = function (permission) { return; };
	    /**
	     * Requests app to be granted authorisation for multiple runtime permissions.
	     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.
	     * @param permissions
	     * @returns {Promise<any>}
	     */
	    Diagnostic.requestRuntimePermissions = function (permissions) { return; };
	    /**
	     * Indicates if the plugin is currently requesting a runtime permission via the native API.
	     * Note that only one request can be made concurrently because the native API cannot handle concurrent requests,
	     * so the plugin will invoke the error callback if attempting to make more than one simultaneous request.
	     * Multiple permission requests should be grouped into a single call since the native API is setup to handle batch requests of multiple permission groups.
	     * @returns {boolean}
	     */
	    Diagnostic.isRequestingPermission = function () { return; };
	    /**
	     * Registers a function to be called when a runtime permission request has completed.
	     * Pass in a falsey value to de-register the currently registered function.
	     * @param handler {Function}
	     */
	    Diagnostic.registerPermissionRequestCompleteHandler = function (handler) { return; };
	    /**
	     * Checks if the device setting for Bluetooth is switched on.
	     * This requires `BLUETOOTH` permission on Android
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isBluetoothEnabled = function () { return; };
	    /**
	     * Checks if the device has Bluetooth capabilities.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.hasBluetoothSupport = function () { return; };
	    /**
	     * Checks if the device has Bluetooth Low Energy (LE) capabilities.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.hasBluetoothLESupport = function () { return; };
	    /**
	     * Checks if the device supports Bluetooth Low Energy (LE) Peripheral mode.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.hasBluetoothLEPeripheralSupport = function () { return; };
	    /**
	     * Checks if the application is authorized to use external storage.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isExternalStorageAuthorized = function () { return; };
	    /**
	     * CReturns the external storage authorization status for the application.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.getExternalStorageAuthorizationStatus = function () { return; };
	    /**
	     * Requests external storage authorization for the application.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.requestExternalStorageAuthorization = function () { return; };
	    /**
	     * Returns details of external SD card(s): absolute path, is writable, free space.
	     *
	     * The intention of this method is to return the location and details of removable external SD cards.
	     * This differs from the "external directories" returned by cordova-plugin-file which return mount points relating to non-removable (internal) storage.
	     *
	     * Learn more about this method [here](https://github.com/dpa99c/cordova-diagnostic-plugin#getexternalsdcarddetails)
	     *
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getExternalSdCardDetails = function () { return; };
	    /**
	     * Switches to the wireless settings page in the Settings app. Allows configuration of wireless controls such as Wi-Fi, Bluetooth and Mobile networks.
	     */
	    Diagnostic.prototype.switchToWirelessSettings = function () { };
	    /**
	     * Displays NFC settings to allow user to enable NFC.
	     */
	    Diagnostic.prototype.switchToNFCSettings = function () { };
	    /**
	     * Checks if NFC hardware is present on device.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isNFCPresent = function () { return; };
	    /**
	     * Checks if the device setting for NFC is switched on.
	     * Note: this operation does not require NFC permission in the manifest.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isNFCEnabled = function () { return; };
	    /**
	     * Checks if NFC is available to the app. Returns true if the device has NFC capabilities AND if NFC setting is switched on.
	     * Note: this operation does not require NFC permission in the manifest.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.isNFCAvailable = function () { return; };
	    /**
	     * Registers a function to be called when a change in NFC state occurs. Pass in a falsey value to de-register the currently registered function.
	     * @param hander {Function} callback function to be called when NFC state changes
	     * @returns {Promise<any>}
	     */
	    Diagnostic.prototype.registerNFCStateChangeHandler = function (handler) { };
	    // IOS ONLY
	    /**
	     * Checks if the application is authorized to use the Camera Roll in Photos app.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isCameraRollAuthorized = function () { return; };
	    /**
	     * Returns the authorization status for the application to use the Camera Roll in Photos app.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.getCameraRollAuthorizationStatus = function () { return; };
	    /**
	     * Requests camera roll authorization for the application.
	     * Should only be called if authorization status is NOT_REQUESTED.
	     * Calling it when in any other state will have no effect.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.requestCameraRollAuthorization = function () { return; };
	    /**
	     * Checks if remote (push) notifications are enabled.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isRemoteNotificationsEnabled = function () { return; };
	    /**
	     * Indicates if the app is registered for remote (push) notifications on the device.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isRegisteredForRemoteNotifications = function () { return; };
	    /**
	     * Indicates the current setting of notification types for the app in the Settings app.
	     * Note: on iOS 8+, if "Allow Notifications" switch is OFF, all types will be returned as disabled.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getRemoteNotificationTypes = function () { return; };
	    /**
	     * Checks if the application is authorized to use reminders.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isRemindersAuthorized = function () { return; };
	    /**
	     * Returns the reminders authorization status for the application.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getRemindersAuthorizationStatus = function () { return; };
	    /**
	     * Requests reminders authorization for the application.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.requestRemindersAuthorization = function () { return; };
	    /**
	     * Checks if the application is authorized for background refresh.
	     * @returns {Promise<boolean>}
	     */
	    Diagnostic.isBackgroundRefreshAuthorized = function () { return; };
	    /**
	     * Returns the background refresh authorization status for the application.
	     * @returns {Promise<any>}
	     */
	    Diagnostic.getBackgroundRefreshStatus = function () { return; };
	    /**
	     * Requests Bluetooth authorization for the application.
	     *
	     * Learn more about this method [here](https://github.com/dpa99c/cordova-diagnostic-plugin#requestbluetoothauthorization)
	     * @return {Promise<any>}
	     */
	    Diagnostic.requestBluetoothAuthorization = function () { return; };
	    /**
	     * Checks if motion tracking is available on the current device.
	     * @return {Promise<boolean>}
	     */
	    Diagnostic.isMotionAvailable = function () { return; };
	    /**
	     * Checks if it's possible to determine the outcome of a motion authorization request on the current device.
	     * There's no direct way to determine if authorization was granted or denied, so the Pedometer API must be used to indirectly determine this:
	     * therefore, if the device supports motion tracking but not Pedometer Event Tracking, the outcome of requesting motion detection cannot be determined.
	     *
	     * @return {Promise<boolean>}
	     */
	    Diagnostic.isMotionRequestOutcomeAvailable = function () { return; };
	    /**
	     * Requests and checks motion authorization for the application: there is no way to independently request only or check only, so both must be done in one operation.
	     *
	     * Learn more about this method [here](https://github.com/dpa99c/cordova-diagnostic-plugin#requestandcheckmotionauthorization)
	     *
	     * @return {Promise<any>}
	     */
	    Diagnostic.requestAndCheckMotionAuthorization = function () { return; };
	    Diagnostic.permission = {
	        READ_CALENDAR: 'READ_CALENDAR',
	        WRITE_CALENDAR: 'WRITE_CALENDAR',
	        CAMERA: 'CAMERA',
	        READ_CONTACTS: 'READ_CONTACTS',
	        WRITE_CONTACTS: 'WRITE_CONTACTS',
	        GET_ACCOUNTS: 'GET_ACCOUNTS',
	        ACCESS_FINE_LOCATION: 'ACCESS_FINE_LOCATION',
	        ACCESS_COARSE_LOCATION: 'ACCESS_COARSE_LOCATION',
	        RECORD_AUDIO: 'RECORD_AUDIO',
	        READ_PHONE_STATE: 'READ_PHONE_STATE',
	        CALL_PHONE: 'CALL_PHONE',
	        ADD_VOICEMAIL: 'ADD_VOICEMAIL',
	        USE_SIP: 'USE_SIP',
	        PROCESS_OUTGOING_CALLS: 'PROCESS_OUTGOING_CALLS',
	        READ_CALL_LOG: 'READ_CALL_LOG',
	        WRITE_CALL_LOG: 'WRITE_CALL_LOG',
	        SEND_SMS: 'SEND_SMS',
	        RECEIVE_SMS: 'RECEIVE_SMS',
	        READ_SMS: 'READ_SMS',
	        RECEIVE_WAP_PUSH: 'RECEIVE_WAP_PUSH',
	        RECEIVE_MMS: 'RECEIVE_MMS',
	        WRITE_EXTERNAL_STORAGE: 'WRITE_EXTERNAL_STORAGE',
	        READ_EXTERNAL_STORAGE: 'READ_EXTERNAL_STORAGE',
	        BODY_SENSORS: 'BODY_SENSORS'
	    };
	    Diagnostic.locationAuthorizationMode = {
	        ALWAYS: 'always',
	        WHEN_IN_USE: 'when_in_use'
	    };
	    Diagnostic.permissionGroups = {
	        CALENDAR: ['READ_CALENDAR', 'WRITE_CALENDAR'],
	        CAMERA: ['CAMERA'],
	        CONTACTS: ['READ_CONTACTS', 'WRITE_CONTACTS', 'GET_ACCOUNTS'],
	        LOCATION: ['ACCESS_FINE_LOCATION', 'ACCESS_COARSE_LOCATION'],
	        MICROPHONE: ['RECORD_AUDIO'],
	        PHONE: ['READ_PHONE_STATE', 'CALL_PHONE', 'ADD_VOICEMAIL', 'USE_SIP', 'PROCESS_OUTGOING_CALLS', 'READ_CALL_LOG', 'WRITE_CALL_LOG'],
	        SENSORS: ['BODY_SENSORS'],
	        SMS: ['SEND_SMS', 'RECEIVE_SMS', 'READ_SMS', 'RECEIVE_WAP_PUSH', 'RECEIVE_MMS'],
	        STORAGE: ['READ_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE']
	    };
	    Diagnostic.locationMode = {
	        HIGH_ACCURACY: 'high_accuracy',
	        DEVICE_ONLY: 'device_only',
	        BATTERY_SAVING: 'battery_saving',
	        LOCATION_OFF: 'location_off'
	    };
	    Diagnostic.bluetoothState = {
	        UNKNOWN: 'unknown',
	        RESETTING: 'resetting',
	        UNSUPPORTED: 'unsupported',
	        UNAUTHORIZED: 'unauthorized',
	        POWERED_OFF: 'powered_off',
	        POWERED_ON: 'powered_on',
	        POWERING_OFF: 'powering_off',
	        POWERING_ON: 'powering_on'
	    };
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            sync: true
	        })
	    ], Diagnostic.prototype, "switchToWirelessSettings", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            sync: true
	        })
	    ], Diagnostic.prototype, "switchToNFCSettings", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            sync: true
	        })
	    ], Diagnostic.prototype, "registerNFCStateChangeHandler", null);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Diagnostic, "permissionStatus", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Diagnostic, "NFCState", void 0);
	    __decorate([
	        plugin_1.Cordova()
	    ], Diagnostic, "isLocationAvailable", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Diagnostic, "isWifiAvailable", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Diagnostic, "isCameraAvailable", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Diagnostic, "isBluetoothAvailable", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true, platforms: ['Android', 'Windows 10'] })
	    ], Diagnostic, "switchToLocationSettings", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true, platforms: ['Android', 'Windows 10'] })
	    ], Diagnostic, "switchToMobileDataSettings", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true, platforms: ['Android', 'Windows 10'] })
	    ], Diagnostic, "switchToBluetoothSettings", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true, platforms: ['Android', 'Windows 10'] })
	    ], Diagnostic, "switchToWifiSettings", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'Windows 10'] })
	    ], Diagnostic, "isWifiEnabled", null);
	    __decorate([
	        plugin_1.Cordova({ callbackOrder: 'reverse', platforms: ['Android', 'Windows 10'] })
	    ], Diagnostic, "setWifiState", null);
	    __decorate([
	        plugin_1.Cordova({ callbackOrder: 'reverse', platforms: ['Android', 'Windows 10'] })
	    ], Diagnostic, "setBluetoothState", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "isLocationEnabled", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Diagnostic, "isLocationAuthorized", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "getLocationAuthorizationStatus", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'], callbackOrder: 'reverse' })
	    ], Diagnostic, "requestLocationAuthorization", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "isCameraPresent", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "isCameraAuthorized", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "getCameraAuthorizationStatus", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "requestCameraAuthorization", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "isMicrophoneAuthorized", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "getMicrophoneAuthorizationStatus", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "requestMicrophoneAuthorization", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "isContactsAuthorized", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "getContactsAuthorizationStatus", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "requestContactsAuthorization", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "isCalendarAuthorized", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "getCalendarAuthorizationStatus", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "requestCalendarAuthorization", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "switchToSettings", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })
	    ], Diagnostic, "getBluetoothState", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'], sync: true })
	    ], Diagnostic, "registerBluetoothStateChangeHandler", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android', 'iOS'], sync: true })
	    ], Diagnostic, "registerLocationStateChangeHandler", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "isGpsLocationAvailable", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "isGpsLocationEnabled", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "isNetworkLocationAvailable", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "isNetworkLocationEnabled", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "getLocationMode", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'], callbackOrder: 'reverse' })
	    ], Diagnostic, "getPermissionAuthorizationStatus", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'], callbackOrder: 'reverse' })
	    ], Diagnostic, "getPermissionsAuthorizationStatus", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'], callbackOrder: 'reverse' })
	    ], Diagnostic, "requestRuntimePermission", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'], callbackOrder: 'reverse' })
	    ], Diagnostic, "requestRuntimePermissions", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], Diagnostic, "isRequestingPermission", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], Diagnostic, "registerPermissionRequestCompleteHandler", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "isBluetoothEnabled", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "hasBluetoothSupport", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "hasBluetoothLESupport", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "hasBluetoothLEPeripheralSupport", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "isExternalStorageAuthorized", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "getExternalStorageAuthorizationStatus", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "requestExternalStorageAuthorization", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "getExternalSdCardDetails", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "isNFCPresent", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "isNFCEnabled", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['Android'] })
	    ], Diagnostic, "isNFCAvailable", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "isCameraRollAuthorized", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "getCameraRollAuthorizationStatus", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "requestCameraRollAuthorization", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "isRemoteNotificationsEnabled", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "isRegisteredForRemoteNotifications", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "getRemoteNotificationTypes", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "isRemindersAuthorized", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "getRemindersAuthorizationStatus", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "requestRemindersAuthorization", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "isBackgroundRefreshAuthorized", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "getBackgroundRefreshStatus", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "requestBluetoothAuthorization", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "isMotionAvailable", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "isMotionRequestOutcomeAvailable", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], Diagnostic, "requestAndCheckMotionAuthorization", null);
	    Diagnostic = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Diagnostic',
	            plugin: 'cordova.plugins.diagnostic',
	            pluginRef: 'cordova.plugins.diagnostic',
	            repo: 'https://github.com/dpa99c/cordova-diagnostic-plugin'
	        })
	    ], Diagnostic);
	    return Diagnostic;
	}());
	exports.Diagnostic = Diagnostic;
	//# sourceMappingURL=diagnostic.js.map

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Dialogs
	 * @description
	 * This plugin gives you ability to access and customize the device native dialogs.
	 *
	 * Requires Cordova plugin: `cordova-plugin-dialogs`. For more info, please see the [Dialogs plugin docs](https://github.com/apache/cordova-plugin-dialogs).
	 *
	 * @usage
	 * ```typescript
	 * import { Dialogs } from 'ionic-native';
	 *
	 *
	 *
	 *
	 * ```
	 * @interfaces
	 * DialogsPromptCallback
	 */
	var Dialogs = (function () {
	    function Dialogs() {
	    }
	    /**
	     * Shows a custom alert or dialog box.
	     * @param {string} message Dialog message.
	     * @param {string} title Dialog title. (Optional, defaults to Alert)
	     * @param {string} buttonName Button name. (Optional, defaults to OK)
	     * @returns {Promise<any>} Returns a blank promise once the user has dismissed the alert.
	     */
	    Dialogs.alert = function (message, title, buttonName) {
	        if (title === void 0) { title = 'Alert'; }
	        if (buttonName === void 0) { buttonName = 'OK'; }
	        return;
	    };
	    /**
	     * Displays a customizable confirmation dialog box.
	     * @param {string} message Dialog message.
	     * @param {string} title Dialog title. (Optional, defaults to Confirm)
	     * @param {Array<string>} buttonLabels Array of strings specifying button labels. (Optional, defaults to [OK,Cancel])
	     * @returns {Promise<number>} Returns a promise that resolves the button index that was clicked. Note that the index use one-based indexing.
	     */
	    Dialogs.confirm = function (message, title, buttonLabels) {
	        if (title === void 0) { title = 'Confirm'; }
	        if (buttonLabels === void 0) { buttonLabels = ['OK', 'Cancel']; }
	        return;
	    };
	    /**
	     * Displays a native dialog box that is more customizable than the browser's prompt function.
	     * @param {string} message Dialog message.
	     * @param {string} title Dialog title. (Optional, defaults to Prompt)
	     * @param {Array<string>} buttonLabels  Array of strings specifying button labels. (Optional, defaults to ["OK","Cancel"])
	     * @param {string} defaultText Default textbox input value.  (Optional, Default: empty string)
	     * @returns {Promise<DialogsPromptCallback>} Returns a promise that resolves an object with the button index clicked and the text entered
	     */
	    Dialogs.prompt = function (message, title, buttonLabels, defaultText) {
	        if (title === void 0) { title = 'Prompt'; }
	        if (buttonLabels === void 0) { buttonLabels = ['OK', 'Cancel']; }
	        if (defaultText === void 0) { defaultText = ''; }
	        return;
	    };
	    /**
	     * The device plays a beep sound.
	     * @param {numbers} times The number of times to repeat the beep.
	     */
	    Dialogs.beep = function (times) { };
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 4
	        })
	    ], Dialogs, "alert", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 4
	        })
	    ], Dialogs, "confirm", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 5
	        })
	    ], Dialogs, "prompt", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], Dialogs, "beep", null);
	    Dialogs = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Dialogs',
	            plugin: 'cordova-plugin-dialogs',
	            pluginRef: 'navigator.notification',
	            repo: 'https://github.com/apache/cordova-plugin-dialogs.git'
	        })
	    ], Dialogs);
	    return Dialogs;
	}());
	exports.Dialogs = Dialogs;
	//# sourceMappingURL=dialogs.js.map

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @beta
	 * @name Email Composer
	 * @description
	 *
	 * Requires Cordova plugin: cordova-plugin-email-composer. For more info, please see the [Email Composer plugin docs](https://github.com/hypery2k/cordova-email-plugin).
	 *
	 * DISCLAIMER: This plugin is experiencing issues with the latest versions of Cordova. Use at your own risk. Functionality is not guaranteed. Please stay tuned for a more stable version.
	 * A good alternative to this plugin is the social sharing plugin.
	 *
	 * @usage
	 * ```typescript
	 * import { EmailComposer } from 'ionic-native';
	 *
	 *
	 * EmailComposer.isAvailable().then((available: boolean) =>{
	 *  if(available) {
	 *    //Now we know we can send
	 *  }
	 * });
	 *
	 * let email = {
	 *   to: 'max@mustermann.de',
	 *   cc: 'erika@mustermann.de',
	 *   bcc: ['john@doe.com', 'jane@doe.com'],
	 *   attachments: [
	 *     'file://img/logo.png',
	 *     'res://icon.png',
	 *     'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',
	 *     'file://README.pdf'
	 *   ],
	 *   subject: 'Cordova Icons',
	 *   body: 'How are you? Nice greetings from Leipzig',
	 *   isHtml: true
	 * };
	 *
	 * // Send a text message using default options
	 * EmailComposer.open(email);
	 *
	 * ```
	 * @interfaces
	 * EmailComposerOptions
	 */
	var EmailComposer = (function () {
	    function EmailComposer() {
	    }
	    /**
	     * Verifies if sending emails is supported on the device.
	     *
	     * @param app {string?} An optional app id or uri scheme.
	     * @returns {Promise<any>} Resolves if available, rejects if not available
	     */
	    EmailComposer.isAvailable = function (app) {
	        return new Promise(function (resolve, reject) {
	            if (app) {
	                cordova.plugins.email.isAvailable(app, function (isAvailable) {
	                    if (isAvailable) {
	                        resolve();
	                    }
	                    else {
	                        reject();
	                    }
	                });
	            }
	            else {
	                cordova.plugins.email.isAvailable(function (isAvailable) {
	                    if (isAvailable) {
	                        resolve();
	                    }
	                    else {
	                        reject();
	                    }
	                });
	            }
	        });
	    };
	    /**
	     * Adds a new mail app alias.
	     *
	     * @param alias {string} The alias name
	     * @param packageName {string} The package name
	     */
	    EmailComposer.addAlias = function (alias, packageName) { };
	    /**
	     * Displays the email composer pre-filled with data.
	     *
	     * @param options {EmailComposerOptions} Email
	     * @param scope {any?} An optional scope for the promise
	     * @returns {Promise<any>} Resolves promise when the EmailComposer has been opened
	     */
	    EmailComposer.open = function (options, scope) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], EmailComposer, "addAlias", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 3
	        })
	    ], EmailComposer, "open", null);
	    EmailComposer = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'EmailComposer',
	            plugin: 'cordova-plugin-email',
	            pluginRef: 'cordova.plugins.email',
	            repo: 'https://github.com/hypery2k/cordova-email-plugin',
	            platforms: ['Android', 'iOS']
	        })
	    ], EmailComposer);
	    return EmailComposer;
	}());
	exports.EmailComposer = EmailComposer;
	//# sourceMappingURL=emailcomposer.js.map

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name EstimoteBeacons
	 *
	 * @description
	 * This plugin enables communication between a phone and Estimote Beacons peripherals.
	 *
	 * @interfaces
	 * EstimoteBeaconRegion
	 */
	var EstimoteBeacons = (function () {
	    function EstimoteBeacons() {
	    }
	    /**
	     * Ask the user for permission to use location services
	     * while the app is in the foreground.
	     * You need to call this function or requestAlwaysAuthorization
	     * on iOS 8+.
	     * Does nothing on other platforms.
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.requestWhenInUseAuthorization().then(
	     *   () => { console.log('on success'); },
	     *   () => { console.log('on error'); }
	     * );
	     * ```
	     *
	     * @see {@link https://community.estimote.com/hc/en-us/articles/203393036-Estimote-SDK-and-iOS-8-Location-Services|Estimote SDK and iOS 8 Location Services}
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.requestWhenInUseAuthorization = function () { return; };
	    /**
	     * Ask the user for permission to use location services
	     * whenever the app is running.
	     * You need to call this function or requestWhenInUseAuthorization
	     * on iOS 8+.
	     * Does nothing on other platforms.
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.requestAlwaysAuthorization().then(
	     *   () => { console.log('on success'); },
	     *   () => { console.log('on error'); }
	     * );
	     * ```
	     *
	     * @see {@link https://community.estimote.com/hc/en-us/articles/203393036-Estimote-SDK-and-iOS-8-Location-Services|Estimote SDK and iOS 8 Location Services}
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.requestAlwaysAuthorization = function () { return; };
	    /**
	     * Get the current location authorization status.
	     * Implemented on iOS 8+.
	     * Does nothing on other platforms.
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.authorizationStatus().then(
	     *   (result) => { console.log('Location authorization status: ' + result); },
	     *   (errorMessage) => { console.log('Error: ' + errorMessage); }
	     * );
	     * ```
	     *
	     * @see {@link https://community.estimote.com/hc/en-us/articles/203393036-Estimote-SDK-and-iOS-8-Location-Services|Estimote SDK and iOS 8 Location Services}
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.authorizationStatus = function () { return; };
	    /**
	     * Start advertising as a beacon.
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.startAdvertisingAsBeacon('B9407F30-F5F8-466E-AFF9-25556B57FE6D', 1, 1, 'MyRegion')
	     *    .then(() => { console.log('Beacon started'); });
	     * setTimeout(() => {
	     *   EstimoteBeacons.stopAdvertisingAsBeacon().then((result) => { console.log('Beacon stopped'); });
	     * }, 5000);
	     * ```
	     * @param uuid {string} UUID string the beacon should advertise (mandatory).
	     * @param major {number} Major value to advertise (mandatory).
	     * @param minor {number} Minor value to advertise (mandatory).
	     * @param regionId {string} Identifier of the region used to advertise (mandatory).
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.startAdvertisingAsBeacon = function (uuid, major, minor, regionId) { return; };
	    /**
	     * Stop advertising as a beacon.
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.startAdvertisingAsBeacon('B9407F30-F5F8-466E-AFF9-25556B57FE6D', 1, 1, 'MyRegion')
	     *    .then(() => { console.log('Beacon started'); });
	     * setTimeout(() => {
	     *   EstimoteBeacons.stopAdvertisingAsBeacon().then((result) => { console.log('Beacon stopped'); });
	     * }, 5000);
	     * ```
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.stopAdvertisingAsBeacon = function () { return; };
	    /**
	     * Enable analytics.
	     *
	     * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.enableAnalytics(true).then(() => { console.log('Analytics enabled'); });
	     * ```
	     * @param enable {number} Boolean value to turn analytics on or off (mandatory).
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.enableAnalytics = function (enable) { return; };
	    /**
	    * Test if analytics is enabled.
	    *
	    * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.isAnalyticsEnabled().then((enabled) => { console.log('Analytics enabled: ' + enabled); });
	     * ```
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.isAnalyticsEnabled = function () { return; };
	    /**
	    * Test if App ID and App Token is set.
	    *
	    * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.isAuthorized().then((isAuthorized) => { console.log('App ID and App Token is set: ' + isAuthorized); });
	     * ```
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.isAuthorized = function () { return; };
	    /**
	    * Set App ID and App Token.
	    *
	    * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.setupAppIDAndAppToken('MyAppID', 'MyAppToken').then(() => { console.log('AppID and AppToken configured!'); });
	     * ```
	     * @param appID {string} The App ID (mandatory).
	     * @param appToken {string} The App Token (mandatory).
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.setupAppIDAndAppToken = function (appID, appToken) { return; };
	    /**
	     * Start scanning for all nearby beacons using CoreBluetooth (no region object is used).
	     * Available on iOS.
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.startEstimoteBeaconDiscovery().subscribe(beacons => {
	     *   console.log(JSON.stringify(beacons));
	     * });
	     * setTimeout(() => {
	     *   EstimoteBeacons.stopEstimoteBeaconDiscovery().then(() => { console.log('scan stopped'); });
	     * }, 5000);
	     * ```
	     * @returns {Observable<any>} Returns an Observable that notifies of each beacon discovered.
	     */
	    EstimoteBeacons.startEstimoteBeaconDiscovery = function () { return; };
	    /**
	     * Stop CoreBluetooth scan. Available on iOS.
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.startEstimoteBeaconDiscovery().subscribe(beacons => {
	     *   console.log(JSON.stringify(beacons));
	     * });
	     * setTimeout(() => {
	     *   EstimoteBeacons.stopEstimoteBeaconDiscovery().then(() => { console.log('scan stopped'); });
	     * }, 5000);
	     * ```
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.stopEstimoteBeaconDiscovery = function () { return; };
	    /**
	     * Start ranging beacons. Available on iOS and Android.
	     *
	     * @usage
	     * ```
	     * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.
	     * EstimoteBeacons.startRangingBeaconsInRegion(region).subscribe(info => {
	     *   console.log(JSON.stringify(info));
	     * });
	     * setTimeout(() => {
	     *   EstimoteBeacons.stopRangingBeaconsInRegion(region).then(() => { console.log('scan stopped'); });
	     * }, 5000);
	     * ```
	     * @param region {EstimoteBeaconRegion} Dictionary with region properties (mandatory).
	     * @returns {Observable<any>} Returns an Observable that notifies of each beacon discovered.
	     */
	    EstimoteBeacons.startRangingBeaconsInRegion = function (region) { return; };
	    /**
	     * Stop ranging beacons. Available on iOS and Android.
	     *
	     * @usage
	     * ```
	     * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.
	     * EstimoteBeacons.startRangingBeaconsInRegion(region).subscribe(info => {
	     *   console.log(JSON.stringify(info));
	     * });
	     * setTimeout(() => {
	     *   EstimoteBeacons.stopRangingBeaconsInRegion(region).then(() => { console.log('scan stopped'); });
	     * }, 5000);
	     * ```
	     * @param region {EstimoteBeaconRegion} Dictionary with region properties (mandatory).
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.stopRangingBeaconsInRegion = function (region) { return; };
	    /**
	     * Start ranging secure beacons. Available on iOS.
	     * This function has the same parameters/behaviour as
	     * {@link EstimoteBeacons.startRangingBeaconsInRegion}.
	     * To use secure beacons set the App ID and App Token using
	     * {@link EstimoteBeacons.setupAppIDAndAppToken}.
	     * @returns {Observable<any>}
	     */
	    EstimoteBeacons.startRangingSecureBeaconsInRegion = function (region) { return; };
	    /**
	     * Stop ranging secure beacons. Available on iOS.
	     * This function has the same parameters/behaviour as
	     * {@link EstimoteBeacons.stopRangingBeaconsInRegion}.
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.stopRangingSecureBeaconsInRegion = function (region) { return; };
	    /**
	     * Start monitoring beacons. Available on iOS and Android.
	     *
	     * @usage
	     * ```
	     * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.
	     * EstimoteBeacons.startMonitoringForRegion(region).subscribe(state => {
	     *   console.log('Region state: ' + JSON.stringify(state));
	     * });
	     * ```
	     * @param region {EstimoteBeaconRegion} Dictionary with region properties (mandatory).
	     * @param [notifyEntryStateOnDisplay=false] {boolean} Set to true to detect if you
	     * are inside a region when the user turns display on, see
	     * {@link https://developer.apple.com/library/prerelease/ios/documentation/CoreLocation/Reference/CLBeaconRegion_class/index.html#//apple_ref/occ/instp/CLBeaconRegion/notifyEntryStateOnDisplay|iOS documentation}
	     * for further details (optional, defaults to false, iOS only).
	     * @returns {Observable<any>} Returns an Observable that notifies of each region state discovered.
	     */
	    EstimoteBeacons.startMonitoringForRegion = function (region, notifyEntryStateOnDisplay) { return; };
	    /**
	     * Stop monitoring beacons. Available on iOS and Android.
	     *
	     * @usage
	     * ```
	     * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.
	     * EstimoteBeacons.stopMonitoringForRegion(region).then(() => { console.log('monitoring is stopped'); });
	     * ```
	     * @param region {EstimoteBeaconRegion} Dictionary with region properties (mandatory).
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.stopMonitoringForRegion = function (region) { return; };
	    /**
	     * Start monitoring secure beacons. Available on iOS.
	     * This function has the same parameters/behaviour as
	     * EstimoteBeacons.startMonitoringForRegion.
	     * To use secure beacons set the App ID and App Token using
	     * {@link EstimoteBeacons.setupAppIDAndAppToken}.
	     * @see {@link EstimoteBeacons.startMonitoringForRegion}
	     * @param region {EstimoteBeaconRegion} Region
	     * @param notifyEntryStateOnDisplay {boolean}
	     * @returns {Observable<any>}
	     */
	    EstimoteBeacons.startSecureMonitoringForRegion = function (region, notifyEntryStateOnDisplay) { return; };
	    /**
	    * Stop monitoring secure beacons. Available on iOS.
	    * This function has the same parameters/behaviour as
	    * {@link EstimoteBeacons.stopMonitoringForRegion}.
	    * @param region {EstimoteBeaconRegion} Region
	    * @returns {Promise<any>}
	    */
	    EstimoteBeacons.stopSecureMonitoringForRegion = function (region) { return; };
	    /**
	     * Connect to Estimote Beacon. Available on Android.
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.connectToBeacon(FF:0F:F0:00:F0:00);
	     * ```
	     * ```
	     * EstimoteBeacons.connectToBeacon({
	     *     proximityUUID: '000000FF-F00F-0FF0-F000-000FF0F00000',
	     *     major: 1,
	     *     minor: 1
	     *   });
	     * ```
	     * @param beacon {Beacon} Beacon to connect to.
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.connectToBeacon = function (beacon) { return; };
	    /**
	     * Disconnect from connected Estimote Beacon. Available on Android.
	     *
	     * @usage
	     * ```
	     * EstimoteBeacons.disconnectConnectedBeacon();
	     * ```
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.disconnectConnectedBeacon = function () { return; };
	    /**
	     * Write proximity UUID to connected Estimote Beacon. Available on Android.
	     *
	     * @usage
	     * ```
	     * // Example that writes constant ESTIMOTE_PROXIMITY_UUID
	     * EstimoteBeacons.writeConnectedProximityUUID(ESTIMOTE_PROXIMITY_UUID);
	     *
	     * @param uuid {string} String to write as new UUID
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.writeConnectedProximityUUID = function (uuid) { return; };
	    /**
	     * Write major to connected Estimote Beacon. Available on Android.
	     *
	     * @usage
	     * ```
	     * // Example that writes 1
	     * EstimoteBeacons.writeConnectedMajor(1);
	     *
	     * @param major {number} number to write as new major
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.writeConnectedMajor = function (major) { return; };
	    /**
	     * Write minor to connected Estimote Beacon. Available on Android.
	     *
	     * @usage
	     * ```
	     * // Example that writes 1
	     * EstimoteBeacons.writeConnectedMinor(1);
	     *
	     * @param minor {number} number to write as new minor
	     * @returns {Promise<any>}
	     */
	    EstimoteBeacons.writeConnectedMinor = function (minor) { return; };
	    /** Proximity value */
	    EstimoteBeacons.ProximityUnknown = 0;
	    /** Proximity value */
	    EstimoteBeacons.ProximityImmediate = 1;
	    /** Proximity value */
	    EstimoteBeacons.ProximityNear = 2;
	    /** Proximity value */
	    EstimoteBeacons.ProximityFar = 3;
	    /** Beacon colour */
	    EstimoteBeacons.BeaconColorUnknown = 0;
	    /** Beacon colour */
	    EstimoteBeacons.BeaconColorMintCocktail = 1;
	    /** Beacon colour */
	    EstimoteBeacons.BeaconColorIcyMarshmallow = 2;
	    /** Beacon colour */
	    EstimoteBeacons.BeaconColorBlueberryPie = 3;
	    /**
	     * Beacon colour.
	     */
	    EstimoteBeacons.BeaconColorSweetBeetroot = 4;
	    /** Beacon colour */
	    EstimoteBeacons.BeaconColorCandyFloss = 5;
	    /** Beacon colour */
	    EstimoteBeacons.BeaconColorLemonTart = 6;
	    /** Beacon colour */
	    EstimoteBeacons.BeaconColorVanillaJello = 7;
	    /** Beacon colour */
	    EstimoteBeacons.BeaconColorLiquoriceSwirl = 8;
	    /** Beacon colour */
	    EstimoteBeacons.BeaconColorWhite = 9;
	    /** Beacon colour */
	    EstimoteBeacons.BeaconColorTransparent = 10;
	    /** Region state */
	    EstimoteBeacons.RegionStateUnknown = 'unknown';
	    /** Region state */
	    EstimoteBeacons.RegionStateOutside = 'outside';
	    /** Region state */
	    EstimoteBeacons.RegionStateInside = 'inside';
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "requestWhenInUseAuthorization", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "requestAlwaysAuthorization", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "authorizationStatus", null);
	    __decorate([
	        plugin_1.Cordova({
	            clearFunction: 'stopAdvertisingAsBeacon'
	        })
	    ], EstimoteBeacons, "startAdvertisingAsBeacon", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "stopAdvertisingAsBeacon", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "enableAnalytics", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "isAnalyticsEnabled", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "isAuthorized", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "setupAppIDAndAppToken", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'stopEstimoteBeaconDiscovery'
	        })
	    ], EstimoteBeacons, "startEstimoteBeaconDiscovery", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "stopEstimoteBeaconDiscovery", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'stopRangingBeaconsInRegion',
	            clearWithArgs: true
	        })
	    ], EstimoteBeacons, "startRangingBeaconsInRegion", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "stopRangingBeaconsInRegion", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'stopRangingSecureBeaconsInRegion',
	            clearWithArgs: true
	        })
	    ], EstimoteBeacons, "startRangingSecureBeaconsInRegion", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "stopRangingSecureBeaconsInRegion", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'stopMonitoringForRegion',
	            clearWithArgs: true,
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], EstimoteBeacons, "startMonitoringForRegion", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "stopMonitoringForRegion", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'stopSecureMonitoringForRegion',
	            clearWithArgs: true,
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], EstimoteBeacons, "startSecureMonitoringForRegion", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "stopSecureMonitoringForRegion", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "connectToBeacon", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "disconnectConnectedBeacon", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "writeConnectedProximityUUID", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "writeConnectedMajor", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], EstimoteBeacons, "writeConnectedMinor", null);
	    EstimoteBeacons = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'EstimoteBeacons',
	            plugin: 'cordova-plugin-estimote',
	            pluginRef: 'estimote.beacons',
	            repo: 'https://github.com/evothings/phonegap-estimotebeacons',
	            platforms: ['iOS', 'Android']
	        })
	    ], EstimoteBeacons);
	    return EstimoteBeacons;
	}());
	exports.EstimoteBeacons = EstimoteBeacons;
	//# sourceMappingURL=estimote-beacons.js.map

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Facebook
	 * @description
	 * Use the Facebook Connect plugin to obtain access to the native FB application on iOS and Android.
	 *
	 * Requires Cordova plugin: `cordova-plugin-facebook4`. For more info, please see the [Facebook Connect](https://github.com/jeduan/cordova-plugin-facebook4).
	 *
	 * #### Installation
	 *
	 *  To use the FB plugin, you first have to create a new Facebook App inside of the Facebook developer portal at [https://developers.facebook.com/apps](https://developers.facebook.com/apps).
	 *
	 * [![fb-getstarted-1](/img/docs/native/Facebook/1.png)](https://developers.facebook.com/apps/)
	 *
	 * Retrieve the `App ID` and `App Name`.
	 *
	 * [![fb-getstarted-2](/img/docs/native/Facebook/2.png)](https://developers.facebook.com/apps/)
	 *
	 * Then type in the following command in your Terminal, where APP_ID and APP_NAME are the values from the Facebook Developer portal.
	 *
	 * ```bash
	 *  ionic plugin add cordova-plugin-facebook4 --save --variable APP_ID="123456789" --variable APP_NAME="myApplication"
	 * ```
	 *
	 * After, you'll need to add the native platforms you'll be using to your app in the Facebook Developer portal under your app's Settings:
	 *
	 * [![fb-getstarted-3](/img/docs/native/Facebook/3.png)](https://developers.facebook.com/apps/)
	 *
	 * Click `'Add Platform'`.
	 *
	 * [![fb-getstarted-4](/img/docs/native/Facebook/4.png)](https://developers.facebook.com/apps/)
	 *
	 * At this point you'll need to open your project's [`config.xml`](https://cordova.apache.org/docs/en/latest/config_ref/index.html) file, found in the root directory of your project.
	 *
	 * Take note of the `id` for the next step:
	 * ```
	 * <widget id="com.mycompany.testapp" version="0.0.1" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">
	 * ```
	 *
	 * You can also edit the `id` to whatever you'd like it to be.
	 *
	 * #### iOS Install
	 * Under 'Bundle ID', add the `id` from your `config.xml` file:
	 *
	 * [![fb-getstarted-5](/img/docs/native/Facebook/5.png)](https://developers.facebook.com/apps/)
	 *
	 *
	 * #### Android Install
	 * Under 'Google Play Package Name', add the `id` from your `config.xml` file:
	 *
	 * [![fb-getstarted-6](/img/docs/native/Facebook/6.png)](https://developers.facebook.com/apps/)
	 *
	 *
	 * And that's it! You can now make calls to Facebook using the plugin.
	 *
	 * ## Events
	 *
	 * App events allow you to understand the makeup of users engaging with your app, measure the performance of your Facebook mobile app ads, and reach specific sets of your users with Facebook mobile app ads.
	 *
	 * - [iOS] [https://developers.facebook.com/docs/ios/app-events](https://developers.facebook.com/docs/ios/app-events)
	 * - [Android] [https://developers.facebook.com/docs/android/app-events](https://developers.facebook.com/docs/android/app-events)
	 * - [JS] Does not have an Events API, so the plugin functions are empty and will return an automatic success
	 *
	 * Activation events are automatically tracked for you in the plugin.
	 *
	 * Events are listed on the [insights page](https://www.facebook.com/insights/).
	 *
	 * For tracking events, see `logEvent` and `logPurchase`.
	 *
	 * @usage
	 * ```typescript
	 * import { Facebook } from 'ionic-native';
	 *
	 *
	 *
	 * ```
	 *
	 */
	var Facebook = (function () {
	    function Facebook() {
	    }
	    /**
	     * Browser wrapper
	     * @param {number} appId Your Facebook AppID from their dashboard
	     * @param {string} version The version of API you may want to use. Optional
	     * @returns {Promise<any>}
	     */
	    Facebook.browserInit = function (appId, version) {
	        return;
	    };
	    /**
	     * Login to Facebook to authenticate this app.
	     *
	     * ```typescript
	     * {
	     *   status: "connected",
	     *   authResponse: {
	     *     session_key: true,
	     *     accessToken: "kgkh3g42kh4g23kh4g2kh34g2kg4k2h4gkh3g4k2h4gk23h4gk2h34gk234gk2h34AndSoOn",
	     *     expiresIn: 5183979,
	     *     sig: "...",
	     *     secret: "...",
	     *     userID: "634565435"
	     *   }
	     * }
	     * ```
	     *
	     * @param {string[]}  permissions List of [permissions](https://developers.facebook.com/docs/facebook-login/permissions) this app has upon logging in.
	     * @returns {Promise<FacebookLoginResponse>} Returns a Promise that resolves with a status object if login succeeds, and rejects if login fails.
	     */
	    Facebook.login = function (permissions) { return; };
	    /**
	     * Logout of Facebook.
	     *
	     * For more info see the [Facebook docs](https://developers.facebook.com/docs/reference/javascript/FB.logout)
	     * @returns {Promise<any>} Returns a Promise that resolves on a successful logout, and rejects if logout fails.
	     */
	    Facebook.logout = function () { return; };
	    /**
	     * Determine if a user is logged in to Facebook and has authenticated your app.  There are three possible states for a user:
	     *
	     * 1) the user is logged into Facebook and has authenticated your application (connected)
	     * 2) the user is logged into Facebook but has not authenticated your application (not_authorized)
	     * 3) the user is either not logged into Facebook or explicitly logged out of your application so it doesn't attempt to connect to Facebook and thus, we don't know if they've authenticated your application or not (unknown)
	     *
	     * Resolves with a response like:
	     *
	     * ```
	     * {
	     *   authResponse: {
	     *     userID: "12345678912345",
	     *     accessToken: "kgkh3g42kh4g23kh4g2kh34g2kg4k2h4gkh3g4k2h4gk23h4gk2h34gk234gk2h34AndSoOn",
	     *     session_Key: true,
	     *     expiresIn: "5183738",
	     *     sig: "..."
	     *   },
	     *   status: "connected"
	     * }
	     * ```
	     *
	     * For more information see the [Facebook docs](https://developers.facebook.com/docs/reference/javascript/FB.getLoginStatus)
	     *
	     * @returns {Promise<any>} Returns a Promise that resolves with a status, or rejects with an error
	     */
	    Facebook.getLoginStatus = function () { return; };
	    /**
	     * Get a Facebook access token for using Facebook services.
	     *
	     * @returns {Promise<string>} Returns a Promise that resolves with an access token, or rejects with an error
	     */
	    Facebook.getAccessToken = function () { return; };
	    /**
	     * Show one of various Facebook dialogs. Example of options for a Share dialog:
	     *
	     * ```
	     * {
	     *   method: "share",
	     *   href: "http://example.com",
	     *   caption: "Such caption, very feed.",
	     *   description: "Much description",
	     *   picture: 'http://example.com/image.png'
	     * }
	     * ```
	     *
	     * For more options see the [Cordova plugin docs](https://github.com/jeduan/cordova-plugin-facebook4#show-a-dialog) and the [Facebook docs](https://developers.facebook.com/docs/javascript/reference/FB.ui)
	     * @param {Object} options The dialog options
	     * @returns {Promise<any>} Returns a Promise that resolves with success data, or rejects with an error
	     */
	    Facebook.showDialog = function (options) { return; };
	    /**
	     * Make a call to Facebook Graph API. Can take additional permissions beyond those granted on login.
	     *
	     * For more information see:
	     *
	     *  Calling the Graph API - https://developers.facebook.com/docs/javascript/reference/FB.api
	     *  Graph Explorer - https://developers.facebook.com/tools/explorer
	     *  Graph API - https://developers.facebook.com/docs/graph-api
	     *
	     * @param {string}  requestPath Graph API endpoint you want to call
	     * @param {string[]}  permissions List of [permissions](https://developers.facebook.com/docs/facebook-login/permissions) for this request.
	     * @returns {Promise<any>} Returns a Promise that resolves with the result of the request, or rejects with an error
	     */
	    Facebook.api = function (requestPath, permissions) { return; };
	    /**
	     * Log an event.  For more information see the Events section above.
	     *
	     * @param {string}  name Name of the event
	     * @param {Object}  [params] An object containing extra data to log with the event
	     * @param {number}  [valueToSum] any value to be added to added to a sum on each event
	     * @returns {Promise<any>}
	     */
	    Facebook.logEvent = function (name, params, valueToSum) { return; };
	    /**
	     * Log a purchase. For more information see the Events section above.
	     *
	     * @param {number}  value Value of the purchase.
	     * @param {string}  currency The currency, as an [ISO 4217 currency code](http://en.wikipedia.org/wiki/ISO_4217)
	     * @returns {Promise<any>}
	     */
	    Facebook.logPurchase = function (value, currency) { return; };
	    /**
	     * Open App Invite dialog. Does not require login.
	     *
	     * For more information see:
	     *
	     *   the App Invites Overview - https://developers.facebook.com/docs/app-invites/overview
	     *   the App Links docs - https://developers.facebook.com/docs/applinks
	     *
	     *
	     * @param {Object}  options An object containing an [App Link](https://developers.facebook.com/docs/applinks) URL to your app and an optional image URL.
	     *   url: [App Link](https://developers.facebook.com/docs/applinks) to your app
	     *   picture: image to be displayed in the App Invite dialog
	     *
	     * @returns {Promise<any>} Returns a Promise that resolves with the result data, or rejects with an error
	     */
	    Facebook.appInvite = function (options) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Facebook, "browserInit", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Facebook, "login", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Facebook, "logout", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Facebook, "getLoginStatus", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Facebook, "getAccessToken", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Facebook, "showDialog", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Facebook, "api", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 3,
	            errorIndex: 4
	        })
	    ], Facebook, "logEvent", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Facebook, "logPurchase", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Facebook, "appInvite", null);
	    Facebook = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Facebook',
	            plugin: 'cordova-plugin-facebook4',
	            pluginRef: 'facebookConnectPlugin',
	            repo: 'https://github.com/jeduan/cordova-plugin-facebook4',
	            install: 'ionic plugin add cordova-plugin-facebook4 --variable APP_ID="123456789" --variable APP_NAME="myApplication"'
	        })
	    ], Facebook);
	    return Facebook;
	}());
	exports.Facebook = Facebook;
	//# sourceMappingURL=facebook.js.map

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name File
	 * @description
	 * This plugin implements a File API allowing read/write access to files residing on the device.
	 *
	 * The File class implements static convenience functions to access files and directories.
	 *
	 * Example:
	 * ```
	 * import { File } from 'ionic-native';
	 *
	 * const dataDirectory: string = File.dataDirectory;
	 *
	 * File.checkDir(dataDirectory, 'mydir').then(_ => console.log('yay')).catch(err => console.log('boooh'));
	 * ```
	 *
	 *  This plugin is based on several specs, including : The HTML5 File API http://www.w3.org/TR/FileAPI/
	 *  The (now-defunct) Directories and System extensions Latest: http://www.w3.org/TR/2012/WD-file-system-api-20120417/
	 *  Although most of the plugin code was written when an earlier spec was current: http://www.w3.org/TR/2011/WD-file-system-api-20110419/
	 *  It also implements the FileWriter spec : http://dev.w3.org/2009/dap/file-system/file-writer.html
	 */
	var File = (function () {
	    function File() {
	    }
	    /**
	     * Get free disk space in Bytes
	     * @returns {Promise<number>} Returns a promise that resolves with the remaining free disk space in Bytes
	     */
	    File.getFreeDiskSpace = function () {
	        return new Promise(function (resolve, reject) {
	            if (!cordova || !cordova.exec) {
	                plugin_1.pluginWarn({
	                    pluginName: 'File',
	                    plugin: 'cordova-plugin-file'
	                });
	                reject({ error: 'plugin_not_installed' });
	            }
	            else {
	                cordova.exec(resolve, reject, 'File', 'getFreeDiskSpace', []);
	            }
	        });
	    };
	    /**
	     * Check if a directory exists in a certain path, directory.
	     *
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} dir Name of directory to check
	     * @returns {Promise<boolean>} Returns a Promise that resolves to true if the directory exists or rejects with an error.
	     */
	    File.checkDir = function (path, dir) {
	        if ((/^\//.test(dir))) {
	            var err = new exports.FileError(5);
	            err.message = 'directory cannot start with \/';
	            return Promise.reject(err);
	        }
	        var fullpath = path + dir;
	        return File.resolveDirectoryUrl(fullpath)
	            .then(function () {
	            return true;
	        });
	    };
	    /**
	     * Creates a new directory in the specific path.
	     * The replace boolean value determines whether to replace an existing directory with the same name.
	     * If an existing directory exists and the replace value is false, the promise will fail and return an error.
	     *
	     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} dirName Name of directory to create
	     * @param {boolean} replace If true, replaces file with same name. If false returns error
	     * @returns {Promise<DirectoryEntry>} Returns a Promise that resolves with a DirectoryEntry or rejects with an error.
	     */
	    File.createDir = function (path, dirName, replace) {
	        if ((/^\//.test(dirName))) {
	            var err = new exports.FileError(5);
	            err.message = 'directory cannot start with \/';
	            return Promise.reject(err);
	        }
	        var options = {
	            create: true
	        };
	        if (!replace) {
	            options.exclusive = true;
	        }
	        return File.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return File.getDirectory(fse, dirName, options);
	        });
	    };
	    /**
	     * Remove a directory at a given path.
	     *
	     * @param {string} path The path to the directory
	     * @param {string} dirName The directory name
	     * @returns {Promise<RemoveResult>} Returns a Promise that resolves to a RemoveResult or rejects with an error.
	     */
	    File.removeDir = function (path, dirName) {
	        if ((/^\//.test(dirName))) {
	            var err = new exports.FileError(5);
	            err.message = 'directory cannot start with \/';
	            return Promise.reject(err);
	        }
	        return File.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return File.getDirectory(fse, dirName, { create: false });
	        })
	            .then(function (de) {
	            return File.remove(de);
	        });
	    };
	    /**
	     * Move a directory to a given path.
	     *
	     * @param {string} path The source path to the directory
	     * @param {string} dirName The source directory name
	     * @param {string} newPath The destionation path to the directory
	     * @param {string} newDirName The destination directory name
	     * @returns {Promise<DirectoryEntry|Entry>} Returns a Promise that resolves to the new DirectoryEntry object or rejects with an error.
	     */
	    File.moveDir = function (path, dirName, newPath, newDirName) {
	        var _this = this;
	        newDirName = newDirName || dirName;
	        if ((/^\//.test(newDirName))) {
	            var err = new exports.FileError(5);
	            err.message = 'directory cannot start with \/';
	            return Promise.reject(err);
	        }
	        return this.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return _this.getDirectory(fse, dirName, { create: false });
	        })
	            .then(function (srcde) {
	            return _this.resolveDirectoryUrl(newPath)
	                .then(function (deste) {
	                return File.move(srcde, deste, newDirName);
	            });
	        });
	    };
	    /**
	     * Copy a directory in various methods. If destination directory exists, will fail to copy.
	     *
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} dirName Name of directory to copy
	     * @param {string} newPath Base FileSystem of new location
	     * @param {string} newDirName New name of directory to copy to (leave blank to remain the same)
	     * @returns {Promise<Entry>} Returns a Promise that resolves to the new Entry object or rejects with an error.
	     */
	    File.copyDir = function (path, dirName, newPath, newDirName) {
	        var _this = this;
	        if ((/^\//.test(newDirName))) {
	            var err = new exports.FileError(5);
	            err.message = 'directory cannot start with \/';
	            return Promise.reject(err);
	        }
	        return this.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return _this.getDirectory(fse, dirName, { create: false });
	        })
	            .then(function (srcde) {
	            return _this.resolveDirectoryUrl(newPath)
	                .then(function (deste) {
	                return File.copy(srcde, deste, newDirName);
	            });
	        });
	    };
	    /**
	     * List files and directory from a given path.
	     *
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} dirName Name of directory
	     * @returns {Promise<Entry[]>} Returns a Promise that resolves to an array of Entry objects or rejects with an error.
	     */
	    File.listDir = function (path, dirName) {
	        if ((/^\//.test(dirName))) {
	            var err = new exports.FileError(5);
	            err.message = 'directory cannot start with \/';
	            return Promise.reject(err);
	        }
	        return File.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return File.getDirectory(fse, dirName, { create: false, exclusive: false });
	        })
	            .then(function (de) {
	            var reader = de.createReader();
	            return File.readEntries(reader);
	        });
	    };
	    /**
	     * Removes all files and the directory from a desired location.
	     *
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} dirName Name of directory
	     * @returns {Promise<RemoveResult>} Returns a Promise that resolves with a RemoveResult or rejects with an error.
	     */
	    File.removeRecursively = function (path, dirName) {
	        if ((/^\//.test(dirName))) {
	            var err = new exports.FileError(5);
	            err.message = 'directory cannot start with \/';
	            return Promise.reject(err);
	        }
	        return File.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return File.getDirectory(fse, dirName, { create: false });
	        })
	            .then(function (de) {
	            return File.rimraf(de);
	        });
	    };
	    /**
	     * Check if a file exists in a certain path, directory.
	     *
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} file Name of file to check
	     * @returns {Promise<boolean>} Returns a Promise that resolves with a boolean or rejects with an error.
	     */
	    File.checkFile = function (path, file) {
	        if ((/^\//.test(file))) {
	            var err = new exports.FileError(5);
	            err.message = 'file cannot start with \/';
	            return Promise.reject(err);
	        }
	        return File.resolveLocalFilesystemUrl(path + file)
	            .then(function (fse) {
	            if (fse.isFile) {
	                return true;
	            }
	            else {
	                var err = new exports.FileError(13);
	                err.message = 'input is not a file';
	                return Promise.reject(err);
	            }
	        });
	    };
	    /**
	     * Creates a new file in the specific path.
	     * The replace boolean value determines whether to replace an existing file with the same name.
	     * If an existing file exists and the replace value is false, the promise will fail and return an error.
	     *
	     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} fileName Name of file to create
	     * @param {boolean} replace If true, replaces file with same name. If false returns error
	     * @returns {Promise<FileEntry>} Returns a Promise that resolves to a FileEntry or rejects with an error.
	     */
	    File.createFile = function (path, fileName, replace) {
	        if ((/^\//.test(fileName))) {
	            var err = new exports.FileError(5);
	            err.message = 'file-name cannot start with \/';
	            return Promise.reject(err);
	        }
	        var options = {
	            create: true
	        };
	        if (!replace) {
	            options.exclusive = true;
	        }
	        return File.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return File.getFile(fse, fileName, options);
	        });
	    };
	    /**
	     * Removes a file from a desired location.
	     *
	     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} fileName Name of file to remove
	     * @returns {Promise<RemoveResult>} Returns a Promise that resolves to a RemoveResult or rejects with an error.
	     */
	    File.removeFile = function (path, fileName) {
	        if ((/^\//.test(fileName))) {
	            var err = new exports.FileError(5);
	            err.message = 'file-name cannot start with \/';
	            return Promise.reject(err);
	        }
	        return File.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return File.getFile(fse, fileName, { create: false });
	        })
	            .then(function (fe) {
	            return File.remove(fe);
	        });
	    };
	    /** Write a new file to the desired location.
	     *
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} fileName path relative to base path
	     * @param {string | Blob} text content or blob to write
	     * @param {WriteOptions} options replace file if set to true. See WriteOptions for more information.
	     * @returns {Promise<any>} Returns a Promise that resolves to updated file entry or rejects with an error.
	     */
	    File.writeFile = function (path, fileName, text, options) {
	        if (options === void 0) { options = {}; }
	        if ((/^\//.test(fileName))) {
	            var err = new exports.FileError(5);
	            err.message = 'file-name cannot start with \/';
	            return Promise.reject(err);
	        }
	        var getFileOpts = {
	            create: !options.append,
	            exclusive: !options.replace
	        };
	        return File.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return File.getFile(fse, fileName, getFileOpts);
	        })
	            .then(function (fe) {
	            return File.writeFileEntry(fe, text, options);
	        });
	    };
	    /** Write content to FileEntry.
	     *
	     * @private
	     * @param {FileEntry} fe file entry object
	     * @param {string | Blob} text content or blob to write
	     * @param {WriteOptions} options replace file if set to true. See WriteOptions for more information.
	     * @returns {Promise<FileEntry>} Returns a Promise that resolves to updated file entry or rejects with an error.
	     */
	    File.writeFileEntry = function (fe, text, options) {
	        return File.createWriter(fe)
	            .then(function (writer) {
	            if (options.append) {
	                writer.seek(writer.length);
	            }
	            if (options.truncate) {
	                writer.truncate(options.truncate);
	            }
	            return File.write(writer, text);
	        })
	            .then(function () { return fe; });
	    };
	    /** Write to an existing file.
	     *
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} fileName path relative to base path
	     * @param {string | Blob} text content or blob to write
	     * @returns {Promise<void>} Returns a Promise that resolves or rejects with an error.
	     */
	    File.writeExistingFile = function (path, fileName, text) {
	        return File.writeFile(path, fileName, text, { replace: true });
	    };
	    /**
	     * Read the contents of a file as text.
	     *
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} file Name of file, relative to path.
	     * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as string or rejects with an error.
	     */
	    File.readAsText = function (path, file) {
	        if ((/^\//.test(file))) {
	            var err = new exports.FileError(5);
	            err.message = 'file-name cannot start with \/';
	            return Promise.reject(err);
	        }
	        return File.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return File.getFile(fse, file, { create: false });
	        })
	            .then(function (fe) {
	            var reader = new exports.FileReader();
	            return new Promise(function (resolve, reject) {
	                reader.onloadend = function () {
	                    if (reader.result !== undefined || reader.result !== null) {
	                        resolve(reader.result);
	                    }
	                    else if (reader.error !== undefined || reader.error !== null) {
	                        reject(reader.error);
	                    }
	                    else {
	                        reject({ code: null, message: 'READER_ONLOADEND_ERR' });
	                    }
	                };
	                fe.file(function (file) {
	                    reader.readAsText(file);
	                }, function (error) {
	                    reject(error);
	                });
	            });
	        });
	    };
	    /**
	     * Read file and return data as a base64 encoded data url.
	     * A data url is of the form:
	     *      data:[<mediatype>][;base64],<data>
	  
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} file Name of file, relative to path.
	     * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as data URL or rejects with an error.
	     */
	    File.readAsDataURL = function (path, file) {
	        if ((/^\//.test(file))) {
	            var err = new exports.FileError(5);
	            err.message = 'file-name cannot start with \/';
	            return Promise.reject(err);
	        }
	        return File.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return File.getFile(fse, file, { create: false });
	        })
	            .then(function (fe) {
	            var reader = new exports.FileReader();
	            return new Promise(function (resolve, reject) {
	                reader.onloadend = function () {
	                    if (reader.result !== undefined || reader.result !== null) {
	                        resolve(reader.result);
	                    }
	                    else if (reader.error !== undefined || reader.error !== null) {
	                        reject(reader.error);
	                    }
	                    else {
	                        reject({ code: null, message: 'READER_ONLOADEND_ERR' });
	                    }
	                };
	                fe.file(function (file) {
	                    reader.readAsDataURL(file);
	                }, function (error) {
	                    reject(error);
	                });
	            });
	        });
	    };
	    /**
	     * Read file and return data as a binary data.
	  
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} file Name of file, relative to path.
	     * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as string rejects with an error.
	     */
	    File.readAsBinaryString = function (path, file) {
	        if ((/^\//.test(file))) {
	            var err = new exports.FileError(5);
	            err.message = 'file-name cannot start with \/';
	            return Promise.reject(err);
	        }
	        return File.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return File.getFile(fse, file, { create: false });
	        })
	            .then(function (fe) {
	            var reader = new exports.FileReader();
	            return new Promise(function (resolve, reject) {
	                reader.onloadend = function () {
	                    if (reader.result !== undefined || reader.result !== null) {
	                        resolve(reader.result);
	                    }
	                    else if (reader.error !== undefined || reader.error !== null) {
	                        reject(reader.error);
	                    }
	                    else {
	                        reject({ code: null, message: 'READER_ONLOADEND_ERR' });
	                    }
	                };
	                fe.file(function (file) {
	                    reader.readAsBinaryString(file);
	                }, function (error) {
	                    reject(error);
	                });
	            });
	        });
	    };
	    /**
	     * Read file and return data as an ArrayBuffer.
	  
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} file Name of file, relative to path.
	     * @returns {Promise<ArrayBuffer>} Returns a Promise that resolves with the contents of the file as ArrayBuffer or rejects with an error.
	     */
	    File.readAsArrayBuffer = function (path, file) {
	        if ((/^\//.test(file))) {
	            var err = new exports.FileError(5);
	            err.message = 'file-name cannot start with \/';
	            return Promise.reject(err);
	        }
	        return File.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return File.getFile(fse, file, { create: false });
	        })
	            .then(function (fe) {
	            var reader = new exports.FileReader();
	            return new Promise(function (resolve, reject) {
	                reader.onloadend = function () {
	                    if (reader.result !== undefined || reader.result !== null) {
	                        resolve(reader.result);
	                    }
	                    else if (reader.error !== undefined || reader.error !== null) {
	                        reject(reader.error);
	                    }
	                    else {
	                        reject({ code: null, message: 'READER_ONLOADEND_ERR' });
	                    }
	                };
	                fe.file(function (file) {
	                    reader.readAsArrayBuffer(file);
	                }, function (error) {
	                    reject(error);
	                });
	            });
	        });
	    };
	    /**
	     * Move a file to a given path.
	     *
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} fileName Name of file to move
	     * @param {string} newPath Base FileSystem of new location
	     * @param {string} newFileName New name of file to move to (leave blank to remain the same)
	     * @returns {Promise<Entry>} Returns a Promise that resolves to the new Entry or rejects with an error.
	     */
	    File.moveFile = function (path, fileName, newPath, newFileName) {
	        var _this = this;
	        newFileName = newFileName || fileName;
	        if ((/^\//.test(newFileName))) {
	            var err = new exports.FileError(5);
	            err.message = 'file name cannot start with \/';
	            return Promise.reject(err);
	        }
	        return this.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return _this.getFile(fse, fileName, { create: false });
	        })
	            .then(function (srcfe) {
	            return _this.resolveDirectoryUrl(newPath)
	                .then(function (deste) {
	                return File.move(srcfe, deste, newFileName);
	            });
	        });
	    };
	    /**
	     * Copy a file in various methods. If file exists, will fail to copy.
	     *
	     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above
	     * @param {string} fileName Name of file to copy
	     * @param {string} newPath Base FileSystem of new location
	     * @param {string} newFileName New name of file to copy to (leave blank to remain the same)
	     * @returns {Promise<Entry>} Returns a Promise that resolves to an Entry or rejects with an error.
	     */
	    File.copyFile = function (path, fileName, newPath, newFileName) {
	        var _this = this;
	        newFileName = newFileName || fileName;
	        if ((/^\//.test(newFileName))) {
	            var err = new exports.FileError(5);
	            err.message = 'file name cannot start with \/';
	            return Promise.reject(err);
	        }
	        return this.resolveDirectoryUrl(path)
	            .then(function (fse) {
	            return _this.getFile(fse, fileName, { create: false });
	        })
	            .then(function (srcfe) {
	            return _this.resolveDirectoryUrl(newPath)
	                .then(function (deste) {
	                return File.copy(srcfe, deste, newFileName);
	            });
	        });
	    };
	    /**
	     * @private
	     */
	    File.fillErrorMessage = function (err) {
	        try {
	            err.message = File.cordovaFileError[err.code];
	        }
	        catch (e) { }
	    };
	    /**
	     * Resolves a local file system URL
	     * @param fileUrl {string} file system url
	     * @returns {Promise<Entry>}
	     */
	    File.resolveLocalFilesystemUrl = function (fileUrl) {
	        return new Promise(function (resolve, reject) {
	            try {
	                window.resolveLocalFileSystemURL(fileUrl, function (entry) {
	                    resolve(entry);
	                }, function (err) {
	                    File.fillErrorMessage(err);
	                    reject(err);
	                });
	            }
	            catch (xc) {
	                File.fillErrorMessage(xc);
	                reject(xc);
	            }
	        });
	    };
	    /**
	     * Resolves a local directory url
	     * @param directoryUrl {string} directory system url
	     * @returns {Promise<DirectoryEntry>}
	     */
	    File.resolveDirectoryUrl = function (directoryUrl) {
	        return File.resolveLocalFilesystemUrl(directoryUrl)
	            .then(function (de) {
	            if (de.isDirectory) {
	                return de;
	            }
	            else {
	                var err = new exports.FileError(13);
	                err.message = 'input is not a directory';
	                return Promise.reject(err);
	            }
	        });
	    };
	    /**
	     * Get a directory
	     * @param directoryEntry {DirectoryEntry} Directory entry, obtained by resolveDirectoryUrl method
	     * @param directoryName {string} Directory name
	     * @param flags {Flags} Options
	     * @returns {Promise<DirectoryEntry>}
	     */
	    File.getDirectory = function (directoryEntry, directoryName, flags) {
	        return new Promise(function (resolve, reject) {
	            try {
	                directoryEntry.getDirectory(directoryName, flags, function (de) {
	                    resolve(de);
	                }, function (err) {
	                    File.fillErrorMessage(err);
	                    reject(err);
	                });
	            }
	            catch (xc) {
	                File.fillErrorMessage(xc);
	                reject(xc);
	            }
	        });
	    };
	    /**
	     * Get a file
	     * @param directoryEntry {DirectoryEntry} Directory entry, obtained by resolveDirectoryUrl method
	     * @param fileName {string} File name
	     * @param flags {Flags} Options
	     * @returns {Promise<FileEntry>}
	     */
	    File.getFile = function (directoryEntry, fileName, flags) {
	        return new Promise(function (resolve, reject) {
	            try {
	                directoryEntry.getFile(fileName, flags, resolve, function (err) {
	                    File.fillErrorMessage(err);
	                    reject(err);
	                });
	            }
	            catch (xc) {
	                File.fillErrorMessage(xc);
	                reject(xc);
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    File.remove = function (fe) {
	        return new Promise(function (resolve, reject) {
	            fe.remove(function () {
	                resolve({ success: true, fileRemoved: fe });
	            }, function (err) {
	                File.fillErrorMessage(err);
	                reject(err);
	            });
	        });
	    };
	    /**
	     * @private
	     */
	    File.move = function (srce, destdir, newName) {
	        return new Promise(function (resolve, reject) {
	            srce.moveTo(destdir, newName, function (deste) {
	                resolve(deste);
	            }, function (err) {
	                File.fillErrorMessage(err);
	                reject(err);
	            });
	        });
	    };
	    /**
	     * @private
	     */
	    File.copy = function (srce, destdir, newName) {
	        return new Promise(function (resolve, reject) {
	            srce.copyTo(destdir, newName, function (deste) {
	                resolve(deste);
	            }, function (err) {
	                File.fillErrorMessage(err);
	                reject(err);
	            });
	        });
	    };
	    /**
	     * @private
	     */
	    File.readEntries = function (dr) {
	        return new Promise(function (resolve, reject) {
	            dr.readEntries(function (entries) {
	                resolve(entries);
	            }, function (err) {
	                File.fillErrorMessage(err);
	                reject(err);
	            });
	        });
	    };
	    /**
	     * @private
	     */
	    File.rimraf = function (de) {
	        return new Promise(function (resolve, reject) {
	            de.removeRecursively(function () {
	                resolve({ success: true, fileRemoved: de });
	            }, function (err) {
	                File.fillErrorMessage(err);
	                reject(err);
	            });
	        });
	    };
	    /**
	     * @private
	     */
	    File.createWriter = function (fe) {
	        return new Promise(function (resolve, reject) {
	            fe.createWriter(function (writer) {
	                resolve(writer);
	            }, function (err) {
	                File.fillErrorMessage(err);
	                reject(err);
	            });
	        });
	    };
	    /**
	     * @private
	     */
	    File.write = function (writer, gu) {
	        if (gu instanceof Blob) {
	            return this.writeFileInChunks(writer, gu);
	        }
	        return new Promise(function (resolve, reject) {
	            writer.onwriteend = function (evt) {
	                if (writer.error) {
	                    reject(writer.error);
	                }
	                else {
	                    resolve(evt);
	                }
	            };
	            writer.write(gu);
	        });
	    };
	    /**
	     * @private
	     */
	    File.writeFileInChunks = function (writer, file) {
	        var BLOCK_SIZE = 1024 * 1024;
	        var writtenSize = 0;
	        function writeNextChunk() {
	            var size = Math.min(BLOCK_SIZE, file.size - writtenSize);
	            var chunk = file.slice(writtenSize, writtenSize + size);
	            writtenSize += size;
	            writer.write(chunk);
	        }
	        return new Promise(function (resolve, reject) {
	            writer.onerror = reject;
	            writer.onwrite = function () {
	                if (writtenSize < file.size) {
	                    writeNextChunk();
	                }
	                else {
	                    resolve();
	                }
	            };
	            writeNextChunk();
	        });
	    };
	    File.cordovaFileError = {
	        1: 'NOT_FOUND_ERR',
	        2: 'SECURITY_ERR',
	        3: 'ABORT_ERR',
	        4: 'NOT_READABLE_ERR',
	        5: 'ENCODING_ERR',
	        6: 'NO_MODIFICATION_ALLOWED_ERR',
	        7: 'INVALID_STATE_ERR',
	        8: 'SYNTAX_ERR',
	        9: 'INVALID_MODIFICATION_ERR',
	        10: 'QUOTA_EXCEEDED_ERR',
	        11: 'TYPE_MISMATCH_ERR',
	        12: 'PATH_EXISTS_ERR',
	        13: 'WRONG_ENTRY_TYPE',
	        14: 'DIR_READ_ERR',
	    };
	    __decorate([
	        plugin_1.CordovaProperty
	    ], File, "applicationDirectory", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], File, "applicationStorageDirectory", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], File, "dataDirectory", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], File, "cacheDirectory", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], File, "externalApplicationStorageDirectory", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], File, "externalDataDirectory", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], File, "externalCacheDirectory", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], File, "externalRootDirectory", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], File, "tempDirectory", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], File, "syncedDataDirectory", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], File, "documentsDirectory", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], File, "sharedDirectory", void 0);
	    File = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'File',
	            plugin: 'cordova-plugin-file',
	            pluginRef: 'cordova.file',
	            repo: 'https://github.com/apache/cordova-plugin-file'
	        })
	    ], File);
	    return File;
	}());
	exports.File = File;
	//# sourceMappingURL=file.js.map

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name FileChooser
	 * @description
	 *
	 * Opens the file picker on Android for the user to select a file, returns a file URI.
	 *
	 * @usage
	 * ```
	 * import {FileChooser} from 'ionic-native';
	 *
	 * FileChooser.open()
	 *   .then(uri => console.log(uri))
	 *   .catch(e => console.log(e));
	 *
	 * ```
	 */
	var FileChooser = (function () {
	    function FileChooser() {
	    }
	    /**
	     * Open a file
	     * @returns {Promise<string>}
	     */
	    FileChooser.open = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], FileChooser, "open", null);
	    FileChooser = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'FileChooser',
	            plugin: 'http://github.com/don/cordova-filechooser.git',
	            pluginRef: 'fileChooser',
	            repo: 'https://github.com/don/cordova-filechooser',
	            platforms: ['Android']
	        })
	    ], FileChooser);
	    return FileChooser;
	}());
	exports.FileChooser = FileChooser;
	//# sourceMappingURL=file-chooser.js.map

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name FileOpener
	 * @description
	 * This plugin will open a file on your device file system with its default application.
	 *
	 * @usage
	 * ```
	 * import {FileOpener} from 'ionic-native';
	 *
	 *
	 *
	 * ```
	 */
	var FileOpener = (function () {
	    function FileOpener() {
	    }
	    /**
	     * Open an file
	     * @param filePath {string} File Path
	     * @param fileMIMEType {string} File MIME Type
	     * @returns {Promise<any>}
	     */
	    FileOpener.open = function (filePath, fileMIMEType) { return; };
	    /**
	     * Uninstalls a package
	     * @param packageId {string}  Package ID
	     * @returns {Promise<any>}
	     */
	    FileOpener.uninstall = function (packageId) { return; };
	    /**
	     * Check if an app is already installed
	     * @param packageId {string} Package ID
	     * @returns {Promise<any>}
	     */
	    FileOpener.appIsInstalled = function (packageId) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            callbackStyle: 'object',
	            successName: 'success',
	            errorName: 'error'
	        })
	    ], FileOpener, "open", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackStyle: 'object',
	            successName: 'success',
	            errorName: 'error'
	        })
	    ], FileOpener, "uninstall", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackStyle: 'object',
	            successName: 'success',
	            errorName: 'error'
	        })
	    ], FileOpener, "appIsInstalled", null);
	    FileOpener = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'FileOpener',
	            plugin: 'cordova-plugin-file-opener2',
	            pluginRef: 'cordova.plugins.fileOpener2',
	            repo: 'https://github.com/pwlin/cordova-plugin-file-opener2'
	        })
	    ], FileOpener);
	    return FileOpener;
	}());
	exports.FileOpener = FileOpener;
	//# sourceMappingURL=file-opener.js.map

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name FilePath
	 * @description
	 *
	 * This plugin allows you to resolve the native filesystem path for Android content URIs and is based on code in the aFileChooser library.
	 *
	 * @usage
	 * ```
	 * import {FilePath} from 'ionic-native';
	 *
	 * FilePath.resolveNativePath(path)
	 *   .then(filePath => console.log(filePath))
	 *   .catch(err => console.log(err));
	 *
	 * ```
	 */
	var FilePath = (function () {
	    function FilePath() {
	    }
	    /**
	     * Resolve native path for given content URL/path.
	     * @param {String} path  Content URL/path.
	     * @returns {Promise<string>}
	     */
	    FilePath.resolveNativePath = function (path) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], FilePath, "resolveNativePath", null);
	    FilePath = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'FilePath',
	            plugin: 'cordova-plugin-filepath',
	            pluginRef: 'window.FilePath',
	            repo: 'https://github.com/hiddentao/cordova-plugin-filepath',
	            platforms: ['Android']
	        })
	    ], FilePath);
	    return FilePath;
	}());
	exports.FilePath = FilePath;
	//# sourceMappingURL=filepath.js.map

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Transfer
	 *
	 * @description
	 * This plugin allows you to upload and download files.
	 *
	 * @usage
	 * ```typescript
	 * import { Transfer } from 'ionic-native';
	 *
	 *
	 * // Create instance:
	 * const fileTransfer = new Transfer();
	 *
	 * // Upload a file:
	 * fileTransfer.upload(..).then(..).catch(..);
	 *
	 * // Download a file:
	 * fileTransfer.download(..).then(..).catch(..);
	 *
	 * // Abort active transfer:
	 * fileTransfer.abort();
	 *
	 * E.g
	 *
	 * upload(){
	 *   const fileTransfer = new Transfer();
	 *   var options: any;
	 *
	 *   options = {
	 *      fileKey: 'file',
	 *      fileName: 'name.jpg',
	 *      headers: {}
	 *      .....
	 *   }
	 *   fileTransfer.upload("<file path>", "<api endpoint>", options)
	 *    .then((data) => {
	 *      // success
	 *    }, (err) => {
	 *      // error
	 *    })
	 * }
	 *
	 * // Cordova
	 * declare var cordova: any;
	 *
	 * download() {
	 *   const fileTransfer = new Transfer();
	 *   let url = 'http://www.example.com/file.pdf';
	 *   fileTransfer.download(url, cordova.file.dataDirectory + 'file.pdf').then((entry) => {
	 *     console.log('download complete: ' + entry.toURL());
	 *   }, (error) => {
	 *     // handle error
	 *   });
	 * }
	 *
	 * ```
	 *
	 * Note: You will not see your documents using a file explorer on your device. Use adb:
	 *
	 * ```
	 * adb shell
	 * run-as com.your.app
	 * cd files
	 * ls
	 * ```
	 *
	 * To store files in a different/publicly accessible directory, please refer to the following link
	 * https://github.com/apache/cordova-plugin-file#where-to-store-files
	 *
	 * @interfaces
	 * FileUploadOptions
	 * FileUploadResult
	 * FileTransferError
	 */
	var Transfer = (function () {
	    function Transfer() {
	        this._objectInstance = new FileTransfer();
	    }
	    /**
	     * Sends a file to a server.
	     *
	     * @param {string} fileUrl  Filesystem URL representing the file on the device or a data URI. For backwards compatibility, this can also be the full path of the file on the device.
	     * @param {string} url  URL of the server to receive the file, as encoded by encodeURI().
	     * @param {FileUploadOptions} options  Optional parameters.
	     * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful since Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.
	     * @returns {Promise<FileUploadResult>} Returns a Promise that resolves to a FileUploadResult and rejects with FileTransferError.
	     */
	    Transfer.prototype.upload = function (fileUrl, url, options, trustAllHosts) {
	        return;
	    };
	    /**
	     * Downloads a file from server.
	     *
	     * @param {string} source  URL of the server to download the file, as encoded by encodeURI().
	     * @param {stirng} target  Filesystem url representing the file on the device. For backwards compatibility, this can also be the full path of the file on the device.
	     * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful because Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.
	     * @param {object} Optional parameters, currently only supports headers (such as Authorization (Basic Authentication), etc).
	     * @returns {Promise<any>} Returns a Promise that resolves to a FileEntry object.
	     */
	    Transfer.prototype.download = function (source, target, trustAllHosts, options) {
	        return;
	    };
	    /**
	     * Registers a listener that gets called whenever a new chunk of data is transferred.
	     * @param {function} Listener that takes a progress event.
	     */
	    Transfer.prototype.onProgress = function (listener) {
	        this._objectInstance.onprogress = listener;
	    };
	    /**
	     * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError
	     * object which has an error code of FileTransferError.ABORT_ERR.
	     */
	    Transfer.prototype.abort = function () { };
	    /**
	     * Error code rejected from upload with FileTransferError
	     * Defined in FileTransferError.
	     *      FILE_NOT_FOUND_ERR: 1   Return when file was not found
	     *      INVALID_URL_ERR: 2,     Return when url was invalid
	     *      CONNECTION_ERR: 3,      Return on connection error
	     *      ABORT_ERR: 4,           Return on aborting
	     *      NOT_MODIFIED_ERR: 5     Return on "304 Not Modified" HTTP response
	     * @enum {number}
	     */
	    Transfer.FileTransferErrorCode = {
	        FILE_NOT_FOUND_ERR: 1,
	        INVALID_URL_ERR: 2,
	        CONNECTION_ERR: 3,
	        ABORT_ERR: 4,
	        NOT_MODIFIED_ERR: 5
	    };
	    __decorate([
	        plugin_1.CordovaInstance({
	            successIndex: 2,
	            errorIndex: 3
	        })
	    ], Transfer.prototype, "upload", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            successIndex: 2,
	            errorIndex: 3
	        })
	    ], Transfer.prototype, "download", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], Transfer.prototype, "abort", null);
	    Transfer = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'FileTransfer',
	            plugin: 'cordova-plugin-file-transfer',
	            pluginRef: 'FileTransfer',
	            repo: 'https://github.com/apache/cordova-plugin-file-transfer'
	        })
	    ], Transfer);
	    return Transfer;
	}());
	exports.Transfer = Transfer;
	//# sourceMappingURL=filetransfer.js.map

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @beta
	 * @name FingerprintAIO
	 * @description
	 * Use simple fingerprint authentication on Android and iOS.
	 * Requires Cordova plugin: cordova-plugin-fingerprint-aio. For more info about plugin, vist: https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio
	 *
	 * @usage
	 * ```typescript
	 * import { FingerprintAIO } from 'ionic-native';
	 *
	 * FingerprintAIO.show({
	 *     clientId: "Fingerprint-Demo",
	 *     clientSecret: "password", //Only necessary for Android
	 *     disableBackup:true  //Only for Android(optional)
	 * })
	 * .then((result: any) => console.log(any))
	 * .catch((error: any) => console.log(error));
	 *
	 * ```
	 * @interfaces
	 * FingerprintOptions
	 */
	var FingerprintAIO = (function () {
	    function FingerprintAIO() {
	    }
	    /**
	     * Check if fingerprint authentication is available
	     * @return {Promise<any>} Returns a promise with result
	     */
	    FingerprintAIO.isAvailable = function () { return; };
	    /**
	     * Show authentication dialogue
	     * @param options {FingerprintOptions} options for platform specific fingerprint API
	     * @return {Promise<any>} Returns a promise that resolves when authentication was successfull
	     */
	    FingerprintAIO.show = function (options) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], FingerprintAIO, "isAvailable", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], FingerprintAIO, "show", null);
	    FingerprintAIO = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'FingerprintAIO',
	            plugin: 'cordova-plugin-fingerprint-aio',
	            pluginRef: 'Fingerprint',
	            repo: 'https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio',
	            platforms: ['Android', 'iOS']
	        })
	    ], FingerprintAIO);
	    return FingerprintAIO;
	}());
	exports.FingerprintAIO = FingerprintAIO;
	//# sourceMappingURL=fingerprint-aio.js.map

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Firebase
	 * @description
	 * This plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project! Android and iOS supported (including iOS 10).
	 *
	 * @usage
	 * ```
	 * import { Firebase } from 'ionic-native';
	 *
	 * Firebase.getToken()
	 *   .then(token => console.log(`The token is ${token}`)) // save the token server-side and use it to push notifications to this device
	 *   .catch(error => console.error('Error getting token', error));
	 *
	 * Firebase.onTokenRefresh()
	 *   .subscribe((token: string) => console.log(`Got a new token ${token}`));
	 *
	 * ```
	 */
	var Firebase = (function () {
	    function Firebase() {
	    }
	    /**
	     * Get the device token
	     * @return {Promise<any>}
	     */
	    Firebase.getToken = function () { return; };
	    /**
	     * Get notified when a token is refreshed
	     * @return {Observable<any>}
	     */
	    Firebase.onTokenRefresh = function () { return; };
	    /**
	     * Get notified when the user opens a notification
	     * @return {Observable<any>}
	     */
	    Firebase.onNotificationOpen = function () { return; };
	    /**
	     * Grant permission to recieve push notifications
	     * @return {Promise<any>}
	     */
	    Firebase.grantPermission = function () { return; };
	    /**
	   * Check permission to recieve push notifications
	   * @return {Promise<any>}
	   */
	    Firebase.hasPermission = function () { return; };
	    /**
	     * Set icon badge number. Set to 0 to clear the badge.
	     * @param badgeNumber {number}
	     * @return {Promise<any>}
	     */
	    Firebase.setBadgeNumber = function (badgeNumber) { return; };
	    /**
	     * Get icon badge number
	     * @return {Promise<any>}
	     */
	    Firebase.getBadgeNumber = function () { return; };
	    /**
	     * Subscribe to a topic
	     * @param topic {string}
	     * @return {Promise<any>}
	     */
	    Firebase.subscribe = function (topic) { return; };
	    /**
	     * Unsubscribe from a topic
	     * @param topic {string}
	     * @return {Promise<any>}
	     */
	    Firebase.unsubscribe = function (topic) { return; };
	    /**
	     * Log an event using Analytics
	     * @param type {string}
	     * @param data {Object}
	     * @return {Promise<any>}
	     */
	    Firebase.logEvent = function (type, data) { return; };
	    /**
	     * Set the name of the current screen in Analytics
	     * @param name {string} Screen name
	     * @return {Promise<any>}
	     */
	    Firebase.setScreenName = function (name) { return; };
	    /**
	     * Set a user id for use in Analytics
	     * @param userId {string}
	     * @return {Promise<any>}
	     */
	    Firebase.setUserId = function (userId) { return; };
	    /**
	     * Set a user property for use in Analytics
	     * @param name {string}
	     * @param value {string}
	     * @return {Promise<any>}
	     */
	    Firebase.setUserProperty = function (name, value) { return; };
	    /**
	     * Fetch Remote Config parameter values for your app
	     * @param cacheExpirationSeconds
	     * @return {Promise<any>}
	     */
	    Firebase.fetch = function (cacheExpirationSeconds) { return; };
	    /**
	     * Activate the Remote Config fetched config
	     * @return {Promise<any>}
	     */
	    Firebase.activateFetched = function () { return; };
	    /**
	     * Retrieve a Remote Config value
	     * @param key {string}
	     * @param namespace {string}
	     * @return {Promise<any>}
	     */
	    Firebase.getValue = function (key, namespace) { return; };
	    /**
	     * Retrieve a Remote Config byte array
	     * @param key {string}
	     * @param namespace {string}
	     * @return {Promise<any>}
	     */
	    Firebase.getByteArray = function (key, namespace) { return; };
	    /**
	     * Get the current state of the FirebaseRemoteConfig singleton object
	     * @return {Promise<any>}
	     */
	    Firebase.getInfo = function () { return; };
	    /**
	     * Change the settings for the FirebaseRemoteConfig object's operations
	     * @param settings {Object}
	     * @return {Promise<any>}
	     */
	    Firebase.setConfigSettings = function (settings) { return; };
	    /**
	     * Set defaults in the Remote Config
	     * @param defaults {Object}
	     * @param namespace {string}
	     * @return {Promise<any>}
	     */
	    Firebase.setDefaults = function (defaults, namespace) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Firebase, "getToken", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true
	        })
	    ], Firebase, "onTokenRefresh", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true
	        })
	    ], Firebase, "onNotificationOpen", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS']
	        })
	    ], Firebase, "grantPermission", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS']
	        })
	    ], Firebase, "hasPermission", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Firebase, "setBadgeNumber", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Firebase, "getBadgeNumber", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Firebase, "subscribe", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Firebase, "unsubscribe", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Firebase, "logEvent", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Firebase, "setScreenName", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Firebase, "setUserId", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Firebase, "setUserProperty", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], Firebase, "fetch", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], Firebase, "activateFetched", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            successIndex: 2,
	            errorIndex: 3
	        })
	    ], Firebase, "getValue", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            successIndex: 2,
	            errorIndex: 3
	        })
	    ], Firebase, "getByteArray", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], Firebase, "getInfo", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], Firebase, "setConfigSettings", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android'],
	            successIndex: 2,
	            errorIndex: 3
	        })
	    ], Firebase, "setDefaults", null);
	    Firebase = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Firebase',
	            plugin: 'cordova-plugin-firebase',
	            pluginRef: 'FirebasePlugin',
	            repo: 'https://github.com/arnesson/cordova-plugin-firebase',
	            platforms: ['Android', 'iOS']
	        })
	    ], Firebase);
	    return Firebase;
	}());
	exports.Firebase = Firebase;
	//# sourceMappingURL=firebase.js.map

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Flashlight
	 * @description This plugin allows you to switch the flashlight / torch of the device on and off.
	 *
	 * Requires Cordova plugin: `cordova-plugin-flashlight`. For more info, please see the [Flashlight plugin docs](https://github.com/EddyVerbruggen/Flashlight-PhoneGap-Plugin).
	 *
	 * @usage
	 * ```typescript
	 * import { Flashlight } from 'ionic-native';
	 *
	 *
	 *
	 * ```
	 */
	var Flashlight = (function () {
	    function Flashlight() {
	    }
	    /**
	     * Checks if the flashlight is available
	     * @returns {Promise<boolean>} Returns a promise that resolves with a boolean stating if the flashlight is available.
	     */
	    Flashlight.available = function () { return; };
	    /**
	     * Switches the flashlight on
	     * @returns {Promise<boolean>}
	     */
	    Flashlight.switchOn = function () { return; };
	    /**
	     * Switches the flashlight off
	     * @returns {Promise<boolean>}
	     */
	    Flashlight.switchOff = function () { return; };
	    /**
	     * Toggles the flashlight
	     * @returns {Promise<any>}
	     */
	    Flashlight.toggle = function () { return; };
	    /**
	     * Checks if the flashlight is turned on.
	     * @returns {boolean}
	     */
	    Flashlight.isSwitchedOn = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Flashlight, "available", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Flashlight, "switchOn", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Flashlight, "switchOff", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Flashlight, "toggle", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], Flashlight, "isSwitchedOn", null);
	    Flashlight = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Flashlight',
	            plugin: 'cordova-plugin-flashlight',
	            pluginRef: 'window.plugins.flashlight',
	            repo: 'https://github.com/EddyVerbruggen/Flashlight-PhoneGap-Plugin.git'
	        })
	    ], Flashlight);
	    return Flashlight;
	}());
	exports.Flashlight = Flashlight;
	//# sourceMappingURL=flashlight.js.map

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	var Observable_1 = __webpack_require__(11);
	/**
	 * @name Geofence
	 * @description Monitors circular geofences around latitude/longitude coordinates, and sends a notification to the user when the boundary of a geofence is crossed. Notifications can be sent when the user enters and/or exits a geofence.
	 * Geofences persist after device reboot. Geofences will be monitored even when the app is not running.
	 * @usage
	 * ```
	 * import { Geofence } from 'ionic-native';
	 * import { Platform } from  'ionic-angular'
	 * ...
	 *
	 * constructor(private platform: Platform) {
	 *   this.platform.ready().then(() => {
	         // initialize the plugin
	 *       Geofence.initialize().then(
	 *         // resolved promise does not return a value
	 *         () => console.log('Geofence Plugin Ready'),
	 *         (err) => console.log(err)
	 *       )
	 *   })
	 * }
	 *
	 * private addGeofence() {
	 *   //options describing geofence
	 *   let fence = {
	 *     id: "69ca1b88-6fbe-4e80-a4d4-ff4d3748acdb", //any unique ID
	 *     latitude:       37.285951, //center of geofence radius
	 *     longitude:      -121.936650,
	 *     radius:         100, //radius to edge of geofence
	 *     transitionType: 3, //see 'Transition Types' below
	 *     notification: { //notification settings
	 *         id:             1, //any unique ID
	 *         title:          "You crossed a fence", //notification title
	 *         text:           "You just arrived to Gliwice city center.", //notification body
	 *         openAppOnClick: true //open app when notification is tapped
	 *     }
	 *   }
	 *
	 *   Geofence.addOrUpdate(fence).then(
	 *      () => console.log('Geofence added'),
	 *      (err) => console.log('Geofence failed to add')
	 *    );
	 * }
	 *
	 * ```
	 * ### Transition Types ###
	 * Transition type specifies whether the geofence should trigger when the user enters and/or leaves the geofence.
	 *
	 * #### Supported values ####
	 * - 1: Enter
	 * - 2: Leave
	 * - 3: Both
	 *
	 * ### Defining a Geofence ###
	 * Geofences are defined by an object that is passed to `addOrUpdate()`. Object properties are:
	 * - id: Any unique ID for the geofence. This ID is used to remove and update a geofence
	 * - latitude: Latitude coordinate of the center of the geofence radius
	 * - longitude: Latitude coordinate of the center of the geofence radius
	 * - radius: Radius from the center to the edge of the geofence
	 * - transitionType: Type of geofence transition to monitor for. See 'Transition Types' above
	 * - notification: Object. Options for defining the notification sent when a geofence is crossed
	 *   - id: Any unique ID
	 *   - title: Notification title
	 *   - text: Notification body
	 *   - openAppOnClick: Boolean. Whether to open the app when the notification is tapped by the user
	 *
	 * ### Troubleshooting ###
	 * #### I get compile errors when I run `ionic build ios` or `ionic run ios`. ####
	 * This could be caused by the Cordova project directory in `/platforms/ios` not being named correctly.
	 * Try running `ionic platform rm <platform>` then run `ionic platform add <platform>` to recreate the
	 * platform directories.
	 */
	var Geofence = (function () {
	    function Geofence() {
	    }
	    /**
	     * Initializes the plugin. User will be prompted to allow the app to use location and notifications.
	     *
	     * @returns {Promise<void>}
	     */
	    Geofence.initialize = function () { return; };
	    ;
	    /**
	     * Adds a new geofence or array of geofences. For geofence object, see above.
	     *
	     * @returns {Promise<void>}
	     */
	    Geofence.addOrUpdate = function (geofences) { return; };
	    ;
	    /**
	     * Removes a geofence or array of geofences. `geofenceID` corresponds to one or more IDs specified when the
	     * geofence was created.
	     *
	     * @returns {Promise<void>}
	     */
	    Geofence.remove = function (geofenceId) { return; };
	    ;
	    /**
	     * Removes all geofences.
	     *
	     * @returns {Promise<void>}
	     */
	    Geofence.removeAll = function () { return; };
	    ;
	    /**
	     * Returns an array of geofences currently being monitored.
	     *
	     * @returns {Promise<Array<string>>}
	     */
	    Geofence.getWatched = function () { return; };
	    ;
	    /**
	     * Called when a geofence is crossed in the direction specified by `TransitType`.
	     *
	     * @returns {Observable<any>}
	     */
	    Geofence.onTransitionReceived = function () {
	        return new Observable_1.Observable(function (observer) {
	            window && window.geofence && (window.geofence.onTransitionReceived = observer.next.bind(observer));
	            return function () { return window.geofence.onTransitionReceived = function () { }; };
	        });
	    };
	    /**
	     * Called when the user clicks a geofence notification. iOS and Android only.
	     *
	     * @returns {Observable<any>}
	     */
	    Geofence.onNotificationClicked = function () {
	        return new Observable_1.Observable(function (observer) {
	            window && window.geofence && (window.geofence.onNotificationClicked = observer.next.bind(observer));
	            return function () { return window.geofence.onNotificationClicked = function () { }; };
	        });
	    };
	    Geofence.TransitionType = {
	        ENTER: 1,
	        EXIT: 2,
	        BOTH: 3
	    };
	    __decorate([
	        plugin_1.Cordova()
	    ], Geofence, "initialize", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Geofence, "addOrUpdate", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Geofence, "remove", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Geofence, "removeAll", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Geofence, "getWatched", null);
	    Geofence = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Geofence',
	            plugin: 'cordova-plugin-geofence',
	            pluginRef: 'geofence',
	            repo: 'https://github.com/cowbell/cordova-plugin-geofence/',
	            platforms: ['Android', 'iOS', 'Windows Phone 8', 'Windows Phone']
	        })
	    ], Geofence);
	    return Geofence;
	}());
	exports.Geofence = Geofence;
	//# sourceMappingURL=geofence.js.map

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	var Observable_1 = __webpack_require__(11);
	/**
	 * @name Geolocation
	 * @description
	 * This plugin provides information about the device's location, such as latitude and longitude. Common sources of location information include Global Positioning System (GPS) and location inferred from network signals such as IP address, RFID, WiFi and Bluetooth MAC addresses, and GSM/CDMA cell IDs.
	 *
	 *  This API is based on the W3C Geolocation API Specification, and only executes on devices that don't already provide an implementation.
	 *
	 * @usage
	 *
	 * ```typescript
	 * import { Geolocation } from 'ionic-native';
	 *
	 *
	 * Geolocation.getCurrentPosition().then((resp) => {
	 *  // resp.coords.latitude
	 *  // resp.coords.longitude
	 * }).catch((error) => {
	 *   console.log('Error getting location', error);
	 * });
	 *
	 * let watch = Geolocation.watchPosition();
	 * watch.subscribe((data) => {
	 *  // data can be a set of coordinates, or an error (if an error occurred).
	 *  // data.coords.latitude
	 *  // data.coords.longitude
	 * });
	 * ```
	 * @interfaces
	 * Coordinates
	 * Geoposition
	 * PositionError
	 * GeolocationOptions
	 */
	var Geolocation = (function () {
	    function Geolocation() {
	    }
	    /**
	     * Get the device's current position.
	     *
	     * @param {GeolocationOptions} options  The [geolocation options](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).
	     * @returns {Promise<Geoposition>} Returns a Promise that resolves with the [position](https://developer.mozilla.org/en-US/docs/Web/API/Position) of the device, or rejects with an error.
	     */
	    Geolocation.getCurrentPosition = function (options) { return; };
	    /**
	     * Watch the current device's position.  Clear the watch by unsubscribing from
	     * Observable changes.
	     *
	     * ```typescript
	     * var subscription = Geolocation.watchPosition()
	     *                               .filter((p) => p.coords !== undefined) //Filter Out Errors
	     *                               .subscribe(position => {
	     *   console.log(position.coords.longitude + ' ' + position.coords.latitude);
	     * });
	     *
	     * // To stop notifications
	     * subscription.unsubscribe();
	     * ```
	     *
	     * @param {GeolocationOptions} options  The [geolocation options](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).
	     * @returns {Observable<Geoposition>} Returns an Observable that notifies with the [position](https://developer.mozilla.org/en-US/docs/Web/API/Position) of the device, or errors.
	     */
	    Geolocation.watchPosition = function (options) {
	        return new Observable_1.Observable(function (observer) {
	            var watchId = navigator.geolocation.watchPosition(observer.next.bind(observer), observer.next.bind(observer), options);
	            return function () { return navigator.geolocation.clearWatch(watchId); };
	        });
	    };
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Geolocation, "getCurrentPosition", null);
	    Geolocation = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Geolocation',
	            plugin: 'cordova-plugin-geolocation',
	            pluginRef: 'navigator.geolocation',
	            repo: 'https://github.com/apache/cordova-plugin-geolocation'
	        })
	    ], Geolocation);
	    return Geolocation;
	}());
	exports.Geolocation = Geolocation;
	//# sourceMappingURL=geolocation.js.map

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Globalization
	 * @description
	 * @usage
	 * ```typescript
	 * import { Globalization } from 'ionic-native';
	 *
	 *
	 * ```
	 */
	var Globalization = (function () {
	    function Globalization() {
	    }
	    /**
	     * Returns the BCP-47 compliant language identifier tag to the successCallback with a properties object as a parameter. That object should have a value property with a String value.
	     * @returns {Promise<{value: string}>}
	     */
	    Globalization.getPreferredLanguage = function () { return; };
	    /**
	     * Returns the BCP 47 compliant locale identifier string to the successCallback with a properties object as a parameter.
	     * @returns {Promise<{value: string}>}
	     */
	    Globalization.getLocaleName = function () { return; };
	    /**
	     * Converts date to string
	     * @param {Date} date Date you wish to convert
	     * @param options Options for the converted date. Length, selector.
	     * @returns {Promise<{value: string}>} Returns a promise when the date has been converted.
	     */
	    Globalization.dateToString = function (date, options) { return; };
	    /**
	     * Parses a date formatted as a string, according to the client's user preferences and calendar using the time zone of the client, and returns the corresponding date object.
	     * @param {string} dateString Date as a string to be converted
	     * @param options Options for the converted date. Length, selector.
	     * @returns {Promise<{ year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number }>} Returns a promise when the date has been converted.
	     */
	    Globalization.stringToDate = function (dateString, options) { return; };
	    /**
	     * Returns a pattern string to format and parse dates according to the client's user preferences.
	     * @param options Object with the format length and selector
	     * @returns {Promise<{pattern: string}>} Returns a promise.
	     */
	    Globalization.getDatePattern = function (options) { return; };
	    /**
	     * Returns an array of the names of the months or days of the week, depending on the client's user preferences and calendar.
	     * @param options Object with type (narrow or wide) and item (month or days).
	     * @returns {Promise<{value: Array<string>}>} Returns a promise.
	     */
	    Globalization.getDateNames = function (options) { return; };
	    /**
	     * Indicates whether daylight savings time is in effect for a given date using the client's time zone and calendar.
	     * @param {data} date Date to process
	     * @returns {Promise<{dst: string}>} reutrns a promise with the value
	     */
	    Globalization.isDayLightSavingsTime = function (date) { return; };
	    /**
	     * Returns the first day of the week according to the client's user preferences and calendar.
	     * @returns {Promise<{value: string}>} returns a promise with the value
	     */
	    Globalization.getFirstDayOfWeek = function () { return; };
	    /**
	     * Returns a number formatted as a string according to the client's user preferences.
	     * @param numberToConvert {Number} The number to convert
	     * @param options {Object} Object with property `type` that can be set to: decimal, percent, or currency.
	     */
	    Globalization.numberToString = function (numberToConvert, options) { return; };
	    /**
	     *
	     * @param {string} stringToConvert String you want to conver to a number
	     * @param options  The type of number you want to return. Can be decimal, percent, or currency.
	     * @returns {Promise<{ value: number | string }>} Returns a promise with the value.
	     */
	    Globalization.stringToNumber = function (stringToConvert, options) { return; };
	    /**
	     * Returns a pattern string to format and parse numbers according to the client's user preferences.
	     * @param options Can be decimal, percent, or currency.
	     * @returns {Promise<{ pattern: string, symbol: string, fraction: number, rounding: number, positive: string, negative: string, decimal: string, grouping: string }>}
	     */
	    Globalization.getNumberPattern = function (options) { return; };
	    /**
	     * Returns a pattern string to format and parse currency values according to the client's user preferences and ISO 4217 currency code.
	     * @param {string} currencyCode Currency Code.A
	     * @returns {Promise<{ pattern: string, code: string, fraction: number, rounding: number, decimal: number, grouping: string }>}
	     */
	    Globalization.getCurrencyPattern = function (currencyCode) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Globalization, "getPreferredLanguage", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Globalization, "getLocaleName", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], Globalization, "dateToString", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], Globalization, "stringToDate", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Globalization, "getDatePattern", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Globalization, "getDateNames", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Globalization, "isDayLightSavingsTime", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Globalization, "getFirstDayOfWeek", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], Globalization, "numberToString", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], Globalization, "stringToNumber", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Globalization, "getNumberPattern", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Globalization, "getCurrencyPattern", null);
	    Globalization = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Globalization',
	            plugin: 'cordova-plugin-globalization',
	            pluginRef: 'navigator.globalization',
	            repo: 'https://github.com/apache/cordova-plugin-globalization',
	            platforms: ['Amazon Fire OS', 'Android', 'BlackBerry 10', 'Firefox OS', 'iOS', 'Windows Phone 8', 'Widnows', 'Browser']
	        })
	    ], Globalization);
	    return Globalization;
	}());
	exports.Globalization = Globalization;
	//# sourceMappingURL=globalization.js.map

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Google Plus
	 * @description
	 * @usage
	 * ```typescript
	 * import { GooglePlus } from 'ionic-native';
	 *
	 * GooglePlus.login()
	 *   .then(res => console.log(res))
	 *   .catch(err => console.error(err));
	 *
	 * ```
	 */
	var GooglePlus = (function () {
	    function GooglePlus() {
	    }
	    /**
	     * The login function walks the user through the Google Auth process.
	     * @param options
	     * @returns {Promise<any>}
	     */
	    GooglePlus.login = function (options) { return; };
	    /**
	     * You can call trySilentLogin to check if they're already signed in to the app and sign them in silently if they are.
	     * @param options
	     * @returns {Promise<any>}
	     */
	    GooglePlus.trySilentLogin = function (options) { return; };
	    /**
	     * This will clear the OAuth2 token.
	     * @returns {Promise<any>}
	     */
	    GooglePlus.logout = function () { return; };
	    /**
	     * This will clear the OAuth2 token, forget which account was used to login, and disconnect that account from the app. This will require the user to allow the app access again next time they sign in. Be aware that this effect is not always instantaneous. It can take time to completely disconnect.
	     * @returns {Promise<any>}
	     */
	    GooglePlus.disconnect = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], GooglePlus, "login", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GooglePlus, "trySilentLogin", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GooglePlus, "logout", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GooglePlus, "disconnect", null);
	    GooglePlus = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'GooglePlus',
	            plugin: 'cordova-plugin-googleplus',
	            pluginRef: 'window.plugins.googleplus',
	            repo: 'https://github.com/EddyVerbruggen/cordova-plugin-googleplus',
	            platforms: ['Web', 'Android', 'iOS'],
	            install: 'ionic plugin add cordova-plugin-googleplus --variable REVERSED_CLIENT_ID=myreversedclientid'
	        })
	    ], GooglePlus);
	    return GooglePlus;
	}());
	exports.GooglePlus = GooglePlus;
	//# sourceMappingURL=google-plus.js.map

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	var Observable_1 = __webpack_require__(11);
	__webpack_require__(25);
	/**
	 * @private
	 * You can listen to these events where appropriate
	 */
	exports.GoogleMapsEvent = {
	    MAP_CLICK: 'click',
	    MAP_LONG_CLICK: 'long_click',
	    MY_LOCATION_CHANGE: 'my_location_change',
	    MY_LOCATION_BUTTON_CLICK: 'my_location_button_click',
	    INDOOR_BUILDING_FOCUSED: 'indoor_building_focused',
	    INDOOR_LEVEL_ACTIVATED: 'indoor_level_activated',
	    CAMERA_CHANGE: 'camera_change',
	    CAMERA_IDLE: 'camera_idle',
	    MAP_READY: 'map_ready',
	    MAP_LOADED: 'map_loaded',
	    MAP_WILL_MOVE: 'will_move',
	    MAP_CLOSE: 'map_close',
	    MARKER_CLICK: 'click',
	    OVERLAY_CLICK: 'overlay_click',
	    INFO_CLICK: 'info_click',
	    MARKER_DRAG: 'drag',
	    MARKER_DRAG_START: 'drag_start',
	    MARKER_DRAG_END: 'drag_end'
	};
	/**
	 * @private
	 */
	exports.GoogleMapsAnimation = {
	    BOUNCE: 'BOUNCE',
	    DROP: 'DROP'
	};
	/**
	 * @private
	 */
	exports.GoogleMapsMapTypeId = {
	    HYBRID: 'MAP_TYPE_HYBRID',
	    NONE: 'MAP_TYPE_NONE',
	    NORMAL: 'MAP_TYPE_NORMAL',
	    ROADMAP: 'MAP_TYPE_ROADMAP',
	    SATELLITE: 'MAP_TYPE_SATELLITE',
	    TERAIN: 'MAP_TYPE_TERRAIN'
	};
	/**
	 * @name Google Maps
	 * @description This plugin uses the native Google Maps SDK
	 * @usage
	 * ```
	 * import {
	 *  GoogleMap,
	 *  GoogleMapsEvent,
	 *  GoogleMapsLatLng,
	 *  CameraPosition,
	 *  GoogleMapsMarkerOptions,
	 *  GoogleMapsMarker,
	 *  GoogleMapsMapTypeId
	 * } from 'ionic-native';
	 *
	 * export class MapPage {
	 *  constructor() {}
	 *
	 * // Load map only after view is initialize
	 * ngAfterViewInit() {
	 *  this.loadMap();
	 * }
	 *
	 * loadMap() {
	 *  // make sure to create following structure in your view.html file
	 *  // and add a height (for example 100%) to it, else the map won't be visible
	 *  // <ion-content>
	 *  //  <div #map id="map" style="height:100%;"></div>
	 *  // </ion-content>
	 *
	 *  // create a new map by passing HTMLElement
	 *  let element: HTMLElement = document.getElementById('map');
	 *
	 *  let map = new GoogleMap(element);
	 *
	 *  // create LatLng object
	 *  let ionic: GoogleMapsLatLng = new GoogleMapsLatLng(43.0741904,-89.3809802);
	 *
	 *  // create CameraPosition
	 *  let position: CameraPosition = {
	 *    target: ionic,
	 *    zoom: 18,
	 *    tilt: 30
	 *  };
	 *
	 *  // listen to MAP_READY event
	 *  map.one(GoogleMapsEvent.MAP_READY).then(() => {
	 *    // move the map's camera to position
	 *    map.moveCamera(position); // works on iOS and Android
	 * });
	 *
	 *
	 *  // create new marker
	 *  let markerOptions: GoogleMapsMarkerOptions = {
	 *    position: ionic,
	 *    title: 'Ionic'
	 *  };
	 *
	 *  map.addMarker(markerOptions)
	 *    .then((marker: GoogleMapsMarker) => {
	 *       marker.showInfoWindow();
	 *     });
	 *  }
	 * });
	 * }
	 * ```
	 */
	var GoogleMap = (function () {
	    function GoogleMap(element, options) {
	        if (!!plugin_1.getPlugin('plugin.google.maps.Map')) {
	            if (typeof element === 'string') {
	                element = document.getElementById(element);
	            }
	            this._objectInstance = plugin.google.maps.Map.getMap(element, options);
	        }
	        else {
	            plugin_1.pluginWarn({
	                pluginName: 'GoogleMap',
	                plugin: 'plugin.google.maps.Map'
	            });
	        }
	    }
	    /**
	     * Checks if a map object has been created and is available.
	     *
	     * @returns {Promise<boolean>}
	     */
	    GoogleMap.isAvailable = function () { return; };
	    /**
	     * Adds an event listener.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMap.prototype.addEventListener = function (eventName) {
	        return Observable_1.Observable.fromEvent(this._objectInstance, eventName);
	    };
	    /**
	     * Adds an event listener that works once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMap.prototype.addListenerOnce = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.addListenerOnce(eventName, resolve); });
	    };
	    /**
	     * Gets a value
	     * @param key
	     */
	    GoogleMap.prototype.get = function (key) { return; };
	    /**
	     * Sets a value
	     * @param key
	     * @param value
	     */
	    GoogleMap.prototype.set = function (key, value) { };
	    /**
	     * Listen to a map event.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMap.prototype.on = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return new Observable_1.Observable(function (observer) {
	                observer.error({ error: 'plugin_not_installed' });
	            });
	        }
	        return new Observable_1.Observable(function (observer) {
	            _this._objectInstance.on(eventName, observer.next.bind(observer));
	            return function () { return _this._objectInstance.off(event); };
	        });
	    };
	    /**
	     * Listen to a map event only once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMap.prototype.one = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.one(eventName, resolve); });
	    };
	    /**
	     * Clears all stored values
	     */
	    GoogleMap.prototype.empty = function () { };
	    GoogleMap.prototype.setDebuggable = function (isDebuggable) { };
	    GoogleMap.prototype.setClickable = function (isClickable) { };
	    /**
	     * Get the position of the camera.
	     *
	     * @returns {Promise<CameraPosition>}
	     */
	    GoogleMap.prototype.getCameraPosition = function () { return; };
	    /**
	     * Get the location of the user.
	     *
	     * @returns {Promise<MyLocation>}
	     */
	    GoogleMap.prototype.getMyLocation = function (options) { return; };
	    /**
	     * Get the visible region.
	     *
	     * @returns {Promise<VisibleRegion>}
	     */
	    GoogleMap.prototype.getVisibleRegion = function () { return; };
	    GoogleMap.prototype.showDialog = function () { };
	    GoogleMap.prototype.closeDialog = function () { };
	    GoogleMap.prototype.getLicenseInfo = function () { return; };
	    GoogleMap.prototype.setCenter = function (latLng) { };
	    GoogleMap.prototype.setZoom = function (zoomLevel) { };
	    GoogleMap.prototype.setMapTypeId = function (mapTypeId) { };
	    GoogleMap.prototype.setTilt = function (tiltLevel) { };
	    /**
	     * @returns {Promise<any>}
	     */
	    GoogleMap.prototype.animateCamera = function (animateCameraOptions) { return; };
	    /**
	     * @returns {Promise<any>}
	     */
	    GoogleMap.prototype.moveCamera = function (cameraPosition) { return; };
	    GoogleMap.prototype.setMyLocationEnabled = function (enabled) { };
	    GoogleMap.prototype.setIndoorEnabled = function (enabled) { };
	    GoogleMap.prototype.setTrafficEnabled = function (enabled) { };
	    GoogleMap.prototype.setCompassEnabled = function (enabled) { };
	    GoogleMap.prototype.setAllGesturesEnabled = function (enabled) { };
	    /**
	     * @returns {Promise<GoogleMapsMarker | any>}
	     */
	    GoogleMap.prototype.addMarker = function (options) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve, reject) {
	            _this._objectInstance.addMarker(options, function (marker) {
	                if (marker) {
	                    resolve(new GoogleMapsMarker(marker));
	                }
	                else {
	                    reject();
	                }
	            });
	        });
	    };
	    /**
	     * @returns {Promise<GoogleMapsCircle | any>}
	     */
	    GoogleMap.prototype.addCircle = function (options) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve, reject) {
	            _this._objectInstance.addCircle(options, function (circle) {
	                if (circle) {
	                    resolve(new GoogleMapsCircle(circle));
	                }
	                else {
	                    reject();
	                }
	            });
	        });
	    };
	    /**
	     * @returns {Promise<GoogleMapsPolygon | any>}
	     */
	    GoogleMap.prototype.addPolygon = function (options) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve, reject) {
	            _this._objectInstance.addPolygon(options, function (polygon) {
	                if (polygon) {
	                    resolve(new GoogleMapsPolygon(polygon));
	                }
	                else {
	                    reject();
	                }
	            });
	        });
	    };
	    /**
	     * @returns {Promise<GoogleMapsPolyline | any>}
	     */
	    GoogleMap.prototype.addPolyline = function (options) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve, reject) {
	            _this._objectInstance.addPolyline(options, function (polyline) {
	                if (polyline) {
	                    resolve(new GoogleMapsPolyline(polyline));
	                }
	                else {
	                    reject();
	                }
	            });
	        });
	    };
	    /**
	     * @returns {Promise<GoogleMapsTileOverlay | any>}
	     */
	    GoogleMap.prototype.addTileOverlay = function (options) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve, reject) {
	            _this._objectInstance.addTileOverlay(options, function (tileOverlay) {
	                if (tileOverlay) {
	                    resolve(new GoogleMapsTileOverlay(tileOverlay));
	                }
	                else {
	                    reject();
	                }
	            });
	        });
	    };
	    /**
	     * @returns {Promise<GoogleMapsGroundOverlay | any>}
	     */
	    GoogleMap.prototype.addGroundOverlay = function (options) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve, reject) {
	            _this._objectInstance.addGroundOverlay(options, function (groundOverlay) {
	                if (groundOverlay) {
	                    resolve(new GoogleMapsGroundOverlay(groundOverlay));
	                }
	                else {
	                    reject();
	                }
	            });
	        });
	    };
	    /**
	     * @returns {Promise<GoogleMapsKmlOverlay | any>}
	     */
	    GoogleMap.prototype.addKmlOverlay = function (options) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve, reject) {
	            _this._objectInstance.addKmlOverlay(options, function (kmlOverlay) {
	                if (kmlOverlay) {
	                    resolve(new GoogleMapsKmlOverlay(kmlOverlay));
	                }
	                else {
	                    reject();
	                }
	            });
	        });
	    };
	    GoogleMap.prototype.setDiv = function (domNode) { };
	    GoogleMap.prototype.setVisible = function (visible) { };
	    GoogleMap.prototype.setOptions = function (options) { };
	    GoogleMap.prototype.setBackgroundColor = function (backgroundColor) { };
	    GoogleMap.prototype.setPadding = function (top, right, bottom, left) { };
	    GoogleMap.prototype.clear = function () { };
	    GoogleMap.prototype.refreshLayout = function () { };
	    /**
	     * @returns {Promise<any>}
	     */
	    GoogleMap.prototype.fromLatLngToPoint = function (latLng, point) { return; };
	    /**
	     * @returns {Promise<GoogleMapsLatLng>}
	     */
	    GoogleMap.prototype.fromPointToLatLng = function (point, latLng) { return; };
	    /**
	     * @returns {Promise<any>}
	     */
	    GoogleMap.prototype.toDataURL = function () { return; };
	    GoogleMap.prototype.remove = function () { };
	    GoogleMap.prototype.panBy = function () { };
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "get", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "set", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "empty", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setDebuggable", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setClickable", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], GoogleMap.prototype, "getCameraPosition", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], GoogleMap.prototype, "getMyLocation", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], GoogleMap.prototype, "getVisibleRegion", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "showDialog", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "closeDialog", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], GoogleMap.prototype, "getLicenseInfo", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setCenter", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setZoom", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setMapTypeId", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setTilt", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], GoogleMap.prototype, "animateCamera", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], GoogleMap.prototype, "moveCamera", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setMyLocationEnabled", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setIndoorEnabled", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setTrafficEnabled", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setCompassEnabled", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setAllGesturesEnabled", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setDiv", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setVisible", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setOptions", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setBackgroundColor", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "setPadding", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "clear", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "refreshLayout", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], GoogleMap.prototype, "fromLatLngToPoint", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], GoogleMap.prototype, "fromPointToLatLng", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], GoogleMap.prototype, "toDataURL", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "remove", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMap.prototype, "panBy", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleMap, "isAvailable", null);
	    GoogleMap = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'GoogleMap',
	            pluginRef: 'plugin.google.maps.Map',
	            plugin: 'cordova-plugin-googlemaps',
	            repo: 'https://github.com/mapsplugin/cordova-plugin-googlemaps',
	            install: 'ionic plugin add cordova-plugin-googlemaps --variable API_KEY_FOR_ANDROID="YOUR_ANDROID_API_KEY_IS_HERE" --variable API_KEY_FOR_IOS="YOUR_IOS_API_KEY_IS_HERE"'
	        })
	    ], GoogleMap);
	    return GoogleMap;
	}());
	exports.GoogleMap = GoogleMap;
	/**
	 * @private
	 */
	var GoogleMapsMarker = (function () {
	    function GoogleMapsMarker(_objectInstance) {
	        this._objectInstance = _objectInstance;
	    }
	    /**
	     * Adds an event listener.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsMarker.prototype.addEventListener = function (eventName) {
	        return Observable_1.Observable.fromEvent(this._objectInstance, eventName);
	    };
	    /**
	     * Adds an event listener that works once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsMarker.prototype.addListenerOnce = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.addListenerOnce(eventName, resolve); });
	    };
	    /**
	     * Gets a value
	     * @param key
	     */
	    GoogleMapsMarker.prototype.get = function (key) { return; };
	    /**
	     * Sets a value
	     * @param key
	     * @param value
	     */
	    GoogleMapsMarker.prototype.set = function (key, value) { };
	    /**
	     * Listen to a map event.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsMarker.prototype.on = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return new Observable_1.Observable(function (observer) {
	                observer.error({ error: 'plugin_not_installed' });
	            });
	        }
	        return new Observable_1.Observable(function (observer) {
	            _this._objectInstance.on(eventName, observer.next.bind(observer));
	            return function () { return _this._objectInstance.off(event); };
	        });
	    };
	    /**
	     * Listen to a map event only once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsMarker.prototype.one = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.one(eventName, resolve); });
	    };
	    /**
	     * Clears all stored values
	     */
	    GoogleMapsMarker.prototype.empty = function () { };
	    /**
	     * Return true if the marker is visible
	     */
	    GoogleMapsMarker.prototype.isVisible = function () { return; };
	    /**
	     * Set false if you want to hide the marker.
	     * @param visible
	     */
	    GoogleMapsMarker.prototype.setVisible = function (visible) { };
	    /**
	     * Return the marker hash code.
	     * @return {string} Marker hash code
	     */
	    GoogleMapsMarker.prototype.getHashCode = function () { return; };
	    /**
	     * Remove the marker completely.
	     */
	    GoogleMapsMarker.prototype.remove = function () { };
	    /**
	     * Change the marker opacity.
	     * @param alpha {number} Opacity
	     */
	    GoogleMapsMarker.prototype.setOpacity = function (alpha) { };
	    /**
	     * Return the marker opacity.
	     * @return {number} Opacity
	     */
	    GoogleMapsMarker.prototype.getOpacity = function () { return; };
	    /**
	     * iOS only, Plugin Version >= 1.3.3 Higher zIndex value overlays will be drawn on top of lower zIndex value tile layers and overlays. (You're able to run this on Android, but it will have no effect)
	     * @return {number}
	     */
	    GoogleMapsMarker.prototype.setZIndex = function () { return; };
	    /**
	     * Change the info window anchor. This defaults to 50% from the left of the image and at the bottom of the image.
	     * @param x {number}
	     * @param y {number}
	     */
	    GoogleMapsMarker.prototype.setIconAnchor = function (x, y) { };
	    /**
	     * Change the info window anchor. This defaults to 50% from the left of the image and at the top of the image.
	     * @param x {number}
	     * @param y {number}
	     */
	    GoogleMapsMarker.prototype.setInfoWindowAnchor = function (x, y) { };
	    /**
	     * 	Set true if you allows all users to drag the marker.
	     * @param draggable {boolean}
	     */
	    GoogleMapsMarker.prototype.setDraggable = function (draggable) { };
	    /**
	     * Return true if the marker drag is enabled.
	     * @return {boolean}
	     */
	    GoogleMapsMarker.prototype.isDraggable = function () { return; };
	    /**
	     * Set true if you want to be flat marker.
	     * @param flat {boolean}
	     */
	    GoogleMapsMarker.prototype.setFlat = function (flat) { return; };
	    /**
	     * Change icon url and/or size
	     * @param icon
	     */
	    GoogleMapsMarker.prototype.setIcon = function (icon) { return; };
	    /**
	     * Change title of the infoWindow.
	     * @param title {string}
	     */
	    GoogleMapsMarker.prototype.setTitle = function (title) { };
	    /**
	     * Return the title strings.
	     * @return {string}
	     */
	    GoogleMapsMarker.prototype.getTitle = function () { return; };
	    /**
	     * Change snippet of the infoWindow.
	     * @param snippet {string}
	     */
	    GoogleMapsMarker.prototype.setSnippet = function (snippet) { };
	    /**
	     * Return the snippet strings.
	     * @return {string}
	     */
	    GoogleMapsMarker.prototype.getSnippet = function () { return; };
	    /**
	     * Set the marker rotation angle.
	     * @param rotation {number}
	     */
	    GoogleMapsMarker.prototype.setRotation = function (rotation) { };
	    /**
	     * Return the marker rotation angle.
	     * @return {number}
	     */
	    GoogleMapsMarker.prototype.getRotation = function () { return; };
	    /**
	     * Show the infoWindow of the marker.
	     * @return {number}
	     */
	    GoogleMapsMarker.prototype.showInfoWindow = function () { return; };
	    /**
	     * Hide the infoWindow of the marker.
	     * @return {number}
	     */
	    GoogleMapsMarker.prototype.hideInfoWindow = function () { return; };
	    /**
	     * Set the marker position.
	     * @param latLng {GoogleMapLatLng}
	     */
	    GoogleMapsMarker.prototype.setPosition = function (latLng) { return; };
	    /**
	     * Return the marker position.
	     * @return {Promise<GoogleMapLatLng>}
	     */
	    GoogleMapsMarker.prototype.getPosition = function () { return; };
	    /**
	     * Return the map instance.
	     * @return {GoogleMap}
	     */
	    GoogleMapsMarker.prototype.getMap = function () { return; };
	    /**
	     * Specify the animation either `DROP` or `BOUNCE`
	     * @param animation {string}
	     */
	    GoogleMapsMarker.prototype.setAnimation = function (animation) { };
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "get", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "set", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "empty", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "isVisible", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], GoogleMapsMarker.prototype, "setVisible", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "getHashCode", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "remove", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "setOpacity", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "getOpacity", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "setZIndex", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "setIconAnchor", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "setInfoWindowAnchor", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "setDraggable", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "isDraggable", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "setFlat", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "setIcon", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "setTitle", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "getTitle", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "setSnippet", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "getSnippet", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "setRotation", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "getRotation", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "showInfoWindow", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "hideInfoWindow", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "setPosition", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], GoogleMapsMarker.prototype, "getPosition", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "getMap", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsMarker.prototype, "setAnimation", null);
	    return GoogleMapsMarker;
	}());
	exports.GoogleMapsMarker = GoogleMapsMarker;
	/**
	 * @private
	 */
	var GoogleMapsCircle = (function () {
	    function GoogleMapsCircle(_objectInstance) {
	        this._objectInstance = _objectInstance;
	    }
	    /**
	     * Adds an event listener.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsCircle.prototype.addEventListener = function (eventName) {
	        return Observable_1.Observable.fromEvent(this._objectInstance, eventName);
	    };
	    /**
	     * Adds an event listener that works once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsCircle.prototype.addListenerOnce = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.addListenerOnce(eventName, resolve); });
	    };
	    /**
	     * Gets a value
	     * @param key
	     */
	    GoogleMapsCircle.prototype.get = function (key) { return; };
	    /**
	     * Sets a value
	     * @param key
	     * @param value
	     */
	    GoogleMapsCircle.prototype.set = function (key, value) { };
	    /**
	     * Listen to a map event.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsCircle.prototype.on = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return new Observable_1.Observable(function (observer) {
	                observer.error({ error: 'plugin_not_installed' });
	            });
	        }
	        return new Observable_1.Observable(function (observer) {
	            _this._objectInstance.on(eventName, observer.next.bind(observer));
	            return function () { return _this._objectInstance.off(event); };
	        });
	    };
	    /**
	     * Listen to a map event only once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsCircle.prototype.one = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.one(eventName, resolve); });
	    };
	    /**
	     * Clears all stored values
	     */
	    GoogleMapsCircle.prototype.empty = function () { };
	    GoogleMapsCircle.prototype.getCenter = function () { return; };
	    GoogleMapsCircle.prototype.getRadius = function () { return; };
	    GoogleMapsCircle.prototype.getStrokeColor = function () { return; };
	    GoogleMapsCircle.prototype.getVisible = function () { return; };
	    GoogleMapsCircle.prototype.getZIndex = function () { return; };
	    GoogleMapsCircle.prototype.remove = function () { };
	    GoogleMapsCircle.prototype.setCenter = function (latLng) { };
	    GoogleMapsCircle.prototype.setFillColor = function (fillColor) { };
	    GoogleMapsCircle.prototype.setStrokeColor = function (strokeColor) { };
	    GoogleMapsCircle.prototype.setStrokeWidth = function (strokeWidth) { };
	    GoogleMapsCircle.prototype.setVisible = function (visible) { };
	    GoogleMapsCircle.prototype.setZIndex = function (zIndex) { };
	    GoogleMapsCircle.prototype.setRadius = function (radius) { };
	    GoogleMapsCircle.prototype.getMap = function () { return; };
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "get", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "set", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "empty", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "getCenter", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "getRadius", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "getStrokeColor", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "getVisible", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "getZIndex", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "remove", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "setCenter", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "setFillColor", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "setStrokeColor", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "setStrokeWidth", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "setVisible", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "setZIndex", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "setRadius", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsCircle.prototype, "getMap", null);
	    return GoogleMapsCircle;
	}());
	exports.GoogleMapsCircle = GoogleMapsCircle;
	/**
	 * @private
	 */
	var GoogleMapsPolyline = (function () {
	    function GoogleMapsPolyline(_objectInstance) {
	        this._objectInstance = _objectInstance;
	    }
	    /**
	     * Adds an event listener.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsPolyline.prototype.addEventListener = function (eventName) {
	        return Observable_1.Observable.fromEvent(this._objectInstance, eventName);
	    };
	    /**
	     * Adds an event listener that works once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsPolyline.prototype.addListenerOnce = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.addListenerOnce(eventName, resolve); });
	    };
	    /**
	     * Gets a value
	     * @param key
	     */
	    GoogleMapsPolyline.prototype.get = function (key) { return; };
	    /**
	     * Sets a value
	     * @param key
	     * @param value
	     */
	    GoogleMapsPolyline.prototype.set = function (key, value) { };
	    /**
	     * Listen to a map event.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsPolyline.prototype.on = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return new Observable_1.Observable(function (observer) {
	                observer.error({ error: 'plugin_not_installed' });
	            });
	        }
	        return new Observable_1.Observable(function (observer) {
	            _this._objectInstance.on(eventName, observer.next.bind(observer));
	            return function () { return _this._objectInstance.off(event); };
	        });
	    };
	    /**
	     * Listen to a map event only once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsPolyline.prototype.one = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.one(eventName, resolve); });
	    };
	    /**
	     * Clears all stored values
	     */
	    GoogleMapsPolyline.prototype.empty = function () { };
	    GoogleMapsPolyline.prototype.getPoints = function () { return; };
	    GoogleMapsPolyline.prototype.getCOlor = function () { return; };
	    GoogleMapsPolyline.prototype.getWidth = function () { return; };
	    GoogleMapsPolyline.prototype.getGeodesic = function () { return; };
	    GoogleMapsPolyline.prototype.getZIndex = function () { return; };
	    GoogleMapsPolyline.prototype.remove = function () { };
	    GoogleMapsPolyline.prototype.setPoints = function (points) { };
	    GoogleMapsPolyline.prototype.setColor = function (color) { };
	    GoogleMapsPolyline.prototype.setWidth = function (width) { };
	    GoogleMapsPolyline.prototype.setVisible = function (visible) { };
	    GoogleMapsPolyline.prototype.setZIndex = function (zIndex) { };
	    GoogleMapsPolyline.prototype.setGeoDesic = function (geoDesic) { };
	    GoogleMapsPolyline.prototype.getMap = function () { return; };
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "get", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "set", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "empty", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "getPoints", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "getCOlor", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "getWidth", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "getGeodesic", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "getZIndex", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "remove", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "setPoints", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "setColor", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "setWidth", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "setVisible", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "setZIndex", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "setGeoDesic", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolyline.prototype, "getMap", null);
	    return GoogleMapsPolyline;
	}());
	exports.GoogleMapsPolyline = GoogleMapsPolyline;
	/**
	 * @private
	 */
	var GoogleMapsPolygon = (function () {
	    function GoogleMapsPolygon(_objectInstance) {
	        this._objectInstance = _objectInstance;
	    }
	    /**
	     * Adds an event listener.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsPolygon.prototype.addEventListener = function (eventName) {
	        return Observable_1.Observable.fromEvent(this._objectInstance, eventName);
	    };
	    /**
	     * Adds an event listener that works once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsPolygon.prototype.addListenerOnce = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.addListenerOnce(eventName, resolve); });
	    };
	    /**
	     * Gets a value
	     * @param key
	     */
	    GoogleMapsPolygon.prototype.get = function (key) { return; };
	    /**
	     * Sets a value
	     * @param key
	     * @param value
	     */
	    GoogleMapsPolygon.prototype.set = function (key, value) { };
	    /**
	     * Listen to a map event.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsPolygon.prototype.on = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return new Observable_1.Observable(function (observer) {
	                observer.error({ error: 'plugin_not_installed' });
	            });
	        }
	        return new Observable_1.Observable(function (observer) {
	            _this._objectInstance.on(eventName, observer.next.bind(observer));
	            return function () { return _this._objectInstance.off(event); };
	        });
	    };
	    /**
	     * Listen to a map event only once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsPolygon.prototype.one = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.one(eventName, resolve); });
	    };
	    /**
	     * Clears all stored values
	     */
	    GoogleMapsPolygon.prototype.empty = function () { };
	    GoogleMapsPolygon.prototype.getPoints = function () { return; };
	    GoogleMapsPolygon.prototype.getStrokeColor = function () { return; };
	    GoogleMapsPolygon.prototype.getFillColor = function () { return; };
	    GoogleMapsPolygon.prototype.getStrokeWidth = function () { return; };
	    GoogleMapsPolygon.prototype.getGeodesic = function () { return; };
	    GoogleMapsPolygon.prototype.getVisible = function () { return; };
	    GoogleMapsPolygon.prototype.getZIndex = function () { return; };
	    GoogleMapsPolygon.prototype.remove = function () { };
	    GoogleMapsPolygon.prototype.setPoints = function (points) { };
	    GoogleMapsPolygon.prototype.setStrokeColor = function (strokeColor) { };
	    GoogleMapsPolygon.prototype.setFillColor = function (fillColor) { };
	    GoogleMapsPolygon.prototype.setStrokeWidth = function (strokeWidth) { };
	    GoogleMapsPolygon.prototype.setVisible = function (visible) { };
	    GoogleMapsPolygon.prototype.setZIndex = function (zIndex) { };
	    GoogleMapsPolygon.prototype.setGeodesic = function (geodesic) { };
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "get", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "set", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "empty", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "getPoints", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "getStrokeColor", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "getFillColor", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "getStrokeWidth", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "getGeodesic", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "getVisible", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "getZIndex", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "remove", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "setPoints", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "setStrokeColor", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "setFillColor", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "setStrokeWidth", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "setVisible", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "setZIndex", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsPolygon.prototype, "setGeodesic", null);
	    return GoogleMapsPolygon;
	}());
	exports.GoogleMapsPolygon = GoogleMapsPolygon;
	/**
	 * @private
	 */
	var GoogleMapsTileOverlay = (function () {
	    function GoogleMapsTileOverlay(_objectInstance) {
	        this._objectInstance = _objectInstance;
	    }
	    /**
	     * Adds an event listener.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsTileOverlay.prototype.addEventListener = function (eventName) {
	        return Observable_1.Observable.fromEvent(this._objectInstance, eventName);
	    };
	    /**
	     * Adds an event listener that works once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsTileOverlay.prototype.addListenerOnce = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.addListenerOnce(eventName, resolve); });
	    };
	    /**
	     * Gets a value
	     * @param key
	     */
	    GoogleMapsTileOverlay.prototype.get = function (key) { return; };
	    /**
	     * Sets a value
	     * @param key
	     * @param value
	     */
	    GoogleMapsTileOverlay.prototype.set = function (key, value) { };
	    /**
	     * Listen to a map event.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsTileOverlay.prototype.on = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return new Observable_1.Observable(function (observer) {
	                observer.error({ error: 'plugin_not_installed' });
	            });
	        }
	        return new Observable_1.Observable(function (observer) {
	            _this._objectInstance.on(eventName, observer.next.bind(observer));
	            return function () { return _this._objectInstance.off(event); };
	        });
	    };
	    /**
	     * Listen to a map event only once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsTileOverlay.prototype.one = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.one(eventName, resolve); });
	    };
	    /**
	     * Clears all stored values
	     */
	    GoogleMapsTileOverlay.prototype.empty = function () { };
	    GoogleMapsTileOverlay.prototype.getVisible = function () { return; };
	    GoogleMapsTileOverlay.prototype.setVisible = function (visible) { };
	    GoogleMapsTileOverlay.prototype.getFadeIn = function () { return; };
	    GoogleMapsTileOverlay.prototype.setFadeIn = function (fadeIn) { };
	    GoogleMapsTileOverlay.prototype.getZIndex = function () { return; };
	    GoogleMapsTileOverlay.prototype.setZIndex = function (zIndex) { };
	    GoogleMapsTileOverlay.prototype.getOpacity = function () { return; };
	    GoogleMapsTileOverlay.prototype.setOpacity = function (opacity) { };
	    GoogleMapsTileOverlay.prototype.clearTileCache = function () { };
	    GoogleMapsTileOverlay.prototype.remove = function () { };
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "get", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "set", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "empty", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "getVisible", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "setVisible", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "getFadeIn", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "setFadeIn", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "getZIndex", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "setZIndex", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "getOpacity", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "setOpacity", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "clearTileCache", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsTileOverlay.prototype, "remove", null);
	    return GoogleMapsTileOverlay;
	}());
	exports.GoogleMapsTileOverlay = GoogleMapsTileOverlay;
	/**
	 * @private
	 */
	var GoogleMapsGroundOverlay = (function () {
	    function GoogleMapsGroundOverlay(_objectInstance) {
	        this._objectInstance = _objectInstance;
	    }
	    /**
	     * Adds an event listener.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsGroundOverlay.prototype.addEventListener = function (eventName) {
	        return Observable_1.Observable.fromEvent(this._objectInstance, eventName);
	    };
	    /**
	     * Adds an event listener that works once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsGroundOverlay.prototype.addListenerOnce = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.addListenerOnce(eventName, resolve); });
	    };
	    /**
	     * Gets a value
	     * @param key
	     */
	    GoogleMapsGroundOverlay.prototype.get = function (key) { return; };
	    /**
	     * Sets a value
	     * @param key
	     * @param value
	     */
	    GoogleMapsGroundOverlay.prototype.set = function (key, value) { };
	    /**
	     * Listen to a map event.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsGroundOverlay.prototype.on = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return new Observable_1.Observable(function (observer) {
	                observer.error({ error: 'plugin_not_installed' });
	            });
	        }
	        return new Observable_1.Observable(function (observer) {
	            _this._objectInstance.on(eventName, observer.next.bind(observer));
	            return function () { return _this._objectInstance.off(event); };
	        });
	    };
	    /**
	     * Listen to a map event only once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsGroundOverlay.prototype.one = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.one(eventName, resolve); });
	    };
	    /**
	     * Clears all stored values
	     */
	    GoogleMapsGroundOverlay.prototype.empty = function () { };
	    GoogleMapsGroundOverlay.prototype.setBearing = function (bearing) { };
	    GoogleMapsGroundOverlay.prototype.getBearing = function () { return; };
	    GoogleMapsGroundOverlay.prototype.setOpacity = function (opacity) { };
	    GoogleMapsGroundOverlay.prototype.getOpacity = function () { return; };
	    GoogleMapsGroundOverlay.prototype.setVisible = function (visible) { };
	    GoogleMapsGroundOverlay.prototype.getVisible = function () { return; };
	    GoogleMapsGroundOverlay.prototype.setImage = function (image) { };
	    ;
	    GoogleMapsGroundOverlay.prototype.remove = function () { };
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsGroundOverlay.prototype, "get", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsGroundOverlay.prototype, "set", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsGroundOverlay.prototype, "empty", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsGroundOverlay.prototype, "setBearing", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsGroundOverlay.prototype, "getBearing", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsGroundOverlay.prototype, "setOpacity", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsGroundOverlay.prototype, "getOpacity", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsGroundOverlay.prototype, "setVisible", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsGroundOverlay.prototype, "getVisible", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsGroundOverlay.prototype, "setImage", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsGroundOverlay.prototype, "remove", null);
	    return GoogleMapsGroundOverlay;
	}());
	exports.GoogleMapsGroundOverlay = GoogleMapsGroundOverlay;
	/**
	 * @private
	 */
	var GoogleMapsKmlOverlay = (function () {
	    function GoogleMapsKmlOverlay(_objectInstance) {
	        this._objectInstance = _objectInstance;
	    }
	    /**
	     * Adds an event listener.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsKmlOverlay.prototype.addEventListener = function (eventName) {
	        return Observable_1.Observable.fromEvent(this._objectInstance, eventName);
	    };
	    /**
	     * Adds an event listener that works once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsKmlOverlay.prototype.addListenerOnce = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.addListenerOnce(eventName, resolve); });
	    };
	    /**
	     * Gets a value
	     * @param key
	     */
	    GoogleMapsKmlOverlay.prototype.get = function (key) { return; };
	    /**
	     * Sets a value
	     * @param key
	     * @param value
	     */
	    GoogleMapsKmlOverlay.prototype.set = function (key, value) { };
	    /**
	     * Listen to a map event.
	     *
	     * @returns {Observable<any>}
	     */
	    GoogleMapsKmlOverlay.prototype.on = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return new Observable_1.Observable(function (observer) {
	                observer.error({ error: 'plugin_not_installed' });
	            });
	        }
	        return new Observable_1.Observable(function (observer) {
	            _this._objectInstance.on(eventName, observer.next.bind(observer));
	            return function () { return _this._objectInstance.off(event); };
	        });
	    };
	    /**
	     * Listen to a map event only once.
	     *
	     * @returns {Promise<any>}
	     */
	    GoogleMapsKmlOverlay.prototype.one = function (eventName) {
	        var _this = this;
	        if (!this._objectInstance) {
	            return Promise.reject({ error: 'plugin_not_installed' });
	        }
	        return new Promise(function (resolve) { return _this._objectInstance.one(eventName, resolve); });
	    };
	    /**
	     * Clears all stored values
	     */
	    GoogleMapsKmlOverlay.prototype.empty = function () { };
	    GoogleMapsKmlOverlay.prototype.remove = function () { };
	    GoogleMapsKmlOverlay.prototype.getOverlays = function () { return; };
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsKmlOverlay.prototype, "get", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsKmlOverlay.prototype, "set", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsKmlOverlay.prototype, "empty", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsKmlOverlay.prototype, "remove", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsKmlOverlay.prototype, "getOverlays", null);
	    return GoogleMapsKmlOverlay;
	}());
	exports.GoogleMapsKmlOverlay = GoogleMapsKmlOverlay;
	/**
	 * @private
	 */
	var GoogleMapsLatLngBounds = (function () {
	    function GoogleMapsLatLngBounds(southwestOrArrayOfLatLng, northeast) {
	        var args = !!northeast ? [southwestOrArrayOfLatLng, northeast] : southwestOrArrayOfLatLng;
	        this._objectInstance = new plugin.google.maps.LatLngBounds(args);
	    }
	    GoogleMapsLatLngBounds.prototype.toString = function () { return; };
	    GoogleMapsLatLngBounds.prototype.toUrlValue = function (precision) { return; };
	    GoogleMapsLatLngBounds.prototype.extend = function (LatLng) { };
	    GoogleMapsLatLngBounds.prototype.contains = function (LatLng) { return; };
	    GoogleMapsLatLngBounds.prototype.getCenter = function () { return; };
	    __decorate([
	        plugin_1.InstanceProperty
	    ], GoogleMapsLatLngBounds.prototype, "northeast", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], GoogleMapsLatLngBounds.prototype, "southwest", void 0);
	    __decorate([
	        plugin_1.InstanceProperty
	    ], GoogleMapsLatLngBounds.prototype, "type", void 0);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsLatLngBounds.prototype, "toString", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsLatLngBounds.prototype, "toUrlValue", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsLatLngBounds.prototype, "extend", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsLatLngBounds.prototype, "contains", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], GoogleMapsLatLngBounds.prototype, "getCenter", null);
	    return GoogleMapsLatLngBounds;
	}());
	exports.GoogleMapsLatLngBounds = GoogleMapsLatLngBounds;
	/**
	 * @private
	 */
	var GoogleMapsLatLng = (function () {
	    function GoogleMapsLatLng(lat, lng) {
	        this.lat = lat;
	        this.lng = lng;
	    }
	    GoogleMapsLatLng.prototype.equals = function (other) {
	        return this.lat === other.lat && this.lng === other.lng;
	    };
	    GoogleMapsLatLng.prototype.toString = function () {
	        return this.lat + ',' + this.lng;
	    };
	    GoogleMapsLatLng.prototype.toUrlValue = function (precision) {
	        precision = precision || 6;
	        return this.lat.toFixed(precision) + ',' + this.lng.toFixed(precision);
	    };
	    return GoogleMapsLatLng;
	}());
	exports.GoogleMapsLatLng = GoogleMapsLatLng;
	/**
	 * @private
	 */
	var Geocoder = (function () {
	    function Geocoder() {
	    }
	    /**
	     * Converts position to address and vice versa
	     * @param {GeocoderRequest} request Request object with either an address or a position
	     * @returns {Promise<GeocoderResult[]>}
	     */
	    Geocoder.geocode = function (request) {
	        return new Promise(function (resolve, reject) {
	            if (!plugin || !plugin.google || !plugin.google.maps || !plugin.google.maps.Geocoder) {
	                plugin_1.pluginWarn({
	                    pluginName: 'GoogleMap',
	                    plugin: 'plugin.google.maps.Map'
	                });
	                reject({ error: 'plugin_not_installed' });
	            }
	            else {
	                plugin.google.maps.Geocoder.geocode(request, resolve);
	            }
	        });
	    };
	    return Geocoder;
	}());
	exports.Geocoder = Geocoder;
	//# sourceMappingURL=googlemap.js.map

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Google Analytics
	 * @description
	 * This plugin connects to Google's native Universal Analytics SDK
	 * Prerequisites:
	 * - A Cordova 3.0+ project for iOS and/or Android
	 * - A Mobile App property through the Google Analytics Admin Console
	 * - (Android) Google Play Services SDK installed via [Android SDK Manager](https://developer.android.com/sdk/installing/adding-packages.html)
	 * @usage
	 * ```typescript
	 * import { GoogleAnalytics } from 'ionic-native';
	 *
	 * GoogleAnalytics.startTrackerWithId('YOUR_TRACKER_ID')
	 *    .then(() => {
	 *      console.log('Google analytics is ready now');
	 *      // Tracker is ready
	 *      // You can now track pages or set additional information such as AppVersion or UserId
	 *    })
	 *    .catch(e => console.log('Error starting GoogleAnalytics', e));
	 *
	 *
	 * ```
	 */
	var GoogleAnalytics = (function () {
	    function GoogleAnalytics() {
	    }
	    /**
	     * In your 'deviceready' handler, set up your Analytics tracker.
	     * https://developers.google.com/analytics/devguides/collection/analyticsjs/
	     * @param {string}  id  Your Google Analytics Mobile App property
	     * @param {number} interval Optional dispatch period in seconds. Defaults to 30.
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.startTrackerWithId = function (id, interval) { return; };
	    /**
	     * Enabling Advertising Features in Google Analytics allows you to take advantage of Remarketing, Demographics & Interests reports, and more
	     * @param allow {boolean}
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.setAllowIDFACollection = function (allow) { return; };
	    /**
	     * Set a UserId
	     * https://developers.google.com/analytics/devguides/collection/analyticsjs/user-id
	     * @param {string} id User ID
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.setUserId = function (id) { return; };
	    /**
	     * Set a anonymize Ip address
	     * @param anonymize {boolean} Set to true to anonymize the IP Address
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.setAnonymizeIp = function (anonymize) { return; };
	    /**
	     * Sets the app version
	     * @param appVersion {string} App version
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.setAppVersion = function (appVersion) { return; };
	    /**
	     * Set OptOut
	     * @param optout {boolean}
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.setOptOut = function (optout) { return; };
	    /**
	     * Enable verbose logging
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.debugMode = function () { return; };
	    /**
	     * Track custom metric
	     * @param key {string}
	     * @param value {any}
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.trackMetric = function (key, value) { return; };
	    /**
	     * Track a screen
	     * https://developers.google.com/analytics/devguides/collection/analyticsjs/screens
	     *
	     * @param title {string} Screen title
	     * @param campaignUrl {string} Campaign url for measuring referrals
	     * @param newSession {boolean} Set to true to create a new session
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.trackView = function (title, campaignUrl, newSession) { return; };
	    /**
	     * Add a Custom Dimension
	     * https://developers.google.com/analytics/devguides/platform/customdimsmets
	     * @param key {number}
	     * @param value {string}
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.addCustomDimension = function (key, value) { return; };
	    /**
	     * Track an event
	     * https://developers.google.com/analytics/devguides/collection/analyticsjs/events
	     * @param category {string}
	     * @param action {string}
	     * @param label {string}
	     * @param value {number}
	     * @param newSession {boolean} Set to true to create a new session
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.trackEvent = function (category, action, label, value, newSession) { return; };
	    /**
	     * Track an exception
	     * @param description {string}
	     * @param fatal {boolean}
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.trackException = function (description, fatal) { return; };
	    /**
	     * Track User Timing (App Speed)
	     * @param category {string}
	     * @param intervalInMilliseconds {number}
	     * @param variable {string}
	     * @param label {string}
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.trackTiming = function (category, intervalInMilliseconds, variable, label) { return; };
	    /**
	     * Add a Transaction (Ecommerce)
	     * https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#addTrans
	     * @param id {string}
	     * @param affiliation {string}
	     * @param revenue {number}
	     * @param tax {number}
	     * @param shipping {number}
	     * @param currencyCode {string}
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.addTransaction = function (id, affiliation, revenue, tax, shipping, currencyCode) { return; };
	    /**
	     * Add a Transaction Item (Ecommerce)
	     * https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#addItem
	     * @param {string}  id
	     * @param {string}  name
	     * @param {string}  sku
	     * @param {string}  category
	     * @param {number}  price
	     * @param {number}  quantity
	     * @param {string}  currencyCode
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.addTransactionItem = function (id, name, sku, category, price, quantity, currencyCode) { return; };
	    /**
	     * Enable/disable automatic reporting of uncaught exceptions
	     * @param shouldEnable {boolean}
	     * @returns {Promise<any>}
	     */
	    GoogleAnalytics.enableUncaughtExceptionReporting = function (shouldEnable) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 2,
	            errorIndex: 3
	        })
	    ], GoogleAnalytics, "startTrackerWithId", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleAnalytics, "setAllowIDFACollection", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleAnalytics, "setUserId", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleAnalytics, "setAnonymizeIp", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleAnalytics, "setAppVersion", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleAnalytics, "setOptOut", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleAnalytics, "debugMode", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 2,
	            errorIndex: 3
	        })
	    ], GoogleAnalytics, "trackMetric", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 3,
	            errorIndex: 4
	        })
	    ], GoogleAnalytics, "trackView", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleAnalytics, "addCustomDimension", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 5,
	            errorIndex: 6
	        })
	    ], GoogleAnalytics, "trackEvent", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleAnalytics, "trackException", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleAnalytics, "trackTiming", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleAnalytics, "addTransaction", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleAnalytics, "addTransactionItem", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], GoogleAnalytics, "enableUncaughtExceptionReporting", null);
	    GoogleAnalytics = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'GoogleAnalytics',
	            plugin: 'cordova-plugin-google-analytics',
	            pluginRef: 'ga',
	            repo: 'https://github.com/danwilson/google-analytics-plugin',
	            platforms: ['Android', 'iOS', 'Browser']
	        })
	    ], GoogleAnalytics);
	    return GoogleAnalytics;
	}());
	exports.GoogleAnalytics = GoogleAnalytics;
	//# sourceMappingURL=googleanalytics.js.map

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	var Observable_1 = __webpack_require__(11);
	/**
	 * @name Gyroscope
	 * @description Read Gyroscope sensor data
	 * @usage
	 * ```
	 * import { Gyroscope, GyroscopeOrientation, GyroscopeOptions } from 'ionic-native';
	 *
	 *
	 * let options: GyroscopeOptions = {
	 *    frequency: 1000
	 * };
	 *
	 * Gyroscope.getCurrent(options)
	 *   .then((orientation: GyroscopeOrientation) => {
	 *      console.log(orientation.x, orientation.y, orientation.z, orientation.timestamp);
	 *    })
	 *   .catch()
	 *
	 *
	 * Gyroscope.watch()
	 *    .subscribe((orientation: GyroscopeOrientation) => {
	 *       console.log(orientation.x, orientation.y, orientation.z, orientation.timestamp);
	 *    });
	 *
	 * ```
	 */
	var Gyroscope = (function () {
	    function Gyroscope() {
	    }
	    /**
	     * Watching for gyroscope sensor changes
	     * @param options {GyroscopeOptions} (optional)
	     * @return {Observable<GyroscopeOrientation>} Returns an Observable that resolves GyroscopeOrientation
	     */
	    Gyroscope.watch = function (options) {
	        return new Observable_1.Observable(function (observer) {
	            var watchId = navigator.gyroscope.watch(observer.next.bind(observer), observer.next.bind(observer), options);
	            return function () { return navigator.gyroscope.clearWatch(watchId); };
	        });
	    };
	    /**
	    * Get current data from gyroscope sensor
	    * @param options {GyroscopeOptions} (optional)
	    * @return {Promise<GyroscopeOrientation>} Returns a promise that resolves GyroscopeOrientation
	    */
	    Gyroscope.getCurrent = function (options) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Gyroscope, "getCurrent", null);
	    Gyroscope = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Gyroscope',
	            plugin: 'cordova-plugin-gyroscope',
	            pluginRef: 'navigator.gyroscope',
	            repo: 'https://github.com/NeoLSN/cordova-plugin-gyroscope',
	            platforms: ['Android', 'iOS']
	        })
	    ], Gyroscope);
	    return Gyroscope;
	}());
	exports.Gyroscope = Gyroscope;
	//# sourceMappingURL=gyroscope.js.map

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name HeaderColor
	 * @description
	 * Cordova plugin to change color of header in multitask view
	 *
	 * @usage
	 * ```typescript
	 * import { HeaderColor } from 'ionic-native';
	 *
	 * HeaderColor.tint("#becb29");
	 * ```
	 */
	var HeaderColor = (function () {
	    function HeaderColor() {
	    }
	    /**
	     * Set a color to the task header
	     * @param color {string} The hex value of the color
	     * @returns {Promise<any>}
	     */
	    HeaderColor.tint = function (color) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            callbackStyle: 'object',
	            successName: 'success',
	            errorName: 'failure'
	        })
	    ], HeaderColor, "tint", null);
	    HeaderColor = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'HeaderColor',
	            plugin: 'cordova-plugin-headercolor',
	            pluginRef: 'plugins.headerColor',
	            repo: 'https://github.com/tomloprod/cordova-plugin-headercolor',
	            platforms: ['Android']
	        })
	    ], HeaderColor);
	    return HeaderColor;
	}());
	exports.HeaderColor = HeaderColor;
	//# sourceMappingURL=headercolor.js.map

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Health
	 * @description
	 * A plugin that abstracts fitness and health repositories like Apple HealthKit or Google Fit.
	 *
	 * @usage
	 * ```
	 * import { Health } from 'ionic-native';
	 *
	 * ```
	 * See description at https://github.com/dariosalvi78/cordova-plugin-health for a full list of Datatypes and see examples.
	 * @interfaces
	 * HealthQueryOptions
	 * HealthQueryOptionsAggregated
	 * HealthStoreOptions
	 * HealthData
	 */
	var Health = (function () {
	    function Health() {
	    }
	    /**
	     * Tells if either Google Fit or HealthKit are available.
	     *
	     * @return {Promise<boolean>}
	     */
	    Health.isAvailable = function () {
	        return;
	    };
	    ;
	    /**
	     * Checks if recent Google Play Services and Google Fit are installed. If the play services are not installed,
	     * or are obsolete, it will show a pop-up suggesting to download them. If Google Fit is not installed,
	     * it will open the Play Store at the location of the Google Fit app.
	     * The plugin does not wait until the missing packages are installed, it will return immediately.
	     * If both Play Services and Google Fit are available, this function just returns without any visible effect.
	     *
	     * This function is only available on Android.
	     *
	     * @return {Promise<any>}
	     */
	    Health.promptInstallFit = function () {
	        return;
	    };
	    ;
	    /**
	     * Requests read and write access to a set of data types. It is recommendable to always explain why the app
	     * needs access to the data before asking the user to authorize it.
	     * This function must be called before using the query and store functions, even if the authorization has already
	     * been given at some point in the past.
	     *
	     * Quirks of requestAuthorization()
	  
	     * In Android, it will try to get authorization from the Google Fit APIs.
	     * It is necessary that the app's package name and the signing key are registered in the Google API console.
	     * In Android, be aware that if the activity is destroyed (e.g. after a rotation) or is put in background,
	     * the connection to Google Fit may be lost without any callback. Going through the authorization will ensure that
	     * the app is connected again.
	     * In Android 6 and over, this function will also ask for some dynamic permissions if needed
	     * (e.g. in the case of "distance", it will need access to ACCESS_FINE_LOCATION).
	     *
	     * @param {Array<String>} datatypes a list of data types you want to be granted access to
	     *
	     * @return {Promise<any>}
	     */
	    Health.requestAuthorization = function (datatypes) {
	        return;
	    };
	    ;
	    /**
	     * Check if the app has authorization to read/write a set of datatypes.
	     * This function is similar to requestAuthorization() and has similar quirks.
	     *
	     * @param {Array<String>} datatypes a list of data types you want to be granted access to
	     * @return {Promise<any>}
	     */
	    Health.isAuthorized = function (datatypes) {
	        return;
	    };
	    ;
	    /**
	     * Gets all the data points of a certain data type within a certain time window.
	     * Warning: if the time span is big, it can generate long arrays!
	     *
	     * Quirks of query()
	     *
	     * In iOS, the amount of datapoints is limited to 1000 by default.
	     * You can override this by adding a limit: xxx to your query object.
	     * In iOS, datapoints are ordered in an descending fashion (from newer to older).
	     * You can revert this behaviour by adding ascending: true to your query object.
	     * In Android, it is possible to query for "raw" steps or to select those as filtered by the Google Fit app.
	     * In the latter case the query object must contain the field filtered: true.
	     * In Google Fit, calories.basal is returned as an average per day, and usually is not available in all days.
	     * In Google Fit, calories.active is computed by subtracting the basal calories from the total.
	     * As basal energy expenditure, an average is computed from the week before endDate.
	     * While Google Fit calculates basal and active calories automatically,
	     * HealthKit needs an explicit input from some app.
	     * When querying for activities, Google Fit is able to determine some activities automatically
	     * (still, walking, running, biking, in vehicle), while HealthKit only relies on the input of
	     * the user or of some external app.
	     * When querying for activities, calories and distance are also provided in HealthKit (units are kcal and meters) and
	     * never in Google Fit.
	     * When querying for nutrition, Google Fit always returns all the nutrition elements it has,
	     * while HealthKit returns only those that are stored as correlation. To be sure to get all stored the quantities
	     * (regardless of they are stored as correlation or not), it's better to query single nutrients.
	     * nutrition.vitamin_a is given in micrograms in HealthKit and International Unit in Google Fit.
	     * Automatic conversion is not trivial and depends on the actual substance.
	     *
	     * @param queryOptions {HealthQueryOptions}
	     * @return {Promise<HealthData>}
	     */
	    Health.query = function (queryOptions) {
	        return;
	    };
	    ;
	    /**
	     * Gets aggregated data in a certain time window. Usually the sum is returned for the given quantity.
	     *
	     * Quirks of queryAggregated()
	     * In Android, to query for steps as filtered by the Google Fit app, the flag filtered:
	     * true must be added into the query object.
	     * When querying for activities, calories and distance are provided
	     * when available in HealthKit and never in Google Fit.
	     * In Android, the start and end dates returned are the date of the first and the last available samples.
	     * If no samples are found, start and end may not be set.
	     * When bucketing, buckets will include the whole hour / day / month / week / year where start and end times
	     * fall into. For example, if your start time is 2016-10-21 10:53:34,
	     * the first daily bucket will start at 2016-10-21 00:00:00.
	     * Weeks start on Monday.
	     * When querying for nutrition, HealthKit returns only those that are stored as correlation.
	     * To be sure to get all the stored quantities, it's better to query single nutrients.
	     * nutrition.vitamin_a is given in micrograms in HealthKit and International Unit in Google Fit.
	     *
	     * @param queryOptionsAggregated
	     * @return {Promise<HealthData>}
	     */
	    Health.queryAggregated = function (queryOptionsAggregated) {
	        return;
	    };
	    ;
	    /**
	     * Stores a data point.
	     *
	     * Quirks of store()
	     *
	     * Google Fit doesn't allow you to overwrite data points that overlap with others already stored of the same type (see here). At the moment there is no support for update nor delete.
	     * In iOS you cannot store the total calories, you need to specify either basal or active. If you use total calories, the active ones will be stored.
	     * In Android you can only store active calories, as the basal are estimated automatically. If you store total calories, these will be treated as active.
	     * In iOS distance is assumed to be of type WalkingRunning, if you want to explicitly set it to Cycling you need to add the field cycling: true.
	     * In iOS storing the sleep activities is not supported at the moment.
	     * Storing of nutrients is not supported at the moment.
	     * @param storeOptions
	     * @return {Promise<any>}
	     */
	    Health.store = function (storeOptions) {
	        return;
	    };
	    ;
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Health, "isAvailable", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Health, "promptInstallFit", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Health, "requestAuthorization", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Health, "isAuthorized", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Health, "query", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Health, "queryAggregated", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Health, "store", null);
	    Health = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Health',
	            plugin: 'cordova-plugin-health',
	            pluginRef: 'navigator.health',
	            repo: 'https://github.com/dariosalvi78/cordova-plugin-health'
	        })
	    ], Health);
	    return Health;
	}());
	exports.Health = Health;
	//# sourceMappingURL=health.js.map

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @beta
	 * @name Hotspot
	 * @description
	 * @usage
	 * ```typescript
	 * import { Hotspot, Network } from 'ionic-native';
	 *
	 *
	 * Hotspot.scanWifi().then((networks: Array<Network>) => {
	 *     console.log(networks);
	 * });
	 *
	 * ```
	 * @interfaces
	 * HotspotConnectionInfo
	 * HotspotNetwork
	 * HotspotNetworkConfig
	 * HotspotDevice
	 */
	var Hotspot = (function () {
	    function Hotspot() {
	    }
	    /**
	     * @returns {Promise<boolean>}
	     */
	    Hotspot.isAvailable = function () { return; };
	    /**
	     * @returns {Promise<boolean>}
	     */
	    Hotspot.toggleWifi = function () { return; };
	    /**
	     * Configures and starts hotspot with SSID and Password
	     *
	     * @param {string}    SSID        - SSID of your new Access Point
	     * @param {string}    mode        - encryption mode (Open, WEP, WPA, WPA_PSK)
	     * @param {string}    password    - password for your new Access Point
	     *
	     * @returns {Promise<void>}        - Promise to call once hotspot is started, or reject upon failure
	     */
	    Hotspot.createHotspot = function (ssid, mode, password) { return; };
	    /**
	     * Turns on Access Point
	     *
	     * @returns {Promise<boolean>} - true if AP is started
	     */
	    Hotspot.startHotspot = function () { return; };
	    /**
	     * Configures hotspot with SSID and Password
	     *
	     * @param {string}    SSID        - SSID of your new Access Point
	     * @param {string}    mode        - encryption mode (Open, WEP, WPA, WPA_PSK)
	     * @param {string}    password    - password for your new Access Point
	     *
	     * @returns {Promise<void>}        - Promise to call when hotspot is configured, or reject upon failure
	     */
	    Hotspot.configureHotspot = function (ssid, mode, password) { return; };
	    /**
	     * Turns off Access Point
	     *
	     * @returns {Promise<boolean>} - Promise to turn off the hotspot, true on success, false on failure
	     */
	    Hotspot.stopHotspot = function () { return; };
	    /**
	     * Checks if hotspot is enabled
	     *
	     * @returns {Promise<void>}    - Promise that hotspot is enabled, rejected if it is not enabled
	     */
	    Hotspot.isHotspotEnabled = function () { return; };
	    /**
	     * @returns {Promise<Array<HotspotDevice>>}
	     */
	    Hotspot.getAllHotspotDevices = function () { return; };
	    /**
	     * Connect to a WiFi network
	     *
	     * @param {string}    ssid
	     *      SSID to connect
	     * @param {string}    password
	     *      password to use
	     *
	     * @returns {Promise<void>}
	     *      Promise that connection to the WiFi network was successfull, rejected if unsuccessful
	     */
	    Hotspot.connectToWifi = function (ssid, password) { return; };
	    /**
	     * Connect to a WiFi network
	     *
	     * @param {string}   ssid
	     *      SSID to connect
	     * @param {string}   password
	     *      Password to use
	     * @param {string}   authentication
	     *      Authentication modes to use (LEAP, SHARED, OPEN)
	     * @param {string[]} encryption
	     *      Encryption modes to use (CCMP, TKIP, WEP104, WEP40)
	     *
	     * @returns {Promise<void>}
	     *      Promise that connection to the WiFi network was successfull, rejected if unsuccessful
	     */
	    Hotspot.connectToWifiAuthEncrypt = function (ssid, password, authentication, encryption) { return; };
	    /**
	     * Add a WiFi network
	     *
	     * @param {string}    ssid
	     *      SSID of network
	     * @param {string}    mode
	     *      Authentication mode of (Open, WEP, WPA, WPA_PSK)
	     * @param {string}    password
	     *      Password for network
	     *
	     * @returns {Promise<void>}
	     *      Promise that adding the WiFi network was successfull, rejected if unsuccessful
	     */
	    Hotspot.addWifiNetwork = function (ssid, mode, password) { return; };
	    /**
	     * Remove a WiFi network
	     *
	     * @param {string}    ssid
	     *      SSID of network
	     *
	     * @returns {Promise<void>}
	     *      Promise that removing the WiFi network was successfull, rejected if unsuccessful
	     */
	    Hotspot.removeWifiNetwork = function (ssid) { return; };
	    /**
	     * @returns {Promise<boolean>}
	     */
	    Hotspot.isConnectedToInternet = function () { return; };
	    /**
	     * @returns {Promise<boolean>}
	     */
	    Hotspot.isConnectedToInternetViaWifi = function () { return; };
	    /**
	     * @returns {Promise<boolean>}
	     */
	    Hotspot.isWifiOn = function () { return; };
	    /**
	     * @returns {Promise<boolean>}
	     */
	    Hotspot.isWifiSupported = function () { return; };
	    /**
	     * @returns {Promise<boolean>}
	     */
	    Hotspot.isWifiDirectSupported = function () { return; };
	    /**
	     * @returns {Promise<Array<HotspotNetwork>>}
	     */
	    Hotspot.scanWifi = function () { return; };
	    /**
	     * @returns {Promise<Array<HotspotNetwork>>}
	     */
	    Hotspot.scanWifiByLevel = function () { return; };
	    /**
	     * @returns {Promise<any>}
	     */
	    Hotspot.startWifiPeriodicallyScan = function (interval, duration) { return; };
	    /**
	     * @returns {Promise<any>}
	     */
	    Hotspot.stopWifiPeriodicallyScan = function () { return; };
	    /**
	     * @returns {Promise<HotspotNetworkConfig>}
	     */
	    Hotspot.getNetConfig = function () { return; };
	    /**
	     * @returns {Promise<HotspotConnectionInfo>}
	     */
	    Hotspot.getConnectionInfo = function () { return; };
	    /**
	     * @returns {Promise<string>}
	     */
	    Hotspot.pingHost = function (ip) { return; };
	    /**
	     * Gets MAC Address associated with IP Address from ARP File
	     *
	     * @param {string}        ip  - IP Address that you want the MAC Address of
	     *
	     * @returns {Promise<string>}  - A Promise for the MAC Address
	     */
	    Hotspot.getMacAddressOfHost = function (ip) { return; };
	    /**
	     * Checks if IP is live using DNS
	     *
	     * @param {string}        ip  - IP Address you want to test
	     *
	     * @returns {Promise<boolean>} - A Promise for whether the IP Address is reachable
	     */
	    Hotspot.isDnsLive = function (ip) { return; };
	    /**
	     * Checks if IP is live using socket And PORT
	     *
	     * @param {string}        ip  - IP Address you want to test
	     *
	     * @returns {Promise<boolean>} - A Promise for whether the IP Address is reachable
	     */
	    Hotspot.isPortLive = function (ip) { return; };
	    /**
	     * Checks if device is rooted
	     *
	     * @returns {Promise<boolean>} - A Promise for whether the device is rooted
	     */
	    Hotspot.isRooted = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "isAvailable", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "toggleWifi", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "createHotspot", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "startHotspot", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "configureHotspot", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "stopHotspot", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "isHotspotEnabled", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "getAllHotspotDevices", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "connectToWifi", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "connectToWifiAuthEncrypt", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "addWifiNetwork", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "removeWifiNetwork", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "isConnectedToInternet", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "isConnectedToInternetViaWifi", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "isWifiOn", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "isWifiSupported", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "isWifiDirectSupported", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "scanWifi", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "scanWifiByLevel", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "startWifiPeriodicallyScan", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "stopWifiPeriodicallyScan", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "getNetConfig", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "getConnectionInfo", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "pingHost", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "getMacAddressOfHost", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "isDnsLive", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "isPortLive", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Hotspot, "isRooted", null);
	    Hotspot = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Hotspot',
	            plugin: 'cordova-plugin-hotspot',
	            pluginRef: 'cordova.plugins.hotspot',
	            repo: 'https://github.com/hypery2k/cordova-hotspot-plugin',
	            platforms: ['Android']
	        })
	    ], Hotspot);
	    return Hotspot;
	}());
	exports.Hotspot = Hotspot;
	//# sourceMappingURL=hotspot.js.map

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name HTTP
	 * @description
	 * Cordova / Phonegap plugin for communicating with HTTP servers. Supports iOS and Android.
	 *
	 * Advantages over Javascript requests:
	 * - Background threading - all requests are done in a background thread
	 * - SSL Pinning
	 *
	 * @usage
	 * ```
	 * import { HTTP } from 'ionic-native';
	 *
	 * HTTP.get('http://ionic.io', {}, {})
	 *   .then(data => {
	 *
	 *     console.log(data.status);
	 *     console.log(data.data); // data received by server
	 *     console.log(data.headers);
	 *
	 *   })
	 *   .catch(error => {
	 *
	 *     console.log(error.status);
	 *     console.log(error.error); // error message as string
	 *     console.log(error.headers);
	 *
	 *   });
	 *
	 * ```
	 * @interfaces
	 * HTTPResponse
	 */
	var HTTP = (function () {
	    function HTTP() {
	    }
	    /**
	     * This returns an object representing a basic HTTP Authorization header of the form.
	     * @param username {string} Username
	     * @param password {string} Password
	     * @returns {Object} an object representing a basic HTTP Authorization header of the form {'Authorization': 'Basic base64encodedusernameandpassword'}
	     */
	    HTTP.getBasicAuthHeader = function (username, password) { return; };
	    /**
	     * This sets up all future requests to use Basic HTTP authentication with the given username and password.
	     * @param username {string} Username
	     * @param password {string} Password
	     */
	    HTTP.useBasicAuth = function (username, password) { };
	    /**
	     * Set a header for all future requests. Takes a header and a value.
	     * @param header {string} The name of the header
	     * @param value {string} The value of the header
	     */
	    HTTP.setHeader = function (header, value) { };
	    /**
	     * Enable or disable SSL Pinning. This defaults to false.
	     *
	     * To use SSL pinning you must include at least one .cer SSL certificate in your app project. You can pin to your server certificate or to one of the issuing CA certificates. For ios include your certificate in the root level of your bundle (just add the .cer file to your project/target at the root level). For android include your certificate in your project's platforms/android/assets folder. In both cases all .cer files found will be loaded automatically. If you only have a .pem certificate see this stackoverflow answer. You want to convert it to a DER encoded certificate with a .cer extension.
	     *
	     * As an alternative, you can store your .cer files in the www/certificates folder.
	     * @param enable {boolean} Set to true to enable
	     * @returns {Promise<void>} returns a promise that will resolve on success, and reject on failure
	     */
	    HTTP.enableSSLPinning = function (enable) { return; };
	    /**
	     * Accept all SSL certificates. Or disabled accepting all certificates. Defaults to false.
	     * @param accept {boolean} Set to true to accept
	     * @returns {Promise<void>} returns a promise that will resolve on success, and reject on failure
	     */
	    HTTP.acceptAllCerts = function (accept) { return; };
	    /**
	     * Whether or not to validate the domain name in the certificate. This defaults to true.
	     * @param validate {boolean} Set to true to validate
	     * @returns {Promise<void>} returns a promise that will resolve on success, and reject on failure
	     */
	    HTTP.validateDomainName = function (validate) { return; };
	    /**
	     * Make a POST request
	     * @param url {string} The url to send the request to
	     * @param body {Object} The body of the request
	     * @param headers {Object} The headers to set for this request
	     * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure
	     */
	    HTTP.post = function (url, body, headers) { return; };
	    /**
	     *
	     * @param url {string} The url to send the request to
	     * @param parameters {Object} Parameters to send with the request
	     * @param headers {Object} The headers to set for this request
	     * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure
	     */
	    HTTP.get = function (url, parameters, headers) { return; };
	    /**
	     *
	     * @param url {string} The url to send the request to
	     * @param body {Object} The body of the request
	     * @param headers {Object} The headers to set for this request
	     * @param filePath {string} The local path of the file to upload
	     * @param name {string} The name of the parameter to pass the file along as
	     * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure
	     */
	    HTTP.uploadFile = function (url, body, headers, filePath, name) { return; };
	    /**
	     *
	     * @param url {string} The url to send the request to
	     * @param body {Object} The body of the request
	     * @param headers {Object} The headers to set for this request
	     * @param filePath {string} The path to donwload the file to, including the file name.
	     * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure
	     */
	    HTTP.downloadFile = function (url, body, headers, filePath) { return; };
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], HTTP, "getBasicAuthHeader", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], HTTP, "useBasicAuth", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], HTTP, "setHeader", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], HTTP, "enableSSLPinning", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], HTTP, "acceptAllCerts", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], HTTP, "validateDomainName", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], HTTP, "post", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], HTTP, "get", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], HTTP, "uploadFile", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], HTTP, "downloadFile", null);
	    HTTP = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'HTTP',
	            plugin: 'cordova-plugin-http',
	            pluginRef: 'cordovaHTTP',
	            repo: 'https://github.com/wymsee/cordova-HTTP',
	            platforms: ['Android', 'iOS']
	        })
	    ], HTTP);
	    return HTTP;
	}());
	exports.HTTP = HTTP;
	//# sourceMappingURL=http.js.map

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Httpd
	 * @description
	 * Embedded httpd for Cordova apps. Light weight HTTP server.
	 * @usage
	 * ```typescript
	 * import {Httpd, HttpdOptions} from 'ionic-native';
	 *
	 * let options: HttpdOptions = {
	 *      www_root: 'httpd_root', // relative path to app's www directory
	 *      port: 80,
	 *      localhost_only: false
	 *  };
	 *
	 * Httpd.startServer(options).subscribe((data) => {
	 *  console.log('Server is live');
	 * });
	 *
	 * ```
	 * @interfaces
	 * HttpdOptions
	 */
	var Httpd = (function () {
	    function Httpd() {
	    }
	    /**
	     * Starts a web server.
	     * @param options {HttpdOptions}
	     * @returns {Observable<string>} Returns an Observable. Subscribe to receive the URL for your web server (if succeeded). Unsubscribe to stop the server.
	     */
	    Httpd.startServer = function (options) { return; };
	    /**
	     * Gets the URL of the running server
	     * @returns {Promise<string>} Returns a promise that resolves with the URL of the web server.
	     */
	    Httpd.getUrl = function () { return; };
	    /**
	     * Get the local path of the running webserver
	     * @returns {Promise<string>} Returns a promise that resolves with the local path of the web server.
	      */
	    Httpd.getLocalPath = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'stopServer'
	        })
	    ], Httpd, "startServer", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Httpd, "getUrl", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Httpd, "getLocalPath", null);
	    Httpd = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Httpd',
	            plugin: 'https://github.com/floatinghotpot/cordova-httpd.git',
	            pluginRef: 'cordova.plugins.CorHttpd',
	            repo: 'https://github.com/floatinghotpot/cordova-httpd',
	            platforms: ['iOS', 'Android']
	        })
	    ], Httpd);
	    return Httpd;
	}());
	exports.Httpd = Httpd;
	//# sourceMappingURL=httpd.js.map

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	var Observable_1 = __webpack_require__(11);
	/**
	 * @name IBeacon
	 * @description
	 * This plugin provides functions for working with iBeacons.
	 *
	 *  The plugin's API closely mimics the one exposed through the [CLLocationManager](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html) introduced in iOS 7.
	 *
	 * @usage
	 *
	 * ```typescript
	 * import { IBeacon } from 'ionic-native';
	 *
	 *
	 * // Request permission to use location on iOS
	 * IBeacon.requestAlwaysAuthorization();
	 * // create a new delegate and register it with the native layer
	 * let delegate = IBeacon.Delegate();
	 *
	 * // Subscribe to some of the delegate's event handlers
	 * delegate.didRangeBeaconsInRegion()
	 *   .subscribe(
	 *     data => console.log('didRangeBeaconsInRegion: ', data),
	 *     error => console.error();
	 *   );
	 * delegate.didStartMonitoringForRegion()
	 *   .subscribe(
	 *     data => console.log('didStartMonitoringForRegion: ', data),
	 *     error => console.error();
	 *   );
	 * delegate.didEnterRegion()
	 *   .subscribe(
	 *     data => {
	 *       console.log('didEnterRegion: ', data);
	 *     }
	 *   );
	 *
	 * let beaconRegion = IBeacon.BeaconRegion('deskBeacon','F7826DA6-ASDF-ASDF-8024-BC5B71E0893E');
	 *
	 * IBeacon.startMonitoringForRegion(beaconRegion)
	 *   .then(
	 *     () => console.log('Native layer recieved the request to monitoring'),
	 *     error => console.error('Native layer failed to begin monitoring: ', error)
	 *   );
	 * ```
	 * @interfaces
	 * Beacon
	 * BeaconRegion
	 * CircularRegion
	 * IBeaconPluginResult
	 * IBeaconDelegate
	 *
	 */
	var IBeacon = (function () {
	    function IBeacon() {
	    }
	    /**
	     * Instances of this class are delegates between the {@link LocationManager} and
	     * the code that consumes the messages generated on in the native layer.
	     *
	     * @returns {IBeaconDelegate} An instance of the type {@type Delegate}.
	     */
	    IBeacon.Delegate = function () {
	        var delegate = new cordova.plugins.locationManager.Delegate();
	        delegate.didChangeAuthorizationStatus = function (pluginResult) {
	            return new Observable_1.Observable(function (observer) {
	                var cb = function (data) { return observer.next(data); };
	                return delegate.didChangeAuthorizationStatus = cb;
	            });
	        };
	        delegate.didDetermineStateForRegion = function (pluginResult) {
	            return new Observable_1.Observable(function (observer) {
	                var cb = function (data) { return observer.next(data); };
	                return delegate.didDetermineStateForRegion = cb;
	            });
	        };
	        delegate.didEnterRegion = function (pluginResult) {
	            return new Observable_1.Observable(function (observer) {
	                var cb = function (data) { return observer.next(data); };
	                return delegate.didEnterRegion = cb;
	            });
	        };
	        delegate.didExitRegion = function (pluginResult) {
	            return new Observable_1.Observable(function (observer) {
	                var cb = function (data) { return observer.next(data); };
	                return delegate.didExitRegion = cb;
	            });
	        };
	        delegate.didRangeBeaconsInRegion = function (pluginResult) {
	            return new Observable_1.Observable(function (observer) {
	                var cb = function (data) { return observer.next(data); };
	                return delegate.didRangeBeaconsInRegion = cb;
	            });
	        };
	        delegate.didStartMonitoringForRegion = function (pluginResult) {
	            return new Observable_1.Observable(function (observer) {
	                var cb = function (data) { return observer.next(data); };
	                return delegate.didStartMonitoringForRegion = cb;
	            });
	        };
	        delegate.monitoringDidFailForRegionWithError = function (pluginResult) {
	            return new Observable_1.Observable(function (observer) {
	                var cb = function (data) { return observer.next(data); };
	                return delegate.monitoringDidFailForRegionWithError = cb;
	            });
	        };
	        delegate.peripheralManagerDidStartAdvertising = function (pluginResult) {
	            return new Observable_1.Observable(function (observer) {
	                var cb = function (data) { return observer.next(data); };
	                return delegate.peripheralManagerDidStartAdvertising = cb;
	            });
	        };
	        delegate.peripheralManagerDidUpdateState = function (pluginResult) {
	            return new Observable_1.Observable(function (observer) {
	                var cb = function (data) { return observer.next(data); };
	                return delegate.peripheralManagerDidUpdateState = cb;
	            });
	        };
	        cordova.plugins.locationManager.setDelegate(delegate);
	        return delegate;
	    };
	    /**
	     * Creates a new BeaconRegion
	     *
	     * @param {String} identifier @see {CLRegion}
	     * @param {String} uuid The proximity ID of the beacon being targeted.
	     * This value must not be blank nor invalid as a UUID.
	     * @param {Number} major The major value that you use to identify one or more beacons.
	     * @param {Number} minor The minor value that you use to identify a specific beacon.
	     * @param {BOOL} notifyEntryStateOnDisplay
	     *
	     * @returns {BeaconRegion} Returns the BeaconRegion that was created
	     */
	    IBeacon.BeaconRegion = function (identifer, uuid, major, minor, notifyEntryStateOnDisplay) {
	        return new cordova.plugins.locationManager.BeaconRegion(identifer, uuid, major, minor, notifyEntryStateOnDisplay);
	    };
	    /**
	     * @returns {IBeaconDelegate} Returns the IBeaconDelegate
	     */
	    IBeacon.getDelegate = function () { return; };
	    /**
	     * @param {IBeaconDelegate} delegate An instance of a delegate to register with the native layer.
	     *
	     * @returns {IBeaconDelegate} Returns the IBeaconDelegate
	     */
	    IBeacon.setDelegate = function (delegate) { return; };
	    /**
	     * Signals the native layer that the client side is ready to consume messages.
	     * Readiness here means that it has a {IBeaconDelegate} set by the consumer javascript
	     * code.
	     *
	     * The {LocationManager.setDelegate()} will implicitly call this method as well,
	     * therefore the only case when you have to call this manually is if you don't
	     * wish to specify a {IBeaconDelegate} of yours.
	     *
	     * The purpose of this signaling mechanism is to make the events work when the
	     * app is being woken up by the Operating System to give it a chance to handle
	     * region monitoring events for example.
	     *
	     * If you don't set a {IBeaconDelegate} and don't call this method manually, an error
	     * message get emitted in the native runtime and the DOM as well after a certain
	     * period of time.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved as soon as the
	     * native layer acknowledged the request and started to send events.
	     */
	    IBeacon.onDomDelegateReady = function () { return; };
	    /**
	     * Determines if bluetooth is switched on, according to the native layer.
	     * @returns {Promise<boolean>} Returns a promise which is resolved with a {Boolean}
	     * indicating whether bluetooth is active.
	     */
	    IBeacon.isBluetoothEnabled = function () { return; };
	    /**
	     * Enables Bluetooth using the native Layer. (ANDROID ONLY)
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved when Bluetooth
	     * could be enabled. If not, the promise will be rejected with an error.
	     */
	    IBeacon.enableBluetooth = function () { return; };
	    /**
	     * Disables Bluetooth using the native Layer. (ANDROID ONLY)
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved when Bluetooth
	     * could be enabled. If not, the promise will be rejected with an error.
	     */
	    IBeacon.disableBluetooth = function () { return; };
	    /**
	     * Start monitoring the specified region.
	     *
	     * If a region of the same type with the same identifier is already being
	     * monitored for this application,
	     * it will be removed from monitoring. For circular regions, the region
	     * monitoring service will prioritize
	     * regions by their size, favoring smaller regions over larger regions.
	     *
	     * This is done asynchronously and may not be immediately reflected in monitoredRegions.
	     *
	     * @param {Region} region An instance of {Region} which will be monitored
	     * by the operating system.
	     *
	     * @returns {Promise<string>} Returns a promise which is resolved as soon as the
	     * native layer acknowledged the dispatch of the monitoring request.
	     */
	    IBeacon.startMonitoringForRegion = function (region) { return; };
	    /**
	     * Stop monitoring the specified region.  It is valid to call
	     * stopMonitoringForRegion: for a region that was registered for monitoring
	     * with a different location manager object, during this or previous
	     * launches of your application.
	     *
	     * This is done asynchronously and may not be immediately reflected in monitoredRegions.
	     *
	     * @param {Region} region An instance of {Region} which will be monitored
	     * by the operating system.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved as soon as the
	     * native layer acknowledged the dispatch of the request to stop monitoring.
	     */
	    IBeacon.stopMonitoringForRegion = function (region) { return; };
	    /**
	     * Request state the for specified region. When result is ready
	     * didDetermineStateForRegion is triggered. This can be any region,
	     * also those which is not currently monitored.
	     *
	     * This is done asynchronously and may not be immediately reflected in monitoredRegions.
	     *
	     * @param {Region} region An instance of {Region} which will be monitored
	     * by the operating system.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved as soon as the
	     * native layer acknowledged the dispatch of the request to stop monitoring.
	     */
	    IBeacon.requestStateForRegion = function (region) { return; };
	    /**
	     * Start ranging the specified beacon region.
	     *
	     * If a region of the same type with the same identifier is already being
	     * monitored for this application, it will be removed from monitoring.
	     *
	     * This is done asynchronously and may not be immediately reflected in rangedRegions.
	     *
	     * @param {Region} region An instance of {BeaconRegion} which will be monitored
	     * by the operating system.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved as soon as the
	     * native layer acknowledged the dispatch of the monitoring request.
	     */
	    IBeacon.startRangingBeaconsInRegion = function (region) { return; };
	    /**
	     * Stop ranging the specified region.  It is valid to call
	     * stopMonitoringForRegion: for a region that was registered for ranging
	     * with a different location manager object, during this or previous
	     * launches of your application.
	     *
	     * This is done asynchronously and may not be immediately reflected in rangedRegions.
	     *
	     * @param {Region} region An instance of {BeaconRegion} which will be monitored
	     * by the operating system.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved as soon as the
	     * native layer acknowledged the dispatch of the request to stop monitoring.
	     */
	    IBeacon.stopRangingBeaconsInRegion = function (region) { return; };
	    /**
	     * Queries the native layer to determine the current authorization in effect.
	     *
	     * @returns {Promise<IBeaconPluginResult>} Returns a promise which is resolved with the
	     * requested authorization status.
	     */
	    IBeacon.getAuthorizationStatus = function () { return; };
	    /**
	     * For iOS 8 and above only. The permission model has changed by Apple in iOS 8, making it necessary for apps to
	     * explicitly request permissions via methods like these:
	     * <a href="https://developer.apple.com/library/prerelease/iOS/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instm/CLLocationManager/requestWhenInUseAuthorization">requestWhenInUseAuthorization</a>
	     * <a href="https://developer.apple.com/library/prerelease/iOS/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instm/CLLocationManager/requestAlwaysAuthorization">requestAlwaysAuthorization</a>
	     *
	     * If you are using this plugin on Android devices only, you will never have to use this, nor {@code requestAlwaysAuthorization}
	     * @returns {Promise<void>} Returns a promise that is resolved when the request dialog is shown.
	     */
	    IBeacon.requestWhenInUseAuthorization = function () { return; };
	    /**
	     * See the documentation of {@code requestWhenInUseAuthorization} for further details.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved when the native layer
	     * shows the request dialog.
	     */
	    IBeacon.requestAlwaysAuthorization = function () { return; };
	    /**
	     *
	     * @returns {Promise<Region[]>} Returns a promise which is resolved with an {Array}
	     * of {Region} instances that are being monitored by the native layer.
	     */
	    IBeacon.getMonitoredRegions = function () { return; };
	    /**
	     *
	     * @returns {Promise<Region[]>} Returns a promise which is resolved with an {Array}
	     * of {Region} instances that are being ranged by the native layer.
	     */
	    IBeacon.getRangedRegions = function () { return; };
	    /**
	     * Determines if ranging is available or not, according to the native layer.
	     * @returns {Promise<boolean>} Returns a promise which is resolved with a {Boolean}
	     * indicating whether ranging is available or not.
	     */
	    IBeacon.isRangingAvailable = function () { return; };
	    /**
	     * Determines if region type is supported or not, according to the native layer.
	     *
	     * @param {Region} region An instance of {Region} which will be checked
	     * by the operating system.
	     *
	     * @returns {Promise<boolean>} Returns a promise which is resolved with a {Boolean}
	     * indicating whether the region type is supported or not.
	     */
	    IBeacon.isMonitoringAvailableForClass = function (region) { return; };
	    /**
	     * Start advertising the specified region.
	     *
	     * If a region a different identifier is already being advertised for
	     * this application, it will be replaced with the new identifier.
	     *
	     * This call will accept a valid beacon even when no BlueTooth is available,
	     * and will start when BlueTooth is powered on. See {IBeaconDelegate.}
	     *
	     * @param {Region} region An instance of {Region} which will be advertised
	     * by the operating system.
	     * @param {Integer} measuredPower: Optional parameter, if left empty, the device will
	     * use it's own default value.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved as soon as the
	     * native layer acknowledged the dispatch of the advertising request.
	     */
	    IBeacon.startAdvertising = function (region, measuredPower) { return; };
	    /**
	     * Stop advertising as a beacon.
	     *
	     * This is done asynchronously and may not be immediately reflected in isAdvertising.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved as soon as the
	     * native layer acknowledged the dispatch of the request to stop advertising.
	     */
	    IBeacon.stopAdvertising = function (region) { return; };
	    /**
	     * Determines if advertising is available or not, according to the native layer.
	     * @returns {Promise<void>} Returns a promise which is resolved with a {Boolean}
	     * indicating whether advertising is available or not.
	     */
	    IBeacon.isAdvertisingAvailable = function () { return; };
	    /**
	     * Determines if advertising is currently active, according to the native layer.
	     * @returns {Promise<void>} Returns a promise which is resolved with a {Boolean}
	     * indicating whether advertising is active.
	     */
	    IBeacon.isAdvertising = function () { return; };
	    /**
	     * Disables debug logging in the native layer. Use this method if you want
	     * to prevent this plugin from writing to the device logs.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved as soon as the
	     * native layer has set the logging level accordingly.
	     */
	    IBeacon.disableDebugLogs = function () { return; };
	    /**
	     * Enables the posting of debug notifications in the native layer. Use this method if you want
	     * to allow the plugin the posting local notifications.
	     * This can be very helpful when debugging how to apps behave when launched into the background.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved as soon as the
	     * native layer has set the flag to enabled.
	     */
	    IBeacon.enableDebugNotifications = function () { return; };
	    /**
	     * Disables the posting of debug notifications in the native layer. Use this method if you want
	     * to prevent the plugin from posting local notifications.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved as soon as the
	     * native layer has set the flag to disabled.
	     */
	    IBeacon.disableDebugNotifications = function () { return; };
	    /**
	     * Enables debug logging in the native layer. Use this method if you want
	     * a debug the inner workings of this plugin.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved as soon as the
	     * native layer has set the logging level accordingly.
	     */
	    IBeacon.enableDebugLogs = function () { return; };
	    /**
	     * Appends the provided [message] to the device logs.
	     * Note: If debug logging is turned off, this won't do anything.
	     *
	     * @param {String} message The message to append to the device logs.
	     *
	     * @returns {Promise<void>} Returns a promise which is resolved with the log
	     * message received by the native layer for appending. The returned message
	     * is expected to be equivalent to the one provided in the original call.
	     */
	    IBeacon.appendToDeviceLog = function (message) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], IBeacon, "getDelegate", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], IBeacon, "setDelegate", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "onDomDelegateReady", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "isBluetoothEnabled", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "enableBluetooth", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "disableBluetooth", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "startMonitoringForRegion", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "stopMonitoringForRegion", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "requestStateForRegion", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "startRangingBeaconsInRegion", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "stopRangingBeaconsInRegion", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "getAuthorizationStatus", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "requestWhenInUseAuthorization", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "requestAlwaysAuthorization", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "getMonitoredRegions", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "getRangedRegions", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "isRangingAvailable", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "isMonitoringAvailableForClass", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "startAdvertising", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "stopAdvertising", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "isAdvertisingAvailable", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "isAdvertising", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "disableDebugLogs", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "enableDebugNotifications", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "disableDebugNotifications", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "enableDebugLogs", null);
	    __decorate([
	        plugin_1.Cordova({ otherPromise: true })
	    ], IBeacon, "appendToDeviceLog", null);
	    IBeacon = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'IBeacon',
	            plugin: 'cordova-plugin-ibeacon',
	            pluginRef: 'cordova.plugins.locationManager',
	            repo: 'https://github.com/petermetz/cordova-plugin-ibeacon',
	            platforms: ['Android', 'iOS']
	        })
	    ], IBeacon);
	    return IBeacon;
	}());
	exports.IBeacon = IBeacon;
	//# sourceMappingURL=ibeacon.js.map

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Image Picker
	 * @description
	 * Cordova Plugin For Multiple Image Selection
	 *
	 * Requires Cordova plugin: `cordova-plugin-image-picker`.
	 * For more info, please see the https://github.com/wymsee/cordova-imagePicker
	 *
	 * @usage
	 * ```typescript
	 * import { ImagePicker } from 'ionic-native';
	 *
	 *
	 *
	 * ImagePicker.getPictures(options).then((results) => {
	 *   for (var i = 0; i < results.length; i++) {
	 *       console.log('Image URI: ' + results[i]);
	 *   }
	 * }, (err) => { });
	 * ```
	 * @interfaces
	 * ImagePickerOptions
	 */
	var ImagePicker = (function () {
	    function ImagePicker() {
	    }
	    /**
	     * Pick pictures from the library.
	     * @param {ImagePickerOptions} options
	     * @returns {Promise<any>} Returns a Promise that resolves the image file URI
	     * otherwise rejects with an error.
	     */
	    ImagePicker.getPictures = function (options) { return; };
	    /**
	     * Check if we have permission to read images
	     * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that indicates whether we have permission
	     */
	    ImagePicker.hasReadPermission = function () { return; };
	    /**
	     * Request permission to read images
	     * @returns {Promise<any>}
	     */
	    ImagePicker.requestReadPermission = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], ImagePicker, "getPictures", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], ImagePicker, "hasReadPermission", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], ImagePicker, "requestReadPermission", null);
	    ImagePicker = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'ImagePicker',
	            plugin: 'https://github.com/Telerik-Verified-Plugins/ImagePicker',
	            pluginRef: 'window.imagePicker',
	            repo: 'https://github.com/Telerik-Verified-Plugins/ImagePicker'
	        })
	    ], ImagePicker);
	    return ImagePicker;
	}());
	exports.ImagePicker = ImagePicker;
	//# sourceMappingURL=imagepicker.js.map

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name ImageResizer
	 * @description
	 * Cordova Plugin For Image Resize
	 *
	 * Requires plugin `info.protonet.imageresizer` - use the Ionic CLI and type in the following command:
	 * `ionic plugin add https://github.com/protonet/cordova-plugin-image-resizer.git`
	 *
	 * For more info, please see the https://github.com/protonet/cordova-plugin-image-resizer
	 *
	 * @usage
	 * ```typescript
	 * import { ImageResizer, ImageResizerOptions } from 'ionic-native';
	 *
	 * let options = {
	 *  uri: uri,
	 *  folderName: 'Protonet',
	 *  quality: 90,
	 *  width: 1280,
	 *  height: 1280
	 * } as ImageResizerOptions;
	 *
	 * ImageResizer
	 * .resize(options)
	 * .then(
	 *  (filePath: string) => { console.log('FilePath', filePath); },
	 *  () => { console.log('Error occured'); }
	 * )
	 * ```
	 * @interfaces
	 * ImageResizerOptions
	 */
	var ImageResizer = (function () {
	    function ImageResizer() {
	    }
	    /**
	     * @returns {Promise<any>}
	     */
	    ImageResizer.resize = function (options) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], ImageResizer, "resize", null);
	    ImageResizer = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'ImageResizer',
	            plugin: 'https://github.com/protonet/cordova-plugin-image-resizer.git',
	            pluginRef: 'ImageResizer',
	            repo: 'https://github.com/protonet/cordova-plugin-image-resizer'
	        })
	    ], ImageResizer);
	    return ImageResizer;
	}());
	exports.ImageResizer = ImageResizer;
	//# sourceMappingURL=imageresizer.js.map

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	var Observable_1 = __webpack_require__(11);
	/**
	 * @name InAppBrowser
	 * @description Launches in app Browser
	 * @usage
	 * ```typescript
	 * import {InAppBrowser} from 'ionic-native';
	 *
	 *
	 * ...
	 *
	 *
	 * let browser = new InAppBrowser('https://ionic.io', '_system');
	 * browser.executeScript(...);
	 * browser.insertCSS(...);
	 * browser.close();
	 * ```
	 * @interfaces
	 * InAppBrowserEvent
	 * InAppBrowserOptions
	 */
	var InAppBrowser = (function () {
	    function InAppBrowser(url, target, options) {
	        try {
	            if (options && typeof options !== 'string')
	                options = Object.keys(options).map(function (key) { return (key + "=" + options[key]); }).join(',');
	            this._objectInstance = cordova.InAppBrowser.open(url, target, options);
	        }
	        catch (e) {
	            window.open(url);
	            console.warn('Native: InAppBrowser is not installed or you are running on a browser. Falling back to window.open, all instance methods will NOT work.');
	        }
	    }
	    /**
	     * Displays an InAppBrowser window that was opened hidden. Calling this has no effect
	     * if the InAppBrowser was already visible.
	     */
	    InAppBrowser.prototype.show = function () { };
	    /**
	     * Closes the InAppBrowser window.
	     */
	    InAppBrowser.prototype.close = function () { };
	    /**
	     * Hides an InAppBrowser window that is currently shown. Calling this has no effect
	     * if the InAppBrowser was already hidden.
	     */
	    InAppBrowser.prototype.hide = function () { };
	    /**
	     * Injects JavaScript code into the InAppBrowser window.
	     * @param script {Object} Details of the script to run, specifying either a file or code key.
	     * @returns {Promise<any>}
	     */
	    InAppBrowser.prototype.executeScript = function (script) { return; };
	    /**
	     * Injects CSS into the InAppBrowser window.
	     * @param css {Object} Details of the script to run, specifying either a file or code key.
	     * @returns {Promise<any>}
	     */
	    InAppBrowser.prototype.insertCSS = function (css) { return; };
	    /**
	     * A method that allows you to listen to events happening in the browser.
	     * @param {string} name of the event
	     * @returns {Observable<InAppBrowserEvent>} Returns back an observable that will listen to the event on subscribe, and will stop listening to the event on unsubscribe.
	     */
	    InAppBrowser.prototype.on = function (event) {
	        var _this = this;
	        return new Observable_1.Observable(function (observer) {
	            _this._objectInstance.addEventListener(event, observer.next.bind(observer));
	            return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };
	        });
	    };
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], InAppBrowser.prototype, "show", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], InAppBrowser.prototype, "close", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], InAppBrowser.prototype, "hide", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], InAppBrowser.prototype, "executeScript", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], InAppBrowser.prototype, "insertCSS", null);
	    InAppBrowser = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'InAppBrowser',
	            plugin: 'cordova-plugin-inappbrowser',
	            pluginRef: 'cordova.InAppBrowser',
	            repo: 'https://github.com/apache/cordova-plugin-inappbrowser'
	        })
	    ], InAppBrowser);
	    return InAppBrowser;
	}());
	exports.InAppBrowser = InAppBrowser;
	//# sourceMappingURL=inappbrowser.js.map

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name InAppPurchase
	 * @description
	 * A lightweight Cordova plugin for in app purchases on iOS/Android.
	 *
	 * @usage
	 * ```ts
	 * import {InAppPurchase} from 'ionic-native';
	 *
	 * InAppPurchase
	 *  .getProducts(['com.yourapp.prod1', 'com.yourapp.prod2', ...])
	 *  .then((products) => {
	 *    console.log(products);
	 *     //  [{ productId: 'com.yourapp.prod1', 'title': '...', description: '...', price: '...' }, ...]
	 *  })
	 *  .catch((err) => {
	 *    console.log(err);
	 *  });
	 *
	 *
	 * InAppPurchase
	 *   .buy('com.yourapp.prod1')
	 *   .then((data)=> {
	 *     console.log(data);
	 *     // {
	 *     //   transactionId: ...
	 *     //   receipt: ...
	 *     //   signature: ...
	 *     // }
	 *   })
	 *   .catch((err)=> {
	 *     console.log(err);
	 *   });
	 *
	 * ```
	 *
	 * @advanced
	 *
	 * ```ts
	 * // fist buy the product...
	 * InAppPurchase
	 *   .buy('com.yourapp.consumable_prod1')
	 *   .then(data => InAppPurchase.consume(data.productType, data.receipt, data.signature))
	 *   .then(() => console.log('product was successfully consumed!'))
	 *   .catch( err=> console.log(err))
	 * ```
	 *
	 *
	 */
	var InAppPurchase = (function () {
	    function InAppPurchase() {
	    }
	    /**
	     * Retrieves a list of full product data from Apple/Google. This method must be called before making purchases.
	     * @param {array<string>} productId an array of product ids.
	     * @returns {Promise<any>} Returns a Promise that resolves with an array of objects.
	     */
	    InAppPurchase.getProducts = function (productId) { return; };
	    /**
	     * Buy a product that matches the productId.
	     * @param {string} productId A string that matches the product you want to buy.
	     * @returns {Promise<{transactionId: string, receipt: string, signature: string, productType: string}>} Returns a Promise that resolves with the transaction details.
	     */
	    InAppPurchase.buy = function (productId) { return; };
	    /**
	     * Same as buy, but for subscription based products.
	     * @param {string} productId A string that matches the product you want to subscribe to.
	     * @returns {Promise<{transactionId: string, receipt: string, signature: string, productType: string}>} Returns a Promise that resolves with the transaction details.
	     */
	    InAppPurchase.subscribe = function (productId) { return; };
	    /**
	     * Call this function after purchasing a "consumable" product to mark it as consumed. On Android, you must consume products that you want to let the user purchase multiple times. If you will not consume the product after a purchase, the next time you will attempt to purchase it you will get the error message:
	     * @param {string} productType
	     * @param {string} receipt
	     * @param {string} signature
	     * @returns {Promise<any>}
	     */
	    InAppPurchase.consume = function (productType, receipt, signature) { return; };
	    /**
	     * Restore all purchases from the store
	     * @returns {Promise<any>} Returns a promise with an array of purchases.
	     */
	    InAppPurchase.restorePurchases = function () { return; };
	    /**
	     * Get the receipt.
	     * @returns {Promise<string>} Returns a promise that contains the string for the receipt
	     */
	    InAppPurchase.getReceipt = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            otherPromise: true
	        })
	    ], InAppPurchase, "getProducts", null);
	    __decorate([
	        plugin_1.Cordova({
	            otherPromise: true
	        })
	    ], InAppPurchase, "buy", null);
	    __decorate([
	        plugin_1.Cordova({
	            otherPromise: true
	        })
	    ], InAppPurchase, "subscribe", null);
	    __decorate([
	        plugin_1.Cordova({
	            otherPromise: true
	        })
	    ], InAppPurchase, "consume", null);
	    __decorate([
	        plugin_1.Cordova({
	            otherPromise: true
	        })
	    ], InAppPurchase, "restorePurchases", null);
	    __decorate([
	        plugin_1.Cordova({
	            otherPromise: true,
	            platforms: ['iOS']
	        })
	    ], InAppPurchase, "getReceipt", null);
	    InAppPurchase = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'InAppPurchase',
	            plugin: 'cordova-plugin-inapppurchase',
	            pluginRef: 'inAppPurchase',
	            platforms: ['Android', 'iOS'],
	            repo: 'https://github.com/AlexDisler/cordova-plugin-inapppurchase'
	        })
	    ], InAppPurchase);
	    return InAppPurchase;
	}());
	exports.InAppPurchase = InAppPurchase;
	//# sourceMappingURL=inapppurchase.js.map

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Insomnia
	 * @description
	 * Prevent the screen of the mobile device from falling asleep.
	 *
	 * @usage
	 * ```typescript
	 * import { Insomnia } from 'ionic-native';
	 *
	 *
	 * Insomnia.keepAwake()
	 *   .then(
	 *     () => console.log('success'),
	 *     () => console.log('error')
	 *   );
	 *
	 * Insomnia.allowSleepAgain()
	 *   .then(
	 *     () => console.log('success'),
	 *     () => console.log('error')
	 *   );
	 * ```
	 *
	 */
	var Insomnia = (function () {
	    function Insomnia() {
	    }
	    /**
	     * Keeps awake the application
	     * @returns {Promise<any>}
	     */
	    Insomnia.keepAwake = function () { return; };
	    /**
	     * Allows the application to sleep again
	     * @returns {Promise<any>}
	     */
	    Insomnia.allowSleepAgain = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Insomnia, "keepAwake", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Insomnia, "allowSleepAgain", null);
	    Insomnia = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Insomnia',
	            plugin: 'https://github.com/EddyVerbruggen/Insomnia-PhoneGap-Plugin.git',
	            pluginRef: 'plugins.insomnia',
	            repo: 'https://github.com/EddyVerbruggen/Insomnia-PhoneGap-Plugin',
	            platforms: ['Android', 'iOS', 'Windows Phone 8']
	        })
	    ], Insomnia);
	    return Insomnia;
	}());
	exports.Insomnia = Insomnia;
	//# sourceMappingURL=insomnia.js.map

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Instagram
	 * @description Share a photo with the instagram app
	 *
	 * @usage
	 * ```
	 * import {Instagram} from 'ionic-native';
	 *
	 * Instagram.share('data:image/png;uhduhf3hfif33', 'Caption')
	 *   .then(() => console.log('Shared!'))
	 *   .catch((error: any) => console.error(error));
	 *
	 * ```
	 */
	var Instagram = (function () {
	    function Instagram() {
	    }
	    /**
	     * Detect if the Instagram application is installed on the device.
	     *
	     * @returns {Promise<boolean|string>} Returns a promise that returns a boolean value if installed, or the app version on android
	     */
	    Instagram.isInstalled = function () { return; };
	    /**
	     * Share an image on Instagram
	     * Note: Instagram app stopped accepting pre-filled captions on both iOS and Android. As a work-around, the caption is copied to the clipboard. You have to inform your users to paste the caption.
	     *
	     * @param canvasIdOrDataUrl The canvas element id or the dataURL of the image to share
	     * @param caption The caption of the image
	     * @returns {Promise<any>} Returns a promise that resolves if the image was shared
	     */
	    Instagram.share = function (canvasIdOrDataUrl, caption) { return; };
	    /**
	     * Share a library asset or video
	     * @param assetLocalIdentifier A local fileURI
	     * @returns {Promise<any>} Returns a promise that resolves if the image was shared
	     */
	    Instagram.shareAsset = function (assetLocalIdentifier) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            callbackStyle: 'node'
	        })
	    ], Instagram, "isInstalled", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackStyle: 'node'
	        })
	    ], Instagram, "share", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Instagram, "shareAsset", null);
	    Instagram = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Instagram',
	            plugin: 'cordova-instagram-plugin',
	            pluginRef: 'Instagram',
	            repo: 'https://github.com/vstirbu/InstagramPlugin'
	        })
	    ], Instagram);
	    return Instagram;
	}());
	exports.Instagram = Instagram;
	//# sourceMappingURL=instagram.js.map

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name IsDebug
	 * @description
	 * Detect if the app is running in debug mode or not.
	 * Debug mode is when the app is built and installed locally via xcode / eclipse / the cordova cli etc, compared to release mode when the app was downloaded from the app / play store via an end user.
	 *
	 * @usage
	 * ```
	 * import {IsDebug} from 'ionic-native';
	 *
	 * IsDebug.getIsDebug()
	 *   .then((isDebug: boolean) => console.log('Is debug:', isDebug))
	 *   .catch((error: any) => console.error(error));
	 *
	 * ```
	 */
	var IsDebug = (function () {
	    function IsDebug() {
	    }
	    /**
	     * Determine if an app was installed via xcode / eclipse / the ionic CLI etc
	     * @returns {Promise<boolean>} Returns a promise that resolves with true if the app was installed via xcode / eclipse / the ionic CLI etc. It will resolve to false if the app was downloaded from the app / play store by the end user.
	     */
	    IsDebug.getIsDebug = function () {
	        return;
	    };
	    __decorate([
	        plugin_1.Cordova()
	    ], IsDebug, "getIsDebug", null);
	    IsDebug = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'IsDebug',
	            plugin: 'cordova-plugin-is-debug',
	            pluginRef: 'cordova.plugins.IsDebug',
	            repo: 'https://github.com/mattlewis92/cordova-plugin-is-debug'
	        })
	    ], IsDebug);
	    return IsDebug;
	}());
	exports.IsDebug = IsDebug;
	//# sourceMappingURL=is-debug.js.map

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Keyboard
	 * @description
	 * @usage
	 * ```typescript
	 * import { Keyboard } from 'ionic-native';
	 *
	 *
	 *
	 * ```
	 */
	var Keyboard = (function () {
	    function Keyboard() {
	    }
	    /**
	     * Hide the keyboard accessory bar with the next, previous and done buttons.
	     * @param hide {boolean}
	     */
	    Keyboard.hideKeyboardAccessoryBar = function (hide) { };
	    /**
	     * Force keyboard to be shown.
	     */
	    Keyboard.show = function () { };
	    /**
	     * Close the keyboard if open.
	     */
	    Keyboard.close = function () { };
	    /**
	     * Prevents the native UIScrollView from moving when an input is focused.
	     * @param disable
	     */
	    Keyboard.disableScroll = function (disable) { };
	    /**
	     * Creates an observable that notifies you when the keyboard is shown. Unsubscribe to observable to cancel event watch.
	     * @returns {Observable<any>}
	     */
	    Keyboard.onKeyboardShow = function () { return; };
	    /**
	     * Creates an observable that notifies you when the keyboard is hidden. Unsubscribe to observable to cancel event watch.
	     * @returns {Observable<any>}
	     */
	    Keyboard.onKeyboardHide = function () { return; };
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], Keyboard, "hideKeyboardAccessoryBar", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true,
	            platforms: ['Android', 'BlackBerry 10', 'Windows']
	        })
	    ], Keyboard, "show", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true,
	            platforms: ['iOS', 'Android', 'BlackBerry 10', 'Windows']
	        })
	    ], Keyboard, "close", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true,
	            platforms: ['iOS', 'Windows']
	        })
	    ], Keyboard, "disableScroll", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'native.keyboardshow',
	            platforms: ['iOS', 'Android', 'BlackBerry 10', 'Windows']
	        })
	    ], Keyboard, "onKeyboardShow", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'native.keyboardhide',
	            platforms: ['iOS', 'Android', 'BlackBerry 10', 'Windows']
	        })
	    ], Keyboard, "onKeyboardHide", null);
	    Keyboard = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Keyboard',
	            plugin: 'ionic-plugin-keyboard',
	            pluginRef: 'cordova.plugins.Keyboard',
	            repo: 'https://github.com/driftyco/ionic-plugin-keyboard'
	        })
	    ], Keyboard);
	    return Keyboard;
	}());
	exports.Keyboard = Keyboard;
	//# sourceMappingURL=keyboard.js.map

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Launch Navigator
	 * @description
	 * Requires Cordova plugin: uk.co.workingedge.phonegap.plugin.launchnavigator. For more info, please see the [LaunchNavigator plugin docs](https://github.com/dpa99c/phonegap-launch-navigator).
	 *
	 * @usage
	 * Please refer to the plugin's repo for detailed usage. This docs page only explains the Native wrapper.
	 *
	 * ```typescript
	 * import { LaunchNavigator, LaunchNavigatorOptions } from 'ionic-native';
	 *
	 * let options: LaunchNavigatorOptions = {
	 *   start: 'London, ON',
	 *   app: LaunchNavigator.APPS.UBER
	 * };
	 *
	 * LaunchNavigator.navigate('Toronto, ON', options)
	 *   .then(
	 *     success => console.log('Launched navigator'),
	 *     error => console.log('Error launching navigator', error)
	 *   );
	 * ```
	 * @interfaces
	 * LaunchNavigatorOptions
	 */
	var LaunchNavigator = (function () {
	    function LaunchNavigator() {
	    }
	    /**
	     * Launches navigator app
	     * @param destination {string|number[]} Location name or coordinates (as string or array)
	     * @param options {LaunchNavigatorOptions}
	     * @returns {Promise<any>}
	     */
	    LaunchNavigator.navigate = function (destination, options) { return; };
	    /**
	     * Determines if the given app is installed and available on the current device.
	     * @param app {string}
	     * @returns {Promise<any>}
	     */
	    LaunchNavigator.isAppAvailable = function (app) { return; };
	    /**
	     * Returns a list indicating which apps are installed and available on the current device.
	     * @returns {Promise<string[]>}
	     */
	    LaunchNavigator.availableApps = function () { return; };
	    /**
	     * Returns the display name of the specified app.
	     * @param app {string}
	     * @returns {string}
	     */
	    LaunchNavigator.getAppDisplayName = function (app) { return; };
	    /**
	     * Returns list of supported apps on a given platform.
	     * @param platform {string}
	     * @returns {string[]}
	     */
	    LaunchNavigator.getAppsForPlatform = function (platform) { return; };
	    /**
	     * Indicates if an app on a given platform supports specification of transport mode.
	     * @param app {string} specified as a string, you can use one of the constants, e.g `LaunchNavigator.APP.GOOGLE_MAPS`
	     * @param platform {string}
	     * @returns {boolean}
	     */
	    LaunchNavigator.supportsTransportMode = function (app, platform) { return; };
	    /**
	     * Returns the list of transport modes supported by an app on a given platform.
	     * @param app {string}
	     * @param platform {string}
	     * @returns {string[]}
	     */
	    LaunchNavigator.getTransportModes = function (app, platform) { return; };
	    /**
	     * Indicates if an app on a given platform supports specification of launch mode.
	     * Note that currently only Google Maps on Android does.
	     * @param app {string}
	     * @param platform {string}
	     * @returns {boolean}
	     */
	    LaunchNavigator.supportsLaunchMode = function (app, platform) { return; };
	    /**
	     * Indicates if an app on a given platform supports specification of start location.
	     * @param app {string}
	     * @param platform {string}
	     * @returns {boolean}
	     */
	    LaunchNavigator.supportsStart = function (app, platform) { return; };
	    /**
	     * @param app {string}
	     * @param platform {string}
	     * @returns {boolean}
	     */
	    LaunchNavigator.supportsStartName = function (app, platform) { return; };
	    /**
	     * @param app {string}
	     * @param platform {string}
	     * @returns {boolean}
	     */
	    LaunchNavigator.supportsDestName = function (app, platform) { return; };
	    /**
	     * @param destination {string | number[]}
	     * @param options {LaunchNavigatorOptions}
	     */
	    LaunchNavigator.userSelect = function (destination, options) { };
	    LaunchNavigator.APP = {
	        USER_SELECT: 'user_select',
	        APPLE_MAPS: 'apple_maps',
	        GOOGLE_MAPS: 'google_maps',
	        WAZE: 'waze',
	        CITYMAPPER: 'citymapper',
	        NAVIGON: 'navigon',
	        TRANSIT_APP: 'transit_app',
	        YANDEX: 'yandex',
	        UBER: 'uber',
	        TOMTOM: 'tomtom',
	        BING_MAPS: 'bing_maps',
	        SYGIC: 'sygic',
	        HERE_MAPS: 'here_maps',
	        MOOVIT: 'moovit'
	    };
	    LaunchNavigator.TRANSPORT_MODE = {
	        DRIVING: 'driving',
	        WALKING: 'walking',
	        BICYCLING: 'bicycling',
	        TRANSIT: 'transit'
	    };
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], LaunchNavigator, "navigate", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LaunchNavigator, "isAppAvailable", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LaunchNavigator, "availableApps", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], LaunchNavigator, "getAppDisplayName", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], LaunchNavigator, "getAppsForPlatform", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], LaunchNavigator, "supportsTransportMode", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], LaunchNavigator, "getTransportModes", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], LaunchNavigator, "supportsLaunchMode", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], LaunchNavigator, "supportsStart", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], LaunchNavigator, "supportsStartName", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], LaunchNavigator, "supportsDestName", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], LaunchNavigator, "userSelect", null);
	    LaunchNavigator = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'LaunchNavigator',
	            plugin: 'uk.co.workingedge.phonegap.plugin.launchnavigator',
	            pluginRef: 'launchnavigator',
	            repo: 'https://github.com/dpa99c/phonegap-launch-navigator.git'
	        })
	    ], LaunchNavigator);
	    return LaunchNavigator;
	}());
	exports.LaunchNavigator = LaunchNavigator;
	//# sourceMappingURL=launchnavigator.js.map

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name LaunchReview
	 * @description
	 *
	 * This launches the native store app in order for the user to leave a review.
	 * On Android, the plugin opens the the app's storepage in the Play Store where the user can leave a review by pressing the stars to give a rating.
	 * On iOS, the plugin opens the app's storepage in the App Store and focuses the Review tab, where the user can leave a review by pressing "Write a review".
	 *
	 * @usage
	 * ```
	 * import { LaunchReview } from 'ionic-native';
	 *
	 * const appId: string = 'yourAppId';
	 * LaunchReview.launch(appId)
	 *   .then(() => console.log('Successfully launched store app');
	 * ```
	 */
	var LaunchReview = (function () {
	    function LaunchReview() {
	    }
	    /**
	     * Launch store app using given app ID
	     * @returns {Promise<void>}
	     */
	    LaunchReview.launch = function (appId) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], LaunchReview, "launch", null);
	    LaunchReview = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'LaunchReview',
	            plugin: 'cordova-launch-review',
	            pluginRef: 'LaunchReview',
	            repo: 'https://github.com/dpa99c/cordova-launch-review',
	            platforms: ['Android', 'iOS']
	        })
	    ], LaunchReview);
	    return LaunchReview;
	}());
	exports.LaunchReview = LaunchReview;
	//# sourceMappingURL=launch-review.js.map

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Local Notifications
	 * @description
	 * This plugin allows you to display local notifications on the device
	 *
	 * @usage
	 * ```typescript
	 * import { LocalNotifications } from 'ionic-native';
	 *
	 *
	 * // Schedule a single notification
	 * LocalNotifications.schedule({
	 *   id: 1,
	 *   text: 'Single ILocalNotification',
	 *   sound: isAndroid? 'file://sound.mp3': 'file://beep.caf',
	 *   data: { secret: key }
	 * });
	 *
	 *
	 * // Schedule multiple notifications
	 * LocalNotifications.schedule([{
	 *    id: 1,
	 *    text: 'Multi ILocalNotification 1',
	 *    sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',
	 *    data: { secret:key }
	 *   },{
	 *    id: 2,
	 *    title: 'Local ILocalNotification Example',
	 *    text: 'Multi ILocalNotification 2',
	 *    icon: 'http://example.com/icon.png'
	 * }]);
	 *
	 *
	 * // Schedule delayed notification
	 * LocalNotifications.schedule({
	 *    text: 'Delayed ILocalNotification',
	 *    at: new Date(new Date().getTime() + 3600),
	 *    led: 'FF0000',
	 *    sound: null
	 * });
	 * ```
	 * @interfaces
	 * ILocalNotification
	 */
	var LocalNotifications = (function () {
	    function LocalNotifications() {
	    }
	    /**
	     * Schedules a single or multiple notifications
	     * @param options {Notification | Array<ILocalNotification>} optional
	     */
	    LocalNotifications.schedule = function (options) { };
	    /**
	     * Updates a previously scheduled notification. Must include the id in the options parameter.
	     * @param options {ILocalNotification} optional
	     */
	    LocalNotifications.update = function (options) { };
	    /**
	     * Clears single or multiple notifications
	     * @param notificationId {any} A single notification id, or an array of notification ids.
	     * @returns {Promise<any>} Returns a promise when the notification had been cleared
	     */
	    LocalNotifications.clear = function (notificationId) { return; };
	    /**
	     * Clears all notifications
	     * @returns {Promise<any>} Returns a promise when all notifications have cleared
	     */
	    LocalNotifications.clearAll = function () { return; };
	    /**
	     * Cancels single or multiple notifications
	     * @param notificationId {any} A single notification id, or an array of notification ids.
	     * @returns {Promise<any>} Returns a promise when the notification is canceled
	     */
	    LocalNotifications.cancel = function (notificationId) { return; };
	    /**
	     * Cancels all notifications
	     * @returns {Promise<any>} Returns a promise when all notifications are canceled
	     */
	    LocalNotifications.cancelAll = function () { return; };
	    /**
	     * Checks presence of a notification
	     * @param notificationId {number}
	     * @returns {Promise<boolean>}
	     */
	    LocalNotifications.isPresent = function (notificationId) { return; };
	    /**
	     * Checks is a notification is scheduled
	     * @param notificationId {number}
	     * @returns {Promise<boolean>}
	     */
	    LocalNotifications.isScheduled = function (notificationId) { return; };
	    /**
	     * Checks if a notification is triggered
	     * @param notificationId {number}
	     * @returns {Promise<boolean>}
	     */
	    LocalNotifications.isTriggered = function (notificationId) { return; };
	    /**
	     * Get all the notification ids
	     * @returns {Promise<Array<number>>}
	     */
	    LocalNotifications.getAllIds = function () { return; };
	    /**
	     * Get the ids of triggered notifications
	     * @returns {Promise<Array<number>>}
	     */
	    LocalNotifications.getTriggeredIds = function () { return; };
	    /**
	     * Get the ids of scheduled notifications
	     * @returns {Promise<Array<number>>} Returns a promise
	     */
	    LocalNotifications.getScheduledIds = function () { return; };
	    /**
	     * Get a notification object
	     * @param notificationId {any} The id of the notification to get
	     * @returns {Promise<ILocalNotification>}
	     */
	    LocalNotifications.get = function (notificationId) { return; };
	    /**
	     * Get a scheduled notification object
	     * @param notificationId {any} The id of the notification to get
	     * @returns {Promise<ILocalNotification>}
	     */
	    LocalNotifications.getScheduled = function (notificationId) { return; };
	    /**
	     * Get a triggered notification object
	     * @param notificationId The id of the notification to get
	     * @returns {Promise<ILocalNotification>}
	     */
	    LocalNotifications.getTriggered = function (notificationId) { return; };
	    /**
	     * Get all notification objects
	     * @returns {Promise<Array<ILocalNotification>>}
	     */
	    LocalNotifications.getAll = function () { return; };
	    /**
	     * Get all scheduled notification objects
	     * @returns {Promise<Array<ILocalNotification>>}
	     */
	    LocalNotifications.getAllScheduled = function () { return; };
	    /**
	     * Get all triggered notification objects
	     * @returns {Promise<Array<ILocalNotification>>}
	     */
	    LocalNotifications.getAllTriggered = function () { return; };
	    /**
	     * Register permission to show notifications if not already granted.
	     * @returns {Promise<boolean>}
	     */
	    LocalNotifications.registerPermission = function () { return; };
	    /**
	     * Informs if the app has the permission to show notifications.
	     * @returns {Promise<boolean>}
	     */
	    LocalNotifications.hasPermission = function () { return; };
	    /**
	     * Sets a callback for a specific event
	     * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall
	     * @param callback Call back function. All events return notification and state parameter. clear and clearall return state parameter only.
	     */
	    LocalNotifications.on = function (eventName, callback) { };
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], LocalNotifications, "schedule", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], LocalNotifications, "update", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "clear", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 0,
	            errorIndex: 2
	        })
	    ], LocalNotifications, "clearAll", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "cancel", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 0,
	            errorIndex: 2
	        })
	    ], LocalNotifications, "cancelAll", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "isPresent", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "isScheduled", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "isTriggered", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "getAllIds", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "getTriggeredIds", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "getScheduledIds", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "get", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "getScheduled", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "getTriggered", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "getAll", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "getAllScheduled", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "getAllTriggered", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "registerPermission", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocalNotifications, "hasPermission", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], LocalNotifications, "on", null);
	    LocalNotifications = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'LocalNotifications',
	            plugin: 'de.appplant.cordova.plugin.local-notification',
	            pluginRef: 'cordova.plugins.notification.local',
	            repo: 'https://github.com/katzer/cordova-plugin-local-notifications'
	        })
	    ], LocalNotifications);
	    return LocalNotifications;
	}());
	exports.LocalNotifications = LocalNotifications;
	//# sourceMappingURL=localnotifications.js.map

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name LocationAccuracy
	 * @description
	 * This Cordova/Phonegap plugin for Android and iOS to request enabling/changing of Location Services by triggering a native dialog from within the app, avoiding the need for the user to leave your app to change location settings manually.
	 *
	 * @usage
	 * ```
	 * import { LocationAccuracy } from 'ionic-native';
	 *
	 * LocationAccuracy.canRequest().then((canRequest: boolean) => {
	 *
	 *   if(canRequest) {
	 *     // the accuracy option will be ignored by iOS
	 *     LocationAccuracy.request(LocationAccuracy.REQUEST_PRIORITY_HIGH_ACCURACY).then(
	 *       () => console.log('Request successful'),
	 *       error => console.log('Error requesting location permissions', error)
	 *     );
	 *   }
	 *
	 * });
	 *
	 * ```
	 */
	var LocationAccuracy = (function () {
	    function LocationAccuracy() {
	    }
	    /**
	     * Indicates if you can request accurate location
	     * @returns {Promise<boolean>} Returns a promise that resovles with a boolean that indicates if you can request accurate location
	     */
	    LocationAccuracy.canRequest = function () { return; };
	    /**
	     * Indicates if a request is currently in progress
	     * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that indicates if a request is currently in progress
	     */
	    LocationAccuracy.isRequesting = function () { return; };
	    /**
	     * Requests accurate location
	     * @param accuracy {number} Accuracy, from 0 to 4. You can use the static properties of this class that start with REQUEST_PRIORITY_
	     * @returns {Promise<any>} Returns a promise that resolves on success and rejects if an error occurred
	     */
	    LocationAccuracy.request = function (accuracy) { return; };
	    LocationAccuracy.REQUEST_PRIORITY_NO_POWER = 0;
	    LocationAccuracy.REQUEST_PRIORITY_LOW_POWER = 1;
	    LocationAccuracy.REQUEST_PRIORITY_BALANCED_POWER_ACCURACY = 2;
	    LocationAccuracy.REQUEST_PRIORITY_HIGH_ACCURACY = 3;
	    LocationAccuracy.SUCCESS_SETTINGS_SATISFIED = 0;
	    LocationAccuracy.SUCCESS_USER_AGREED = 1;
	    LocationAccuracy.ERROR_ALREADY_REQUESTING = -1;
	    LocationAccuracy.ERROR_INVALID_ACTION = 0;
	    LocationAccuracy.ERROR_INVALID_ACCURACY = 1;
	    LocationAccuracy.ERROR_EXCEPTION = 1;
	    LocationAccuracy.ERROR_CANNOT_CHANGE_ACCURACY = 3;
	    LocationAccuracy.ERROR_USER_DISAGREED = 4;
	    LocationAccuracy.ERROR_GOOGLE_API_CONNECTION_FAILED = 4;
	    __decorate([
	        plugin_1.Cordova()
	    ], LocationAccuracy, "canRequest", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], LocationAccuracy, "isRequesting", null);
	    __decorate([
	        plugin_1.Cordova({ callbackOrder: 'reverse' })
	    ], LocationAccuracy, "request", null);
	    LocationAccuracy = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'LocationAccuracy',
	            plugin: 'cordova-plugin-request-location-accuracy',
	            pluginRef: 'cordova.plugins.locationAccuracy',
	            repo: 'https://github.com/dpa99c/cordova-plugin-request-location-accuracy'
	        })
	    ], LocationAccuracy);
	    return LocationAccuracy;
	}());
	exports.LocationAccuracy = LocationAccuracy;
	//# sourceMappingURL=location-accuracy.js.map

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Media Capture
	 * @description
	 * @usage
	 * ```typescript
	 * import { MediaCapture, MediaFile, CaptureError, CaptureImageOptions } from 'ionic-native';
	 *
	 *
	 * let options: CaptureImageOptions = { limit: 3 };
	 * MediaCapture.captureImage(options)
	 *   .then(
	 *     (data: MediaFile[]) => console.log(data),
	 *     (err: CaptureError) => console.error(err)
	 *   );
	 *
	 * ```
	 * @interfaces
	 * MediaFile
	 * MediaFileData
	 * CaptureError
	 * CaptureAudioOptions
	 * CaptureImageOptions
	 * CaptureVideoOptions
	 * ConfigurationData
	 */
	var MediaCapture = (function () {
	    function MediaCapture() {
	    }
	    /**
	     * Start the audio recorder application and return information about captured audio clip files.
	     * @param options
	     * @returns {Promise<MediaFile[]>}
	     */
	    MediaCapture.captureAudio = function (options) { return; };
	    /**
	     * Start the camera application and return information about captured image files.
	     * @param options
	     * @returns {Promise<MediaFile[]>}
	     */
	    MediaCapture.captureImage = function (options) { return; };
	    /**
	     * Start the video recorder application and return information about captured video clip files.
	     * @param options
	     * @returns {Promise<MediaFile[]>}
	     */
	    MediaCapture.captureVideo = function (options) { return; };
	    /**
	     * is fired if the capture call is successful
	     * @returns {Observable<MediaFile[]>}
	     */
	    MediaCapture.onPendingCaptureResult = function () { return; };
	    /**
	     * is fired if the capture call is unsuccessful
	     * @returns {Observable<CaptureError>}
	     */
	    MediaCapture.onPendingCaptureError = function () { return; };
	    __decorate([
	        plugin_1.CordovaProperty
	    ], MediaCapture, "supportedImageModes", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], MediaCapture, "supportedAudioModes", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], MediaCapture, "supportedVideoModes", void 0);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], MediaCapture, "captureAudio", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], MediaCapture, "captureImage", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], MediaCapture, "captureVideo", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'pendingcaptureresult'
	        })
	    ], MediaCapture, "onPendingCaptureResult", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'pendingcaptureerror'
	        })
	    ], MediaCapture, "onPendingCaptureError", null);
	    MediaCapture = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'MediaCapture',
	            plugin: 'cordova-plugin-media-capture',
	            pluginRef: 'navigator.device.capture',
	            repo: 'https://github.com/apache/cordova-plugin-media-capture'
	        })
	    ], MediaCapture);
	    return MediaCapture;
	}());
	exports.MediaCapture = MediaCapture;
	//# sourceMappingURL=media-capture.js.map

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name NativeAudio
	 * @description Native Audio Playback
	 * @usage
	 * ```typescript
	 * import {NativeAudio} from 'ionic-native';
	 *
	 * NativeAudio.preloadSimple('uniqueId1', 'path/to/file.mp3').then(onSuccess, onError);
	 * NativeAudio.preloadComplex('uniqueId2', 'path/to/file2.mp3', 1, 1, 0).then(onSuccess, onError);
	 *
	 * NativeAudio.play('uniqueId1').then(onSuccess, onError);
	 *
	 * // can optionally pass a callback to be called when the file is done playing
	 * NativeAudio.play('uniqueId1', () => console.log('uniqueId1 is done playing'));
	 *
	 * NativeAudio.loop('uniqueId2').then(onSuccess, onError);
	 *
	 * NativeAudio.setVolumeForComplexAsset('uniqueId2', 0.6).then(onSuccess,onError);
	 *
	 * NativeAudio.stop('uniqueId1').then(onSuccess,onError);
	 *
	 * NativeAudio.unload('uniqueId1').then(onSuccess,onError);
	 *
	 * ```
	 */
	var NativeAudio = (function () {
	    function NativeAudio() {
	    }
	    /**
	     * Loads an audio file into memory. Optimized for short clips / single shots (up to five seconds). Cannot be stopped / looped.
	     * @param id {string} unique ID for the audio file
	     * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.
	     * @returns {Promise<any>}
	     */
	    NativeAudio.preloadSimple = function (id, assetPath) { return; };
	    /**
	     * Loads an audio file into memory. Optimized for background music / ambient sound. Uses highlevel native APIs with a larger footprint. (iOS: AVAudioPlayer). Can be stopped / looped and used with multiple voices. Can be faded in and out using the delay parameter.
	     * @param id {string} unique ID for the audio file
	     * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.
	     * @param volume {number} the volume of the preloaded sound (0.1 to 1.0)
	     * @param voices {number} the number of multichannel voices available
	     * @param delay {number}
	     * @returns {Promise<any>}
	     */
	    NativeAudio.preloadComplex = function (id, assetPath, volume, voices, delay) { return; };
	    /**
	     * Plays an audio asset
	     * @param id {string} unique ID for the audio file
	     * @param completeCallback {Function} optional. Callback to be invoked when audio is done playing
	     * @returns {Promise<any>}
	     */
	    NativeAudio.play = function (id, completeCallback) { return; };
	    /**
	     * Stops playing an audio
	     * @param id {string} unique ID for the audio file
	     * @returns {Promise<any>}
	     */
	    NativeAudio.stop = function (id) { return; };
	    /**
	     * Loops an audio asset infinitely, this only works for complex assets
	     * @param id {string} unique ID for the audio file
	     * @return {Promise<any>}
	     */
	    NativeAudio.loop = function (id) { return; };
	    /**
	     * Unloads an audio file from memory
	     * @param id {string} unique ID for the audio file
	     * @returns {Promise<any>}
	     */
	    NativeAudio.unload = function (id) { return; };
	    /**
	     * Changes the volume for preloaded complex assets.
	     * @param id {string} unique ID for the audio file
	     * @param volume {number} the volume of the audio asset (0.1 to 1.0)
	     * @returns {Promise<any>}
	     */
	    NativeAudio.setVolumeForComplexAsset = function (id, volume) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], NativeAudio, "preloadSimple", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NativeAudio, "preloadComplex", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], NativeAudio, "play", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NativeAudio, "stop", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NativeAudio, "loop", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NativeAudio, "unload", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NativeAudio, "setVolumeForComplexAsset", null);
	    NativeAudio = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'NativeAudio',
	            plugin: 'cordova-plugin-nativeaudio',
	            pluginRef: 'plugins.NativeAudio',
	            repo: 'https://github.com/floatinghotpot/cordova-plugin-nativeaudio'
	        })
	    ], NativeAudio);
	    return NativeAudio;
	}());
	exports.NativeAudio = NativeAudio;
	//# sourceMappingURL=native-audio.js.map

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @beta
	 * @name NativeGeocoder
	 * @description
	 * Cordova plugin for native forward and reverse geocoding
	 *
	 * @usage
	 * ```typescript
	 * import { NativeGeocoder, NativeGeocoderReverseResult, NativeGeocoderForwardResult } from 'ionic-native';
	 *
	 * NativeGeocoder.reverseGeocode(52.5072095, 13.1452818)
	 *   .then((result: NativeGeocoderReverseResult) => console.log("The address is " + result.address + " in " + result.countryCode))
	 *   .catch((error: any) => console.log(error));
	 *
	 * NativeGeocoder.forwardGeocode("Berlin")
	 *   .then((coordinates: NativeGeocoderForwardResult) => console.log("The coordinates are latitude=" + coordinates.latitude + " and longitude=" + coordinates.longitude))
	 *   .catch((error: any) => console.log(error));
	 * ```
	 * @interfaces
	 * NativeGeocoderReverseResult
	 * NativeGeocoderForwardResult
	 */
	var NativeGeocoder = (function () {
	    function NativeGeocoder() {
	    }
	    /**
	     * Reverse geocode a given latitude and longitude to find location address
	     * @param latitude {number} The latitude
	     * @param longitude {number} The longitude
	     * @return {Promise<any>}
	     */
	    NativeGeocoder.reverseGeocode = function (latitude, longitude) { return; };
	    /**
	     * Forward geocode a given address to find coordinates
	     * @param addressString {string} The address to be geocoded
	     * @return {Promise<any>}
	     */
	    NativeGeocoder.forwardGeocode = function (addressString) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], NativeGeocoder, "reverseGeocode", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], NativeGeocoder, "forwardGeocode", null);
	    NativeGeocoder = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'NativeGeocoder',
	            plugin: 'cordova-plugin-nativegeocoder',
	            pluginRef: 'nativegeocoder',
	            repo: 'https://github.com/sebastianbaar/cordova-plugin-nativegeocoder',
	            platforms: ['iOS', 'Android']
	        })
	    ], NativeGeocoder);
	    return NativeGeocoder;
	}());
	exports.NativeGeocoder = NativeGeocoder;
	//# sourceMappingURL=native-geocoder.js.map

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name NativePageTransitions
	 * @description
	 * The Native Page Transitions plugin uses native hardware acceleration to animate your transitions between views. You have complete control over the type of transition, the duration, and direction.
	 *
	 * @usage
	 * ```
	 * import {NativePageTransitions, NativeTransitionOptions} from 'ionic-native';
	 *
	 * let options: NativeTransitionOptions = {
	 *    direction: 'up',
	 *    duration: 500,
	 *    slowdownfactor: 3,
	 *    slidePixels: 20,
	 *    iosdelay: 100,
	 *    androiddelay: 150,
	 *    winphonedelay: 250,
	 *    fixedPixelsTop: 0,
	 *    fixedPixelsBottom: 60
	 *  };
	 *
	 * NativePageTransitions.slide(options)
	 *   .then(onSuccess)
	 *   .catch(onError);
	 *
	 * ```
	 */
	var NativePageTransitions = (function () {
	    function NativePageTransitions() {
	    }
	    /**
	     * Perform a slide animation
	     * @param options {NativeTransitionOptions} Options for the transition
	     * @returns {Promise<any>}
	     */
	    NativePageTransitions.slide = function (options) { return; };
	    /**
	     * Perform a flip animation
	     * @param options {NativeTransitionOptions} Options for the transition
	     * @returns {Promise<any>}
	     */
	    NativePageTransitions.flip = function (options) { return; };
	    /**
	     * Perform a fade animation
	     * @param options {NativeTransitionOptions} Options for the transition
	     * @returns {Promise<any>}
	     */
	    NativePageTransitions.fade = function (options) { return; };
	    /**
	     * Perform a slide animation
	     * @param options {NativeTransitionOptions} Options for the transition
	     * @returns {Promise<any>}
	     */
	    NativePageTransitions.drawer = function (options) { return; };
	    /**
	     * Perform a slide animation
	     * @param options {NativeTransitionOptions} Options for the transition
	     * @returns {Promise<any>}
	     */
	    NativePageTransitions.curl = function (options) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], NativePageTransitions, "slide", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NativePageTransitions, "flip", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS', 'Android'] })
	    ], NativePageTransitions, "fade", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS', 'Android'] })
	    ], NativePageTransitions, "drawer", null);
	    __decorate([
	        plugin_1.Cordova({ platforms: ['iOS'] })
	    ], NativePageTransitions, "curl", null);
	    NativePageTransitions = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'NativePageTransitions',
	            plugin: 'com.telerik.plugins.nativepagetransitions',
	            pluginRef: 'plugins.nativepagetransitions',
	            repo: 'https://github.com/Telerik-Verified-Plugins/NativePageTransitions',
	            platforms: ['iOS', 'Android', 'Windows Phone']
	        })
	    ], NativePageTransitions);
	    return NativePageTransitions;
	}());
	exports.NativePageTransitions = NativePageTransitions;
	//# sourceMappingURL=native-page-transitions.js.map

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name NativeStorage
	 * @description Native storage of variables in Android and iOS
	 *
	 * @usage
	 * ```typescript
	 * import { NativeStorage } from 'ionic-native';
	 *
	 * NativeStorage.setItem('myitem', {property: 'value', anotherProperty: 'anotherValue'})
	 *   .then(
	 *     () => console.log('Stored item!'),
	 *     error => console.error('Error storing item', error)
	 *   );
	 *
	 * NativeStorage.getItem('myitem')
	 *   .then(
	 *     data => console.log(data),
	 *     error => console.error(error)
	 *   );
	 * ```
	 */
	var NativeStorage = (function () {
	    function NativeStorage() {
	    }
	    /**
	     * Stores a value
	     * @param reference {string}
	     * @param value
	     * @returns {Promise<any>}
	     */
	    NativeStorage.setItem = function (reference, value) { return; };
	    /**
	     * Gets a stored item
	     * @param reference {string}
	     * @returns {Promise<any>}
	     */
	    NativeStorage.getItem = function (reference) { return; };
	    /**
	     * Removes a single stored item
	     * @param reference {string}
	     * @returns {Promise<any>}
	     */
	    NativeStorage.remove = function (reference) { return; };
	    /**
	     * Removes all stored values.
	     * @returns {Promise<any>}
	     */
	    NativeStorage.clear = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], NativeStorage, "setItem", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NativeStorage, "getItem", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NativeStorage, "remove", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NativeStorage, "clear", null);
	    NativeStorage = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'NativeStorage',
	            plugin: 'cordova-plugin-nativestorage',
	            pluginRef: 'NativeStorage',
	            repo: 'https://github.com/TheCocoaProject/cordova-plugin-nativestorage'
	        })
	    ], NativeStorage);
	    return NativeStorage;
	}());
	exports.NativeStorage = NativeStorage;
	//# sourceMappingURL=nativestorage.js.map

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @beta
	 * @name NavigationBar
	 * @description
	 * The NavigationBar plugin can you to hide and auto hide the android navigation bar.
	 *
	 * @usage
	 * ```typescript
	 * import { NavigationBar } from 'ionic-native';
	 *
	 * let autoHide: boolean = true;
	 * NavigationBar.hide(autoHide);
	 * ```
	 */
	var NavigationBar = (function () {
	    function NavigationBar() {
	    }
	    /**
	     * hide automatically (or not) the navigation bar.
	     * @param autohide {boolean}
	     * @return {Promise<any>}
	     */
	    NavigationBar.setUp = function (autohide) { return; };
	    /**
	     * Hide the navigation bar.
	     * @return {Promise<any>}
	     */
	    NavigationBar.hideNavigationBar = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            callbackStyle: 'object',
	            successName: 'success',
	            errorName: 'failure'
	        })
	    ], NavigationBar, "setUp", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackStyle: 'object',
	            successName: 'success',
	            errorName: 'failure'
	        })
	    ], NavigationBar, "hideNavigationBar", null);
	    NavigationBar = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'NavigationBar',
	            plugin: 'cordova-plugin-navigationbar',
	            pluginRef: 'navigationbar',
	            repo: 'https://github.com/cranberrygame/cordova-plugin-navigationbar',
	            platforms: ['Android']
	        })
	    ], NavigationBar);
	    return NavigationBar;
	}());
	exports.NavigationBar = NavigationBar;
	//# sourceMappingURL=navigationbar.js.map

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Market
	 * @description
	 * Opens an app's page in the market place (Google Play, App Store)
	 *
	 * @usage
	 * ```
	 * import {Market} from 'ionic-native';
	 *
	 * Market.open('your.package.name');
	 *
	 * ```
	 */
	var Market = (function () {
	    function Market() {
	    }
	    /**
	     * Opens an app in Google Play / App Store
	     * @param appId {string} Package name
	     * @return {Promise<any>}
	     */
	    Market.open = function (appId) { return; };
	    /**
	     * Search apps by keyword
	     * @param keyword {string} Keyword
	     * @return {Promise<any>}
	     */
	    Market.search = function (keyword) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            callbackStyle: 'object',
	            successName: 'success',
	            errorName: 'failure'
	        })
	    ], Market, "open", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackStyle: 'object',
	            successName: 'success',
	            errorName: 'failure',
	            platforms: ['Android']
	        })
	    ], Market, "search", null);
	    Market = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Market',
	            plugin: 'cordova-plugin-market',
	            pluginRef: 'cordova.plugins.market',
	            repo: 'https://github.com/xmartlabs/cordova-plugin-market'
	        })
	    ], Market);
	    return Market;
	}());
	exports.Market = Market;
	//# sourceMappingURL=market.js.map

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name MediaPlugin
	 * @description
	 * @usage
	 * ```typescript
	 * import { MediaPlugin } from 'ionic-native';
	 *
	 *
	 *
	 * // Create a MediaPlugin instance.  Expects path to file or url as argument
	 * // We can optionally pass a second argument to track the status of the media
	 *
	 * const onStatusUpdate = (status) => console.log(status);
	 *
	 * const file = new MediaPlugin('path/to/file.mp3', onStatusUpdate);
	 *
	 * // Catch the Success & Error Output
	 * // Platform Quirks
	 * // iOS calls success on completion of playback only
	 * // Android calls success on completion of playback AND on release()
	 * file.init.then(() => {
	 *   console.log('Playback Finished');
	 * }, (err) => {
	 *   console.log('somthing went wrong! error code: ' + err.code + ' message: ' + err.message);
	 * });
	 *
	 * // play the file
	 * file.play();
	 *
	 * // pause the file
	 * file.pause();
	 *
	 * // get current playback position
	 * file.getCurrentPosition().then((position) => {
	 *   console.log(position);
	 * });
	 *
	 * // get file duration
	 * file.getDuration();
	 *
	 * // skip to 10 seconds (expects int value in ms)
	 * file.seekTo(10000);
	 *
	 * // stop playing the file
	 * file.stop();
	 *
	 * // release the native audio resource
	 * // Platform Quirks:
	 * // iOS simply create a new instance and the old one will be overwritten
	 * // Android you must call release() to destroy instances of media when you are done
	 * file.release();
	 *
	 * // Recording to a file
	 * var newFile = new MediaPlugin('path/to/file.mp3');
	 * newFile.startRecord();
	 *
	 * newFile.stopRecord();
	 *
	 *
	 *
	 * ```
	 */
	var MediaPlugin = (function () {
	    // Methods
	    /**
	     * Open a media file
	     * @param src {string} A URI containing the audio content.
	     * @param onStatusUpdate {Function} A callback function to be invoked when the status of the file changes
	     */
	    function MediaPlugin(src, onStatusUpdate) {
	        var _this = this;
	        if (!!plugin_1.getPlugin('Media')) {
	            this.init = new Promise(function (resolve, reject) {
	                _this._objectInstance = new Media(src, resolve, reject, onStatusUpdate);
	            });
	        }
	        else {
	            plugin_1.pluginWarn({
	                pluginName: 'MediaPlugin',
	                plugin: 'cordova-plugin-media'
	            });
	        }
	    }
	    /**
	     * Get the current amplitude of the current recording.
	     * @returns {Promise<any>} Returns a promise with the amplitude of the current recording
	     */
	    MediaPlugin.prototype.getCurrentAmplitude = function () { return; };
	    /**
	     * Get the current position within an audio file. Also updates the Media object's position parameter.
	     * @returns {Promise<any>} Returns a promise with the position of the current recording
	     */
	    MediaPlugin.prototype.getCurrentPosition = function () { return; };
	    /**
	     * Get the duration of an audio file in seconds. If the duration is unknown, it returns a value of -1.
	     * @returns {number} Returns a promise with the duration of the current recording
	     */
	    MediaPlugin.prototype.getDuration = function () { return; };
	    /**
	     * Starts or resumes playing an audio file.
	     */
	    MediaPlugin.prototype.play = function (iosOptions) { };
	    /**
	     * Pauses playing an audio file.
	     */
	    MediaPlugin.prototype.pause = function () { };
	    /**
	     * Releases the underlying operating system's audio resources. This is particularly important for Android, since there are a finite amount of OpenCore instances for media playback. Applications should call the release function for any Media resource that is no longer needed.
	     */
	    MediaPlugin.prototype.release = function () { };
	    /**
	     * Sets the current position within an audio file.
	     * @param {number} milliseconds The time position you want to set for the current audio file
	     */
	    MediaPlugin.prototype.seekTo = function (milliseconds) { };
	    /**
	     * Set the volume for an audio file.
	     * @param volume {number} The volume to set for playback. The value must be within the range of 0.0 to 1.0.
	     */
	    MediaPlugin.prototype.setVolume = function (volume) { };
	    /**
	     * Starts recording an audio file.
	     */
	    MediaPlugin.prototype.startRecord = function () { };
	    /**
	     * Stops recording
	     */
	    MediaPlugin.prototype.stopRecord = function () { };
	    /**
	     * Pauses recording
	     */
	    MediaPlugin.prototype.pauseRecord = function () { };
	    /**
	     * Resumes recording
	     */
	    MediaPlugin.prototype.resumeRecord = function () { };
	    /**
	     * Stops playing an audio file.
	     */
	    MediaPlugin.prototype.stop = function () { };
	    // Constants
	    /**
	     * @private
	     */
	    MediaPlugin.MEDIA_NONE = 0;
	    /**
	     * @private
	     */
	    MediaPlugin.MEDIA_STARTING = 1;
	    /**
	     * @private
	     */
	    MediaPlugin.MEDIA_RUNNING = 2;
	    /**
	     * @private
	     */
	    MediaPlugin.MEDIA_PAUSED = 3;
	    /**
	     * @private
	     */
	    MediaPlugin.MEDIA_STOPPED = 4;
	    // error codes
	    /**
	     * @private
	     */
	    MediaPlugin.MEDIA_ERR_ABORTED = 1;
	    /**
	     * @private
	     */
	    MediaPlugin.MEDIA_ERR_NETWORK = 2;
	    /**
	     * @private
	     */
	    MediaPlugin.MEDIA_ERR_DECODE = 3;
	    /**
	     * @private
	     */
	    MediaPlugin.MEDIA_ERR_NONE_SUPPORTED = 4;
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], MediaPlugin.prototype, "getCurrentAmplitude", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], MediaPlugin.prototype, "getCurrentPosition", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], MediaPlugin.prototype, "getDuration", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], MediaPlugin.prototype, "play", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], MediaPlugin.prototype, "pause", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], MediaPlugin.prototype, "release", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], MediaPlugin.prototype, "seekTo", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], MediaPlugin.prototype, "setVolume", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], MediaPlugin.prototype, "startRecord", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], MediaPlugin.prototype, "stopRecord", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], MediaPlugin.prototype, "pauseRecord", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], MediaPlugin.prototype, "resumeRecord", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], MediaPlugin.prototype, "stop", null);
	    MediaPlugin = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'MediaPlugin',
	            repo: 'https://github.com/apache/cordova-plugin-media',
	            plugin: 'cordova-plugin-media',
	            pluginRef: 'Media'
	        })
	    ], MediaPlugin);
	    return MediaPlugin;
	}());
	exports.MediaPlugin = MediaPlugin;
	//# sourceMappingURL=media.js.map

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Mixpanel
	 * @description
	 * Cordova Plugin that wraps Mixpanel SDK for Android and iOS
	 *
	 * @usage
	 * ```
	 * import {Mixpanel} from 'ionic-native';
	 *
	 * Mixpanel.init(token)
	 *   .then(onSuccess)
	 *   .catch(onError);
	 *
	 * ```
	 * @classes
	 * MixpanelPeople
	 */
	var Mixpanel = (function () {
	    function Mixpanel() {
	    }
	    /**
	     *
	     * @param aliasId {string}
	     * @param originalId {string}
	     * @returns {Promise<any>}
	     */
	    Mixpanel.alias = function (aliasId, originalId) { return; };
	    /**
	     *
	     * @returns {Promise<any>}
	     */
	    Mixpanel.distinctId = function () { return; };
	    /**
	     * @returns {Promise<any>}
	     */
	    Mixpanel.flush = function () { return; };
	    /**
	     *
	     * @param distinctId {string}
	     * @returns {Promise<any>}
	     */
	    Mixpanel.identify = function (distinctId) { return; };
	    /**
	     *
	     * @param token {string}
	     * @returns {Promise<any>}
	     */
	    Mixpanel.init = function (token) { return; };
	    /**
	     *
	     * @param superProperties {any}
	     * @returns {Promise<any>}
	     */
	    Mixpanel.registerSuperProperties = function (superProperties) { return; };
	    /**
	     *
	     * @returns {Promise<any>}
	     */
	    Mixpanel.reset = function () { return; };
	    /**
	     *
	     * @param eventName {string}
	     * @param eventProperties {any} optional
	     * @returns {Promise<any>}
	     */
	    Mixpanel.track = function (eventName, eventProperties) { return; };
	    /**
	     *
	     * @returns {Promise<any>}
	     */
	    Mixpanel.showSurvey = function () { return; };
	    Object.defineProperty(Mixpanel, "people", {
	        /**
	         *
	         * @returns {MixpanelPeople}
	         */
	        get: function () {
	            return MixpanelPeople;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    __decorate([
	        plugin_1.Cordova()
	    ], Mixpanel, "alias", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Mixpanel, "distinctId", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Mixpanel, "flush", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Mixpanel, "identify", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Mixpanel, "init", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Mixpanel, "registerSuperProperties", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Mixpanel, "reset", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 2,
	            errorIndex: 3
	        })
	    ], Mixpanel, "track", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Mixpanel, "showSurvey", null);
	    Mixpanel = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Mixpanel',
	            plugin: 'cordova-plugin-mixpanel',
	            pluginRef: 'mixpanel',
	            repo: 'https://github.com/samzilverberg/cordova-mixpanel-plugin'
	        })
	    ], Mixpanel);
	    return Mixpanel;
	}());
	exports.Mixpanel = Mixpanel;
	/**
	 * @private
	 */
	var MixpanelPeople = (function () {
	    function MixpanelPeople() {
	    }
	    /**
	     *
	     * @param distinctId {string}
	     * @return {Promise<any>}
	     */
	    MixpanelPeople.identify = function (distinctId) { return; };
	    /**
	     *
	     * @param peopleProperties {string}
	     * @return {Promise<any>}
	     */
	    MixpanelPeople.increment = function (peopleProperties) { return; };
	    /**
	     *
	     * @param pushId
	     * @return {Promise<any>}
	     */
	    MixpanelPeople.setPushId = function (pushId) { return; };
	    /**
	     *
	     * @param peopleProperties
	     * @return {Promise<any>}
	     */
	    MixpanelPeople.set = function (peopleProperties) { return; };
	    /**
	     *
	     * @param peopleProperties
	     * @return {Promise<any>}
	     */
	    MixpanelPeople.setOnce = function (peopleProperties) { return; };
	    /**
	     * @private
	     */
	    MixpanelPeople.plugin = 'cordova-plugin-mixpanel';
	    /**
	     * @private
	     */
	    MixpanelPeople.pluginRef = 'mixpanel.people';
	    __decorate([
	        plugin_1.Cordova()
	    ], MixpanelPeople, "identify", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], MixpanelPeople, "increment", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], MixpanelPeople, "setPushId", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], MixpanelPeople, "set", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], MixpanelPeople, "setOnce", null);
	    return MixpanelPeople;
	}());
	exports.MixpanelPeople = MixpanelPeople;
	//# sourceMappingURL=mixpanel.js.map

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name MusicControls
	 * @description
	 * Music controls for Cordova applications.
	 * Display a 'media' notification with play/pause, previous, next buttons, allowing the user to control the play.
	 * Handle also headset event (plug, unplug, headset button).
	 *
	 * @usage
	 * ```
	 * import {MusicControls} from 'ionic-native';
	 *
	 * MusicControls.create({
	 *   track       : 'Time is Running Out',        // optional, default : ''
	 *   artist      : 'Muse',                       // optional, default : ''
	 *   cover       : 'albums/absolution.jpg',      // optional, default : nothing
	 *   // cover can be a local path (use fullpath 'file:///storage/emulated/...', or only 'my_image.jpg' if my_image.jpg is in the www folder of your app)
	 *   //           or a remote url ('http://...', 'https://...', 'ftp://...')
	 *   isPlaying   : true,                         // optional, default : true
	 *   dismissable : true,                         // optional, default : false
	 *
	 *   // hide previous/next/close buttons:
	 *   hasPrev   : false,      // show previous button, optional, default: true
	 *   hasNext   : false,      // show next button, optional, default: true
	 *   hasClose  : true,       // show close button, optional, default: false
	 *
	 *   // Android only, optional
	 *   // text displayed in the status bar when the notification (and the ticker) are updated
	 *   ticker    : 'Now playing "Time is Running Out"'
	 *  });
	 *
	 *  MusicControls.subscribe().subscribe(action => {
	 *
	 *    switch(action) {
	 *        case 'music-controls-next':
	 *            // Do something
	 *            break;
	 *        case 'music-controls-previous':
	 *            // Do something
	 *            break;
	 *        case 'music-controls-pause':
	 *            // Do something
	 *            break;
	 *        case 'music-controls-play':
	 *            // Do something
	 *            break;
	 *        case 'music-controls-destroy':
	 *            // Do something
	 *            break;
	 *
	 *        // Headset events (Android only)
	 *        case 'music-controls-media-button' :
	 *            // Do something
	 *            break;
	 *        case 'music-controls-headset-unplugged':
	 *            // Do something
	 *            break;
	 *        case 'music-controls-headset-plugged':
	 *            // Do something
	 *            break;
	 *        default:
	 *            break;
	 *    }
	 *
	 *  });
	 *
	 *  MusicControls.listen(); // activates the observable above
	 *
	 *  MusicControls.updateIsPlaying(true);
	 *
	 *
	 * ```
	 * @interfaces
	 * MusicControlsOptions
	 */
	var MusicControls = (function () {
	    function MusicControls() {
	    }
	    /**
	     * Create the media controls
	     * @param options {MusicControlsOptions}
	     * @returns {Promise<any>}
	     */
	    MusicControls.create = function (options) { return; };
	    /**
	     * Destroy the media controller
	     * @returns {Promise<any>}
	     */
	    MusicControls.destroy = function () { return; };
	    /**
	     * Subscribe to the events of the media controller
	     * @returns {Observable<any>}
	     */
	    MusicControls.subscribe = function () { return; };
	    /**
	     * Start listening for events, this enables the Observable from the subscribe method
	     */
	    MusicControls.listen = function () { };
	    /**
	     * Toggle play/pause:
	     * @param isPlaying {boolean}
	     */
	    MusicControls.updateIsPlaying = function (isPlaying) { };
	    __decorate([
	        plugin_1.Cordova()
	    ], MusicControls, "create", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], MusicControls, "destroy", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true
	        })
	    ], MusicControls, "subscribe", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], MusicControls, "listen", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], MusicControls, "updateIsPlaying", null);
	    MusicControls = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'MusicControls',
	            plugin: 'cordova-plugin-music-controls',
	            pluginRef: 'MusicControls',
	            repo: 'https://github.com/homerours/cordova-music-controls-plugin'
	        })
	    ], MusicControls);
	    return MusicControls;
	}());
	exports.MusicControls = MusicControls;
	//# sourceMappingURL=music-controls.js.map

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Network
	 * @description
	 * Requires Cordova plugin: cordova-plugin-network-information. For more info, please see the [Network plugin docs](https://github.com/apache/cordova-plugin-network-information).
	 *
	 * @usage
	 * ```typescript
	 * import { Network } from 'ionic-native';
	 *
	 * // watch network for a disconnect
	 * let disconnectSubscription = Network.onDisconnect().subscribe(() => {
	 *   console.log('network was disconnected :-(');
	 * });
	 *
	 * // stop disconnect watch
	 * disconnectSubscription.unsubscribe();
	 *
	 *
	 * // watch network for a connection
	 * let connectSubscription = Network.onConnect().subscribe(() => {
	 *   console.log('network connected!');
	
	 *   // We just got a connection but we need to wait briefly
	 *
	   // before we determine the connection type.  Might need to wait
	
	 *   // prior to doing any api requests as well.
	 *   setTimeout(() => {
	 *     if (Network.type === 'wifi') {
	 *       console.log('we got a wifi connection, woohoo!');
	 *     }
	 *   }, 3000);
	 * });
	 *
	 * // stop connect watch
	 * connectSubscription.unsubscribe();
	 *
	 * ```
	 * @advanced
	 * The `type` property will return one of the following connection types: `unknown`, `ethernet`, `wifi`, `2g`, `3g`, `4g`, `cellular`, `none`
	 */
	var Network = (function () {
	    function Network() {
	    }
	    /**
	     * Returns an observable to watch connection changes
	     * @return {Observable<any>}
	     */
	    Network.onchange = function () { return; };
	    /**
	     * Returns an observable to watch connection type changes
	     * @return {Observable<any>}
	     */
	    Network.ontypechange = function () { return; };
	    /**
	     * Get notified when the device goes offline
	     * @returns {Observable<any>} Returns an observable.
	     */
	    Network.onDisconnect = function () { return; };
	    /**
	     * Get notified when the device goes online
	     * @returns {Observable<any>} Returns an observable.
	     */
	    Network.onConnect = function () { return; };
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Network, "type", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Network, "downlinkMax", void 0);
	    __decorate([
	        plugin_1.CordovaFunctionOverride()
	    ], Network, "onchange", null);
	    __decorate([
	        plugin_1.CordovaFunctionOverride()
	    ], Network, "ontypechange", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'offline'
	        })
	    ], Network, "onDisconnect", null);
	    __decorate([
	        plugin_1.Cordova({
	            eventObservable: true,
	            event: 'online'
	        })
	    ], Network, "onConnect", null);
	    Network = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Network',
	            plugin: 'cordova-plugin-network-information',
	            repo: 'https://github.com/apache/cordova-plugin-network-information',
	            platforms: ['Amazon Fire OS', 'iOS', 'Android', 'BlackBerry 10', 'Windows Phone 7', 'Windows Phone 8', 'Windows', 'Firefox OS', 'Browser'],
	            pluginRef: 'navigator.connection'
	        })
	    ], Network);
	    return Network;
	}());
	exports.Network = Network;
	//# sourceMappingURL=network.js.map

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name NFC
	 * @description
	 * The NFC plugin allows you to read and write NFC tags. You can also beam to, and receive from, other NFC enabled devices.
	 *
	 * Use to
	 * - read data from NFC tags
	 * - write data to NFC tags
	 * - send data to other NFC enabled devices
	 * - receive data from NFC devices
	 *
	 * This plugin uses NDEF (NFC Data Exchange Format) for maximum compatibilty between NFC devices, tag types, and operating systems.
	 *
	 * @usage
	 * ```
	 * import {NFC, Ndef} from 'ionic-native';
	 *
	 * let message = Ndef.textRecord('Hello world');
	 * NFC.share([message]).then(onSuccess).catch(onError);
	 *
	 * ```
	 */
	var NFC = (function () {
	    function NFC() {
	    }
	    /**
	     * Registers an event listener for any NDEF tag.
	     * @param onSuccess
	     * @param onFailure
	     * @returns {Observable<any>}
	     */
	    NFC.addNdefListener = function (onSuccess, onFailure) { return; };
	    /**
	     * Registers an event listener for tags matching any tag type.
	     * @param onSuccess
	     * @param onFailure
	     * @returns {Observable<any>}
	     */
	    NFC.addTagDiscoveredListener = function (onSuccess, onFailure) { return; };
	    /**
	     * Registers an event listener for NDEF tags matching a specified MIME type.
	     * @param mimeType
	     * @param onSuccess
	     * @param onFailure
	     * @returns {Observable<any>}
	     */
	    NFC.addMimeTypeListener = function (mimeType, onSuccess, onFailure) { return; };
	    /**
	     * Registers an event listener for formatable NDEF tags.
	     * @param onSuccess
	     * @param onFailure
	     * @returns {Observable<any>}
	     */
	    NFC.addNdefFormatableListener = function (onSuccess, onFailure) { return; };
	    /**
	     * Qrites an NdefMessage to a NFC tag.
	     * @param message {any[]}
	     * @returns {Promise<any>}
	     */
	    NFC.write = function (message) { return; };
	    /**
	     * Makes a NFC tag read only. **Warning** this is permanent.
	     * @returns {Promise<any>}
	     */
	    NFC.makeReadyOnly = function () { return; };
	    /**
	     * Shares an NDEF Message via peer-to-peer.
	     * @param message An array of NDEF Records.
	     * @returns {Promise<any>}
	     */
	    NFC.share = function (message) { return; };
	    /**
	     * Stop sharing NDEF data via peer-to-peer.
	     * @returns {Promise<any>}
	     */
	    NFC.unshare = function () { return; };
	    /**
	     * Erase a NDEF tag
	     */
	    NFC.erase = function () { return; };
	    /**
	     * Send a file to another device via NFC handover.
	     * @param uris A URI as a String, or an array of URIs.
	     * @returns {Promise<any>}
	     */
	    NFC.handover = function (uris) { return; };
	    /**
	     * Stop sharing NDEF data via NFC handover.
	     * @returns {Promise<any>}
	     */
	    NFC.stopHandover = function () { return; };
	    /**
	     * Show the NFC settings on the device.
	     * @returns {Promise<any>}
	     */
	    NFC.showSettings = function () { return; };
	    /**
	     * Check if NFC is available and enabled on this device.
	     * @returns {Promise<any>}
	     */
	    NFC.enabled = function () { return; };
	    /**
	     * Convert bytes to string
	     * @param bytes {number[]}
	     * @returns {string}
	     */
	    NFC.bytesToString = function (bytes) { return; };
	    /**
	     * Convert string to bytes
	     * @param str {string}
	     * @returns {number[]}
	     */
	    NFC.stringToBytes = function (str) { return; };
	    ;
	    /**
	     * Convert bytes to hex string
	     * @param bytes {number[]}
	     * @returns {string}
	     */
	    NFC.bytesToHexString = function (bytes) { return; };
	    ;
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            successIndex: 0,
	            errorIndex: 3,
	            clearFunction: 'removeNdefListener',
	            clearWithArgs: true
	        })
	    ], NFC, "addNdefListener", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            successIndex: 0,
	            errorIndex: 3,
	            clearFunction: 'removeTagDiscoveredListener',
	            clearWithArgs: true
	        })
	    ], NFC, "addTagDiscoveredListener", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            successIndex: 1,
	            errorIndex: 4,
	            clearFunction: 'removeMimeTypeListener',
	            clearWithArgs: true
	        })
	    ], NFC, "addMimeTypeListener", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            successIndex: 0,
	            errorIndex: 3
	        })
	    ], NFC, "addNdefFormatableListener", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NFC, "write", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NFC, "makeReadyOnly", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NFC, "share", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NFC, "unshare", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NFC, "erase", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NFC, "handover", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NFC, "stopHandover", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NFC, "showSettings", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], NFC, "enabled", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], NFC, "bytesToString", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], NFC, "stringToBytes", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], NFC, "bytesToHexString", null);
	    NFC = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'NFC',
	            plugin: 'phonegap-nfc',
	            pluginRef: 'nfc',
	            repo: 'https://github.com/chariotsolutions/phonegap-nfc'
	        })
	    ], NFC);
	    return NFC;
	}());
	exports.NFC = NFC;
	/**
	 * @private
	 */
	var Ndef = (function () {
	    function Ndef() {
	    }
	    Ndef.uriRecord = function (uri) { return; };
	    Ndef.textRecord = function (text) { return; };
	    Ndef.mimeMediaRecord = function (mimeType, payload) { return; };
	    Ndef.androidApplicationRecord = function (packageName) { return; };
	    /**
	     * @private
	     */
	    Ndef.pluginName = 'NFC';
	    /**
	     * @private
	     */
	    Ndef.plugin = 'phonegap-nfc';
	    /**
	     * @private
	     */
	    Ndef.pluginRef = 'ndef';
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], Ndef, "uriRecord", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], Ndef, "textRecord", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], Ndef, "mimeMediaRecord", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], Ndef, "androidApplicationRecord", null);
	    return Ndef;
	}());
	exports.Ndef = Ndef;
	//# sourceMappingURL=nfc.js.map

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * **ANDROID** - Privacy setting for how the notification should be shown on the lockscreen of Android 5+ devices.
	 */
	(function (OSLockScreenVisibility) {
	    /**
	     * Fully visible (default)
	     */
	    OSLockScreenVisibility[OSLockScreenVisibility["Public"] = 1] = "Public";
	    /**
	     * Contents are hidden
	     */
	    OSLockScreenVisibility[OSLockScreenVisibility["Private"] = 0] = "Private";
	    /**
	     * Not shown
	     */
	    OSLockScreenVisibility[OSLockScreenVisibility["Secret"] = -1] = "Secret";
	})(exports.OSLockScreenVisibility || (exports.OSLockScreenVisibility = {}));
	var OSLockScreenVisibility = exports.OSLockScreenVisibility;
	/**
	 * How the notification was displayed to the user. Part of OSNotification. See inFocusDisplaying for more information on how this is used.
	 */
	(function (OSDisplayType) {
	    /**
	     * notification is silent, or inFocusDisplaying is disabled.
	     */
	    OSDisplayType[OSDisplayType["None"] = 0] = "None";
	    /**
	     * (**DEFAULT**) - native alert dialog display.
	     */
	    OSDisplayType[OSDisplayType["InAppAlert"] = 1] = "InAppAlert";
	    /**
	     * native notification display.
	     */
	    OSDisplayType[OSDisplayType["Notification"] = 2] = "Notification";
	})(exports.OSDisplayType || (exports.OSDisplayType = {}));
	var OSDisplayType = exports.OSDisplayType;
	(function (OSActionType) {
	    OSActionType[OSActionType["Opened"] = 0] = "Opened";
	    OSActionType[OSActionType["ActionTake"] = 1] = "ActionTake";
	})(exports.OSActionType || (exports.OSActionType = {}));
	var OSActionType = exports.OSActionType;
	/**
	 * @name OneSignal
	 * @description
	 * The OneSignal plugin is an client implementation for using the [OneSignal](https://onesignal.com/) Service.
	 * OneSignal is a simple implementation for delivering push notifications.
	 *
	 * Requires Cordova plugin: `onesignal-cordova-plugin`. For more info, please see the [OneSignal Cordova Docs](https://documentation.onesignal.com/docs/phonegap-sdk-installation).
	 *
	 * @usage
	 * ```typescript
	 * import { OneSignal } from 'ionic-native';
	 *
	 * OneSignal.startInit('b2f7f966-d8cc-11e4-bed1-df8f05be55ba', '703322744261');
	 *
	 * OneSignal.inFocusDisplaying(OneSignal.OSInFocusDisplayOption.InAppAlert);
	 *
	 * OneSignal.handleNotificationReceived().subscribe(() => {
	 *  // do something when notification is received
	 * });
	 *
	 * OneSignal.handleNotificationOpened().subscribe(() => {
	 *   // do something when a notification is opened
	 * });
	 *
	 * OneSignal.endInit();
	 * ```
	 * @interfaces
	 * OSNotification
	 * OSLockScreenVisibility
	 * OSDisplayType
	 * OSNotificationPayload
	 * OSActionButton
	 * OSBackgroundImageLayout
	 * OSNotificationOpenedResult
	 * OSActionType
	 */
	var OneSignal = (function () {
	    function OneSignal() {
	    }
	    /**
	     * Start the initialization process. Once you are done configuring OneSignal, call the `endInit` function.
	     *
	     * @param {string} appId Your OneSignal app id
	     * @param {string} googleProjectNumber **ANDROID** - your Google project number; only required for Android GCM/FCM pushes.
	     * @returns {any}
	     */
	    OneSignal.startInit = function (appId, googleProjectNumber) { return; };
	    /**
	     * Callback to run when a notification is received, whether it was displayed or not.
	     *
	     * @return {Observable<OneSignalReceivedNotification>}
	     */
	    OneSignal.handleNotificationReceived = function () { return; };
	    /**
	     * Callback to run when a notification is tapped on from the notification shade (**ANDROID**) or notification
	     * center (**iOS**), or when closing an Alert notification shown in the app (if InAppAlert is enabled in
	     * inFocusDisplaying).
	     *
	     * @return {Observable<OneSignalOpenedNotification>}
	     */
	    OneSignal.handleNotificationOpened = function () { return; };
	    /**
	     * **iOS** - Settings for iOS apps
	     *
	     * @param settings
	     *  kOSSettingsKeyAutoPrompt: boolean = true
	     *  Auto prompt user for notification permissions.
	     *
	     *  kOSSettingsKeyInAppLaunchURL: boolean = false
	     *  Launch notifications with a launch URL as an in app webview.
	     * @returns {any}
	     */
	    OneSignal.iOSSettings = function (settings) { return; };
	    /**
	     * Must be called after `startInit` to complete initialization of OneSignal.
	     *
	     * @returns {any}
	     */
	    OneSignal.endInit = function () { return; };
	    /**
	     * Retrieve a list of tags that have been set on the user from the OneSignal server.
	     *
	     * @returns {Promise<any>} Returns a Promise that resolves when tags are recieved.
	     */
	    OneSignal.getTags = function () { return; };
	    /**
	     * Lets you retrieve the OneSignal user id and device token.
	     * Your handler is called after the device is successfully registered with OneSignal.
	     *
	     * @returns {Promise<Object>} Returns a Promise that resolves if the device was successfully registered.
	     *
	     *  userId {string} OneSignal userId is a UUID formatted string. (unique per device per app)
	     *
	     *  pushToken {string} A push token is a Google/Apple assigned identifier(unique per device per app).
	     */
	    OneSignal.getIds = function () { return; };
	    /**
	     * Tag a user based on an app event of your choosing so later you can create segments on [onesignal.com](https://onesignal.com/) to target these users.
	     * Recommend using sendTags over sendTag if you need to set more than one tag on a user at a time.
	     *
	     * @param {string} Key of your choosing to create or update.
	     * @param {string} Value to set on the key. NOTE: Passing in a blank String deletes the key, you can also call deleteTag.
	     */
	    OneSignal.sendTag = function (key, value) { };
	    /**
	     * Tag a user based on an app event of your choosing so later you can create segments on [onesignal.com](https://onesignal.com/) to target these users.
	     * Recommend using sendTags over sendTag if you need to set more than one tag on a user at a time.
	     *
	     * @param {string} Pass a json object with key/value pairs like: {key: "value", key2: "value2"}
	     */
	    OneSignal.sendTags = function (json) { };
	    /**
	     * Deletes a tag that was previously set on a user with `sendTag` or `sendTags`. Use `deleteTags` if you need to delete more than one.
	     *
	     * @param {string} Key to remove.
	     */
	    OneSignal.deleteTag = function (key) { };
	    /**
	     * Deletes tags that were previously set on a user with `sendTag` or `sendTags`.
	     *
	     * @param {Array<string>} Keys to remove.
	     */
	    OneSignal.deleteTags = function (keys) { };
	    /**
	     * Call this when you would like to prompt an iOS user to accept push notifications with the default system prompt.
	     * Only works if you set `kOSSettingsAutoPrompt` to `false` in `iOSSettings`
	     */
	    OneSignal.registerForPushNotifications = function () { };
	    /**
	    * Warning:
	    * Only applies to Android and Amazon. You can call this from your UI from a button press for example to give your user's options for your notifications.
	    *
	    * By default OneSignal always vibrates the device when a notification is displayed unless the device is in a total silent mode.
	    * Passing false means that the device will only vibrate lightly when the device is in it's vibrate only mode.
	    *
	    * @param {boolean} false to disable vibrate, true to re-enable it.
	    */
	    OneSignal.enableVibrate = function (enable) { };
	    /**
	    * Warning:
	    * Only applies to Android and Amazon. You can call this from your UI from a button press for example to give your user's options for your notifications.
	    *
	    * By default OneSignal plays the system's default notification sound when the device's notification system volume is turned on.
	    * Passing false means that the device will only vibrate unless the device is set to a total silent mode.
	    *
	    * @param {boolean} false to disable sound, true to re-enable it.
	    */
	    OneSignal.enableSound = function (enable) { };
	    /**
	    *
	    * Setting to control how OneSignal notifications will be shown when one is received while your app is in focus. By default this is set to inAppAlert, which can be helpful during development.
	    *
	    * @param {DisplayType} displayOption
	    * @returns {any}
	    */
	    OneSignal.inFocusDisplaying = function (displayOption) { return; };
	    /**
	    * You can call this method with false to opt users out of receiving all notifications through OneSignal.
	    * You can pass true later to opt users back into notifications.
	    *
	    * @param {boolean} enable
	    */
	    OneSignal.setSubscription = function (enable) { };
	    /**
	    *
	    * @param {notificationObj} Parameters see POST [documentation](https://documentation.onesignal.com/v2.0/docs/notifications-create-notification)
	    * @returns {Promise<any>} Returns a Promise that resolves if the notification was send successfully.
	    */
	    OneSignal.postNotification = function (notificationObj) { return; };
	    /**
	    * Prompts the user for location permission to allow geotagging based on the "Location radius" filter on the OneSignal dashboard.
	    */
	    OneSignal.promptLocation = function () { };
	    /**
	     *
	     * @param email {string}
	     */
	    OneSignal.syncHashedEmail = function (email) { };
	    /**
	    * Enable logging to help debug if you run into an issue setting up OneSignal.
	    * The logging levels are as follows: 0 = None, 1= Fatal, 2 = Errors, 3 = Warnings, 4 = Info, 5 = Debug, 6 = Verbose
	  
	    * The higher the value the more information is shown.
	    *
	    * @param {loglevel} contains two properties: logLevel (for console logging) and visualLevel (for dialog messages)
	    */
	    OneSignal.setLogLevel = function (logLevel) { };
	    /**
	     * constants to use in inFocusDisplaying()
	     */
	    OneSignal.OSInFocusDisplayOption = {
	        None: 0,
	        InAppAlert: 1,
	        Notification: 2
	    };
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "startInit", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true
	        })
	    ], OneSignal, "handleNotificationReceived", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true
	        })
	    ], OneSignal, "handleNotificationOpened", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "iOSSettings", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "endInit", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], OneSignal, "getTags", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], OneSignal, "getIds", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "sendTag", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "sendTags", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "deleteTag", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "deleteTags", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "registerForPushNotifications", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "enableVibrate", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "enableSound", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "inFocusDisplaying", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "setSubscription", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], OneSignal, "postNotification", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "promptLocation", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "syncHashedEmail", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], OneSignal, "setLogLevel", null);
	    OneSignal = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'OneSignal',
	            plugin: 'onesignal-cordova-plugin',
	            pluginRef: 'plugins.OneSignal',
	            repo: 'https://github.com/OneSignal/OneSignal-Cordova-SDK',
	            platforms: ['Android', 'iOS', 'Windows', 'FireOS']
	        })
	    ], OneSignal);
	    return OneSignal;
	}());
	exports.OneSignal = OneSignal;
	//# sourceMappingURL=onesignal.js.map

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Photo Viewer
	 * @description This plugin can display your image in full screen with the ability to pan, zoom, and share the image.
	 * @usage
	 * ```typescript
	 * import { PhotoViewer } from 'ionic-native';
	 *
	 * PhotoViewer.show('https://mysite.com/path/to/image.jpg');
	 *
	 * PhotoViewer.show('https://mysite.com/path/to/image.jpg', 'My image title', {share: false});
	 * ```
	 */
	var PhotoViewer = (function () {
	    function PhotoViewer() {
	    }
	    /**
	     * Shows an image in full screen
	     * @param url {string} URL or path to image
	     * @param title {string}
	     * @param options {any}
	     */
	    PhotoViewer.show = function (url, title, options) { };
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], PhotoViewer, "show", null);
	    PhotoViewer = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'PhotoViewer',
	            plugin: 'com-sarriaroman-photoviewer',
	            pluginRef: 'PhotoViewer',
	            repo: 'https://github.com/sarriaroman/photoviewer'
	        })
	    ], PhotoViewer);
	    return PhotoViewer;
	}());
	exports.PhotoViewer = PhotoViewer;
	//# sourceMappingURL=photo-viewer.js.map

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Screen Orientation
	 * @description
	 * Cordova plugin to set/lock the screen orientation in a common way for iOS, Android, WP8 and Blackberry 10.
	 * This plugin is based on an early version of Screen Orientation API so the api does not currently match the current spec.
	 *
	 * Requires Cordova plugin: `cordova-plugin-screen-orientation`. For more info, please see the [Screen Orientation plugin docs](https://github.com/apache/cordova-plugin-screen-orientation).
	 *
	 * @usage
	 * ```typescript
	 * import { ScreenOrientation } from 'ionic-native';
	 *
	 *
	 * // set to either landscape
	 * ScreenOrientation.lockOrientation('landscape');
	 *
	 * // allow user rotate
	 * ScreenOrientation.unlockOrientation();
	 * ```
	 *
	 * @advanced
	 *
	 * Accepted orientation values:
	 *
	 * | Value                         | Description                                                                  |
	 * |-------------------------------|------------------------------------------------------------------------------|
	 * | portrait-primary              | The orientation is in the primary portrait mode.                             |
	 * | portrait-secondary            | The orientation is in the secondary portrait mode.                           |
	 * | landscape-primary             | The orientation is in the primary landscape mode.                            |
	 * | landscape-secondary           | The orientation is in the secondary landscape mode.                          |
	 * | portrait                      | The orientation is either portrait-primary or portrait-secondary (sensor).   |
	 * | landscape                     | The orientation is either landscape-primary or landscape-secondary (sensor). |
	 *
	 */
	var ScreenOrientation = (function () {
	    function ScreenOrientation() {
	    }
	    /**
	     * Lock the orientation to the passed value.
	     * See below for accepted values
	     * @param orientation {string} The orientation which should be locked. Accepted values see table above.
	     */
	    ScreenOrientation.lockOrientation = function (orientation) { };
	    /**
	     * Unlock and allow all orientations.
	     */
	    ScreenOrientation.unlockOrientation = function () { };
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], ScreenOrientation, "lockOrientation", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], ScreenOrientation, "unlockOrientation", null);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], ScreenOrientation, "orientation", void 0);
	    ScreenOrientation = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'ScreenOrientation',
	            plugin: 'cordova-plugin-screen-orientation',
	            pluginRef: 'window.screen',
	            repo: 'https://github.com/apache/cordova-plugin-screen-orientation',
	            platforms: ['Android', 'iOS', 'Windows Phone 8']
	        })
	    ], ScreenOrientation);
	    return ScreenOrientation;
	}());
	exports.ScreenOrientation = ScreenOrientation;
	//# sourceMappingURL=screen-orientation.js.map

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name PayPal
	 * @description
	 * PayPal plugin for Cordova/Ionic Applications
	 *
	 * @usage
	 * ```
	 * import {PayPal, PayPalPayment, PayPalConfiguration} from "ionic-native";
	 *
	 * PayPal.init({
	 *   "PayPalEnvironmentProduction": "YOUR_PRODUCTION_CLIENT_ID",
	 *   "PayPalEnvironmentSandbox": "YOUR_SANDBOX_CLIENT_ID"
	 * }).then(() => {
	 *   // Environments: PayPalEnvironmentNoNetwork, PayPalEnvironmentSandbox, PayPalEnvironmentProduction
	 *   PayPal.prepareToRender('PayPalEnvironmentSandbox', new PayPalConfiguration({
	 *     // Only needed if you get an "Internal Service Error" after PayPal login!
	 *     //payPalShippingAddressOption: 2 // PayPalShippingAddressOptionPayPal
	 *   })).then(() => {
	 *     let payment = new PayPalPayment('3.33', 'USD', 'Description', 'sale');
	 *     PayPal.renderSinglePaymentUI(payment).then(() => {
	 *       // Successfully paid
	 *
	 *       // Example sandbox response
	 *       //
	 *       // {
	 *       //   "client": {
	 *       //     "environment": "sandbox",
	 *       //     "product_name": "PayPal iOS SDK",
	 *       //     "paypal_sdk_version": "2.16.0",
	 *       //     "platform": "iOS"
	 *       //   },
	 *       //   "response_type": "payment",
	 *       //   "response": {
	 *       //     "id": "PAY-1AB23456CD789012EF34GHIJ",
	 *       //     "state": "approved",
	 *       //     "create_time": "2016-10-03T13:33:33Z",
	 *       //     "intent": "sale"
	 *       //   }
	 *       // }
	 *     }, () => {
	 *       // Error or render dialog closed without being successful
	 *     });
	 *   }, () => {
	 *     // Error in configuration
	 *   });
	 * }, () => {
	 *   // Error in initialization, maybe PayPal isn't supported or something else
	 * });
	 * ```
	 * @interfaces
	 * PayPalEnvironment
	 * PayPalConfigurationOptions
	 * @classes
	 * PayPalPayment
	 * PayPalItem
	 * PayPalPaymentDetails
	 * PayPalShippingAddress
	 */
	var PayPal = (function () {
	    function PayPal() {
	    }
	    /**
	     * Retrieve the version of the PayPal iOS SDK library. Useful when contacting support.
	     * @returns {Promise<string>}
	     */
	    PayPal.version = function () { return; };
	    /**
	     * You must preconnect to PayPal to prepare the device for processing payments.
	     * This improves the user experience, by making the presentation of the
	     * UI faster. The preconnect is valid for a limited time, so
	     * the recommended time to preconnect is on page load.
	     *
	     * @param {PayPalEnvironment} clientIdsForEnvironments: set of client ids for environments
	     * @returns {Promise<any>}
	     */
	    PayPal.init = function (clientIdsForEnvironments) { return; };
	    /**
	     * You must preconnect to PayPal to prepare the device for processing payments.
	     * This improves the user experience, by making the presentation of the UI faster.
	     * The preconnect is valid for a limited time, so the recommended time to preconnect is on page load.
	     *
	     * @param {String} environment: available options are "PayPalEnvironmentNoNetwork", "PayPalEnvironmentProduction" and "PayPalEnvironmentSandbox"
	     * @param {PayPalConfiguration} configuration: PayPalConfiguration object, for Future Payments merchantName, merchantPrivacyPolicyURL and merchantUserAgreementURL must be set be set
	     * @returns {Promise<any>}
	     */
	    PayPal.prepareToRender = function (environment, configuration) { return; };
	    /**
	     * Start PayPal UI to collect payment from the user.
	     * See https://developer.paypal.com/webapps/developer/docs/integration/mobile/ios-integration-guide/
	     * for more documentation of the params.
	     *
	     * @param {PayPalPayment} payment PayPalPayment object
	     * @returns {Promise<any>}
	     */
	    PayPal.renderSinglePaymentUI = function (payment) { return; };
	    /**
	     * Once a user has consented to future payments, when the user subsequently initiates a PayPal payment
	     * from their device to be completed by your server, PayPal uses a Correlation ID to verify that the
	     * payment is originating from a valid, user-consented device+application.
	     * This helps reduce fraud and decrease declines.
	     * This method MUST be called prior to initiating a pre-consented payment (a "future payment") from a mobile device.
	     * Pass the result to your server, to include in the payment request sent to PayPal.
	     * Do not otherwise cache or store this value.
	     * @returns {Promise<any>}
	     */
	    PayPal.clientMetadataID = function () { return; };
	    /**
	     * Please Read Docs on Future Payments at https://github.com/paypal/PayPal-iOS-SDK#future-payments
	     * @returns {Promise<any>}
	     */
	    PayPal.renderFuturePaymentUI = function () { return; };
	    /**
	     * Please Read Docs on Profile Sharing at https://github.com/paypal/PayPal-iOS-SDK#profile-sharing
	     *
	     * @param {Array<string>} scopes scopes Set of requested scope-values. Accepted scopes are: openid, profile, address, email, phone, futurepayments and paypalattributes
	     * See https://developer.paypal.com/docs/integration/direct/identity/attributes/ for more details
	     * @returns {Promise<any>}
	     */
	    PayPal.renderProfileSharingUI = function (scopes) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], PayPal, "version", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], PayPal, "init", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], PayPal, "prepareToRender", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], PayPal, "renderSinglePaymentUI", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], PayPal, "clientMetadataID", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], PayPal, "renderFuturePaymentUI", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], PayPal, "renderProfileSharingUI", null);
	    PayPal = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'PayPal',
	            plugin: 'com.paypal.cordova.mobilesdk',
	            pluginRef: 'PayPalMobile',
	            repo: 'https://github.com/paypal/PayPal-Cordova-Plugin'
	        })
	    ], PayPal);
	    return PayPal;
	}());
	exports.PayPal = PayPal;
	/**
	 * @private
	 */
	var PayPalPayment = (function () {
	    function PayPalPayment(amount, currency, shortDescription, intent, details) {
	        /**
	         * Optional Build Notation code ("BN code"), obtained from partnerprogram@paypal.com,
	         * for your tracking purposes.
	         */
	        this.bnCode = 'PhoneGap_SP';
	        this.amount = amount;
	        this.currency = currency;
	        this.shortDescription = shortDescription;
	        this.intent = intent;
	        this.details = details;
	    }
	    return PayPalPayment;
	}());
	exports.PayPalPayment = PayPalPayment;
	/**
	 * @private
	 */
	var PayPalItem = (function () {
	    /**
	     * The PayPalItem class defines an optional itemization for a payment.
	     * @see https://developer.paypal.com/docs/api/#item-object for more details.
	     * @param {String} name: Name of the item. 127 characters max
	     * @param {Number} quantity: Number of units. 10 characters max.
	     * @param {String} price: Unit price for this item 10 characters max.
	     * May be negative for "coupon" etc
	     * @param {String} currency: ISO standard currency code.
	     * @param {String} sku: The stock keeping unit for this item. 50 characters max (optional)
	     */
	    function PayPalItem(name, quantity, price, currency, sku) {
	        this.name = name;
	        this.quantity = quantity;
	        this.price = price;
	        this.currency = currency;
	        this.sku = sku;
	    }
	    return PayPalItem;
	}());
	exports.PayPalItem = PayPalItem;
	/**
	 * @private
	 */
	var PayPalPaymentDetails = (function () {
	    /**
	     * The PayPalPaymentDetails class defines optional amount details.
	     * @param {String} subtotal: Sub-total (amount) of items being paid for. 10 characters max with support for 2 decimal places.
	     * @param {String} shipping: Amount charged for shipping. 10 characters max with support for 2 decimal places.
	     * @param {String} tax: Amount charged for tax. 10 characters max with support for 2 decimal places.
	     */
	    function PayPalPaymentDetails(subtotal, shipping, tax) {
	        this.subtotal = subtotal;
	        this.shipping = shipping;
	        this.tax = tax;
	    }
	    return PayPalPaymentDetails;
	}());
	exports.PayPalPaymentDetails = PayPalPaymentDetails;
	/**
	 * @private
	 */
	var PayPalConfiguration = (function () {
	    /**
	     * You use a PayPalConfiguration object to configure many aspects of how the SDK behaves.
	     * see defaults for options available
	     */
	    function PayPalConfiguration(options) {
	        var defaults = {
	            defaultUserEmail: null,
	            defaultUserPhoneCountryCode: null,
	            defaultUserPhoneNumber: null,
	            merchantName: null,
	            merchantPrivacyPolicyURL: null,
	            merchantUserAgreementURL: null,
	            acceptCreditCards: true,
	            payPalShippingAddressOption: 0,
	            rememberUser: true,
	            languageOrLocale: null,
	            disableBlurWhenBackgrounding: false,
	            presentingInPopover: false,
	            forceDefaultsInSandbox: false,
	            sandboxUserPassword: null,
	            sandboxUserPin: null
	        };
	        if (options && typeof options === 'object') {
	            for (var i in options) {
	                if (defaults.hasOwnProperty(i)) {
	                    defaults[i] = options[i];
	                }
	            }
	        }
	        return defaults;
	    }
	    return PayPalConfiguration;
	}());
	exports.PayPalConfiguration = PayPalConfiguration;
	/**
	 * @private
	 */
	var PayPalShippingAddress = (function () {
	    /**
	     * See the documentation of the individual properties for more detail.
	     * @param {String} recipientName: Name of the recipient at this address. 50 characters max.
	     * @param {String} line1: Line 1 of the address (e.g., Number, street, etc). 100 characters max.
	     * @param {String} line2: Line 2 of the address (e.g., Suite, apt #, etc). 100 characters max. Optional.
	     * @param {String} city: City name. 50 characters max.
	     * @param {String} state: 2-letter code for US states, and the equivalent for other countries. 100 characters max. Required in certain countries.
	     * @param {String} postalCode: ZIP code or equivalent is usually required for countries that have them. 20 characters max. Required in certain countries.
	     * @param {String} countryCode: 2-letter country code. 2 characters max.
	     */
	    function PayPalShippingAddress(recipientName, line1, line2, city, state, postalCode, countryCode) {
	        this.recipientName = recipientName;
	        this.line1 = line1;
	        this.line2 = line2;
	        this.city = city;
	        this.state = state;
	        this.postalCode = postalCode;
	        this.countryCode = countryCode;
	    }
	    return PayPalShippingAddress;
	}());
	exports.PayPalShippingAddress = PayPalShippingAddress;
	//# sourceMappingURL=pay-pal.js.map

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name PhotoLibrary
	 * @description
	 * The PhotoLibrary plugin allows access to photos from device by url. So you can use plain img tag to display photos and their thumbnails, and different 3rd party libraries as well.
	 * Saving photos and videos to the library is also supported.
	 * cdvphotolibrary urls should be trusted by Angular. See plugin homepage to learn how.
	 *
	 * @usage
	 * ```
	 * import { PhotoLibrary } from 'ionic-native';
	 *
	 * PhotoLibrary.requestAuthorization().then(() => {
	 *   PhotoLibrary.getLibrary().subscribe({
	 *     next: library => {
	 *       library.forEach(function(libraryItem) {
	 *         console.log(libraryItem.id);          // ID of the photo
	 *         console.log(libraryItem.photoURL);    // Cross-platform access to photo
	 *         console.log(libraryItem.thumbnailURL);// Cross-platform access to thumbnail
	 *         console.log(libraryItem.fileName);
	 *         console.log(libraryItem.width);
	 *         console.log(libraryItem.height);
	 *         console.log(libraryItem.creationDate);
	 *         console.log(libraryItem.latitude);
	 *         console.log(libraryItem.longitude);
	 *         console.log(libraryItem.albumIds);    // array of ids of appropriate AlbumItem, only of includeAlbumsData was used
	 *       });
	 *     },
	 *     error: err => {},
	 *     complete: () => { console.log("could not get photos"); }
	 *   });
	 * })
	 * .catch(err => console.log("permissions weren't granted"));
	 *
	 * ```
	 */
	var PhotoLibrary = (function () {
	    function PhotoLibrary() {
	    }
	    /**
	     * Retrieves library items. Library item contains photo metadata like width and height, as well as photoURL and thumbnailURL.
	     * @param options {GetLibraryOptions} Optional, like thumbnail size and chunks settings.
	     * @return {Observable<LibraryItem[]>} Returns library items. If appropriate option was set, will be returned by chunks.
	     */
	    PhotoLibrary.getLibrary = function (options) { return; };
	    /**
	     * Asks user permission to access photo library.
	     * @param options {RequestAuthorizationOptions} Optional, like whether only read access needed or read/write.
	     * @return { Promise<void>} Returns a promise that resolves when permissions are granted, and fails when not.
	     */
	    PhotoLibrary.requestAuthorization = function (options) { return; };
	    /**
	     * Returns list of photo albums on device.
	     * @return {Promise<AlbumItem[]>} Resolves to list of albums.
	     */
	    PhotoLibrary.getAlbums = function () { return; };
	    /**
	     * Provides means to request URL of thumbnail, with specified size or quality.
	     * @param photo {string | LibraryItem} Id of photo, or LibraryItem.
	     * @param options {GetThumbnailOptions} Options, like thumbnail size or quality.
	     * @return {Promise<string>} Resolves to URL of cdvphotolibrary schema.
	     */
	    PhotoLibrary.getThumbnailURL = function (photo, options) { return; };
	    /**
	     * Provides means to request photo URL by id.
	     * @param photo {string | LibraryItem} Id or LibraryItem.
	     * @param options {GetPhotoOptions} Optional options.
	     * @return {Promise<string>} Resolves to URL of cdvphotolibrary schema.
	     */
	    PhotoLibrary.getPhotoURL = function (photo, options) { return; };
	    /**
	     * Returns thumbnail as Blob.
	     * @param photo {string | LibraryItem} Id or LibraryItem.
	     * @param options {GetThumbnailOptions} Options, like thumbnail size or quality.
	     * @return {Promise<Blob>} Resolves requested thumbnail as blob.
	     */
	    PhotoLibrary.getThumbnail = function (photo, options) { return; };
	    /**
	     * Returns photo as Blob.
	     * @param photo {string | LibraryItem} Id or LibraryItem.
	     * @param options {GetPhotoOptions} Optional options.
	     * @return {Promise<Blob>} Resolves requested photo as blob.
	     */
	    PhotoLibrary.getPhoto = function (photo, options) { return; };
	    /**
	     * Saves image to specified album. Album will be created if not exists.
	     * LibraryItem that represents saved image is returned.
	     * @param url {string} URL of a file, or DataURL.
	     * @param album {AlbumItem | string} Name of an album or AlbumItem object.
	     * @param options {GetThumbnailOptions} Options, like thumbnail size for resulting LibraryItem.
	     * @return {Promise<LibraryItem>} Resolves to LibraryItem that represents saved image.
	     */
	    PhotoLibrary.saveImage = function (url, album, options) { return; };
	    /**
	     * Saves video to specified album. Album will be created if not exists.
	     * @param url {string} URL of a file, or DataURL.
	     * @param album {AlbumItem | string} Name of an album or AlbumItem object.
	     * @return {Promise<void>} Resolves when save operation completes.
	     */
	    PhotoLibrary.saveVideo = function (url, album) { return; };
	    __decorate([
	        plugin_1.CordovaFiniteObservable({
	            callbackOrder: 'reverse',
	            resultFinalPredicate: function (result) { return result.isLastChunk; },
	            resultTransform: function (result) { return result.library; },
	        })
	    ], PhotoLibrary, "getLibrary", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse',
	        })
	    ], PhotoLibrary, "requestAuthorization", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse',
	        })
	    ], PhotoLibrary, "getAlbums", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], PhotoLibrary, "getThumbnailURL", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], PhotoLibrary, "getPhotoURL", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], PhotoLibrary, "getThumbnail", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], PhotoLibrary, "getPhoto", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 2,
	            errorIndex: 3
	        })
	    ], PhotoLibrary, "saveImage", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 2,
	            errorIndex: 3
	        })
	    ], PhotoLibrary, "saveVideo", null);
	    PhotoLibrary = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'PhotoLibrary',
	            plugin: 'cordova-plugin-photo-library',
	            pluginRef: 'cordova.plugins.photoLibrary',
	            repo: 'https://github.com/terikon/cordova-plugin-photo-library',
	            install: 'ionic plugin add cordova-plugin-photo-library --variable PHOTO_LIBRARY_USAGE_DESCRIPTION="To choose photos"'
	        })
	    ], PhotoLibrary);
	    return PhotoLibrary;
	}());
	exports.PhotoLibrary = PhotoLibrary;
	//# sourceMappingURL=photo-library.js.map

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Pin Dialog
	 * @description
	 *
	 * @usage
	 * ```typescript
	 * import { PinDialog } from 'ionic-native';
	 *
	 *
	 * PinDialog.prompt('Enter your PIN', 'Verify PIN', ['OK', 'Cancel'])
	 *   .then(
	 *     (result: any) => {
	 *       if (result.buttonIndex == 1) console.log('User clicked OK, value is: ', result.input1);
	 *       else if(result.buttonIndex == 2) console.log('User cancelled');
	 *     }
	 *   );
	 * ```
	 */
	var PinDialog = (function () {
	    function PinDialog() {
	    }
	    /**
	     * Show pin dialog
	     * @param {string} message Message to show the user
	     * @param {string} title Title of the dialog
	     * @param {string[]} buttons Buttons to show
	     * @returns {Promise<{ buttonIndex: number, input1: string }>}
	     */
	    PinDialog.prompt = function (message, title, buttons) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 4 // no error callback
	        })
	    ], PinDialog, "prompt", null);
	    PinDialog = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'PinDialog',
	            plugin: 'cordova-plugin-pin-dialog',
	            pluginRef: 'plugins.pinDialog',
	            repo: 'https://github.com/Paldom/PinDialog'
	        })
	    ], PinDialog);
	    return PinDialog;
	}());
	exports.PinDialog = PinDialog;
	//# sourceMappingURL=pin-dialog.js.map

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @beta
	 * @name Pinterest
	 * @description
	 * Cordova plugin for Pinterest
	 *
	 * @usage
	 * ```
	 * import { Pinterest, PinterestUser, PinterestPin, PinterestBoard } from 'ionic-native';
	 *
	 * const scopes = [
	 *   Pinterest.SCOPES.READ_PUBLIC,
	 *   Pinterest.SCOPES.WRITE_PUBLIC,
	 *   Pinterest.SCOPES.READ_RELATIONSHIPS,
	 *   Pinterest.SCOPES.WRITE_RELATIONSHIPS
	 * ];
	 *
	 * Pinterest.login(scopes)
	 *   .then(res => console.log('Logged in!', res))
	 *   .catch(err => console.error('Error loggin in', err));
	 *
	 * Pinterest.getMyPins()
	 *   .then((pins: Array<PinterestPin>) => console.log(pins))
	 *   .catch(err => console.error(err));
	 *
	 * Pinterest.getMe()
	 *   .then((user: PinterestUser) => console.log(user));
	 *
	 * Pinterest.getMyBoards()
	 *   .then((boards: Array<PinterestBoard>) => console.log(boards));
	 *
	 * ```
	 * @interfaces
	 * PinterestUser
	 * PinterestBoard
	 * PinterestPin
	 */
	var Pinterest = (function () {
	    function Pinterest() {
	    }
	    /**
	     * Logs the user in using their Pinterest account.
	     * @param scopes {Array<string>} Array of scopes that you need access to. You can use Pinterest.SCOPES constant for convenience.
	     * @returns {Promise<any>} The response object will contain the user's profile data, as well as the access token (if you need to use it elsewhere, example: send it to your server and perform actions on behalf of the user).
	     */
	    Pinterest.login = function (scopes) { return; };
	    /**
	     * Gets the authenticated user's profile
	     * @param fields {string} Fields to retrieve, separated by commas. Defaults to all available fields.
	     * @returns {Promise<PinterestUser>} Returns a promise that resolves with the user's object
	     */
	    Pinterest.getMe = function (fields) { return; };
	    /**
	     *
	     * @param fields {string} Optional fields separated by comma
	     * @param limit {number} Optional limit, defaults to 100, maximum is 100.
	     * @returns {Promise<Array<PinterestPin>>}
	     */
	    Pinterest.getMyPins = function (fields, limit) { return; };
	    /**
	     *
	     * @param fields {string} Optional fields separated by comma
	     * @param limit {number} Optional limit, defaults to 100, maximum is 100.
	     * @returns {Promise<Array<PinterestBoard>>}
	     */
	    Pinterest.getMyBoards = function (fields, limit) { return; };
	    /**
	     * Get the authenticated user's likes.
	     * @param fields {string} Optional fields separated by comma
	     * @param limit {number} Optional limit, defaults to 100, maximum is 100.
	     * @returns {Promise<Array<PinterestPin>>}
	     */
	    Pinterest.getMyLikes = function (fields, limit) { return; };
	    /**
	     * Get the authenticated user's followers.
	     * @param fields {string} Optional fields separated by comma
	     * @param limit {number} Optional limit, defaults to 100, maximum is 100.
	     * @returns {Promise<Array<PinterestUser>>}
	     */
	    Pinterest.getMyFollowers = function (fields, limit) { return; };
	    /**
	     * Get the authenticated user's followed boards.
	     * @param fields {string} Optional fields separated by comma
	     * @param limit {number} Optional limit, defaults to 100, maximum is 100.
	     * @returns {Promise<Array<PinterestBoard>>}
	     */
	    Pinterest.getMyFollowedBoards = function (fields, limit) { return; };
	    /**
	     * Get the authenticated user's followed interests.
	     * @param fields {string} Optional fields separated by comma
	     * @param limit {number} Optional limit, defaults to 100, maximum is 100.
	     * @returns {Promise<any>}
	     */
	    Pinterest.getMyFollowedInterests = function (fields, limit) { return; };
	    /**
	     * Get a user's profile.
	     * @param username
	     * @param fields
	     * @returns {Promise<PinterestUser>}
	     */
	    Pinterest.getUser = function (username, fields) { return; };
	    /**
	     * Get a board's data.
	     * @param boardId
	     * @param fields
	     * @returns {Promise<PinterestBoard>}
	     */
	    Pinterest.getBoard = function (boardId, fields) { return; };
	    /**
	     * Get Pins of a specific board.
	     * @param boardId {string} The ID of the board
	     * @param fields {string} Optional fields separated by comma
	     * @param limit {number} Optional limit, defaults to 100, maximum is 100.
	     * @returns {Promise<Array<PinterestPin>>}
	     */
	    Pinterest.getBoardPins = function (boardId, fields, limit) { return; };
	    /**
	     * Delete a board.
	     * @param boardId {string} The ID of the board
	     * @returns {Promise<PinterestUser>}
	     */
	    Pinterest.deleteBoard = function (boardId) { return; };
	    /**
	     * Create a new board for the authenticated user.
	     * @param name {string} Name of the board
	     * @param desc {string} Optional description of the board
	     * @returns {Promise<PinterestBoard>}
	     */
	    Pinterest.createBoard = function (name, desc) { return; };
	    /**
	     * Get a Pin by ID.
	     * @param pinId {string} The ID of the Pin
	     * @param fields {string} Optional fields separated by comma
	     * @returns {Promise<PinterestPin>}
	     */
	    Pinterest.getPin = function (pinId, fields) { return; };
	    /**
	     * Deletes a pin
	     * @param pinId {string} The ID of the pin
	     * @returns {Promise<any>}
	     */
	    Pinterest.deletePin = function (pinId) { return; };
	    /**
	     * Creates a Pin
	     * @param note {string} Note/Description of the pin
	     * @param boardId {string} Board ID to put the Pin under
	     * @param imageUrl {string} URL of the image to share
	     * @param link {string} Optional link to share
	     * @returns {Promise<PinterestPin>}
	     */
	    Pinterest.createPin = function (note, boardId, imageUrl, link) { return; };
	    __decorate([
	        plugin_1.CordovaProperty
	    ], Pinterest.prototype, "SCOPES", void 0);
	    __decorate([
	        plugin_1.Cordova()
	    ], Pinterest, "login", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Pinterest, "getMe", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Pinterest, "getMyPins", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Pinterest, "getMyBoards", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Pinterest, "getMyLikes", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Pinterest, "getMyFollowers", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Pinterest, "getMyFollowedBoards", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], Pinterest, "getMyFollowedInterests", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], Pinterest, "getUser", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], Pinterest, "getBoard", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], Pinterest, "getBoardPins", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Pinterest, "deleteBoard", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 2,
	            errorIndex: 3
	        })
	    ], Pinterest, "createBoard", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], Pinterest, "getPin", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Pinterest, "deletePin", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 4,
	            errorIndex: 5
	        })
	    ], Pinterest, "createPin", null);
	    Pinterest = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Pinterest',
	            plugin: 'cordova-plugin-pinterest',
	            pluginRef: 'cordova.plugins.Pinterest',
	            repo: 'https://github.com/zyramedia/cordova-plugin-pinterest',
	            install: 'ionic plugin add cordova-plugin-pinterest --variable APP_ID=YOUR_APP_ID',
	            platforms: ['Android', 'iOS']
	        })
	    ], Pinterest);
	    return Pinterest;
	}());
	exports.Pinterest = Pinterest;
	//# sourceMappingURL=pinterest.js.map

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name PowerManagement
	 * @description
	 * The PowerManagement plugin offers access to the devices power-management functionality.
	 * It should be used for applications which keep running for a long time without any user interaction.
	 *
	 * @usage
	 * ```
	 * import {PowerManagement} from 'ionic-native';
	 *
	 * PowerManagement.acquire()
	 *   .then(onSuccess)
	 *   .catch(onError);
	 *
	 * ```
	 */
	var PowerManagement = (function () {
	    function PowerManagement() {
	    }
	    /**
	     * Acquire a wakelock by calling this.
	     * @returns {Promise<any>}
	     */
	    PowerManagement.acquire = function () { return; };
	    /**
	     * This acquires a partial wakelock, allowing the screen to be dimmed.
	     * @returns {Promise<any>}
	     */
	    PowerManagement.dim = function () { return; };
	    /**
	     * Release the wakelock. It's important to do this when you're finished with the wakelock, to avoid unnecessary battery drain.
	     * @returns {Promise<any>}
	     */
	    PowerManagement.release = function () { return; };
	    /**
	     * By default, the plugin will automatically release a wakelock when your app is paused (e.g. when the screen is turned off, or the user switches to another app).
	     * It will reacquire the wakelock upon app resume. If you would prefer to disable this behaviour, you can use this function.
	     * @param set {boolean}
	     * @returns {Promise<any>}
	     */
	    PowerManagement.setReleaseOnPause = function (set) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], PowerManagement, "acquire", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], PowerManagement, "dim", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], PowerManagement, "release", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], PowerManagement, "setReleaseOnPause", null);
	    PowerManagement = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'PowerManagement',
	            plugin: 'cordova-plugin-powermanagement-orig',
	            pluginRef: 'powerManagement',
	            repo: 'https://github.com/Viras-/cordova-plugin-powermanagement'
	        })
	    ], PowerManagement);
	    return PowerManagement;
	}());
	exports.PowerManagement = PowerManagement;
	//# sourceMappingURL=power-management.js.map

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Printer
	 * @description Prints documents or HTML rendered content
	 * @usage
	 * ```typescript
	 * import {Printer, PrintOptions} from 'ionic-native';
	 *
	 * Printer.isAvailable().then(onSuccess, onError);
	 *
	 * let options: PrintOptions = {
	 *      name: 'MyDocument',
	 *      printerId: 'printer007',
	 *      duplex: true,
	 *      landscape: true,
	 *      grayscale: true
	 *    };
	 *
	 * Printer.print(content, options).then(onSuccess, onError);
	 * ```
	 * @interfaces
	 * PrintOptions
	 */
	var Printer = (function () {
	    function Printer() {
	    }
	    /**
	     * Checks whether to device is capable of printing.
	     * @returns {Promise<boolean>}
	     */
	    Printer.isAvailable = function () { return; };
	    /**
	     * Sends content to the printer.
	     * @param content {string | HTMLElement} The content to print. Can be a URL or an HTML string. If a HTML DOM Object is provided, its innerHtml property value will be used.
	     * @param options {PrintOptions} optional. The options to pass to the printer
	     * @returns {Promise<any>}
	     */
	    Printer.print = function (content, options) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Printer, "isAvailable", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Printer, "print", null);
	    Printer = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Printer',
	            plugin: 'de.appplant.cordova.plugin.printer',
	            pluginRef: 'cordova.plugins.printer',
	            repo: 'https://github.com/katzer/cordova-plugin-printer.git',
	            platforms: ['Android', 'iOS']
	        })
	    ], Printer);
	    return Printer;
	}());
	exports.Printer = Printer;
	//# sourceMappingURL=printer.js.map

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Push
	 * @description
	 * Register and receive push notifications.
	 *
	 * Requires Cordova plugin: `phonegap-plugin-push`. For more info, please see the [Push plugin docs](https://github.com/phonegap/phonegap-plugin-push).
	 *
	 * For TypeScript users, see the [Push plugin docs about using TypeScript for custom notifications](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/TYPESCRIPT.md).
	 *
	 * @usage
	 * ```typescript
	 * import { Push } from 'ionic-native';
	 * ```
	 */
	var Push = (function () {
	    function Push() {
	    }
	    /**
	     * Initialize the plugin on the native side.
	     *
	     * ```
	     * var push = Push.init({
	     *    android: {
	     *        senderID: '12345679'
	     *    },
	     *    ios: {
	     *        alert: 'true',
	     *        badge: true,
	     *        sound: 'false'
	     *    },
	     *    windows: {}
	     * });
	     * ```
	     *
	     * @param {PushOptions} options  The Push [options](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/API.md#parameters).
	     * @returns {PushNotification}  Returns a new [PushNotification](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/API.md#pushonevent-callback) object.
	     */
	    Push.init = function (options) { return; };
	    /**
	     * Check whether the push notification permission has been granted.
	     * @return {Promise<{isEnabled: boolean}>} Returns a Promise that resolves with an object with one property: isEnabled, a boolean that indicates if permission has been granted.
	     */
	    Push.hasPermission = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], Push, "init", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Push, "hasPermission", null);
	    Push = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Push',
	            plugin: 'phonegap-plugin-push',
	            pluginRef: 'PushNotification',
	            repo: 'https://github.com/phonegap/phonegap-plugin-push',
	            install: 'ionic plugin add phonegap-plugin-push --variable SENDER_ID=XXXXXXXXX'
	        })
	    ], Push);
	    return Push;
	}());
	exports.Push = Push;
	//# sourceMappingURL=push.js.map

/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @beta
	 * @name Rollbar
	 * @description
	 * This plugin adds Rollbar App monitoring to your application
	 *
	 * @usage
	 * ```
	 * import { Rollbar } from 'ionic-native';
	 *
	 * Rollbar.init();
	 *
	 * ```
	 */
	var Rollbar = (function () {
	    function Rollbar() {
	    }
	    /**
	     * This function initializes the monitoring of your application
	     * @return {Promise<any>} Returns a promise that resolves when the plugin successfully initializes
	     */
	    Rollbar.init = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Rollbar, "init", null);
	    Rollbar = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Rollbar',
	            plugin: 'resgrid-cordova-plugins-rollbar',
	            pluginRef: 'Rollbar',
	            repo: 'https://github.com/Resgrid/cordova-plugins-rollbar',
	            platforms: ['Android', 'iOS'],
	            install: 'ionic plugin add resgrid-cordova-plugins-rollbar --variable ROLLBAR_ACCESS_TOKEN="YOUR_ROLLBAR_ACCEESS_TOKEN" --variable ROLLBAR_ENVIRONMENT="ROLLBAR_ENVIRONMENT"'
	        })
	    ], Rollbar);
	    return Rollbar;
	}());
	exports.Rollbar = Rollbar;
	//# sourceMappingURL=rollbar.js.map

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name SafariViewController
	 * @description
	 * @usage
	 * ```
	 * import { SafariViewController } from 'ionic-native';
	 *
	 *
	 * SafariViewController.isAvailable()
	 *   .then(
	 *     (available: boolean) => {
	 *       if(available){
	 *
	 *         SafariViewController.show({
	 *           url: 'http://ionic.io',
	 *           hidden: false,
	 *           animated: false,
	 *           transition: 'curl',
	 *           enterReaderModeIfAvailable: true,
	 *           tintColor: '#ff0000'
	 *         })
	 *         .then(
	 *           (result: any) => {
	 *             if(result.event === 'opened') console.log('Opened');
	 *             else if(result.event === 'loaded') console.log('Loaded');
	 *             else if(result.event === 'closed') console.log('Closed');
	 *           },
	 *           (error: any) => console.error(error)
	 *         );
	 *
	 *       } else {
	 *         // use fallback browser, example InAppBrowser
	 *       }
	 *     }
	 *   );
	 * ```
	 * @interfaces
	 * SafariViewControllerOptions
	 */
	var SafariViewController = (function () {
	    function SafariViewController() {
	    }
	    /**
	     * Checks if SafariViewController is available
	     * @returns {Promise<boolean>}
	     */
	    SafariViewController.isAvailable = function () { return; };
	    /**
	     * Shows Safari View Controller
	     * @param options {SafariViewControllerOptions} optional
	     * @returns {Promise<any>}
	     */
	    SafariViewController.show = function (options) { return; };
	    /**
	     * Hides Safari View Controller
	     */
	    SafariViewController.hide = function () { return; };
	    /**
	     * Tries to connect to the  Chrome's custom tabs service. you must call this method before calling any of the other methods listed below.
	     * @returns {Promise<any>}
	     */
	    SafariViewController.connectToService = function () { return; };
	    /**
	     * Call this method whenever there's a chance the user will open an external url.
	     * @returns {Promise<any>}
	     */
	    SafariViewController.warmUp = function () { return; };
	    /**
	     * For even better performance optimization, call this methods if there's more than a 50% chance the user will open a certain URL.
	     * @param url{string}
	     * @returns {Promise<any>}
	     */
	    SafariViewController.mayLaunchUrl = function (url) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], SafariViewController, "isAvailable", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], SafariViewController, "show", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], SafariViewController, "hide", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], SafariViewController, "connectToService", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], SafariViewController, "warmUp", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], SafariViewController, "mayLaunchUrl", null);
	    SafariViewController = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'SafariViewController',
	            plugin: 'cordova-plugin-safariviewcontroller',
	            pluginRef: 'SafariViewController',
	            platforms: ['iOS', 'Android'],
	            repo: 'https://github.com/EddyVerbruggen/cordova-plugin-safariviewcontroller'
	        })
	    ], SafariViewController);
	    return SafariViewController;
	}());
	exports.SafariViewController = SafariViewController;
	//# sourceMappingURL=safari-view-controller.js.map

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Screenshot
	 * @description Captures a screen shot
	 * @usage
	 * ```typescript
	 * import {Screenshot} from 'ionic-native';
	 *
	 * // Take a screenshot and save to file
	 * Screenshot.save('jpg', 80, 'myscreenshot.jpg').then(onSuccess, onError);
	 *
	 * // Take a screenshot and get temporary file URI
	 * Screenshot.URI(80).then(onSuccess, onError);
	 * ```
	 */
	var Screenshot = (function () {
	    function Screenshot() {
	    }
	    /**
	     *  Takes screenshot and saves the image
	     *
	     * @param {string} format. Format can take the value of either 'jpg' or 'png'
	     * On ios, only 'jpg' format is supported
	     * @param {number} quality. Determines the quality of the screenshot.
	     *        Default quality is set to 100.
	     * @param {string} filename. Name of the file as stored on the storage
	     * @returns {Promise<any>}
	     */
	    Screenshot.save = function (format, quality, filename) {
	        return new Promise(function (resolve, reject) {
	            navigator.screenshot.save(function (error, result) {
	                if (error) {
	                    reject(error);
	                }
	                else {
	                    resolve(result);
	                }
	            }, format, quality, filename);
	        });
	    };
	    /**
	     *  Takes screenshot and returns the image as an URI
	     *
	     * @param {number} quality. Determines the quality of the screenshot.
	     *        Default quality is set to 100.
	     * @returns {Promise<any>}
	     */
	    Screenshot.URI = function (quality) {
	        return new Promise(function (resolve, reject) {
	            navigator.screenshot.URI(function (error, result) {
	                if (error) {
	                    reject(error);
	                }
	                else {
	                    resolve(result);
	                }
	            }, quality);
	        });
	    };
	    Screenshot = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Screenshot',
	            plugin: 'https://github.com/gitawego/cordova-screenshot.git',
	            pluginRef: 'navigator.screenshot',
	            repo: 'https://github.com/gitawego/cordova-screenshot.git'
	        })
	    ], Screenshot);
	    return Screenshot;
	}());
	exports.Screenshot = Screenshot;
	//# sourceMappingURL=screenshot.js.map

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Secure Storage
	 * @description
	 * This plugin gets, sets and removes key,value pairs from a device's secure storage.
	 *
	 * Requires Cordova plugin: `cordova-plugin-secure-storage`. For more info, please see the [Cordova Secure Storage docs](https://github.com/Crypho/cordova-plugin-secure-storage).
	 *
	 * @usage
	 *
	 * ```typescript
	 * import { SecureStorage } from 'ionic-native';
	 *
	 * let secureStorage: SecureStorage = new SecureStorage();
	 * secureStorage.create('my_store_name')
	 *  .then(
	 *    () => console.log('Storage is ready!'),
	 *    error => console.log(error)
	 * );
	 *
	 * secureStorage.get('myitem')
	 *  .then(
	 *    data => console.log(data),
	 *    error => console.log(error)
	 * );
	 *
	 * secureStorage.set('myitem', 'myvalue')
	 *  .then(
	 *    data => console.log(data),
	 *    error => console.log(error)
	 * );
	 *
	 * secureStorage.remove('myitem')
	 * .then(
	 *    data => console.log(data),
	 *    error => console.log(error)
	 * );
	 * ```
	 */
	var SecureStorage = (function () {
	    function SecureStorage() {
	    }
	    /**
	     * Creates a namespaced storage.
	     * @param store {string}
	     * @returns {Promise<any>}
	     */
	    SecureStorage.prototype.create = function (store) {
	        var _this = this;
	        return new Promise(function (res, rej) {
	            _this._objectInstance = new cordova.plugins.SecureStorage(res, rej, store);
	        });
	    };
	    /**
	     * Gets a stored item
	     * @param reference {string}
	     * @returns {Promise<any>}
	     */
	    SecureStorage.prototype.get = function (reference) { return; };
	    /**
	     * Stores a value
	     * @param reference {string}
	     * @param value {string}
	     * @returns {Promise<any>}
	     */
	    SecureStorage.prototype.set = function (reference, value) { return; };
	    /**
	     * Removes a single stored item
	     * @param reference {string}
	     * @returns {Promise<any>}
	     */
	    SecureStorage.prototype.remove = function (reference) { return; };
	    __decorate([
	        plugin_1.CordovaInstance({
	            callbackOrder: 'reverse'
	        })
	    ], SecureStorage.prototype, "get", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            callbackOrder: 'reverse'
	        })
	    ], SecureStorage.prototype, "set", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            callbackOrder: 'reverse'
	        })
	    ], SecureStorage.prototype, "remove", null);
	    SecureStorage = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'SecureStorage',
	            plugin: 'cordova-plugin-secure-storage',
	            pluginRef: 'plugins.securestorage',
	            repo: 'https://github.com/Crypho/cordova-plugin-secure-storage',
	            platforms: ['Android', 'iOS', 'Windows Phone', 'Browser']
	        })
	    ], SecureStorage);
	    return SecureStorage;
	}());
	exports.SecureStorage = SecureStorage;
	//# sourceMappingURL=securestorage.js.map

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Serial
	 * @description
	 * This plugin provides functions for working with Serial connections
	 *
	 * @usage
	 *
	 * ```
	 * import { Serial } from 'ionic-native';
	 *
	 * Serial.requestPermission().then(() => {
	 *   Serial.open({
	 *     baudRate: 9800
	 *   }).then(() => {
	 *     console.log('Serial connection opened');
	 *   });
	 * }).catch((error: any) => console.log(error));
	 *
	 * ```
	 */
	var Serial = (function () {
	    function Serial() {
	    }
	    /**
	     * Request permission to connect to a serial device
	     *
	     * @param options {SerialPermissionOptions} Options used to request serial permissions for an unknown device
	     * @return {Promise<any>} Returns a promise that resolves when permissions are granted
	     */
	    Serial.requestPermission = function (options) { return; };
	    /**
	     * Open connection to a serial device
	     *
	     * @param options {SerialOpenOptions} Options used to open serial connection
	     * @return {Promise<any>} Returns a promise that resolves when the serial connection is opened
	     */
	    Serial.open = function (options) { return; };
	    /**
	     * Write to a serial connection
	     *
	     * @param data {any} data to write to the serial connection
	     * @return {Promise<any>} Returns a promise that resolves when the write is complete
	     */
	    Serial.write = function (data) { return; };
	    /**
	     * Write hex to a serial connection
	     *
	     * @param data {any} data to write to the serial connection
	     * @return {Promise<any>} Returns a promise that resolves when the write is complete
	     */
	    Serial.writeHex = function (data) { return; };
	    /**
	     * Read from a serial connection
	     *
	     * @return {Promise<any>} Returns a promise that resolves with data read from the serial connection
	     */
	    Serial.read = function () { return; };
	    /**
	     * Watch the incoming data from the serial connection. Clear the watch by unsubscribing from the observable
	     *
	     * @returns {Observable<any>} Observable returns an observable that you can subscribe to
	     */
	    Serial.registerReadCallback = function () { return; };
	    /**
	     * Close the serial connection
	     *
	     * @return {Promise<any>} Returns a promise that resolves when the serial connection is closed
	     */
	    Serial.close = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], Serial, "requestPermission", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Serial, "open", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Serial, "write", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Serial, "writeHex", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Serial, "read", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true
	        })
	    ], Serial, "registerReadCallback", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Serial, "close", null);
	    Serial = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Serial',
	            plugin: 'cordovarduino',
	            pluginRef: 'serial',
	            repo: 'https://github.com/xseignard/cordovarduino',
	            platforms: ['Android']
	        })
	    ], Serial);
	    return Serial;
	}());
	exports.Serial = Serial;
	//# sourceMappingURL=serial.js.map

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Shake
	 * @description Handles shake gesture
	 * @usage
	 * ```typescript
	 * import {Shake} from 'ionic-native';
	 *
	 * let watch = Shake.startWatch(60).subscribe(() => {
	 *   // do something
	 *   });
	 *
	 * watch.unsubscribe();
	 * ```
	 */
	var Shake = (function () {
	    function Shake() {
	    }
	    /**
	     * Watch for shake gesture
	     * @param sensitivity {number} Optional sensitivity parameter. Defaults to 40
	     * @returns {Observable<any>}
	     */
	    Shake.startWatch = function (sensitivity) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'stopWatch',
	            successIndex: 0,
	            errorIndex: 2
	        })
	    ], Shake, "startWatch", null);
	    Shake = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Shake',
	            plugin: 'cordova-plugin-shake',
	            pluginRef: 'shake',
	            repo: 'https://github.com/leecrossley/cordova-plugin-shake'
	        })
	    ], Shake);
	    return Shake;
	}());
	exports.Shake = Shake;
	//# sourceMappingURL=shake.js.map

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Sim
	 * @description
	 * Gets info from the Sim card like the carrier name, mcc, mnc and country code and other system dependent info.
	 *
	 * Requires Cordova plugin: `cordova-plugin-sim`. For more info, please see the [Cordova Sim docs](https://github.com/pbakondy/cordova-plugin-sim).
	 *
	 * @usage
	 * ```typescript
	 * import { Sim } from 'ionic-native';
	 *
	 *
	 * Sim.getSimInfo().then(
	 *   (info) => console.log('Sim info: ', info),
	 *   (err) => console.log('Unable to get sim info: ', err)
	 * );
	 *
	 * Sim.hasReadPermission().then(
	 *   (info) => console.log('Has permission: ', info)
	 * );
	 *
	 * Sim.requestReadPermission().then(
	 *   () => console.log('Permission granted'),
	 *   () => console.log('Permission denied')
	 * );
	 * ```
	 */
	var Sim = (function () {
	    function Sim() {
	    }
	    /**
	     * Returns info from the SIM card.
	     * @returns {Promise<any>}
	     */
	    Sim.getSimInfo = function () { return; };
	    /**
	     * Check permission
	     * @returns {Promise<any>}
	     */
	    Sim.hasReadPermission = function () { return; };
	    /**
	     * Request permission
	     * @returns {Promise<any>}
	     */
	    Sim.requestReadPermission = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Sim, "getSimInfo", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], Sim, "hasReadPermission", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], Sim, "requestReadPermission", null);
	    Sim = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Sim',
	            plugin: 'cordova-plugin-sim',
	            pluginRef: 'plugins.sim',
	            repo: 'https://github.com/pbakondy/cordova-plugin-sim',
	            platforms: ['Android', 'iOS', 'Windows Phone']
	        })
	    ], Sim);
	    return Sim;
	}());
	exports.Sim = Sim;
	//# sourceMappingURL=sim.js.map

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name SMS
	 * @description
	 *
	 * Requires Cordova plugin: cordova-plugin-sms. For more info, please see the [SMS plugin docs](https://github.com/cordova-sms/cordova-sms-plugin).
	 *
	 * @usage
	 * ```typescript
	 * import { SMS } from 'ionic-native';
	 *
	 *
	 * // Send a text message using default options
	 * SMS.send('416123456', 'Hello world!');
	 * ```
	 * @interfaces
	 * SmsOptions
	 * SmsOptionsAndroid
	 */
	var SMS = (function () {
	    function SMS() {
	    }
	    /**
	     * Sends sms to a number
	     * @param phoneNumber {string|Array<string>} Phone number
	     * @param message {string} Message
	     * @param options {SmsOptions} Options
	     * @returns {Promise<any>} Resolves promise when the SMS has been sent
	     */
	    SMS.send = function (phoneNumber, message, options) { return; };
	    /**
	     * This function lets you know if the app has permission to send SMS
	     * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if we have permission
	     */
	    SMS.hasPermission = function () { return; };
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 3,
	            errorIndex: 4
	        })
	    ], SMS, "send", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['Android']
	        })
	    ], SMS, "hasPermission", null);
	    SMS = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'SMS',
	            plugin: 'cordova-sms-plugin',
	            pluginRef: 'sms',
	            repo: 'https://github.com/cordova-sms/cordova-sms-plugin',
	            platforms: ['Android', 'iOS', 'Windows Phone 8']
	        })
	    ], SMS);
	    return SMS;
	}());
	exports.SMS = SMS;
	//# sourceMappingURL=sms.js.map

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Social Sharing
	 * @description
	 * Share text, files, images, and links via social networks, sms, and email.
	 * @usage
	 * ```typescript
	 * import { SocialSharing } from 'ionic-native';
	 *
	 * // Check if sharing via email is supported
	 * SocialSharing.canShareViaEmail().then(() => {
	 *   // Sharing via email is possible
	 * }).catch(() => {
	 *   // Sharing via email is not possible
	 * });
	 *
	 * // Share via email
	 * SocialSharing.shareViaEmail('Body', 'Subject', 'recipient@example.org').then(() => {
	 *   // Success!
	 * }).catch(() => {
	 *   // Error!
	 * });
	 * ```
	 */
	var SocialSharing = (function () {
	    function SocialSharing() {
	    }
	    /**
	     * Shares using the share sheet
	     * @param message {string} The message you would like to share.
	     * @param subject {string} The subject
	     * @param file {string|string[]} URL(s) to file(s) or image(s), local path(s) to file(s) or image(s), or base64 data of an image. Only the first file/image will be used on Windows Phone.
	     * @param url {string} A URL to share
	     * @returns {Promise<any>}
	     */
	    SocialSharing.share = function (message, subject, file, url) { return; };
	    /**
	     * Shares using the share sheet with additional options and returns a result object or an error message (requires plugin version 5.1.0+)
	     * @param options {object} The options object with the message, subject, files, url and chooserTitle properties.
	     * @returns {Promise<any>}
	     */
	    SocialSharing.shareWithOptions = function (options) { return; };
	    /**
	     * Checks if you can share via a specific app.
	     * @param appName {string} App name or package name. Examples: instagram or com.apple.social.facebook
	     * @param message {string}
	     * @param subject {string}
	     * @param image {string}
	     * @param url {string}
	     * @returns {Promise<any>}
	     */
	    SocialSharing.canShareVia = function (appName, message, subject, image, url) { return; };
	    /**
	     * Shares directly to Twitter
	     * @param message {string}
	     * @param image {string}
	     * @param url {string}
	     * @returns {Promise<any>}
	     */
	    SocialSharing.shareViaTwitter = function (message, image, url) { return; };
	    /**
	     * Shares directly to Facebook
	     * @param message {string}
	     * @param image {string}
	     * @param url {string}
	     * @returns {Promise<any>}
	     */
	    SocialSharing.shareViaFacebook = function (message, image, url) { return; };
	    /**
	     * Shares directly to Facebook with a paste message hint
	     * @param message {string}
	     * @param image {string}
	     * @param url {string}
	     * @param pasteMessageHint {string}
	     * @returns {Promise<any>}
	     */
	    SocialSharing.shareViaFacebookWithPasteMessageHint = function (message, image, url, pasteMessageHint) { return; };
	    /**
	     * Shares directly to Instagram
	     * @param message {string}
	     * @param image {string}
	     * @returns {Promise<any>}
	     */
	    SocialSharing.shareViaInstagram = function (message, image) { return; };
	    /**
	     * Shares directly to WhatsApp
	     * @param message {string}
	     * @param image {string}
	     * @param url {string}
	     * @returns {Promise<any>}
	     */
	    SocialSharing.shareViaWhatsApp = function (message, image, url) { return; };
	    /**
	     * Shares directly to a WhatsApp Contact
	     * @param receiver {string} Pass phone number on Android, and Addressbook ID (abid) on iOS
	     * @param message {string} Message to send
	     * @param image {string} Image to send (does not work on iOS
	     * @param url {string} Link to send
	     * @returns {Promise<any>}
	     */
	    SocialSharing.shareViaWhatsAppToReceiver = function (receiver, message, image, url) { return; };
	    /**
	     * Share via SMS
	     * @param messge {string} message to send
	     * @param phoneNumber {string} Number or multiple numbers seperated by commas
	     * @returns {Promise<any>}
	     */
	    SocialSharing.shareViaSMS = function (messge, phoneNumber) { return; };
	    /**
	     * Checks if you can share via email
	     * @returns {Promise<any>}
	     */
	    SocialSharing.canShareViaEmail = function () { return; };
	    /**
	     * Share via Email
	     * @param message {string}
	     * @param subject {string}
	     * @param to {string[]}
	     * @param cc {string[]} Optional
	     * @param bcc {string[]} Optional
	     * @param files {string|string[]} Optional URL or local path to file(s) to attach
	     * @returns {Promise<any>}
	     */
	    SocialSharing.shareViaEmail = function (message, subject, to, cc, bcc, files) { return; };
	    /**
	     * Share via AppName
	     * @param appName {string} App name or package name. Examples: instagram or com.apple.social.facebook
	     * @param message {string}
	     * @param subject {string}
	     * @param image {string}
	     * @param url {string}
	     * @returns {Promise<any>}
	     */
	    SocialSharing.shareVia = function (appName, message, subject, image, url) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], SocialSharing, "share", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS', 'Android']
	        })
	    ], SocialSharing, "shareWithOptions", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 5,
	            errorIndex: 6,
	            platforms: ['iOS', 'Android']
	        })
	    ], SocialSharing, "canShareVia", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 3,
	            errorIndex: 4,
	            platforms: ['iOS', 'Android']
	        })
	    ], SocialSharing, "shareViaTwitter", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 3,
	            errorIndex: 4,
	            platforms: ['iOS', 'Android']
	        })
	    ], SocialSharing, "shareViaFacebook", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 4,
	            errorIndex: 5,
	            platforms: ['iOS', 'Android']
	        })
	    ], SocialSharing, "shareViaFacebookWithPasteMessageHint", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS', 'Android']
	        })
	    ], SocialSharing, "shareViaInstagram", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 3,
	            errorIndex: 4,
	            platforms: ['iOS', 'Android']
	        })
	    ], SocialSharing, "shareViaWhatsApp", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 4,
	            errorIndex: 5,
	            platforms: ['iOS', 'Android']
	        })
	    ], SocialSharing, "shareViaWhatsAppToReceiver", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS', 'Android']
	        })
	    ], SocialSharing, "shareViaSMS", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS', 'Android']
	        })
	    ], SocialSharing, "canShareViaEmail", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS', 'Android'],
	            successIndex: 6,
	            errorIndex: 7
	        })
	    ], SocialSharing, "shareViaEmail", null);
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 5,
	            errorIndex: 6,
	            platforms: ['iOS', 'Android']
	        })
	    ], SocialSharing, "shareVia", null);
	    SocialSharing = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'SocialSharing',
	            plugin: 'cordova-plugin-x-socialsharing',
	            pluginRef: 'plugins.socialsharing',
	            repo: 'https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin',
	            platforms: ['iOS', 'Android', 'Windows Phone']
	        })
	    ], SocialSharing);
	    return SocialSharing;
	}());
	exports.SocialSharing = SocialSharing;
	//# sourceMappingURL=socialsharing.js.map

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @beta
	 * @name SpeechRecognition
	 * @description
	 * This plugin does speech recognition using cloud services
	 *
	 * @usage
	 * ```
	 * import { SpeechRecognition } from 'ionic-native';
	 *
	 * // Check feature available
	 * SpeechRecognition.isRecognitionAvailable()
	 *   .then((available: boolean) => console.log(available))
	 *
	 * // Start the recognition process
	 * SpeechRecognition.startListening(options)
	 *   .subscribe(
	 *     (matches: Array<string>) => console.log(matches),
	 *     (onerror) => console.log('error:', onerror)
	 *   )
	 *
	 * // Stop the recognition process (iOS only)
	 * SpeechRecognition.stopListening()
	 *
	 * // Get the list of supported languages
	 * SpeechRecognition.getSupportedLanguages()
	 *   .then(
	 *     (languages: Array<string>) => console.log(languages),
	 *     (error) => console.log(error)
	 *   )
	 *
	 * // Check permission
	 * SpeechRecognition.hasPermission()
	 *   .then((hasPermission: boolean) => console.log(hasPermission))
	 *
	 * // Request permissions
	 * SpeechRecognition.requestPermission()
	 *   .then(
	 *     () => console.log('Granted'),
	 *     () => console.log('Denied')
	 *   )
	 *
	 * ```
	 */
	var SpeechRecognition = (function () {
	    function SpeechRecognition() {
	    }
	    /**
	     * Check feature available
	     * @return {Promise<boolean>}
	     */
	    SpeechRecognition.isRecognitionAvailable = function () {
	        return;
	    };
	    /**
	     * Start the recognition process
	     * @return {Promise< Array<string> >} list of recognized terms
	     */
	    SpeechRecognition.startListening = function (options) {
	        return;
	    };
	    /**
	     * Stop the recognition process
	     */
	    SpeechRecognition.stopListening = function () {
	        return;
	    };
	    /**
	     * Get the list of supported languages
	     * @return {Promise< Array<string> >} list of languages
	     */
	    SpeechRecognition.getSupportedLanguages = function () {
	        return;
	    };
	    /**
	     * Check permission
	     * @return {Promise<boolean>} has permission
	     */
	    SpeechRecognition.hasPermission = function () {
	        return;
	    };
	    /**
	     * Request permissions
	     * @return {Promise<void>}
	     */
	    SpeechRecognition.requestPermission = function () {
	        return;
	    };
	    __decorate([
	        plugin_1.Cordova()
	    ], SpeechRecognition, "isRecognitionAvailable", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse',
	            observable: true,
	        })
	    ], SpeechRecognition, "startListening", null);
	    __decorate([
	        plugin_1.Cordova({
	            platforms: ['iOS']
	        })
	    ], SpeechRecognition, "stopListening", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], SpeechRecognition, "getSupportedLanguages", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], SpeechRecognition, "hasPermission", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], SpeechRecognition, "requestPermission", null);
	    SpeechRecognition = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'SpeechRecognition',
	            plugin: 'cordova-plugin-speechrecognition',
	            pluginRef: 'plugins.speechRecognition',
	            repo: 'https://github.com/pbakondy/cordova-plugin-speechrecognition',
	            platforms: ['Android', 'iOS']
	        })
	    ], SpeechRecognition);
	    return SpeechRecognition;
	}());
	exports.SpeechRecognition = SpeechRecognition;
	//# sourceMappingURL=speech-recognition.js.map

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Spinner Dialog
	 * @description
	 * @usage
	 * ```typescript
	 * import { SpinnerDialog } from 'ionic-native';
	 *
	 *
	 * SpinnerDialog.show();
	 *
	 * SpinnerDialog.hide();
	 * ```
	 * @interfaces
	 * SpinnerDialogIOSOptions
	 */
	var SpinnerDialog = (function () {
	    function SpinnerDialog() {
	    }
	    /**
	     * Shows the spinner dialog
	     * @param title {string} Spinner title (shows on Android only)
	     * @param message {string} Spinner message
	     * @param cancelCallback {boolean|function} Set to true to set spinner not cancelable. Or provide a function to call when the user cancels the spinner.
	     * @param iOSOptions {object} Options for iOS only
	     */
	    SpinnerDialog.show = function (title, message, cancelCallback, iOSOptions) { };
	    /**
	     * Hides the spinner dialog if visible
	     */
	    SpinnerDialog.hide = function () { };
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], SpinnerDialog, "show", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], SpinnerDialog, "hide", null);
	    SpinnerDialog = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'SpinnerDialog',
	            plugin: 'cordova-plugin-spinner-dialog',
	            pluginRef: 'window.plugins.spinnerDialog',
	            repo: 'https://github.com/Paldom/SpinnerDialog',
	            platforms: ['Android', 'iOS', 'Windows Phone 8']
	        })
	    ], SpinnerDialog);
	    return SpinnerDialog;
	}());
	exports.SpinnerDialog = SpinnerDialog;
	//# sourceMappingURL=spinnerdialog.js.map

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Splashscreen
	 * @description This plugin displays and hides a splash screen during application launch. The methods below allows showing and hiding the splashscreen after the app has loaded.
	 * @usage
	 * ```typescript
	 * import { Splashscreen } from 'ionic-native';
	 *
	 *
	 * Splashscreen.show();
	 *
	 * Splashscreen.hide();
	 * ```
	 */
	var Splashscreen = (function () {
	    function Splashscreen() {
	    }
	    /**
	     * Shows the splashscreen
	     */
	    Splashscreen.show = function () { };
	    /**
	     * Hides the splashscreen
	     */
	    Splashscreen.hide = function () { };
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], Splashscreen, "show", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], Splashscreen, "hide", null);
	    Splashscreen = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Splashscreen',
	            plugin: 'cordova-plugin-splashscreen',
	            pluginRef: 'navigator.splashscreen',
	            repo: 'https://github.com/apache/cordova-plugin-splashscreen'
	        })
	    ], Splashscreen);
	    return Splashscreen;
	}());
	exports.Splashscreen = Splashscreen;
	//# sourceMappingURL=splashscreen.js.map

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name SQLite
	 *
	 * @description
	 * Access SQLite databases on the device.
	 *
	 * @usage
	 *
	 * ```typescript
	 * import { SQLite } from 'ionic-native';
	 *
	 * // OPTION A: Use static constructor
	 * SQLite.openDatabase({
	 *   name: 'data.db',
	 *   location: 'default'
	 * })
	 *   .then((db: SQLite) => {
	 *
	 *     db.executeSql('create table danceMoves(name VARCHAR(32))', []).then(() => {}).catch(() => {});
	 *
	 *   })
	 *   .catch(error => console.error('Error opening database', error));
	 *
	 *
	 * // OPTION B: Create a new instance of SQLite
	 * let db = new SQLite();
	 * db.openDatabase({
	 *   name: 'data.db',
	 *   location: 'default' // the location field is required
	 * }).then(() => {
	 *   db.executeSql('create table danceMoves(name VARCHAR(32))', []).then(() => {
	 *
	 *   }, (err) => {
	 *     console.error('Unable to execute sql: ', err);
	 *   });
	 * }, (err) => {
	 *   console.error('Unable to open database: ', err);
	 * });
	 * ```
	 *
	 */
	var SQLite = (function () {
	    function SQLite() {
	    }
	    SQLite.openDatabase = function (config) {
	        return new SQLite().openDatabase(config);
	    };
	    /**
	     * Open or create a SQLite database file.
	     *
	     * See the plugin docs for an explanation of all options: https://github.com/litehelpers/Cordova-sqlite-storage#opening-a-database
	     *
	     * @param config the config for opening the database.
	     */
	    SQLite.prototype.openDatabase = function (config) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (typeof sqlitePlugin !== 'undefined') {
	                sqlitePlugin.openDatabase(config, function (db) {
	                    _this._objectInstance = db;
	                    resolve(db);
	                }, function (error) {
	                    console.warn(error);
	                    reject(error);
	                });
	            }
	            else {
	                plugin_1.pluginWarn({
	                    pluginName: 'SQLite',
	                    plugin: 'cordova-sqlite-storage'
	                });
	            }
	        });
	    };
	    SQLite.prototype.addTransaction = function (transaction) { };
	    /**
	     * @param fn {any}
	     * @returns {Promise<any>}
	     */
	    SQLite.prototype.transaction = function (fn) { return; };
	    /**
	     * @param fn {any}
	     * @returns {Promise<any>}
	     */
	    SQLite.prototype.readTransaction = function (fn) { return; };
	    SQLite.prototype.startNextTransaction = function () { };
	    /**
	     * @returns {Promise<any>}
	     */
	    SQLite.prototype.close = function () { return; };
	    SQLite.prototype.start = function () { };
	    /**
	     * Execute SQL on the opened database. Note, you must call `openDatabase` first, and
	     * ensure it resolved and successfully opened the database.
	     */
	    SQLite.prototype.executeSql = function (statement, params) { return; };
	    /**
	     * @param sql
	     * @param values
	     * @returns {Promise<any>}
	     */
	    SQLite.prototype.addStatement = function (sql, values) { return; };
	    /**
	     * @param sqlStatements {any}
	     * @returns {Promise<any>}
	     */
	    SQLite.prototype.sqlBatch = function (sqlStatements) { return; };
	    SQLite.prototype.abortallPendingTransactions = function () { };
	    /**
	     @param handler
	     @param response
	     */
	    SQLite.prototype.handleStatementSuccess = function (handler, response) { };
	    /**
	     * @param handler
	     * @param response
	     */
	    SQLite.prototype.handleStatementFailure = function (handler, response) { };
	    SQLite.prototype.run = function () { };
	    /**
	     * @param txFailure
	     */
	    SQLite.prototype.abort = function (txFailure) { };
	    SQLite.prototype.finish = function () { };
	    /**
	     * @param sqlerror
	     */
	    SQLite.prototype.abortFromQ = function (sqlerror) { };
	    /**
	     * @returns {Promise<any>}
	     */
	    SQLite.echoTest = function () { return; };
	    /**
	     * @param first
	     * @returns {Promise<any>}
	     */
	    SQLite.deleteDatabase = function (first) { return; };
	    __decorate([
	        plugin_1.InstanceProperty
	    ], SQLite.prototype, "databaseFeatures", void 0);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], SQLite.prototype, "addTransaction", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            successIndex: 2,
	            errorIndex: 1
	        })
	    ], SQLite.prototype, "transaction", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], SQLite.prototype, "readTransaction", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], SQLite.prototype, "startNextTransaction", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], SQLite.prototype, "close", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], SQLite.prototype, "start", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], SQLite.prototype, "executeSql", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], SQLite.prototype, "addStatement", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], SQLite.prototype, "sqlBatch", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], SQLite.prototype, "abortallPendingTransactions", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], SQLite.prototype, "handleStatementSuccess", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], SQLite.prototype, "handleStatementFailure", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], SQLite.prototype, "run", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], SQLite.prototype, "abort", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], SQLite.prototype, "finish", null);
	    __decorate([
	        plugin_1.CordovaInstance({
	            sync: true
	        })
	    ], SQLite.prototype, "abortFromQ", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], SQLite, "echoTest", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], SQLite, "deleteDatabase", null);
	    SQLite = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'SQLite',
	            pluginRef: 'sqlitePlugin',
	            plugin: 'cordova-sqlite-storage',
	            repo: 'https://github.com/litehelpers/Cordova-sqlite-storage'
	        })
	    ], SQLite);
	    return SQLite;
	}());
	exports.SQLite = SQLite;
	//# sourceMappingURL=sqlite.js.map

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Status Bar
	 * @description
	 * Manage the appearance of the native status bar.
	 *
	 * Requires Cordova plugin: `cordova-plugin-statusbar`. For more info, please see the [StatusBar plugin docs](https://github.com/apache/cordova-plugin-statusbar).
	 *
	 * @usage
	 * ```typescript
	 * import { StatusBar } from 'ionic-native';
	 *
	 *
	 * StatusBar.overlaysWebView(true); // let status bar overlay webview
	 *
	 * StatusBar.backgroundColorByHexString('#ffffff'); // set status bar to white
	 * ```
	 *
	 */
	var StatusBar = (function () {
	    function StatusBar() {
	    }
	    /**
	     * Set whether the status bar overlays the main app view. The default
	     * is true.
	     *
	     * @param {boolean} doesOverlay  Whether the status bar overlays the main app view.
	     */
	    StatusBar.overlaysWebView = function (doesOverlay) { };
	    ;
	    /**
	     * Use the default statusbar (dark text, for light backgrounds).
	     */
	    StatusBar.styleDefault = function () { };
	    ;
	    /**
	     * Use the lightContent statusbar (light text, for dark backgrounds).
	     */
	    StatusBar.styleLightContent = function () { };
	    ;
	    /**
	     * Use the blackTranslucent statusbar (light text, for dark backgrounds).
	     */
	    StatusBar.styleBlackTranslucent = function () { };
	    ;
	    /**
	     * Use the blackOpaque statusbar (light text, for dark backgrounds).
	     */
	    StatusBar.styleBlackOpaque = function () { };
	    ;
	    /**
	     * Set the status bar to a specific named color. Valid options:
	     * black, darkGray, lightGray, white, gray, red, green, blue, cyan, yellow, magenta, orange, purple, brown.
	     *
	     * iOS note: you must call StatusBar.overlaysWebView(false) to enable color changing.
	     *
	     * @param {string} colorName  The name of the color (from above)
	     */
	    StatusBar.backgroundColorByName = function (colorName) { };
	    ;
	    /**
	     * Set the status bar to a specific hex color (CSS shorthand supported!).
	     *
	     * iOS note: you must call StatusBar.overlaysWebView(false) to enable color changing.
	     *
	     * @param {string} hexString  The hex value of the color.
	     */
	    StatusBar.backgroundColorByHexString = function (hexString) { };
	    ;
	    /**
	     * Hide the StatusBar
	     */
	    StatusBar.hide = function () { };
	    ;
	    /**
	    * Show the StatusBar
	    */
	    StatusBar.show = function () { };
	    ;
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], StatusBar, "overlaysWebView", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], StatusBar, "styleDefault", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], StatusBar, "styleLightContent", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], StatusBar, "styleBlackTranslucent", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], StatusBar, "styleBlackOpaque", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], StatusBar, "backgroundColorByName", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], StatusBar, "backgroundColorByHexString", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], StatusBar, "hide", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], StatusBar, "show", null);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], StatusBar, "isVisible", void 0);
	    StatusBar = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'StatusBar',
	            plugin: 'cordova-plugin-statusbar',
	            pluginRef: 'StatusBar',
	            repo: 'https://github.com/apache/cordova-plugin-statusbar',
	            platforms: ['iOS', 'Android', 'Windows Phone 8', 'Windows 8', 'Windows 10']
	        })
	    ], StatusBar);
	    return StatusBar;
	}());
	exports.StatusBar = StatusBar;
	//# sourceMappingURL=statusbar.js.map

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Stepcounter
	 * @description
	 * Cordova plugin for using device's stepcounter on Android (API > 19)
	 *
	 * Use to
	 * - start and stop stepcounter service
	 * - read device's stepcounter data
	 *
	 * @usage
	 * ```
	 * import { Stepcounter } from 'ionic-native';
	 *
	 * let startingOffset = 0;
	 * Stepcounter.start(startingOffset).then(onSuccess => console.log('stepcounter-start success', onSuccess), onFailure => console.log('stepcounter-start error', onFailure));
	 *
	 * Stepcounter.getHistory().then(historyObj => console.log('stepcounter-history success', historyObj), onFailure => console.log('stepcounter-history error', onFailure));
	 *
	 * ```
	 */
	var Stepcounter = (function () {
	    function Stepcounter() {
	    }
	    /**
	     * Start the step counter
	     *
	     * @param startingOffset {number} will be added to the total steps counted in this session
	     * @returns {Promise<any | number>} Returns a Promise that resolves on success or rejects on failure
	     */
	    Stepcounter.start = function (startingOffset) { return; };
	    /**
	     * Stop the step counter
	     * @returns {Promise<any | number>} Returns a Promise that resolves on success with the amount of steps since the start command has been called, or rejects on failure
	     */
	    Stepcounter.stop = function () { return; };
	    /**
	     * Get the amount of steps for today (or -1 if it no data given)
	     * @returns {Promise<any | number>} Returns a Promise that resolves on success with the amount of steps today, or rejects on failure
	     */
	    Stepcounter.getTodayStepCount = function () { return; };
	    /**
	     * Get the amount of steps since the start command has been called
	     * @returns {Promise<any | number>} Returns a Promise that resolves on success with the amount of steps since the start command has been called, or rejects on failure
	     */
	    Stepcounter.getStepCount = function () { return; };
	    /**
	     * Returns true/false if Android device is running >API level 19 && has the step counter API available
	     * @returns {Promise<any | boolean>} Returns a Promise that resolves on success, or rejects on failure
	     */
	    Stepcounter.deviceCanCountSteps = function () { return; };
	    /**
	     * Get the step history (JavaScript object)
	     * @returns {Promise<any>} Returns a Promise that resolves on success, or rejects on failure
	     */
	    Stepcounter.getHistory = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Stepcounter, "start", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Stepcounter, "stop", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Stepcounter, "getTodayStepCount", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Stepcounter, "getStepCount", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Stepcounter, "deviceCanCountSteps", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Stepcounter, "getHistory", null);
	    Stepcounter = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Stepcounter',
	            plugin: 'https://github.com/Slidee/cordova-plugin-stepcounter',
	            pluginRef: 'stepcounter',
	            repo: 'https://github.com/Slidee/cordova-plugin-stepcounter',
	            platforms: ['Android']
	        })
	    ], Stepcounter);
	    return Stepcounter;
	}());
	exports.Stepcounter = Stepcounter;
	//# sourceMappingURL=stepcounter.js.map

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name StreamingMedia
	 * @description
	 * This plugin allows you to stream audio and video in a fullscreen, native player on iOS and Android.
	 *
	 * @usage
	 * ```
	 * import {StreamingMedia, StreamingVideoOptions} from 'ionic-native';
	 *
	 * let options: StreamingVideoOptions = {
	 *   successCallback: () => { console.log('Video played') },
	 *   errorCallback: (e) => { console.log('Error streaming') },
	 *   orientation: 'landscape'
	 * };
	 *
	 * StreamingMedia.playVideo('https://path/to/video/stream', options);
	 *
	 * ```
	 * @interfaces
	 * StreamingVideoOptions
	 * StreamingAudioOptions
	 */
	var StreamingMedia = (function () {
	    function StreamingMedia() {
	    }
	    /**
	     * Streams a video
	     * @param videoUrl {string} The URL of the video
	     * @param options {StreamingVideoOptions} Options
	     */
	    StreamingMedia.playVideo = function (videoUrl, options) { };
	    /**
	     * Streams an audio
	     * @param audioUrl {string} The URL of the audio stream
	     * @param options {StreamingAudioOptions} Options
	     */
	    StreamingMedia.playAudio = function (audioUrl, options) { };
	    /**
	     * Stops streaming audio
	     */
	    StreamingMedia.stopAudio = function () { };
	    /**
	     * Pauses streaming audio
	     */
	    StreamingMedia.pauseAudio = function () { };
	    /**
	     * Resumes streaming audio
	     */
	    StreamingMedia.resumeAudio = function () { };
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], StreamingMedia, "playVideo", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], StreamingMedia, "playAudio", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], StreamingMedia, "stopAudio", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true, platforms: ['iOS'] })
	    ], StreamingMedia, "pauseAudio", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true, platforms: ['iOS'] })
	    ], StreamingMedia, "resumeAudio", null);
	    StreamingMedia = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'StreamingMedia',
	            plugin: 'cordova-plugin-streaming-media',
	            pluginRef: 'plugins.streamingMedia',
	            repo: 'https://github.com/nchutchind/cordova-plugin-streaming-media',
	            platforms: ['Android', 'iOS']
	        })
	    ], StreamingMedia);
	    return StreamingMedia;
	}());
	exports.StreamingMedia = StreamingMedia;
	//# sourceMappingURL=streaming-media.js.map

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Stripe
	 * @description
	 * A plugin that allows you to use Stripe's Native SDKs for Android and iOS.
	 *
	 * @usage
	 * ```
	 * import { Stripe } from 'ionic-native';
	 *
	 * Stripe.setPublishableKey('my_publishable_key');
	 *
	 * let card = {
	 *  number: '4242424242424242',
	 *  expMonth: 12,
	 *  expYear: 2020,
	 *  cvc: '220'
	 * };
	 *
	 * Stripe.createCardToken(card)
	 *    .then(token => console.log(token))
	 *    .catch(error => console.error(error));
	 *
	 * ```
	 *
	 * @interfaces
	 * StripeCardTokenParams
	 */
	var Stripe = (function () {
	    function Stripe() {
	    }
	    /**
	     * Set publishable key
	     * @param publishableKey {string} Publishable key
	     * @return {Promise<void>}
	     */
	    Stripe.setPublishableKey = function (publishableKey) { return; };
	    /**
	     * Create Credit Card Token
	     * @param params {StripeCardTokenParams} Credit card information
	     * @return {Promise<string>} returns a promise that resolves with the token, or reject with an error
	     */
	    Stripe.createCardToken = function (params) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], Stripe, "setPublishableKey", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Stripe, "createCardToken", null);
	    Stripe = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Stripe',
	            plugin: 'cordova-plugin-stripe',
	            pluginRef: 'cordova.plugins.stripe',
	            repo: 'https://github.com/zyramedia/cordova-plugin-stripe'
	        })
	    ], Stripe);
	    return Stripe;
	}());
	exports.Stripe = Stripe;
	//# sourceMappingURL=stripe.js.map

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	var Observable_1 = __webpack_require__(11);
	/**
	 * @name 3DTouch
	 * @description
	 * @usage
	 * Please do refer to the original plugin's repo for detailed usage. The usage example here might not be sufficient.
	 * ```
	 * import { ThreeDeeTouch } from 'ionic-native';
	 *
	 * // import for type completion on variables
	 * import { ThreeDeeTouchQuickAction, ThreeDeeTouchForceTouch } from 'ionic-native';
	 * ...
	 *
	 * ThreeDeeTouch.isAvailable().then(isAvailable => console.log("3D Touch available? " + isAvailable));
	 *
	 * ThreeDeeTouch.watchForceTouches()
	 *   .subscribe(
	 *     (data: ThreeDeeTouchForceTouch) => {
	 *       console.log("Force touch %" + data.force);
	 *       console.log("Force touch timestamp: " + data.timestamp);
	 *       console.log("Force touch x: " + data.x);
	 *       console.log("Force touch y: " + data.y);
	 *     }
	 *   );
	 *
	 *
	 * let actions: Array<ThreeDeeTouchQuickAction> = [
	 *   {
	 *     type: 'checkin',
	 *     title: 'Check in',
	 *     subtitle: 'Quickly check in',
	 *     iconType: 'Compose'
	 *   },
	 *   {
	 *     type: 'share',
	 *     title: 'Share',
	 *     subtitle: 'Share like you care',
	 *     iconType: 'Share'
	 *   },
	 *   {
	 *     type: 'search',
	 *     title: 'Search',
	 *     iconType: 'Search'
	 *   },
	 *   {
	 *     title: 'Show favorites',
	 *     iconTemplate: 'HeartTemplate'
	 *   }
	 * ];
	 * ThreeDeeTouch.configureQuickActions(actions);
	 *
	 * ThreeDeeTouch.onHomeIconPressed().subscribe(
	 *  (payload) => {
	 *    // returns an object that is the button you presed
	 *    console.log('Pressed the ${payload.title} button')
	 *    console.log(payload.type)
	 *
	 *  }
	 * )
	 * ```
	 * @interfaces
	 * ThreeDeeTouchQuickAction
	 * ThreeDeeTouchForceTouch
	 */
	var ThreeDeeTouch = (function () {
	    function ThreeDeeTouch() {
	    }
	    /**
	     * You need an iPhone 6S or some future tech to use the features of this plugin, so you can check at runtime if the user's device is supported.
	     * @returns {Promise<boolean>} returns a promise that resolves with a boolean that indicates whether the plugin is available or not
	     */
	    ThreeDeeTouch.isAvailable = function () { return; };
	    /**
	     * You can get a notification when the user force touches the webview. The plugin defines a Force Touch when at least 75% of the maximum force is applied to the screen. Your app will receive the x and y coordinates, so you have to figure out which UI element was touched.
	     * @returns {Observable<ThreeDeeTouchForceTouch>} Returns an observable that sends a `ThreeDeeTouchForceTouch` object
	     */
	    ThreeDeeTouch.watchForceTouches = function () { return; };
	    /**
	     * setup the 3D-touch actions, takes an array of objects with the following
	     * @param {string} type (optional) A type that can be used `onHomeIconPressed` callback
	     * @param {string} title Title for your action
	     * @param {string} subtitle (optional) A short description for your action
	     * @param {string} iconType (optional) Choose between Prohibit, Contact, Home, MarkLocation, Favorite, Love, Cloud, Invitation, Confirmation, Mail, Message, Date, Time, CapturePhoto, CaptureVideo, Task, TaskCompleted, Alarm, Bookmark, Shuffle, Audio, Update
	     * @param {string} iconTemplate (optional) Can be used to provide your own icon
	     */
	    ThreeDeeTouch.configureQuickActions = function (quickActions) { };
	    /**
	     * When a home icon is pressed, your app launches and this JS callback is invoked.
	     * @returns {Observable<any>} returns an observable that notifies you when he user presses on the home screen icon
	     */
	    ThreeDeeTouch.onHomeIconPressed = function () {
	        return new Observable_1.Observable(function (observer) {
	            if (window.ThreeDeeTouch) {
	                window.ThreeDeeTouch.onHomeIconPressed = observer.next.bind(observer);
	            }
	            else {
	                observer.error('3dTouch plugin is not available.');
	                observer.complete();
	            }
	        });
	    };
	    /**
	     * Enable Link Preview.
	     * UIWebView and WKWebView (the webviews powering Cordova apps) don't allow the fancy new link preview feature of iOS9.
	     */
	    ThreeDeeTouch.enableLinkPreview = function () { };
	    /**
	     * Disabled the link preview feature, if enabled.
	     */
	    ThreeDeeTouch.disableLinkPreview = function () { };
	    __decorate([
	        plugin_1.Cordova()
	    ], ThreeDeeTouch, "isAvailable", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true
	        })
	    ], ThreeDeeTouch, "watchForceTouches", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], ThreeDeeTouch, "configureQuickActions", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], ThreeDeeTouch, "enableLinkPreview", null);
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], ThreeDeeTouch, "disableLinkPreview", null);
	    ThreeDeeTouch = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'ThreeDeeTouch',
	            plugin: 'cordova-plugin-3dtouch',
	            pluginRef: 'ThreeDeeTouch',
	            repo: 'https://github.com/EddyVerbruggen/cordova-plugin-3dtouch',
	            platforms: ['iOS']
	        })
	    ], ThreeDeeTouch);
	    return ThreeDeeTouch;
	}());
	exports.ThreeDeeTouch = ThreeDeeTouch;
	//# sourceMappingURL=3dtouch.js.map

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Toast
	 * @description
	 * This plugin allows you to show a native Toast (a little text popup) on iOS, Android and WP8. It's great for showing a non intrusive native notification which is guaranteed always in the viewport of the browser.
	 *
	 * Requires Cordova plugin: `cordova-plugin-x-toast`. For more info, please see the [Toast plugin docs](https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin).
	 *
	 * @usage
	 * ```typescript
	 * import { Toast } from 'ionic-native';
	 *
	 *
	 * Toast.show("I'm a toast", '5000', 'center').subscribe(
	 *   toast => {
	 *     console.log(toast);
	 *   }
	 * );
	 * ```
	 * @interfaces
	 * ToastOptions
	 */
	var Toast = (function () {
	    function Toast() {
	    }
	    /**
	     * Show a native toast for the given duration at the specified position.
	     *
	     * @param {string} message  The message to display.
	     * @param {string} duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.
	     * @param {string} position  Where to position the toast, either 'top', 'center', or 'bottom'.
	     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
	     */
	    Toast.show = function (message, duration, position) { return; };
	    /**
	     * Manually hide any currently visible toast.
	     * @returns {Promise<any>} Returns a Promise that resolves on success.
	     */
	    Toast.hide = function () { return; };
	    /**
	     * Show a native toast with the given options.
	     *
	     * @param {Object} options  Options for showing a toast. Available options:
	     *   message  The message to display.
	     *   duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.
	     *   position  Where to position the toast, either 'top', 'center', or 'bottom'.
	     *   addPixelsY  Offset in pixels to move the toast up or down from its specified position.
	     *
	     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
	     */
	    Toast.showWithOptions = function (options) { return; };
	    /**
	     * Shorthand for `show(message, 'short', 'top')`.
	     * @param message {string}
	     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
	     */
	    Toast.showShortTop = function (message) { return; };
	    /**
	     * Shorthand for `show(message, 'short', 'center')`.
	     * @param message {string}
	     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
	     */
	    Toast.showShortCenter = function (message) { return; };
	    /**
	     * Shorthand for `show(message, 'short', 'bottom')`.
	     * @param message {string}
	     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
	     */
	    Toast.showShortBottom = function (message) { return; };
	    /**
	     * Shorthand for `show(message, 'long', 'top')`.
	     * @param message {string}
	     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
	     */
	    Toast.showLongTop = function (message) { return; };
	    /**
	     * Shorthand for `show(message, 'long', 'center')`.
	     * @param message {string}
	     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
	     */
	    Toast.showLongCenter = function (message) { return; };
	    /**
	     * Shorthand for `show(message, 'long', 'bottom')`.
	     * @param message {string}
	     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.
	     */
	    Toast.showLongBottom = function (message) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'hide'
	        })
	    ], Toast, "show", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], Toast, "hide", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'hide'
	        })
	    ], Toast, "showWithOptions", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'hide'
	        })
	    ], Toast, "showShortTop", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'hide'
	        })
	    ], Toast, "showShortCenter", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'hide'
	        })
	    ], Toast, "showShortBottom", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'hide'
	        })
	    ], Toast, "showLongTop", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'hide'
	        })
	    ], Toast, "showLongCenter", null);
	    __decorate([
	        plugin_1.Cordova({
	            observable: true,
	            clearFunction: 'hide'
	        })
	    ], Toast, "showLongBottom", null);
	    Toast = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Toast',
	            plugin: 'cordova-plugin-x-toast',
	            pluginRef: 'plugins.toast',
	            repo: 'https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin',
	            platforms: ['Android', 'iOS', 'Windows Phone 8']
	        })
	    ], Toast);
	    return Toast;
	}());
	exports.Toast = Toast;
	//# sourceMappingURL=toast.js.map

/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name TouchID
	 * @description
	 * Scan the fingerprint of a user with the TouchID sensor.
	 *
	 * Requires Cordova plugin: `cordova-plugin-touch-id`. For more info, please see the [TouchID plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-touch-id).
	 *
	 * @usage
	 * ### Import Touch ID Plugin into Project
	 * ```typescript
	 * import { TouchID } from 'ionic-native';
	 * ```
	 * ### Check for Touch ID Availability
	 * ```typescript
	 * TouchID.isAvailable()
	 *   .then(
	 *     res => console.log('TouchID is available!'),
	 *     err => console.error('TouchID is not available', err)
	 *   );
	 * ```
	 * ### Invoke Touch ID w/ Custom Message
	 *
	 * ```typescript
	 * TouchID.verifyFingerprint('Scan your fingerprint please')
	 *   .then(
	 *     res => console.log('Ok', res),
	 *     err => console.error('Error', err)
	 *   );
	 * ```
	 *
	 * ### Error Codes
	 *
	 * The plugin will reject for various reasons. Your app will most likely need to respond to the cases differently.
	 *
	 * Here is a list of some of the error codes:
	 *
	 *  -  `-1` - Fingerprint scan failed more than 3 times
	 *  -  `-2` or `-128` - User tapped the 'Cancel' button
	 *  -  `-3` - User tapped the 'Enter Passcode' or 'Enter Password' button
	 *  -  `-4` - The scan was cancelled by the system (Home button for example)
	 *  -  `-6` - TouchID is not Available
	 *  -  `-8` - TouchID is locked out from too many tries
	 */
	var TouchID = (function () {
	    function TouchID() {
	    }
	    /**
	     * Checks Whether TouchID is available or not.
	     *
	     * @returns {Promise<any>} Returns a Promise that resolves if yes, rejects if no.
	     */
	    TouchID.isAvailable = function () { return; };
	    /**
	     * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, brings up standard system passcode screen.
	     *
	     * @param {string} message  The message to display
	     * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).
	     */
	    TouchID.verifyFingerprint = function (message) { return; };
	    /**
	     * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).
	     *
	     * @param {string} message  The message to display
	     * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).
	     */
	    TouchID.verifyFingerprintWithCustomPasswordFallback = function (message) { return; };
	    /**
	     * Show TouchID dialog with custom 'Enter Password' message and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).
	     *
	     * @param {string} message  The message to display
	     * @param {string} enterPasswordLabel  Custom text for the 'Enter Password' button
	     * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).
	     */
	    TouchID.verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel = function (message, enterPasswordLabel) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], TouchID, "isAvailable", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], TouchID, "verifyFingerprint", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], TouchID, "verifyFingerprintWithCustomPasswordFallback", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], TouchID, "verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel", null);
	    TouchID = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'TouchID',
	            plugin: 'cordova-plugin-touch-id',
	            pluginRef: 'plugins.touchid',
	            repo: 'https://github.com/EddyVerbruggen/cordova-plugin-touch-id',
	            platforms: ['iOS']
	        })
	    ], TouchID);
	    return TouchID;
	}());
	exports.TouchID = TouchID;
	//# sourceMappingURL=touchid.js.map

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name TextToSpeech
	 * @description
	 * Text to Speech plugin
	 *
	 * @usage
	 * ```
	 * import {TextToSpeech} from 'ionic-native';
	 *
	 * TextToSpeech.speak('Hello World')
	 *   .then(() => console.log('Success'))
	 *   .catch((reason: any) => console.log(reason));
	 *
	 * ```
	 * @interfaces
	 * TTSOptions
	 */
	var TextToSpeech = (function () {
	    function TextToSpeech() {
	    }
	    /**
	     * This function speaks
	     * @param options {string | TTSOptions} Text to speak or TTSOptions
	     * @return {Promise<any>} Returns a promise that resolves when the speaking finishes
	     */
	    TextToSpeech.speak = function (options) {
	        return;
	    };
	    TextToSpeech.stop = function () {
	        return;
	    };
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 1,
	            errorIndex: 2
	        })
	    ], TextToSpeech, "speak", null);
	    TextToSpeech = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'TextToSpeech',
	            plugin: 'cordova-plugin-tts',
	            pluginRef: 'TTS',
	            repo: 'https://github.com/vilic/cordova-plugin-tts'
	        })
	    ], TextToSpeech);
	    return TextToSpeech;
	}());
	exports.TextToSpeech = TextToSpeech;
	//# sourceMappingURL=text-to-speech.js.map

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	var Observable_1 = __webpack_require__(11);
	/**
	 * @name ThemeableBrowser
	 * @description
	 * In-app browser that allows styling.
	 *
	 * @usage
	 * ```
	 * import { ThemeableBrowser } from 'ionic-native';
	 *
	 * // can add options from the original InAppBrowser in a JavaScript object form (not string)
	 * // This options object also takes additional parameters introduced by the ThemeableBrowser plugin
	 * // This example only shows the additional parameters for ThemeableBrowser
	 * // Note that that `image` and `imagePressed` values refer to resources that are stored in your app
	 * let options = {
	 *      statusbar: {
	 *          color: '#ffffffff'
	 *      },
	 *      toolbar: {
	 *          height: 44,
	 *          color: '#f0f0f0ff'
	 *      },
	 *      title: {
	 *          color: '#003264ff',
	 *          showPageTitle: true
	 *      },
	 *      backButton: {
	 *          image: 'back',
	 *          imagePressed: 'back_pressed',
	 *          align: 'left',
	 *          event: 'backPressed'
	 *      },
	 *      forwardButton: {
	 *          image: 'forward',
	 *          imagePressed: 'forward_pressed',
	 *          align: 'left',
	 *          event: 'forwardPressed'
	 *      },
	 *      closeButton: {
	 *          image: 'close',
	 *          imagePressed: 'close_pressed',
	 *          align: 'left',
	 *          event: 'closePressed'
	 *      },
	 *      customButtons: [
	 *          {
	 *              image: 'share',
	 *              imagePressed: 'share_pressed',
	 *              align: 'right',
	 *              event: 'sharePressed'
	 *          }
	 *      ],
	 *      menu: {
	 *          image: 'menu',
	 *          imagePressed: 'menu_pressed',
	 *          title: 'Test',
	 *          cancel: 'Cancel',
	 *          align: 'right',
	 *          items: [
	 *              {
	 *                  event: 'helloPressed',
	 *                  label: 'Hello World!'
	 *              },
	 *              {
	 *                  event: 'testPressed',
	 *                  label: 'Test!'
	 *              }
	 *          ]
	 *      },
	 *      backButtonCanClose: true
	 * };
	 *
	 * let browser = new ThemeableBrowser('https://ionic.io', '_blank', options);
	 *
	 * ```
	 * We suggest that you refer to the plugin's repository for additional information on usage that may not be covered here.
	 * @interfaces
	 * ThemeableBrowserButton
	 * ThemeableBrowserOptions
	 */
	var ThemeableBrowser = (function () {
	    function ThemeableBrowser(url, target, styleOptions) {
	        try {
	            this._objectInstance = cordova.ThemeableBrowser.open(url, target, styleOptions);
	        }
	        catch (e) {
	            window.open(url);
	            console.warn('Native: ThemeableBrowser is not installed or you are running on a browser. Falling back to window.open, all instance methods will NOT work.');
	        }
	    }
	    /**
	     * Displays an browser window that was opened hidden. Calling this has no effect
	     * if the browser was already visible.
	     */
	    ThemeableBrowser.prototype.show = function () { };
	    /**
	     * Closes the browser window.
	     */
	    ThemeableBrowser.prototype.close = function () { };
	    /**
	     * Reloads the current page
	     */
	    ThemeableBrowser.prototype.reload = function () { };
	    /**
	     * Injects JavaScript code into the browser window.
	     * @param script    Details of the script to run, specifying either a file or code key.
	     * @returns {Promise<any>}
	     */
	    ThemeableBrowser.prototype.executeScript = function (script) { return; };
	    /**
	     * Injects CSS into the browser window.
	     * @param css       Details of the script to run, specifying either a file or code key.
	     * @returns {Promise<any>}
	     */
	    ThemeableBrowser.prototype.insertCss = function (css) { return; };
	    /**
	     * A method that allows you to listen to events happening in the browser.
	     * Available events are: `ThemeableBrowserError`, `ThemeableBrowserWarning`, `critical`, `loadfail`, `unexpected`, `undefined`
	     * @param event Event name
	     * @returns {Observable<InAppBrowserEvent>} Returns back an observable that will listen to the event on subscribe, and will stop listening to the event on unsubscribe.
	     */
	    ThemeableBrowser.prototype.on = function (event) {
	        var _this = this;
	        return new Observable_1.Observable(function (observer) {
	            _this._objectInstance.addEventListener(event, observer.next.bind(observer));
	            return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };
	        });
	    };
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], ThemeableBrowser.prototype, "show", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], ThemeableBrowser.prototype, "close", null);
	    __decorate([
	        plugin_1.CordovaInstance({ sync: true })
	    ], ThemeableBrowser.prototype, "reload", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], ThemeableBrowser.prototype, "executeScript", null);
	    __decorate([
	        plugin_1.CordovaInstance()
	    ], ThemeableBrowser.prototype, "insertCss", null);
	    ThemeableBrowser = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'ThemeableBrowser',
	            plugin: 'cordova-plugin-themeablebrowser',
	            pluginRef: 'cordova.ThemeableBrowser',
	            repo: 'https://github.com/initialxy/cordova-plugin-themeablebrowser'
	        })
	    ], ThemeableBrowser);
	    return ThemeableBrowser;
	}());
	exports.ThemeableBrowser = ThemeableBrowser;
	//# sourceMappingURL=themeable-browser.js.map

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Twitter Connect
	 * @description
	 * Plugin to use Twitter Single Sign On
	 * Uses Twitter's Fabric SDK
	 * ```typescript
	 * import {TwitterConnect} from 'ionic-native';
	 *
	 * function onSuccess(response) {
	 *   console.log(response);
	 *
	 *   // Will console log something like:
	 *   // {
	 *   //   userName: 'myuser',
	 *   //   userId: '12358102',
	 *   //   secret: 'tokenSecret'
	 *   //   token: 'accessTokenHere'
	 *   // }
	 * }
	 *
	 * TwitterConnect.login().then(onSuccess, onError);
	 *
	 * TwitterConnect.logout().then(onLogoutSuccess, onLogoutError);
	 * ```
	 * @interfaces
	 * TwitterConnectResponse
	 */
	var TwitterConnect = (function () {
	    function TwitterConnect() {
	    }
	    /**
	     * Logs in
	     * @returns {Promise<TwitterConnectResponse>} returns a promise that resolves if logged in and rejects if failed to login
	     */
	    TwitterConnect.login = function () { return; };
	    /**
	     * Logs out
	     * @returns {Promise<any>} returns a promise that resolves if logged out and rejects if failed to logout
	     */
	    TwitterConnect.logout = function () { return; };
	    /**
	     * Returns user's profile information
	     * @returns {Promise<any>} returns a promise that resolves if user profile is successfully retrieved and rejects if request fails
	     */
	    TwitterConnect.showUser = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], TwitterConnect, "login", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], TwitterConnect, "logout", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], TwitterConnect, "showUser", null);
	    TwitterConnect = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'TwitterConnect',
	            plugin: 'twitter-connect-plugin',
	            pluginRef: 'TwitterConnect',
	            repo: 'https://github.com/ManifestWebDesign/twitter-connect-plugin',
	            install: 'ionic plugin add twitter-connect-plugin --variable FABRIC_KEY=fabric_API_key'
	        })
	    ], TwitterConnect);
	    return TwitterConnect;
	}());
	exports.TwitterConnect = TwitterConnect;
	//# sourceMappingURL=twitter-connect.js.map

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name UniqueDeviceID
	 * @description
	 * This plugin produces a unique, cross-install, app-specific device id.
	 *
	 * @usage
	 * ```
	 * import { UniqueDeviceID } from 'ionic-native';
	 *
	 * UniqueDeviceID.get()
	 *   .then((uuid: any) => console.log(uuid))
	 *   .catch((error: any) => console.log(error));
	 *
	 * ```
	 */
	var UniqueDeviceID = (function () {
	    function UniqueDeviceID() {
	    }
	    /**
	     * Gets a unique, cross-install, app-specific device id.
	     * @return {Promise<string>} Returns a promise that resolves when something happens
	     */
	    UniqueDeviceID.get = function () { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], UniqueDeviceID, "get", null);
	    UniqueDeviceID = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'UniqueDeviceID',
	            plugin: 'cordova-plugin-uniquedeviceid',
	            pluginRef: 'window.plugins.uniqueDeviceID',
	            repo: 'https://github.com/Paldom/UniqueDeviceID'
	        })
	    ], UniqueDeviceID);
	    return UniqueDeviceID;
	}());
	exports.UniqueDeviceID = UniqueDeviceID;
	//# sourceMappingURL=unique-device-id.js.map

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Vibration
	 * @description Vibrates the device
	 * @usage
	 * ```typescript
	 * import { Vibration } from 'ionic-native';
	 *
	 *
	 * // Vibrate the device for a second
	 * // Duration is ignored on iOS.
	 * Vibration.vibrate(1000);
	 *
	 * // Vibrate 2 seconds
	 * // Pause for 1 second
	 * // Vibrate for 2 seconds
	 * // Patterns work on Android and Windows only
	 * Vibration.vibrate([2000,1000,2000]);
	 *
	 * // Stop any current vibrations immediately
	 * // Works on Android and Windows only
	 * Vibration.vibrate(0);
	 * ```
	 */
	var Vibration = (function () {
	    function Vibration() {
	    }
	    /**
	     * Vibrates the device for given amount of time.
	     * @param time {number|Array<number>} Milliseconds to vibrate the device. If passed an array of numbers, it will define a vibration pattern. Pass 0 to stop any vibration immediately.
	     */
	    Vibration.vibrate = function (time) { };
	    __decorate([
	        plugin_1.Cordova({
	            sync: true
	        })
	    ], Vibration, "vibrate", null);
	    Vibration = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Vibration',
	            plugin: 'cordova-plugin-vibration',
	            pluginRef: 'navigator',
	            repo: 'https://github.com/apache/cordova-plugin-vibration',
	            platforms: ['Android', 'iOS', 'Windows 8.1 Phone', 'Windows 8.1', 'Windows 10']
	        })
	    ], Vibration);
	    return Vibration;
	}());
	exports.Vibration = Vibration;
	//# sourceMappingURL=vibration.js.map

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name VideoEditor
	 * @description Edit videos using native device APIs
	 *
	 * @usage
	 * ```
	 * import {VideoEditor} from 'ionic-native';
	 *
	 * VideoEditor.transcodeVideo({
	 *   fileUri: '/path/to/input.mov',
	 *   outputFileName: 'output.mp4',
	 *   outputFileType: VideoEditor.OutputFileType.MPEG4
	 * })
	 * .then((fileUri: string) => console.log('video transcode success', fileUri))
	 * .catch((error: any) => console.log('video transcode error', error));
	 *
	 * ```
	 * @interfaces
	 * TranscodeOptions
	 * TrimOptions
	 * CreateThumbnailOptions
	 * GetVideoInfoOptions
	 * VideoInfo
	 */
	var VideoEditor = (function () {
	    function VideoEditor() {
	    }
	    /**
	     * Transcode a video
	     * @param options {TranscodeOptions} Options
	     * @returns {Promise<string>} Returns a promise that resolves to the path of the transcoded video
	     */
	    VideoEditor.transcodeVideo = function (options) { return; };
	    /**
	     * Trim a video
	     * @param options {TrimOptions} Options
	     * @returns {Promise<string>} Returns a promise that resolves to the path of the trimmed video
	     */
	    VideoEditor.trim = function (options) { return; };
	    /**
	     * Create a JPEG thumbnail from a video
	     * @param options {CreateThumbnailOptions} Options
	     * @returns {Promise<string>} Returns a promise that resolves to the path to the jpeg image on the device
	     */
	    VideoEditor.createThumbnail = function (options) { return; };
	    /**
	     * Get info on a video (width, height, orientation, duration, size, & bitrate)
	     * @param options {GetVideoInfoOptions} Options
	     * @returns {Promise<VideoInfo>} Returns a promise that resolves to an object containing info on the video
	     */
	    VideoEditor.getVideoInfo = function (options) { return; };
	    VideoEditor.OptimizeForNetworkUse = {
	        NO: 0,
	        YES: 1
	    };
	    VideoEditor.OutputFileType = {
	        M4V: 0,
	        MPEG4: 1,
	        M4A: 2,
	        QUICK_TIME: 3
	    };
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], VideoEditor, "transcodeVideo", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse',
	            platforms: ['iOS']
	        })
	    ], VideoEditor, "trim", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], VideoEditor, "createThumbnail", null);
	    __decorate([
	        plugin_1.Cordova({
	            callbackOrder: 'reverse'
	        })
	    ], VideoEditor, "getVideoInfo", null);
	    VideoEditor = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'VideoEditor',
	            plugin: 'cordova-plugin-video-editor',
	            pluginRef: 'VideoEditor',
	            repo: 'https://github.com/jbavari/cordova-plugin-video-editor',
	            platforms: ['Android', 'iOS', 'Windows Phone 8']
	        })
	    ], VideoEditor);
	    return VideoEditor;
	}());
	exports.VideoEditor = VideoEditor;
	//# sourceMappingURL=video-editor.js.map

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name VideoPlayer
	 * @description
	 * A Codova plugin that simply allows you to immediately play a video in fullscreen mode.
	 *
	 * Requires Cordova plugin: `com.moust.cordova.videoplayer`. For more info, please see the [VideoPlayer plugin docs](https://github.com/moust/cordova-plugin-videoplayer).
	 *
	 * @usage
	 * ```typescript
	 * import { VideoPlayer } from 'ionic-native';
	 *
	 *
	 * // Playing a video.
	 * VideoPlayer.play("file:///android_asset/www/movie.mp4").then(() => {
	 *  console.log('video completed');
	 * }).catch(err => {
	 *  console.log(err);
	 * });
	 *
	 * ```
	 * @interfaces
	 * VideoOptions
	 */
	var VideoPlayer = (function () {
	    function VideoPlayer() {
	    }
	    /**
	     * Plays the video from the passed url.
	     * @param fileUrl {string} File url to the video.
	     * @param options {VideoOptions?} Optional video playback settings. See options above.
	     * @returns {Promise<any>} Resolves promise when the video was played successfully.
	     */
	    VideoPlayer.play = function (fileUrl, options) { return; };
	    /**
	     * Stops the video playback immediatly.
	     */
	    VideoPlayer.close = function () { };
	    __decorate([
	        plugin_1.Cordova()
	    ], VideoPlayer, "play", null);
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], VideoPlayer, "close", null);
	    VideoPlayer = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'VideoPlayer',
	            plugin: 'https://github.com/moust/cordova-plugin-videoplayer',
	            pluginRef: 'VideoPlayer',
	            repo: 'https://github.com/moust/cordova-plugin-videoplayer',
	            platforms: ['Android']
	        })
	    ], VideoPlayer);
	    return VideoPlayer;
	}());
	exports.VideoPlayer = VideoPlayer;
	//# sourceMappingURL=video-player.js.map

/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name WebIntent
	 * @description
	 * @usage
	 * For usage information please refer to the plugin's Github repo.
	 *
	 * ```typescript
	 * import {WebIntent} from 'ionic-native';
	 *
	 * WebIntent.startActivity(options).then(onSuccess, onError);
	 *
	 * ```
	 */
	var WebIntent = (function () {
	    function WebIntent() {
	    }
	    /**
	     * @param options {Object} { action: any, url: string, type?: string }
	     * @returns {Promise<any>}
	     */
	    WebIntent.startActivity = function (options) { return; };
	    /**
	     * @param extra {any}
	     * @returns {Promise<any>}
	     */
	    WebIntent.hasExtra = function (extra) { return; };
	    /**
	     * @param extra {any}
	     * @returns {Promise<any>}
	     */
	    WebIntent.getExtra = function (extra) { return; };
	    /**
	     * @returns {Promise<any>}
	     */
	    WebIntent.getUri = function () { return; };
	    ;
	    /**
	     * @returns {Promise<string>}
	     */
	    WebIntent.onNewIntent = function () { return; };
	    ;
	    /**
	     * @param options {Object} { action: string, extras?: { option: boolean } }
	     * @returns {Promise<any>}
	     */
	    WebIntent.sendBroadcast = function (options) { return; };
	    __decorate([
	        plugin_1.CordovaProperty
	    ], WebIntent, "ACTION_VIEW", void 0);
	    __decorate([
	        plugin_1.CordovaProperty
	    ], WebIntent, "EXTRA_TEXT", void 0);
	    __decorate([
	        plugin_1.Cordova()
	    ], WebIntent, "startActivity", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], WebIntent, "hasExtra", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], WebIntent, "getExtra", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], WebIntent, "getUri", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], WebIntent, "onNewIntent", null);
	    __decorate([
	        plugin_1.Cordova()
	    ], WebIntent, "sendBroadcast", null);
	    WebIntent = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'WebIntent',
	            plugin: 'https://github.com/Initsogar/cordova-webintent.git',
	            pluginRef: 'window.plugins.webintent',
	            repo: 'https://github.com/Initsogar/cordova-webintent.git',
	            platforms: ['Android']
	        })
	    ], WebIntent);
	    return WebIntent;
	}());
	exports.WebIntent = WebIntent;
	//# sourceMappingURL=webintent.js.map

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name YoutubeVideoPlayer
	 * @description
	 * Plays YouTube videos in Native YouTube App
	 *
	 * @usage
	 * ```
	 * import {YoutubeVideoPlayer} from 'ionic-native';
	 *
	 * YoutubeVideoPlayer.openVideo('myvideoid');
	 *
	 * ```
	 */
	var YoutubeVideoPlayer = (function () {
	    function YoutubeVideoPlayer() {
	    }
	    /**
	     * Plays a YouTube video
	     * @param videoId {string} Video ID
	     */
	    YoutubeVideoPlayer.openVideo = function (videoId) { };
	    __decorate([
	        plugin_1.Cordova({ sync: true })
	    ], YoutubeVideoPlayer, "openVideo", null);
	    YoutubeVideoPlayer = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'YoutubeVideoPlayer',
	            plugin: 'https://github.com/Glitchbone/CordovaYoutubeVideoPlayer.git',
	            pluginRef: 'YoutubeVideoPlayer',
	            repo: 'https://github.com/Glitchbone/CordovaYoutubeVideoPlayer',
	            platforms: ['Android', 'iOS']
	        })
	    ], YoutubeVideoPlayer);
	    return YoutubeVideoPlayer;
	}());
	exports.YoutubeVideoPlayer = YoutubeVideoPlayer;
	//# sourceMappingURL=youtube-video-player.js.map

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name ZBar
	 * @description
	 * The ZBar Scanner Plugin allows you to scan 2d barcodes.
	 *
	 * Requires Cordova plugin: `cordova-plugin-cszbar`. For more info, please see the [zBar plugin docs](https://github.com/tjwoon/csZBar).
	 *
	 * @usage
	 * ```
	 * import { ZBar } from 'ionic-native';
	 *
	 * let zBarOptions = {
	 *       flash: "off",
	 *       drawSight: false
	 *     };
	 *
	 * ZBar.scan(zBarOptions)
	 *    .then(result => {
	 *       console.log(result); // Scanned code
	 *    })
	 *    .catch(error => {
	 *       console.log(error); // Error message
	 *    });
	 *
	 * ```
	 *
	 * @interfaces
	 * ZBarOptions
	 */
	var ZBar = (function () {
	    function ZBar() {
	    }
	    /**
	     * Open the scanner
	     * @param options { ZBarOptions } Scan options
	     * @returns {Promise<any>} Returns a Promise that resolves with the scanned string, or rejects with an error.
	     */
	    ZBar.scan = function (options) { return; };
	    __decorate([
	        plugin_1.Cordova()
	    ], ZBar, "scan", null);
	    ZBar = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'ZBar',
	            plugin: 'cordova-plugin-cszbar',
	            pluginRef: 'cloudSky.zBar',
	            repo: 'https://github.com/tjwoon/csZBar',
	            platforms: ['Android', 'iOS']
	        })
	    ], ZBar);
	    return ZBar;
	}());
	exports.ZBar = ZBar;
	//# sourceMappingURL=z-bar.js.map

/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var plugin_1 = __webpack_require__(9);
	/**
	 * @name Zip
	 * @description
	 * A Cordova plugin to unzip files in Android and iOS.
	 *
	 * @usage
	 * ```
	 * import {Zip} from 'ionic-native';
	 *
	 * Zip.unzip('path/to/source.zip', 'path/to/dest', (progress) => console.log('Unzipping, ' + Math.round((progress.loaded / progress.total) * 100) + '%'))
	 *  .then((result) => {
	 *    if(result === 0) console.log('SUCCESS');
	 *    if(result === -1) console.log('FAILED');
	 *  });
	 *
	 * ```
	 */
	var Zip = (function () {
	    function Zip() {
	    }
	    /**
	     * Extracts files from a ZIP archive
	     * @param sourceZip {string} Source ZIP file
	     * @param destUrl {string} Destination folder
	     * @param onProgress {Function} optional callback to be called on progress update
	     * @returns {Promise<number>} returns a promise that resolves with a number. 0 is success, -1 is error
	     */
	    Zip.unzip = function (sourceZip, destUrl, onProgress) { return; };
	    __decorate([
	        plugin_1.Cordova({
	            successIndex: 2,
	            errorIndex: 4
	        })
	    ], Zip, "unzip", null);
	    Zip = __decorate([
	        plugin_1.Plugin({
	            pluginName: 'Zip',
	            plugin: 'cordova-plugin-zip',
	            pluginRef: 'zip',
	            repo: 'https://github.com/MobileChromeApps/cordova-plugin-zip',
	        })
	    ], Zip);
	    return Zip;
	}());
	exports.Zip = Zip;
	//# sourceMappingURL=zip.js.map

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(485), __webpack_require__(11), __webpack_require__(486)) :
		typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Observable', '@angular/platform-browser'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}),global.ng.core,global.Rx,global.ng.platformBrowser));
	}(this, (function (exports,_angular_core,rxjs_Observable,_angular_platformBrowser) { 'use strict';
	
	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A backend for http that uses the `XMLHttpRequest` browser API.
	 *
	 * Take care not to evaluate this in non-browser contexts.
	 *
	 * \@experimental
	 */
	var BrowserXhr = (function () {
	    function BrowserXhr() {
	    }
	    /**
	     * @return {?}
	     */
	    BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };
	    return BrowserXhr;
	}());
	BrowserXhr.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	BrowserXhr.ctorParameters = function () { return []; };
	var RequestMethod = {};
	RequestMethod.Get = 0;
	RequestMethod.Post = 1;
	RequestMethod.Put = 2;
	RequestMethod.Delete = 3;
	RequestMethod.Options = 4;
	RequestMethod.Head = 5;
	RequestMethod.Patch = 6;
	RequestMethod[RequestMethod.Get] = "Get";
	RequestMethod[RequestMethod.Post] = "Post";
	RequestMethod[RequestMethod.Put] = "Put";
	RequestMethod[RequestMethod.Delete] = "Delete";
	RequestMethod[RequestMethod.Options] = "Options";
	RequestMethod[RequestMethod.Head] = "Head";
	RequestMethod[RequestMethod.Patch] = "Patch";
	var ReadyState = {};
	ReadyState.Unsent = 0;
	ReadyState.Open = 1;
	ReadyState.HeadersReceived = 2;
	ReadyState.Loading = 3;
	ReadyState.Done = 4;
	ReadyState.Cancelled = 5;
	ReadyState[ReadyState.Unsent] = "Unsent";
	ReadyState[ReadyState.Open] = "Open";
	ReadyState[ReadyState.HeadersReceived] = "HeadersReceived";
	ReadyState[ReadyState.Loading] = "Loading";
	ReadyState[ReadyState.Done] = "Done";
	ReadyState[ReadyState.Cancelled] = "Cancelled";
	var ResponseType = {};
	ResponseType.Basic = 0;
	ResponseType.Cors = 1;
	ResponseType.Default = 2;
	ResponseType.Error = 3;
	ResponseType.Opaque = 4;
	ResponseType[ResponseType.Basic] = "Basic";
	ResponseType[ResponseType.Cors] = "Cors";
	ResponseType[ResponseType.Default] = "Default";
	ResponseType[ResponseType.Error] = "Error";
	ResponseType[ResponseType.Opaque] = "Opaque";
	var ContentType = {};
	ContentType.NONE = 0;
	ContentType.JSON = 1;
	ContentType.FORM = 2;
	ContentType.FORM_DATA = 3;
	ContentType.TEXT = 4;
	ContentType.BLOB = 5;
	ContentType.ARRAY_BUFFER = 6;
	ContentType[ContentType.NONE] = "NONE";
	ContentType[ContentType.JSON] = "JSON";
	ContentType[ContentType.FORM] = "FORM";
	ContentType[ContentType.FORM_DATA] = "FORM_DATA";
	ContentType[ContentType.TEXT] = "TEXT";
	ContentType[ContentType.BLOB] = "BLOB";
	ContentType[ContentType.ARRAY_BUFFER] = "ARRAY_BUFFER";
	var ResponseContentType = {};
	ResponseContentType.Text = 0;
	ResponseContentType.Json = 1;
	ResponseContentType.ArrayBuffer = 2;
	ResponseContentType.Blob = 3;
	ResponseContentType[ResponseContentType.Text] = "Text";
	ResponseContentType[ResponseContentType.Json] = "Json";
	ResponseContentType[ResponseContentType.ArrayBuffer] = "ArrayBuffer";
	ResponseContentType[ResponseContentType.Blob] = "Blob";
	/**
	 * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
	 * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).
	 *
	 * The only known difference between this `Headers` implementation and the spec is the
	 * lack of an `entries` method.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Headers} from '\@angular/http';
	 *
	 * var firstHeaders = new Headers();
	 * firstHeaders.append('Content-Type', 'image/jpeg');
	 * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'
	 *
	 * // Create headers from Plain Old JavaScript Object
	 * var secondHeaders = new Headers({
	 *   'X-My-Custom-Header': 'Angular'
	 * });
	 * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'
	 *
	 * var thirdHeaders = new Headers(secondHeaders);
	 * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'
	 * ```
	 *
	 * \@experimental
	 */
	var Headers = (function () {
	    /**
	     * @param {?=} headers
	     */
	    function Headers(headers) {
	        var _this = this;
	        /**
	         * \@internal header names are lower case
	         */
	        this._headers = new Map();
	        /**
	         * \@internal map lower case names to actual names
	         */
	        this._normalizedNames = new Map();
	        if (!headers) {
	            return;
	        }
	        if (headers instanceof Headers) {
	            headers.forEach(function (values, name) {
	                values.forEach(function (value) { return _this.append(name, value); });
	            });
	            return;
	        }
	        Object.keys(headers).forEach(function (name) {
	            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];
	            _this.delete(name);
	            values.forEach(function (value) { return _this.append(name, value); });
	        });
	    }
	    /**
	     * Returns a new Headers instance from the given DOMString of Response Headers
	     * @param {?} headersString
	     * @return {?}
	     */
	    Headers.fromResponseHeaderString = function (headersString) {
	        var /** @type {?} */ headers = new Headers();
	        headersString.split('\n').forEach(function (line) {
	            var /** @type {?} */ index = line.indexOf(':');
	            if (index > 0) {
	                var /** @type {?} */ name = line.slice(0, index);
	                var /** @type {?} */ value = line.slice(index + 1).trim();
	                headers.set(name, value);
	            }
	        });
	        return headers;
	    };
	    /**
	     * Appends a header to existing list of header values for a given header name.
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    Headers.prototype.append = function (name, value) {
	        var /** @type {?} */ values = this.getAll(name);
	        if (values === null) {
	            this.set(name, value);
	        }
	        else {
	            values.push(value);
	        }
	    };
	    /**
	     * Deletes all header values for the given name.
	     * @param {?} name
	     * @return {?}
	     */
	    Headers.prototype.delete = function (name) {
	        var /** @type {?} */ lcName = name.toLowerCase();
	        this._normalizedNames.delete(lcName);
	        this._headers.delete(lcName);
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    Headers.prototype.forEach = function (fn) {
	        var _this = this;
	        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });
	    };
	    /**
	     * Returns first header that matches given name.
	     * @param {?} name
	     * @return {?}
	     */
	    Headers.prototype.get = function (name) {
	        var /** @type {?} */ values = this.getAll(name);
	        if (values === null) {
	            return null;
	        }
	        return values.length > 0 ? values[0] : null;
	    };
	    /**
	     * Checks for existence of header by given name.
	     * @param {?} name
	     * @return {?}
	     */
	    Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };
	    /**
	     * Returns the names of the headers
	     * @return {?}
	     */
	    Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };
	    /**
	     * Sets or overrides header value for given name.
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    Headers.prototype.set = function (name, value) {
	        if (Array.isArray(value)) {
	            if (value.length) {
	                this._headers.set(name.toLowerCase(), [value.join(',')]);
	            }
	        }
	        else {
	            this._headers.set(name.toLowerCase(), [value]);
	        }
	        this.mayBeSetNormalizedName(name);
	    };
	    /**
	     * Returns values of all headers.
	     * @return {?}
	     */
	    Headers.prototype.values = function () { return Array.from(this._headers.values()); };
	    /**
	     * @return {?}
	     */
	    Headers.prototype.toJSON = function () {
	        var _this = this;
	        var /** @type {?} */ serialized = {};
	        this._headers.forEach(function (values, name) {
	            var /** @type {?} */ split = [];
	            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });
	            serialized[_this._normalizedNames.get(name)] = split;
	        });
	        return serialized;
	    };
	    /**
	     * Returns list of header values for a given name.
	     * @param {?} name
	     * @return {?}
	     */
	    Headers.prototype.getAll = function (name) {
	        return this.has(name) ? this._headers.get(name.toLowerCase()) : null;
	    };
	    /**
	     * This method is not implemented.
	     * @return {?}
	     */
	    Headers.prototype.entries = function () { throw new Error('"entries" method is not implemented on Headers class'); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    Headers.prototype.mayBeSetNormalizedName = function (name) {
	        var /** @type {?} */ lcName = name.toLowerCase();
	        if (!this._normalizedNames.has(lcName)) {
	            this._normalizedNames.set(lcName, name);
	        }
	    };
	    return Headers;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Creates a response options object to be optionally provided when instantiating a
	 * {\@link Response}.
	 *
	 * This class is based on the `ResponseInit` description in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#responseinit).
	 *
	 * All values are null by default. Typical defaults can be found in the
	 * {\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.
	 *
	 * This class may be used in tests to build {\@link Response Responses} for
	 * mock responses (see {\@link MockBackend}).
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))
	 *
	 * ```typescript
	 * import {ResponseOptions, Response} from '\@angular/http';
	 *
	 * var options = new ResponseOptions({
	 *   body: '{"name":"Jeff"}'
	 * });
	 * var res = new Response(options);
	 *
	 * console.log('res.json():', res.json()); // Object {name: "Jeff"}
	 * ```
	 *
	 * \@experimental
	 */
	var ResponseOptions = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function ResponseOptions(_a) {
	        var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;
	        this.body = body != null ? body : null;
	        this.status = status != null ? status : null;
	        this.headers = headers != null ? headers : null;
	        this.statusText = statusText != null ? statusText : null;
	        this.type = type != null ? type : null;
	        this.url = url != null ? url : null;
	    }
	    /**
	     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to
	     * override
	     * existing values. This method will not change the values of the instance on which it is being
	     * called.
	     *
	     * This may be useful when sharing a base `ResponseOptions` object inside tests,
	     * where certain properties may change from test to test.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))
	     *
	     * ```typescript
	     * import {ResponseOptions, Response} from '\@angular/http';
	     *
	     * var options = new ResponseOptions({
	     *   body: {name: 'Jeff'}
	     * });
	     * var res = new Response(options.merge({
	     *   url: 'https://google.com'
	     * }));
	     * console.log('options.url:', options.url); // null
	     * console.log('res.json():', res.json()); // Object {name: "Jeff"}
	     * console.log('res.url:', res.url); // https://google.com
	     * ```
	     * @param {?=} options
	     * @return {?}
	     */
	    ResponseOptions.prototype.merge = function (options) {
	        return new ResponseOptions({
	            body: options && options.body != null ? options.body : this.body,
	            status: options && options.status != null ? options.status : this.status,
	            headers: options && options.headers != null ? options.headers : this.headers,
	            statusText: options && options.statusText != null ? options.statusText : this.statusText,
	            type: options && options.type != null ? options.type : this.type,
	            url: options && options.url != null ? options.url : this.url,
	        });
	    };
	    return ResponseOptions;
	}());
	/**
	 * Subclass of {\@link ResponseOptions}, with default values.
	 *
	 * Default values:
	 *  * status: 200
	 *  * headers: empty {\@link Headers} object
	 *
	 * This class could be extended and bound to the {\@link ResponseOptions} class
	 * when configuring an {\@link Injector}, in order to override the default options
	 * used by {\@link Http} to create {\@link Response Responses}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))
	 *
	 * ```typescript
	 * import {provide} from '\@angular/core';
	 * import {bootstrap} from '\@angular/platform-browser/browser';
	 * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from
	 * '\@angular/http';
	 * import {App} from './myapp';
	 *
	 * class MyOptions extends BaseResponseOptions {
	 *   headers:Headers = new Headers({network: 'github'});
	 * }
	 *
	 * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);
	 * ```
	 *
	 * The options could also be extended when manually creating a {\@link Response}
	 * object.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))
	 *
	 * ```
	 * import {BaseResponseOptions, Response} from '\@angular/http';
	 *
	 * var options = new BaseResponseOptions();
	 * var res = new Response(options.merge({
	 *   body: 'Angular',
	 *   headers: new Headers({framework: 'angular'})
	 * }));
	 * console.log('res.headers.get("framework"):', res.headers.get('framework')); // angular
	 * console.log('res.text():', res.text()); // Angular;
	 * ```
	 *
	 * \@experimental
	 */
	var BaseResponseOptions = (function (_super) {
	    __extends(BaseResponseOptions, _super);
	    function BaseResponseOptions() {
	        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;
	    }
	    return BaseResponseOptions;
	}(ResponseOptions));
	BaseResponseOptions.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	BaseResponseOptions.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Abstract class from which real backends are derived.
	 *
	 * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given
	 * {\@link Request}.
	 *
	 * \@experimental
	 * @abstract
	 */
	var ConnectionBackend = (function () {
	    function ConnectionBackend() {
	    }
	    /**
	     * @abstract
	     * @param {?} request
	     * @return {?}
	     */
	    ConnectionBackend.prototype.createConnection = function (request) { };
	    return ConnectionBackend;
	}());
	/**
	 * Abstract class from which real connections are derived.
	 *
	 * \@experimental
	 * @abstract
	 */
	var Connection = (function () {
	    function Connection() {
	    }
	    return Connection;
	}());
	/**
	 * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.
	 *
	 * \@experimental
	 * @abstract
	 */
	var XSRFStrategy = (function () {
	    function XSRFStrategy() {
	    }
	    /**
	     * @abstract
	     * @param {?} req
	     * @return {?}
	     */
	    XSRFStrategy.prototype.configureRequest = function (req) { };
	    return XSRFStrategy;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} method
	 * @return {?}
	 */
	function normalizeMethodName(method) {
	    if (typeof method !== 'string')
	        return method;
	    switch (method.toUpperCase()) {
	        case 'GET':
	            return RequestMethod.Get;
	        case 'POST':
	            return RequestMethod.Post;
	        case 'PUT':
	            return RequestMethod.Put;
	        case 'DELETE':
	            return RequestMethod.Delete;
	        case 'OPTIONS':
	            return RequestMethod.Options;
	        case 'HEAD':
	            return RequestMethod.Head;
	        case 'PATCH':
	            return RequestMethod.Patch;
	    }
	    throw new Error("Invalid request method. The method \"" + method + "\" is not supported.");
	}
	var isSuccess = function (status) { return (status >= 200 && status < 300); };
	/**
	 * @param {?} xhr
	 * @return {?}
	 */
	function getResponseURL(xhr) {
	    if ('responseURL' in xhr) {
	        return xhr.responseURL;
	    }
	    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
	        return xhr.getResponseHeader('X-Request-URL');
	    }
	    return;
	}
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function stringToArrayBuffer(input) {
	    var /** @type {?} */ view = new Uint16Array(input.length);
	    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {
	        view[i] = input.charCodeAt(i);
	    }
	    return view.buffer;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 * @param {?=} rawParams
	 * @return {?}
	 */
	function paramParser(rawParams) {
	    if (rawParams === void 0) { rawParams = ''; }
	    var /** @type {?} */ map = new Map();
	    if (rawParams.length > 0) {
	        var /** @type {?} */ params = rawParams.split('&');
	        params.forEach(function (param) {
	            var /** @type {?} */ eqIdx = param.indexOf('=');
	            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];
	            var /** @type {?} */ list = map.get(key) || [];
	            list.push(val);
	            map.set(key, list);
	        });
	    }
	    return map;
	}
	/**
	 * \@experimental
	 *
	 */
	var QueryEncoder = (function () {
	    function QueryEncoder() {
	    }
	    /**
	     * @param {?} k
	     * @return {?}
	     */
	    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };
	    /**
	     * @param {?} v
	     * @return {?}
	     */
	    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };
	    return QueryEncoder;
	}());
	/**
	 * @param {?} v
	 * @return {?}
	 */
	function standardEncoding(v) {
	    return encodeURIComponent(v)
	        .replace(/%40/gi, '@')
	        .replace(/%3A/gi, ':')
	        .replace(/%24/gi, '$')
	        .replace(/%2C/gi, ',')
	        .replace(/%3B/gi, ';')
	        .replace(/%2B/gi, '+')
	        .replace(/%3D/gi, '=')
	        .replace(/%3F/gi, '?')
	        .replace(/%2F/gi, '/');
	}
	/**
	 * Map-like representation of url search parameters, based on
	 * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,
	 * with several extensions for merging URLSearchParams objects:
	 *   - setAll()
	 *   - appendAll()
	 *   - replaceAll()
	 *
	 * This class accepts an optional second parameter of ${\@link QueryEncoder},
	 * which is used to serialize parameters before making a request. By default,
	 * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,
	 * and then un-encodes certain characters that are allowed to be part of the query
	 * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.
	 *
	 * These are the characters that are not encoded: `! $ \' ( ) * + , ; A 9 - . _ ~ ? /`
	 *
	 * If the set of allowed query characters is not acceptable for a particular backend,
	 * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.
	 *
	 * ```
	 * import {URLSearchParams, QueryEncoder} from '\@angular/http';
	 * class MyQueryEncoder extends QueryEncoder {
	 *   encodeKey(k: string): string {
	 *     return myEncodingFunction(k);
	 *   }
	 *
	 *   encodeValue(v: string): string {
	 *     return myEncodingFunction(v);
	 *   }
	 * }
	 *
	 * let params = new URLSearchParams('', new MyQueryEncoder());
	 * ```
	 * \@experimental
	 */
	var URLSearchParams = (function () {
	    /**
	     * @param {?=} rawParams
	     * @param {?=} queryEncoder
	     */
	    function URLSearchParams(rawParams, queryEncoder) {
	        if (rawParams === void 0) { rawParams = ''; }
	        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }
	        this.rawParams = rawParams;
	        this.queryEncoder = queryEncoder;
	        this.paramsMap = paramParser(rawParams);
	    }
	    /**
	     * @return {?}
	     */
	    URLSearchParams.prototype.clone = function () {
	        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);
	        clone.appendAll(this);
	        return clone;
	    };
	    /**
	     * @param {?} param
	     * @return {?}
	     */
	    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };
	    /**
	     * @param {?} param
	     * @return {?}
	     */
	    URLSearchParams.prototype.get = function (param) {
	        var /** @type {?} */ storedParam = this.paramsMap.get(param);
	        return Array.isArray(storedParam) ? storedParam[0] : null;
	    };
	    /**
	     * @param {?} param
	     * @return {?}
	     */
	    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };
	    /**
	     * @param {?} param
	     * @param {?} val
	     * @return {?}
	     */
	    URLSearchParams.prototype.set = function (param, val) {
	        if (val === void 0 || val === null) {
	            this.delete(param);
	            return;
	        }
	        var /** @type {?} */ list = this.paramsMap.get(param) || [];
	        list.length = 0;
	        list.push(val);
	        this.paramsMap.set(param, list);
	    };
	    /**
	     * @param {?} searchParams
	     * @return {?}
	     */
	    URLSearchParams.prototype.setAll = function (searchParams) {
	        var _this = this;
	        searchParams.paramsMap.forEach(function (value, param) {
	            var /** @type {?} */ list = _this.paramsMap.get(param) || [];
	            list.length = 0;
	            list.push(value[0]);
	            _this.paramsMap.set(param, list);
	        });
	    };
	    /**
	     * @param {?} param
	     * @param {?} val
	     * @return {?}
	     */
	    URLSearchParams.prototype.append = function (param, val) {
	        if (val === void 0 || val === null)
	            return;
	        var /** @type {?} */ list = this.paramsMap.get(param) || [];
	        list.push(val);
	        this.paramsMap.set(param, list);
	    };
	    /**
	     * @param {?} searchParams
	     * @return {?}
	     */
	    URLSearchParams.prototype.appendAll = function (searchParams) {
	        var _this = this;
	        searchParams.paramsMap.forEach(function (value, param) {
	            var /** @type {?} */ list = _this.paramsMap.get(param) || [];
	            for (var /** @type {?} */ i = 0; i < value.length; ++i) {
	                list.push(value[i]);
	            }
	            _this.paramsMap.set(param, list);
	        });
	    };
	    /**
	     * @param {?} searchParams
	     * @return {?}
	     */
	    URLSearchParams.prototype.replaceAll = function (searchParams) {
	        var _this = this;
	        searchParams.paramsMap.forEach(function (value, param) {
	            var /** @type {?} */ list = _this.paramsMap.get(param) || [];
	            list.length = 0;
	            for (var /** @type {?} */ i = 0; i < value.length; ++i) {
	                list.push(value[i]);
	            }
	            _this.paramsMap.set(param, list);
	        });
	    };
	    /**
	     * @return {?}
	     */
	    URLSearchParams.prototype.toString = function () {
	        var _this = this;
	        var /** @type {?} */ paramsList = [];
	        this.paramsMap.forEach(function (values, k) {
	            values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });
	        });
	        return paramsList.join('&');
	    };
	    /**
	     * @param {?} param
	     * @return {?}
	     */
	    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };
	    return URLSearchParams;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * HTTP request body used by both {\@link Request} and {\@link Response}
	 * https://fetch.spec.whatwg.org/#body
	 * @abstract
	 */
	var Body = (function () {
	    function Body() {
	    }
	    /**
	     * Attempts to return body as parsed `JSON` object, or raises an exception.
	     * @return {?}
	     */
	    Body.prototype.json = function () {
	        if (typeof this._body === 'string') {
	            return JSON.parse(/** @type {?} */ (this._body));
	        }
	        if (this._body instanceof ArrayBuffer) {
	            return JSON.parse(this.text());
	        }
	        return this._body;
	    };
	    /**
	     * Returns the body as a string, presuming `toString()` can be called on the response body.
	     * @return {?}
	     */
	    Body.prototype.text = function () {
	        if (this._body instanceof URLSearchParams) {
	            return this._body.toString();
	        }
	        if (this._body instanceof ArrayBuffer) {
	            return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));
	        }
	        if (this._body == null) {
	            return '';
	        }
	        if (typeof this._body === 'object') {
	            return JSON.stringify(this._body, null, 2);
	        }
	        return this._body.toString();
	    };
	    /**
	     * Return the body as an ArrayBuffer
	     * @return {?}
	     */
	    Body.prototype.arrayBuffer = function () {
	        if (this._body instanceof ArrayBuffer) {
	            return (this._body);
	        }
	        return stringToArrayBuffer(this.text());
	    };
	    /**
	     * Returns the request's body as a Blob, assuming that body exists.
	     * @return {?}
	     */
	    Body.prototype.blob = function () {
	        if (this._body instanceof Blob) {
	            return (this._body);
	        }
	        if (this._body instanceof ArrayBuffer) {
	            return new Blob([this._body]);
	        }
	        throw new Error('The request body isn\'t either a blob or an array buffer');
	    };
	    return Body;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Creates `Response` instances from provided values.
	 *
	 * Though this object isn't
	 * usually instantiated by end-users, it is the primary object interacted with when it comes time to
	 * add data to a view.
	 *
	 * ### Example
	 *
	 * ```
	 * http.request('my-friends.txt').subscribe(response => this.friends = response.text());
	 * ```
	 *
	 * The Response's interface is inspired by the Response constructor defined in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body
	 * can be accessed many times. There are other differences in the implementation, but this is the
	 * most significant.
	 *
	 * \@experimental
	 */
	var Response = (function (_super) {
	    __extends(Response, _super);
	    /**
	     * @param {?} responseOptions
	     */
	    function Response(responseOptions) {
	        var _this = _super.call(this) || this;
	        _this._body = responseOptions.body;
	        _this.status = responseOptions.status;
	        _this.ok = (_this.status >= 200 && _this.status <= 299);
	        _this.statusText = responseOptions.statusText;
	        _this.headers = responseOptions.headers;
	        _this.type = responseOptions.type;
	        _this.url = responseOptions.url;
	        return _this;
	    }
	    /**
	     * @return {?}
	     */
	    Response.prototype.toString = function () {
	        return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
	    };
	    return Response;
	}(Body));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _nextRequestId = 0;
	var JSONP_HOME = '__ng_jsonp__';
	var _jsonpConnections = null;
	/**
	 * @return {?}
	 */
	function _getJsonpConnections() {
	    var /** @type {?} */ w = typeof window == 'object' ? window : {};
	    if (_jsonpConnections === null) {
	        _jsonpConnections = w[JSONP_HOME] = {};
	    }
	    return _jsonpConnections;
	}
	var BrowserJsonp = (function () {
	    function BrowserJsonp() {
	    }
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    BrowserJsonp.prototype.build = function (url) {
	        var /** @type {?} */ node = document.createElement('script');
	        node.src = url;
	        return node;
	    };
	    /**
	     * @return {?}
	     */
	    BrowserJsonp.prototype.nextRequestID = function () { return "__req" + _nextRequestId++; };
	    /**
	     * @param {?} id
	     * @return {?}
	     */
	    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + "." + id + ".finished"; };
	    /**
	     * @param {?} id
	     * @param {?} connection
	     * @return {?}
	     */
	    BrowserJsonp.prototype.exposeConnection = function (id, connection) {
	        var /** @type {?} */ connections = _getJsonpConnections();
	        connections[id] = connection;
	    };
	    /**
	     * @param {?} id
	     * @return {?}
	     */
	    BrowserJsonp.prototype.removeConnection = function (id) {
	        var /** @type {?} */ connections = _getJsonpConnections();
	        connections[id] = null;
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserJsonp.prototype.cleanup = function (node) {
	        if (node.parentNode) {
	            node.parentNode.removeChild(/** @type {?} */ ((node)));
	        }
	    };
	    return BrowserJsonp;
	}());
	BrowserJsonp.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	BrowserJsonp.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
	var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
	/**
	 * Abstract base class for an in-flight JSONP request.
	 *
	 * \@experimental
	 * @abstract
	 */
	var JSONPConnection = (function () {
	    function JSONPConnection() {
	    }
	    /**
	     * Callback called when the JSONP request completes, to notify the application
	     * of the new data.
	     * @abstract
	     * @param {?=} data
	     * @return {?}
	     */
	    JSONPConnection.prototype.finished = function (data) { };
	    return JSONPConnection;
	}());
	var JSONPConnection_ = (function (_super) {
	    __extends(JSONPConnection_, _super);
	    /**
	     * @param {?} req
	     * @param {?} _dom
	     * @param {?=} baseResponseOptions
	     */
	    function JSONPConnection_(req, _dom, baseResponseOptions) {
	        var _this = _super.call(this) || this;
	        _this._dom = _dom;
	        _this.baseResponseOptions = baseResponseOptions;
	        _this._finished = false;
	        if (req.method !== RequestMethod.Get) {
	            throw new TypeError(JSONP_ERR_WRONG_METHOD);
	        }
	        _this.request = req;
	        _this.response = new rxjs_Observable.Observable(function (responseObserver) {
	            _this.readyState = ReadyState.Loading;
	            var id = _this._id = _dom.nextRequestID();
	            _dom.exposeConnection(id, _this);
	            // Workaround Dart
	            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);
	            var callback = _dom.requestCallback(_this._id);
	            var url = req.url;
	            if (url.indexOf('=JSONP_CALLBACK&') > -1) {
	                url = url.replace('=JSONP_CALLBACK&', "=" + callback + "&");
	            }
	            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
	                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
	            }
	            var script = _this._script = _dom.build(url);
	            var onLoad = function (event) {
	                if (_this.readyState === ReadyState.Cancelled)
	                    return;
	                _this.readyState = ReadyState.Done;
	                _dom.cleanup(script);
	                if (!_this._finished) {
	                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });
	                    if (baseResponseOptions) {
	                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
	                    }
	                    responseObserver.error(new Response(responseOptions_1));
	                    return;
	                }
	                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });
	                if (_this.baseResponseOptions) {
	                    responseOptions = _this.baseResponseOptions.merge(responseOptions);
	                }
	                responseObserver.next(new Response(responseOptions));
	                responseObserver.complete();
	            };
	            var onError = function (error) {
	                if (_this.readyState === ReadyState.Cancelled)
	                    return;
	                _this.readyState = ReadyState.Done;
	                _dom.cleanup(script);
	                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });
	                if (baseResponseOptions) {
	                    responseOptions = baseResponseOptions.merge(responseOptions);
	                }
	                responseObserver.error(new Response(responseOptions));
	            };
	            script.addEventListener('load', onLoad);
	            script.addEventListener('error', onError);
	            _dom.send(script);
	            return function () {
	                _this.readyState = ReadyState.Cancelled;
	                script.removeEventListener('load', onLoad);
	                script.removeEventListener('error', onError);
	                _this._dom.cleanup(script);
	            };
	        });
	        return _this;
	    }
	    /**
	     * @param {?=} data
	     * @return {?}
	     */
	    JSONPConnection_.prototype.finished = function (data) {
	        // Don't leak connections
	        this._finished = true;
	        this._dom.removeConnection(this._id);
	        if (this.readyState === ReadyState.Cancelled)
	            return;
	        this._responseData = data;
	    };
	    return JSONPConnection_;
	}(JSONPConnection));
	/**
	 * A {\@link ConnectionBackend} that uses the JSONP strategy of making requests.
	 *
	 * \@experimental
	 * @abstract
	 */
	var JSONPBackend = (function (_super) {
	    __extends(JSONPBackend, _super);
	    function JSONPBackend() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return JSONPBackend;
	}(ConnectionBackend));
	var JSONPBackend_ = (function (_super) {
	    __extends(JSONPBackend_, _super);
	    /**
	     * @param {?} _browserJSONP
	     * @param {?} _baseResponseOptions
	     */
	    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
	        var _this = _super.call(this) || this;
	        _this._browserJSONP = _browserJSONP;
	        _this._baseResponseOptions = _baseResponseOptions;
	        return _this;
	    }
	    /**
	     * @param {?} request
	     * @return {?}
	     */
	    JSONPBackend_.prototype.createConnection = function (request) {
	        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
	    };
	    return JSONPBackend_;
	}(JSONPBackend));
	JSONPBackend_.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	JSONPBackend_.ctorParameters = function () { return [
	    { type: BrowserJsonp, },
	    { type: ResponseOptions, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var XSSI_PREFIX = /^\)\]\}',?\n/;
	/**
	 * Creates connections using `XMLHttpRequest`. Given a fully-qualified
	 * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the
	 * request.
	 *
	 * This class would typically not be created or interacted with directly inside applications, though
	 * the {\@link MockConnection} may be interacted with in tests.
	 *
	 * \@experimental
	 */
	var XHRConnection = (function () {
	    /**
	     * @param {?} req
	     * @param {?} browserXHR
	     * @param {?=} baseResponseOptions
	     */
	    function XHRConnection(req, browserXHR, baseResponseOptions) {
	        var _this = this;
	        this.request = req;
	        this.response = new rxjs_Observable.Observable(function (responseObserver) {
	            var _xhr = browserXHR.build();
	            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);
	            if (req.withCredentials != null) {
	                _xhr.withCredentials = req.withCredentials;
	            }
	            // load event handler
	            var onLoad = function () {
	                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	                var status = _xhr.status === 1223 ? 204 : _xhr.status;
	                var body = null;
	                // HTTP 204 means no content
	                if (status !== 204) {
	                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	                    // response/responseType properties were introduced in ResourceLoader Level2 spec
	                    // (supported by IE10)
	                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;
	                    // Implicitly strip a potential XSSI prefix.
	                    if (typeof body === 'string') {
	                        body = body.replace(XSSI_PREFIX, '');
	                    }
	                }
	                // fix status code when it is 0 (0 status is undocumented).
	                // Occurs when accessing file resources or on Android 4.1 stock browser
	                // while retrieving files from application cache.
	                if (status === 0) {
	                    status = body ? 200 : 0;
	                }
	                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
	                // IE 9 does not provide the way to get URL of response
	                var url = getResponseURL(_xhr) || req.url;
	                var statusText = _xhr.statusText || 'OK';
	                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });
	                if (baseResponseOptions != null) {
	                    responseOptions = baseResponseOptions.merge(responseOptions);
	                }
	                var response = new Response(responseOptions);
	                response.ok = isSuccess(status);
	                if (response.ok) {
	                    responseObserver.next(response);
	                    // TODO(gdi2290): defer complete if array buffer until done
	                    responseObserver.complete();
	                    return;
	                }
	                responseObserver.error(response);
	            };
	            // error event handler
	            var onError = function (err) {
	                var responseOptions = new ResponseOptions({
	                    body: err,
	                    type: ResponseType.Error,
	                    status: _xhr.status,
	                    statusText: _xhr.statusText,
	                });
	                if (baseResponseOptions != null) {
	                    responseOptions = baseResponseOptions.merge(responseOptions);
	                }
	                responseObserver.error(new Response(responseOptions));
	            };
	            _this.setDetectedContentType(req, _xhr);
	            if (req.headers == null) {
	                req.headers = new Headers();
	            }
	            if (!req.headers.has('Accept')) {
	                req.headers.append('Accept', 'application/json, text/plain, */*');
	            }
	            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });
	            // Select the correct buffer type to store the response
	            if (req.responseType != null && _xhr.responseType != null) {
	                switch (req.responseType) {
	                    case ResponseContentType.ArrayBuffer:
	                        _xhr.responseType = 'arraybuffer';
	                        break;
	                    case ResponseContentType.Json:
	                        _xhr.responseType = 'json';
	                        break;
	                    case ResponseContentType.Text:
	                        _xhr.responseType = 'text';
	                        break;
	                    case ResponseContentType.Blob:
	                        _xhr.responseType = 'blob';
	                        break;
	                    default:
	                        throw new Error('The selected responseType is not supported');
	                }
	            }
	            _xhr.addEventListener('load', onLoad);
	            _xhr.addEventListener('error', onError);
	            _xhr.send(_this.request.getBody());
	            return function () {
	                _xhr.removeEventListener('load', onLoad);
	                _xhr.removeEventListener('error', onError);
	                _xhr.abort();
	            };
	        });
	    }
	    /**
	     * @param {?} req
	     * @param {?} _xhr
	     * @return {?}
	     */
	    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {
	        // Skip if a custom Content-Type header is provided
	        if (req.headers != null && req.headers.get('Content-Type') != null) {
	            return;
	        }
	        // Set the detected content type
	        switch (req.contentType) {
	            case ContentType.NONE:
	                break;
	            case ContentType.JSON:
	                _xhr.setRequestHeader('content-type', 'application/json');
	                break;
	            case ContentType.FORM:
	                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	                break;
	            case ContentType.TEXT:
	                _xhr.setRequestHeader('content-type', 'text/plain');
	                break;
	            case ContentType.BLOB:
	                var /** @type {?} */ blob = req.blob();
	                if (blob.type) {
	                    _xhr.setRequestHeader('content-type', blob.type);
	                }
	                break;
	        }
	    };
	    return XHRConnection;
	}());
	/**
	 * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application
	 * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)
	 * for more information on XSRF.
	 *
	 * Applications can configure custom cookie and header names by binding an instance of this class
	 * with different `cookieName` and `headerName` values. See the main HTTP documentation for more
	 * details.
	 *
	 * \@experimental
	 */
	var CookieXSRFStrategy = (function () {
	    /**
	     * @param {?=} _cookieName
	     * @param {?=} _headerName
	     */
	    function CookieXSRFStrategy(_cookieName, _headerName) {
	        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }
	        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }
	        this._cookieName = _cookieName;
	        this._headerName = _headerName;
	    }
	    /**
	     * @param {?} req
	     * @return {?}
	     */
	    CookieXSRFStrategy.prototype.configureRequest = function (req) {
	        var /** @type {?} */ xsrfToken = _angular_platformBrowser.ɵgetDOM().getCookie(this._cookieName);
	        if (xsrfToken) {
	            req.headers.set(this._headerName, xsrfToken);
	        }
	    };
	    return CookieXSRFStrategy;
	}());
	/**
	 * Creates {\@link XHRConnection} instances.
	 *
	 * This class would typically not be used by end users, but could be
	 * overridden if a different backend implementation should be used,
	 * such as in a node backend.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\@angular/http';
	 * \@Component({
	 *   viewProviders: [
	 *     HTTP_PROVIDERS,
	 *     {provide: Http, useFactory: (backend, options) => {
	 *       return new Http(backend, options);
	 *     }, deps: [MyNodeBackend, BaseRequestOptions]}]
	 * })
	 * class MyComponent {
	 *   constructor(http:Http) {
	 *     http.request('people.json').subscribe(res => this.people = res.json());
	 *   }
	 * }
	 * ```
	 * \@experimental
	 */
	var XHRBackend = (function () {
	    /**
	     * @param {?} _browserXHR
	     * @param {?} _baseResponseOptions
	     * @param {?} _xsrfStrategy
	     */
	    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
	        this._browserXHR = _browserXHR;
	        this._baseResponseOptions = _baseResponseOptions;
	        this._xsrfStrategy = _xsrfStrategy;
	    }
	    /**
	     * @param {?} request
	     * @return {?}
	     */
	    XHRBackend.prototype.createConnection = function (request) {
	        this._xsrfStrategy.configureRequest(request);
	        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
	    };
	    return XHRBackend;
	}());
	XHRBackend.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	XHRBackend.ctorParameters = function () { return [
	    { type: BrowserXhr, },
	    { type: ResponseOptions, },
	    { type: XSRFStrategy, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Creates a request options object to be optionally provided when instantiating a
	 * {\@link Request}.
	 *
	 * This class is based on the `RequestInit` description in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#requestinit).
	 *
	 * All values are null by default. Typical defaults can be found in the {\@link BaseRequestOptions}
	 * class, which sub-classes `RequestOptions`.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))
	 *
	 * ```typescript
	 * import {RequestOptions, Request, RequestMethod} from '\@angular/http';
	 *
	 * var options = new RequestOptions({
	 *   method: RequestMethod.Post,
	 *   url: 'https://google.com'
	 * });
	 * var req = new Request(options);
	 * console.log('req.method:', RequestMethod[req.method]); // Post
	 * console.log('options.url:', options.url); // https://google.com
	 * ```
	 *
	 * \@experimental
	 */
	var RequestOptions = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function RequestOptions(_a) {
	        var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, params = _b.params, withCredentials = _b.withCredentials, responseType = _b.responseType;
	        this.method = method != null ? normalizeMethodName(method) : null;
	        this.headers = headers != null ? headers : null;
	        this.body = body != null ? body : null;
	        this.url = url != null ? url : null;
	        this.params = this._mergeSearchParams(params || search);
	        this.withCredentials = withCredentials != null ? withCredentials : null;
	        this.responseType = responseType != null ? responseType : null;
	    }
	    Object.defineProperty(RequestOptions.prototype, "search", {
	        /**
	         * @deprecated from 4.0.0. Use params instead.
	         * @return {?}
	         */
	        get: function () { return this.params; },
	        /**
	         * @deprecated from 4.0.0. Use params instead.
	         * @param {?} params
	         * @return {?}
	         */
	        set: function (params) { this.params = params; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override
	     * existing values. This method will not change the values of the instance on which it is being
	     * called.
	     *
	     * Note that `headers` and `search` will override existing values completely if present in
	     * the `options` object. If these values should be merged, it should be done prior to calling
	     * `merge` on the `RequestOptions` instance.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))
	     *
	     * ```typescript
	     * import {RequestOptions, Request, RequestMethod} from '\@angular/http';
	     *
	     * var options = new RequestOptions({
	     *   method: RequestMethod.Post
	     * });
	     * var req = new Request(options.merge({
	     *   url: 'https://google.com'
	     * }));
	     * console.log('req.method:', RequestMethod[req.method]); // Post
	     * console.log('options.url:', options.url); // null
	     * console.log('req.url:', req.url); // https://google.com
	     * ```
	     * @param {?=} options
	     * @return {?}
	     */
	    RequestOptions.prototype.merge = function (options) {
	        return new RequestOptions({
	            method: options && options.method != null ? options.method : this.method,
	            headers: options && options.headers != null ? options.headers : new Headers(this.headers),
	            body: options && options.body != null ? options.body : this.body,
	            url: options && options.url != null ? options.url : this.url,
	            params: options && this._mergeSearchParams(options.params || options.search),
	            withCredentials: options && options.withCredentials != null ? options.withCredentials :
	                this.withCredentials,
	            responseType: options && options.responseType != null ? options.responseType :
	                this.responseType
	        });
	    };
	    /**
	     * @param {?} params
	     * @return {?}
	     */
	    RequestOptions.prototype._mergeSearchParams = function (params) {
	        if (!params)
	            return this.params;
	        if (params instanceof URLSearchParams) {
	            return params.clone();
	        }
	        if (typeof params === 'string') {
	            return new URLSearchParams(params);
	        }
	        return this._parseParams(params);
	    };
	    /**
	     * @param {?=} objParams
	     * @return {?}
	     */
	    RequestOptions.prototype._parseParams = function (objParams) {
	        var _this = this;
	        if (objParams === void 0) { objParams = {}; }
	        var /** @type {?} */ params = new URLSearchParams();
	        Object.keys(objParams).forEach(function (key) {
	            var /** @type {?} */ value = objParams[key];
	            if (Array.isArray(value)) {
	                value.forEach(function (item) { return _this._appendParam(key, item, params); });
	            }
	            else {
	                _this._appendParam(key, value, params);
	            }
	        });
	        return params;
	    };
	    /**
	     * @param {?} key
	     * @param {?} value
	     * @param {?} params
	     * @return {?}
	     */
	    RequestOptions.prototype._appendParam = function (key, value, params) {
	        if (typeof value !== 'string') {
	            value = JSON.stringify(value);
	        }
	        params.append(key, value);
	    };
	    return RequestOptions;
	}());
	/**
	 * Subclass of {\@link RequestOptions}, with default values.
	 *
	 * Default values:
	 *  * method: {\@link RequestMethod RequestMethod.Get}
	 *  * headers: empty {\@link Headers} object
	 *
	 * This class could be extended and bound to the {\@link RequestOptions} class
	 * when configuring an {\@link Injector}, in order to override the default options
	 * used by {\@link Http} to create and send {\@link Request Requests}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))
	 *
	 * ```typescript
	 * import {provide} from '\@angular/core';
	 * import {bootstrap} from '\@angular/platform-browser/browser';
	 * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '\@angular/http';
	 * import {App} from './myapp';
	 *
	 * class MyOptions extends BaseRequestOptions {
	 *   search: string = 'coreTeam=true';
	 * }
	 *
	 * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);
	 * ```
	 *
	 * The options could also be extended when manually creating a {\@link Request}
	 * object.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))
	 *
	 * ```
	 * import {BaseRequestOptions, Request, RequestMethod} from '\@angular/http';
	 *
	 * var options = new BaseRequestOptions();
	 * var req = new Request(options.merge({
	 *   method: RequestMethod.Post,
	 *   url: 'https://google.com'
	 * }));
	 * console.log('req.method:', RequestMethod[req.method]); // Post
	 * console.log('options.url:', options.url); // null
	 * console.log('req.url:', req.url); // https://google.com
	 * ```
	 *
	 * \@experimental
	 */
	var BaseRequestOptions = (function (_super) {
	    __extends(BaseRequestOptions, _super);
	    function BaseRequestOptions() {
	        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;
	    }
	    return BaseRequestOptions;
	}(RequestOptions));
	BaseRequestOptions.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	BaseRequestOptions.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Creates `Request` instances from provided values.
	 *
	 * The Request's interface is inspired by the Request constructor defined in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#request-class),
	 * but is considered a static value whose body can be accessed many times. There are other
	 * differences in the implementation, but this is the most significant.
	 *
	 * `Request` instances are typically created by higher-level classes, like {\@link Http} and
	 * {\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.
	 * One such example is when creating services that wrap higher-level services, like {\@link Http},
	 * where it may be useful to generate a `Request` with arbitrary headers and search params.
	 *
	 * ```typescript
	 * import {Injectable, Injector} from '\@angular/core';
	 * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\@angular/http';
	 *
	 * \@Injectable()
	 * class AutoAuthenticator {
	 *   constructor(public http:Http) {}
	 *   request(url:string) {
	 *     return this.http.request(new Request({
	 *       method: RequestMethod.Get,
	 *       url: url,
	 *       search: 'password=123'
	 *     }));
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);
	 * var authenticator = injector.get(AutoAuthenticator);
	 * authenticator.request('people.json').subscribe(res => {
	 *   //URL should have included '?password=123'
	 *   console.log('people', res.json());
	 * });
	 * ```
	 *
	 * \@experimental
	 */
	var Request = (function (_super) {
	    __extends(Request, _super);
	    /**
	     * @param {?} requestOptions
	     */
	    function Request(requestOptions) {
	        var _this = _super.call(this) || this;
	        // TODO: assert that url is present
	        var url = requestOptions.url;
	        _this.url = requestOptions.url;
	        if (requestOptions.params) {
	            var params = requestOptions.params.toString();
	            if (params.length > 0) {
	                var prefix = '?';
	                if (_this.url.indexOf('?') != -1) {
	                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';
	                }
	                // TODO: just delete search-query-looking string in url?
	                _this.url = url + prefix + params;
	            }
	        }
	        _this._body = requestOptions.body;
	        _this.method = normalizeMethodName(requestOptions.method);
	        // TODO(jeffbcross): implement behavior
	        // Defaults to 'omit', consistent with browser
	        _this.headers = new Headers(requestOptions.headers);
	        _this.contentType = _this.detectContentType();
	        _this.withCredentials = requestOptions.withCredentials;
	        _this.responseType = requestOptions.responseType;
	        return _this;
	    }
	    /**
	     * Returns the content type enum based on header options.
	     * @return {?}
	     */
	    Request.prototype.detectContentType = function () {
	        switch (this.headers.get('content-type')) {
	            case 'application/json':
	                return ContentType.JSON;
	            case 'application/x-www-form-urlencoded':
	                return ContentType.FORM;
	            case 'multipart/form-data':
	                return ContentType.FORM_DATA;
	            case 'text/plain':
	            case 'text/html':
	                return ContentType.TEXT;
	            case 'application/octet-stream':
	                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;
	            default:
	                return this.detectContentTypeFromBody();
	        }
	    };
	    /**
	     * Returns the content type of request's body based on its type.
	     * @return {?}
	     */
	    Request.prototype.detectContentTypeFromBody = function () {
	        if (this._body == null) {
	            return ContentType.NONE;
	        }
	        else if (this._body instanceof URLSearchParams) {
	            return ContentType.FORM;
	        }
	        else if (this._body instanceof FormData) {
	            return ContentType.FORM_DATA;
	        }
	        else if (this._body instanceof Blob$1) {
	            return ContentType.BLOB;
	        }
	        else if (this._body instanceof ArrayBuffer$1) {
	            return ContentType.ARRAY_BUFFER;
	        }
	        else if (this._body && typeof this._body === 'object') {
	            return ContentType.JSON;
	        }
	        else {
	            return ContentType.TEXT;
	        }
	    };
	    /**
	     * Returns the request's body according to its type. If body is undefined, return
	     * null.
	     * @return {?}
	     */
	    Request.prototype.getBody = function () {
	        switch (this.contentType) {
	            case ContentType.JSON:
	                return this.text();
	            case ContentType.FORM:
	                return this.text();
	            case ContentType.FORM_DATA:
	                return this._body;
	            case ContentType.TEXT:
	                return this.text();
	            case ContentType.BLOB:
	                return this.blob();
	            case ContentType.ARRAY_BUFFER:
	                return this.arrayBuffer();
	            default:
	                return null;
	        }
	    };
	    return Request;
	}(Body));
	var noop = function () { };
	var w = typeof window == 'object' ? window : noop;
	var FormData = ((w) /** TODO #9100 */)['FormData'] || noop;
	var Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;
	var ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} backend
	 * @param {?} request
	 * @return {?}
	 */
	function httpRequest(backend, request) {
	    return backend.createConnection(request).response;
	}
	/**
	 * @param {?} defaultOpts
	 * @param {?} providedOpts
	 * @param {?} method
	 * @param {?} url
	 * @return {?}
	 */
	function mergeOptions(defaultOpts, providedOpts, method, url) {
	    var /** @type {?} */ newOptions = defaultOpts;
	    if (providedOpts) {
	        // Hack so Dart can used named parameters
	        return newOptions.merge(new RequestOptions({
	            method: providedOpts.method || method,
	            url: providedOpts.url || url,
	            search: providedOpts.search,
	            params: providedOpts.params,
	            headers: providedOpts.headers,
	            body: providedOpts.body,
	            withCredentials: providedOpts.withCredentials,
	            responseType: providedOpts.responseType
	        }));
	    }
	    return newOptions.merge(new RequestOptions({ method: method, url: url }));
	}
	/**
	 * Performs http requests using `XMLHttpRequest` as the default backend.
	 *
	 * `Http` is available as an injectable class, with methods to perform http requests. Calling
	 * `request` returns an `Observable` which will emit a single {\@link Response} when a
	 * response is received.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {Http, HTTP_PROVIDERS} from '\@angular/http';
	 * import 'rxjs/add/operator/map'
	 * \@Component({
	 *   selector: 'http-app',
	 *   viewProviders: [HTTP_PROVIDERS],
	 *   templateUrl: 'people.html'
	 * })
	 * class PeopleComponent {
	 *   constructor(http: Http) {
	 *     http.get('people.json')
	 *       // Call map on the response observable to get the parsed people object
	 *       .map(res => res.json())
	 *       // Subscribe to the observable to get the parsed people object and attach it to the
	 *       // component
	 *       .subscribe(people => this.people = people);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * ### Example
	 *
	 * ```
	 * http.get('people.json').subscribe((res:Response) => this.people = res.json());
	 * ```
	 *
	 * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a "Backend" (
	 * {\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing
	 * the {\@link XHRBackend} provider, as in the following example:
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {BaseRequestOptions, Http} from '\@angular/http';
	 * import {MockBackend} from '\@angular/http/testing';
	 * var injector = Injector.resolveAndCreate([
	 *   BaseRequestOptions,
	 *   MockBackend,
	 *   {provide: Http, useFactory:
	 *       function(backend, defaultOptions) {
	 *         return new Http(backend, defaultOptions);
	 *       },
	 *       deps: [MockBackend, BaseRequestOptions]}
	 * ]);
	 * var http = injector.get(Http);
	 * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));
	 * ```
	 *
	 * \@experimental
	 */
	var Http = (function () {
	    /**
	     * @param {?} _backend
	     * @param {?} _defaultOptions
	     */
	    function Http(_backend, _defaultOptions) {
	        this._backend = _backend;
	        this._defaultOptions = _defaultOptions;
	    }
	    /**
	     * Performs any type of http request. First argument is required, and can either be a url or
	     * a {\@link Request} instance. If the first argument is a url, an optional {\@link RequestOptions}
	     * object can be provided as the 2nd argument. The options object will be merged with the values
	     * of {\@link BaseRequestOptions} before performing the request.
	     * @param {?} url
	     * @param {?=} options
	     * @return {?}
	     */
	    Http.prototype.request = function (url, options) {
	        var /** @type {?} */ responseObservable;
	        if (typeof url === 'string') {
	            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));
	        }
	        else if (url instanceof Request) {
	            responseObservable = httpRequest(this._backend, url);
	        }
	        else {
	            throw new Error('First argument must be a url string or Request instance.');
	        }
	        return responseObservable;
	    };
	    /**
	     * Performs a request with `get` http method.
	     * @param {?} url
	     * @param {?=} options
	     * @return {?}
	     */
	    Http.prototype.get = function (url, options) {
	        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));
	    };
	    /**
	     * Performs a request with `post` http method.
	     * @param {?} url
	     * @param {?} body
	     * @param {?=} options
	     * @return {?}
	     */
	    Http.prototype.post = function (url, body, options) {
	        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));
	    };
	    /**
	     * Performs a request with `put` http method.
	     * @param {?} url
	     * @param {?} body
	     * @param {?=} options
	     * @return {?}
	     */
	    Http.prototype.put = function (url, body, options) {
	        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));
	    };
	    /**
	     * Performs a request with `delete` http method.
	     * @param {?} url
	     * @param {?=} options
	     * @return {?}
	     */
	    Http.prototype.delete = function (url, options) {
	        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));
	    };
	    /**
	     * Performs a request with `patch` http method.
	     * @param {?} url
	     * @param {?} body
	     * @param {?=} options
	     * @return {?}
	     */
	    Http.prototype.patch = function (url, body, options) {
	        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));
	    };
	    /**
	     * Performs a request with `head` http method.
	     * @param {?} url
	     * @param {?=} options
	     * @return {?}
	     */
	    Http.prototype.head = function (url, options) {
	        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));
	    };
	    /**
	     * Performs a request with `options` http method.
	     * @param {?} url
	     * @param {?=} options
	     * @return {?}
	     */
	    Http.prototype.options = function (url, options) {
	        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));
	    };
	    return Http;
	}());
	Http.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	Http.ctorParameters = function () { return [
	    { type: ConnectionBackend, },
	    { type: RequestOptions, },
	]; };
	/**
	 * \@experimental
	 */
	var Jsonp = (function (_super) {
	    __extends(Jsonp, _super);
	    /**
	     * @param {?} backend
	     * @param {?} defaultOptions
	     */
	    function Jsonp(backend, defaultOptions) {
	        return _super.call(this, backend, defaultOptions) || this;
	    }
	    /**
	     * Performs any type of http request. First argument is required, and can either be a url or
	     * a {\@link Request} instance. If the first argument is a url, an optional {\@link RequestOptions}
	     * object can be provided as the 2nd argument. The options object will be merged with the values
	     * of {\@link BaseRequestOptions} before performing the request.
	     *
	     * \@security Regular XHR is the safest alternative to JSONP for most applications, and is
	     * supported by all current browsers. Because JSONP creates a `<script>` element with
	     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted
	     * source could expose your application to XSS risks. Data exposed by JSONP may also be
	     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for
	     * future security issues (e.g. content sniffing).  For more detail, see the
	     * [Security Guide](http://g.co/ng/security).
	     * @param {?} url
	     * @param {?=} options
	     * @return {?}
	     */
	    Jsonp.prototype.request = function (url, options) {
	        var /** @type {?} */ responseObservable;
	        if (typeof url === 'string') {
	            url =
	                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));
	        }
	        if (url instanceof Request) {
	            if (url.method !== RequestMethod.Get) {
	                throw new Error('JSONP requests must use GET request method.');
	            }
	            responseObservable = httpRequest(this._backend, url);
	        }
	        else {
	            throw new Error('First argument must be a url string or Request instance.');
	        }
	        return responseObservable;
	    };
	    return Jsonp;
	}(Http));
	Jsonp.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	Jsonp.ctorParameters = function () { return [
	    { type: ConnectionBackend, },
	    { type: RequestOptions, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * The http module provides services to perform http requests. To get started, see the {@link Http}
	 * class.
	 */
	/**
	 * @return {?}
	 */
	function _createDefaultCookieXSRFStrategy() {
	    return new CookieXSRFStrategy();
	}
	/**
	 * @param {?} xhrBackend
	 * @param {?} requestOptions
	 * @return {?}
	 */
	function httpFactory(xhrBackend, requestOptions) {
	    return new Http(xhrBackend, requestOptions);
	}
	/**
	 * @param {?} jsonpBackend
	 * @param {?} requestOptions
	 * @return {?}
	 */
	function jsonpFactory(jsonpBackend, requestOptions) {
	    return new Jsonp(jsonpBackend, requestOptions);
	}
	/**
	 * The module that includes http's providers
	 *
	 * \@experimental
	 */
	var HttpModule = (function () {
	    function HttpModule() {
	    }
	    return HttpModule;
	}());
	HttpModule.decorators = [
	    { type: _angular_core.NgModule, args: [{
	                providers: [
	                    // TODO(pascal): use factory type annotations once supported in DI
	                    // issue: https://github.com/angular/angular/issues/3183
	                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },
	                    BrowserXhr,
	                    { provide: RequestOptions, useClass: BaseRequestOptions },
	                    { provide: ResponseOptions, useClass: BaseResponseOptions },
	                    XHRBackend,
	                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },
	                ],
	            },] },
	];
	/**
	 * @nocollapse
	 */
	HttpModule.ctorParameters = function () { return []; };
	/**
	 * The module that includes jsonp's providers
	 *
	 * \@experimental
	 */
	var JsonpModule = (function () {
	    function JsonpModule() {
	    }
	    return JsonpModule;
	}());
	JsonpModule.decorators = [
	    { type: _angular_core.NgModule, args: [{
	                providers: [
	                    // TODO(pascal): use factory type annotations once supported in DI
	                    // issue: https://github.com/angular/angular/issues/3183
	                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },
	                    BrowserJsonp,
	                    { provide: RequestOptions, useClass: BaseRequestOptions },
	                    { provide: ResponseOptions, useClass: BaseResponseOptions },
	                    { provide: JSONPBackend, useClass: JSONPBackend_ },
	                ],
	            },] },
	];
	/**
	 * @nocollapse
	 */
	JsonpModule.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Entry point for all public APIs of the common package.
	 */
	/**
	 * \@stable
	 */
	var VERSION = new _angular_core.Version('4.0.0');
	
	exports.BrowserXhr = BrowserXhr;
	exports.JSONPBackend = JSONPBackend;
	exports.JSONPConnection = JSONPConnection;
	exports.CookieXSRFStrategy = CookieXSRFStrategy;
	exports.XHRBackend = XHRBackend;
	exports.XHRConnection = XHRConnection;
	exports.BaseRequestOptions = BaseRequestOptions;
	exports.RequestOptions = RequestOptions;
	exports.BaseResponseOptions = BaseResponseOptions;
	exports.ResponseOptions = ResponseOptions;
	exports.ReadyState = ReadyState;
	exports.RequestMethod = RequestMethod;
	exports.ResponseContentType = ResponseContentType;
	exports.ResponseType = ResponseType;
	exports.Headers = Headers;
	exports.Http = Http;
	exports.Jsonp = Jsonp;
	exports.HttpModule = HttpModule;
	exports.JsonpModule = JsonpModule;
	exports.Connection = Connection;
	exports.ConnectionBackend = ConnectionBackend;
	exports.XSRFStrategy = XSRFStrategy;
	exports.Request = Request;
	exports.Response = Response;
	exports.QueryEncoder = QueryEncoder;
	exports.URLSearchParams = URLSearchParams;
	exports.VERSION = VERSION;
	exports.ɵg = BrowserJsonp;
	exports.ɵa = JSONPBackend_;
	exports.ɵf = Body;
	exports.ɵb = _createDefaultCookieXSRFStrategy;
	exports.ɵc = httpFactory;
	exports.ɵd = jsonpFactory;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));
	//# sourceMappingURL=http.umd.js.map


/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(11), __webpack_require__(96), __webpack_require__(281), __webpack_require__(34)) :
		typeof define === 'function' && define.amd ? define(['exports', 'rxjs/Observable', 'rxjs/observable/merge', 'rxjs/operator/share', 'rxjs/Subject'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.Rx,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx));
	}(this, (function (exports,rxjs_Observable,rxjs_observable_merge,rxjs_operator_share,rxjs_Subject) { 'use strict';
	
	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * Creates a token that can be used in a DI Provider.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
	 *
	 * ```typescript
	 * var t = new OpaqueToken("value");
	 *
	 * var injector = Injector.resolveAndCreate([
	 *   {provide: t, useValue: "bindingValue"}
	 * ]);
	 *
	 * expect(injector.get(t)).toEqual("bindingValue");
	 * ```
	 *
	 * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
	 * caused by multiple providers using the same string as two different tokens.
	 *
	 * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
	 * error messages.
	 * @deprecated since v4.0.0 because it does not support type information, use `InjectionToken<?>`
	 * instead.
	 */
	var OpaqueToken = (function () {
	    /**
	     * @param {?} _desc
	     */
	    function OpaqueToken(_desc) {
	        this._desc = _desc;
	    }
	    /**
	     * @return {?}
	     */
	    OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
	    return OpaqueToken;
	}());
	/**
	 * Creates a token that can be used in a DI Provider.
	 *
	 * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
	 * runtime representation) such as when injecting an interface, callable type, array or
	 * parametrized type.
	 *
	 * `InjectionToken` is parametrize on `T` which is the type of object which will be returned by the
	 * `Injector`. This provides additional level of type safety.
	 *
	 * ```
	 * interface MyInterface {...}
	 * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
	 * // myInterface is inferred to be MyInterface.
	 * ```
	 *
	 * ### Example
	 *
	 * {\@example core/di/ts/injector_spec.ts region='Injector'}
	 *
	 * \@stable
	 */
	var InjectionToken = (function (_super) {
	    __extends(InjectionToken, _super);
	    /**
	     * @param {?} desc
	     */
	    function InjectionToken(desc) {
	        return _super.call(this, desc) || this;
	    }
	    /**
	     * @return {?}
	     */
	    InjectionToken.prototype.toString = function () { return "InjectionToken " + this._desc; };
	    return InjectionToken;
	}(OpaqueToken));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __window = typeof window !== 'undefined' && window;
	var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
	    self instanceof WorkerGlobalScope && self;
	var __global = typeof global !== 'undefined' && global;
	var _global = __window || __global || __self;
	var _symbolIterator = null;
	/**
	 * @return {?}
	 */
	function getSymbolIterator() {
	    if (!_symbolIterator) {
	        var /** @type {?} */ Symbol = _global['Symbol'];
	        if (Symbol && Symbol.iterator) {
	            _symbolIterator = Symbol.iterator;
	        }
	        else {
	            // es6-shim specific logic
	            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
	            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	                var /** @type {?} */ key = keys[i];
	                if (key !== 'entries' && key !== 'size' &&
	                    ((Map)).prototype[key] === Map.prototype['entries']) {
	                    _symbolIterator = key;
	                }
	            }
	        }
	    }
	    return _symbolIterator;
	}
	/**
	 * @param {?} fn
	 * @return {?}
	 */
	function scheduleMicroTask(fn) {
	    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
	}
	/**
	 * @param {?} a
	 * @param {?} b
	 * @return {?}
	 */
	function looseIdentical(a, b) {
	    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	}
	/**
	 * @param {?} token
	 * @return {?}
	 */
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (token == null) {
	        return '' + token;
	    }
	    if (token.overriddenName) {
	        return "" + token.overriddenName;
	    }
	    if (token.name) {
	        return "" + token.name;
	    }
	    var /** @type {?} */ res = token.toString();
	    if (res == null) {
	        return '' + res;
	    }
	    var /** @type {?} */ newLineIndex = res.indexOf('\n');
	    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _nextClassId = 0;
	var Reflect = _global['Reflect'];
	/**
	 * @param {?} annotation
	 * @return {?}
	 */
	function extractAnnotation(annotation) {
	    if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
	        // it is a decorator, extract annotation
	        annotation = annotation.annotation;
	    }
	    return annotation;
	}
	/**
	 * @param {?} fnOrArray
	 * @param {?} key
	 * @return {?}
	 */
	function applyParams(fnOrArray, key) {
	    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
	        fnOrArray === Number || fnOrArray === Array) {
	        throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
	    }
	    if (typeof fnOrArray === 'function') {
	        return fnOrArray;
	    }
	    if (Array.isArray(fnOrArray)) {
	        var /** @type {?} */ annotations = fnOrArray;
	        var /** @type {?} */ annoLength = annotations.length - 1;
	        var /** @type {?} */ fn = fnOrArray[annoLength];
	        if (typeof fn !== 'function') {
	            throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
	        }
	        if (annoLength != fn.length) {
	            throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
	        }
	        var /** @type {?} */ paramsAnnotations = [];
	        for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {
	            var /** @type {?} */ paramAnnotations = [];
	            paramsAnnotations.push(paramAnnotations);
	            var /** @type {?} */ annotation = annotations[i];
	            if (Array.isArray(annotation)) {
	                for (var /** @type {?} */ j = 0; j < annotation.length; j++) {
	                    paramAnnotations.push(extractAnnotation(annotation[j]));
	                }
	            }
	            else if (typeof annotation === 'function') {
	                paramAnnotations.push(extractAnnotation(annotation));
	            }
	            else {
	                paramAnnotations.push(annotation);
	            }
	        }
	        Reflect.defineMetadata('parameters', paramsAnnotations, fn);
	        return fn;
	    }
	    throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
	}
	/**
	 * Provides a way for expressing ES6 classes with parameter annotations in ES5.
	 *
	 * ## Basic Example
	 *
	 * ```
	 * var Greeter = ng.Class({
	 *   constructor: function(name) {
	 *     this.name = name;
	 *   },
	 *
	 *   greet: function() {
	 *     alert('Hello ' + this.name + '!');
	 *   }
	 * });
	 * ```
	 *
	 * is equivalent to ES6:
	 *
	 * ```
	 * class Greeter {
	 *   constructor(name) {
	 *     this.name = name;
	 *   }
	 *
	 *   greet() {
	 *     alert('Hello ' + this.name + '!');
	 *   }
	 * }
	 * ```
	 *
	 * or equivalent to ES5:
	 *
	 * ```
	 * var Greeter = function (name) {
	 *   this.name = name;
	 * }
	 *
	 * Greeter.prototype.greet = function () {
	 *   alert('Hello ' + this.name + '!');
	 * }
	 * ```
	 *
	 * ### Example with parameter annotations
	 *
	 * ```
	 * var MyService = ng.Class({
	 *   constructor: [String, [new Optional(), Service], function(name, myService) {
	 *     ...
	 *   }]
	 * });
	 * ```
	 *
	 * is equivalent to ES6:
	 *
	 * ```
	 * class MyService {
	 *   constructor(name: string, \@Optional() myService: Service) {
	 *     ...
	 *   }
	 * }
	 * ```
	 *
	 * ### Example with inheritance
	 *
	 * ```
	 * var Shape = ng.Class({
	 *   constructor: (color) {
	 *     this.color = color;
	 *   }
	 * });
	 *
	 * var Square = ng.Class({
	 *   extends: Shape,
	 *   constructor: function(color, size) {
	 *     Shape.call(this, color);
	 *     this.size = size;
	 *   }
	 * });
	 * ```
	 * @suppress {globalThis}
	 * \@stable
	 * @param {?} clsDef
	 * @return {?}
	 */
	function Class(clsDef) {
	    var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
	    var /** @type {?} */ proto = constructor.prototype;
	    if (clsDef.hasOwnProperty('extends')) {
	        if (typeof clsDef.extends === 'function') {
	            ((constructor)).prototype = proto =
	                Object.create(((clsDef.extends)).prototype);
	        }
	        else {
	            throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
	        }
	    }
	    for (var /** @type {?} */ key in clsDef) {
	        if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
	            proto[key] = applyParams(clsDef[key], key);
	        }
	    }
	    if (this && this.annotations instanceof Array) {
	        Reflect.defineMetadata('annotations', this.annotations, constructor);
	    }
	    var /** @type {?} */ constructorName = constructor['name'];
	    if (!constructorName || constructorName === 'constructor') {
	        ((constructor))['overriddenName'] = "class" + _nextClassId++;
	    }
	    return (constructor);
	}
	/**
	 * @suppress {globalThis}
	 * @param {?} name
	 * @param {?} props
	 * @param {?=} parentClass
	 * @param {?=} chainFn
	 * @return {?}
	 */
	function makeDecorator(name, props, parentClass, chainFn) {
	    if (chainFn === void 0) { chainFn = null; }
	    var /** @type {?} */ metaCtor = makeMetadataCtor([props]);
	    /**
	     * @param {?} objOrType
	     * @return {?}
	     */
	    function DecoratorFactory(objOrType) {
	        if (!(Reflect && Reflect.getOwnMetadata)) {
	            throw 'reflect-metadata shim is required when using class decorators';
	        }
	        if (this instanceof DecoratorFactory) {
	            metaCtor.call(this, objOrType);
	            return this;
	        }
	        var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);
	        var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
	        chainAnnotation.push(annotationInstance);
	        var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {
	            var /** @type {?} */ annotations = Reflect.getOwnMetadata('annotations', cls) || [];
	            annotations.push(annotationInstance);
	            Reflect.defineMetadata('annotations', annotations, cls);
	            return cls;
	        });
	        TypeDecorator.annotations = chainAnnotation;
	        TypeDecorator.Class = Class;
	        if (chainFn)
	            chainFn(TypeDecorator);
	        return TypeDecorator;
	    }
	    if (parentClass) {
	        DecoratorFactory.prototype = Object.create(parentClass.prototype);
	    }
	    DecoratorFactory.prototype.toString = function () { return "@" + name; };
	    ((DecoratorFactory)).annotationCls = DecoratorFactory;
	    return DecoratorFactory;
	}
	/**
	 * @param {?} props
	 * @return {?}
	 */
	function makeMetadataCtor(props) {
	    return function ctor() {
	        var _this = this;
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        props.forEach(function (prop, i) {
	            var /** @type {?} */ argVal = args[i];
	            if (Array.isArray(prop)) {
	                // plain parameter
	                _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
	            }
	            else {
	                for (var /** @type {?} */ propName in prop) {
	                    _this[propName] =
	                        argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
	                }
	            }
	        });
	    };
	}
	/**
	 * @param {?} name
	 * @param {?} props
	 * @param {?=} parentClass
	 * @return {?}
	 */
	function makeParamDecorator(name, props, parentClass) {
	    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
	    /**
	     * @param {...?} args
	     * @return {?}
	     */
	    function ParamDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (this instanceof ParamDecoratorFactory) {
	            metaCtor.apply(this, args);
	            return this;
	        }
	        var /** @type {?} */ annotationInstance = new (((ParamDecoratorFactory)).bind.apply(((ParamDecoratorFactory)), [void 0].concat(args)))();
	        ((ParamDecorator)).annotation = annotationInstance;
	        return ParamDecorator;
	        /**
	         * @param {?} cls
	         * @param {?} unusedKey
	         * @param {?} index
	         * @return {?}
	         */
	        function ParamDecorator(cls, unusedKey, index) {
	            var /** @type {?} */ parameters = Reflect.getOwnMetadata('parameters', cls) || [];
	            // there might be gaps if some in between parameters do not have annotations.
	            // we pad with nulls.
	            while (parameters.length <= index) {
	                parameters.push(null);
	            }
	            parameters[index] = parameters[index] || [];
	            parameters[index].push(annotationInstance);
	            Reflect.defineMetadata('parameters', parameters, cls);
	            return cls;
	        }
	    }
	    if (parentClass) {
	        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
	    }
	    ParamDecoratorFactory.prototype.toString = function () { return "@" + name; };
	    ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
	    return ParamDecoratorFactory;
	}
	/**
	 * @param {?} name
	 * @param {?} props
	 * @param {?=} parentClass
	 * @return {?}
	 */
	function makePropDecorator(name, props, parentClass) {
	    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
	    /**
	     * @param {...?} args
	     * @return {?}
	     */
	    function PropDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (this instanceof PropDecoratorFactory) {
	            metaCtor.apply(this, args);
	            return this;
	        }
	        var /** @type {?} */ decoratorInstance = new (((PropDecoratorFactory)).bind.apply(((PropDecoratorFactory)), [void 0].concat(args)))();
	        return function PropDecorator(target, name) {
	            var /** @type {?} */ meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
	            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
	            meta[name].unshift(decoratorInstance);
	            Reflect.defineMetadata('propMetadata', meta, target.constructor);
	        };
	    }
	    if (parentClass) {
	        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
	    }
	    PropDecoratorFactory.prototype.toString = function () { return "@" + name; };
	    ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
	    return PropDecoratorFactory;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This token can be used to create a virtual provider that will populate the
	 * `entryComponents` fields of components and ng modules based on its `useValue`.
	 * All components that are referenced in the `useValue` value (either directly
	 * or in a nested array or map) will be added to the `entryComponents` property.
	 *
	 * ### Example
	 * The following example shows how the router can populate the `entryComponents`
	 * field of an NgModule based on the router configuration which refers
	 * to components.
	 *
	 * ```typescript
	 * // helper function inside the router
	 * function provideRoutes(routes) {
	 *   return [
	 *     {provide: ROUTES, useValue: routes},
	 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
	 *   ];
	 * }
	 *
	 * // user code
	 * let routes = [
	 *   {path: '/root', component: RootComp},
	 *   {path: '/teams', component: TeamsComp}
	 * ];
	 *
	 * \@NgModule({
	 *   providers: [provideRoutes(routes)]
	 * })
	 * class ModuleWithRoutes {}
	 * ```
	 *
	 * \@experimental
	 */
	var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
	/**
	 * Attribute decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
	/**
	 * Base class for query metadata.
	 *
	 * See {\@link ContentChildren}, {\@link ContentChild}, {\@link ViewChildren}, {\@link ViewChild} for
	 * more information.
	 *
	 * \@stable
	 * @abstract
	 */
	var Query = (function () {
	    function Query() {
	    }
	    return Query;
	}());
	/**
	 * ContentChildren decorator and metadata.
	 *
	 *  \@stable
	 *  \@Annotation
	 */
	var ContentChildren = makePropDecorator('ContentChildren', [
	    ['selector', undefined], {
	        first: false,
	        isViewQuery: false,
	        descendants: false,
	        read: undefined,
	    }
	], Query);
	/**
	 * ContentChild decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var ContentChild = makePropDecorator('ContentChild', [
	    ['selector', undefined], {
	        first: true,
	        isViewQuery: false,
	        descendants: true,
	        read: undefined,
	    }
	], Query);
	/**
	 * ViewChildren decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var ViewChildren = makePropDecorator('ViewChildren', [
	    ['selector', undefined], {
	        first: false,
	        isViewQuery: true,
	        descendants: true,
	        read: undefined,
	    }
	], Query);
	/**
	 * ViewChild decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var ViewChild = makePropDecorator('ViewChild', [
	    ['selector', undefined], {
	        first: true,
	        isViewQuery: true,
	        descendants: true,
	        read: undefined,
	    }
	], Query);
	var ChangeDetectionStrategy = {};
	ChangeDetectionStrategy.OnPush = 0;
	ChangeDetectionStrategy.Default = 1;
	ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
	ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
	var ChangeDetectorStatus = {};
	ChangeDetectorStatus.CheckOnce = 0;
	ChangeDetectorStatus.Checked = 1;
	ChangeDetectorStatus.CheckAlways = 2;
	ChangeDetectorStatus.Detached = 3;
	ChangeDetectorStatus.Errored = 4;
	ChangeDetectorStatus.Destroyed = 5;
	ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
	ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
	ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
	ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
	ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
	ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
	/**
	 * @param {?} changeDetectionStrategy
	 * @return {?}
	 */
	function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
	    return changeDetectionStrategy == null ||
	        changeDetectionStrategy === ChangeDetectionStrategy.Default;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Directive decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Directive = makeDecorator('Directive', {
	    selector: undefined,
	    inputs: undefined,
	    outputs: undefined,
	    host: undefined,
	    providers: undefined,
	    exportAs: undefined,
	    queries: undefined
	});
	/**
	 * Component decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Component = makeDecorator('Component', {
	    selector: undefined,
	    inputs: undefined,
	    outputs: undefined,
	    host: undefined,
	    exportAs: undefined,
	    moduleId: undefined,
	    providers: undefined,
	    viewProviders: undefined,
	    changeDetection: ChangeDetectionStrategy.Default,
	    queries: undefined,
	    templateUrl: undefined,
	    template: undefined,
	    styleUrls: undefined,
	    styles: undefined,
	    animations: undefined,
	    encapsulation: undefined,
	    interpolation: undefined,
	    entryComponents: undefined
	}, Directive);
	/**
	 * Pipe decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Pipe = makeDecorator('Pipe', {
	    name: undefined,
	    pure: true,
	});
	/**
	 * Input decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
	/**
	 * Output decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
	/**
	 * HostBinding decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
	/**
	 * HostListener decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Defines a schema that will allow:
	 * - any non-Angular elements with a `-` in their name,
	 * - any properties on elements with a `-` in their name which is the common rule for custom
	 * elements.
	 *
	 * \@stable
	 */
	var CUSTOM_ELEMENTS_SCHEMA = {
	    name: 'custom-elements'
	};
	/**
	 * Defines a schema that will allow any property on any element.
	 *
	 * \@experimental
	 */
	var NO_ERRORS_SCHEMA = {
	    name: 'no-errors-schema'
	};
	/**
	 * NgModule decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var NgModule = makeDecorator('NgModule', {
	    providers: undefined,
	    declarations: undefined,
	    imports: undefined,
	    exports: undefined,
	    entryComponents: undefined,
	    bootstrap: undefined,
	    schemas: undefined,
	    id: undefined,
	});
	var ViewEncapsulation = {};
	ViewEncapsulation.Emulated = 0;
	ViewEncapsulation.Native = 1;
	ViewEncapsulation.None = 2;
	ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
	ViewEncapsulation[ViewEncapsulation.Native] = "Native";
	ViewEncapsulation[ViewEncapsulation.None] = "None";
	/**
	 * Metadata properties available for configuring Views.
	 *
	 * For details on the `\@Component` annotation, see {\@link Component}.
	 *
	 * ### Example
	 *
	 * ```
	 * \@Component({
	 *   selector: 'greet',
	 *   template: 'Hello {{name}}!',
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 *
	 * @deprecated Use Component instead.
	 *
	 * {\@link Component}
	 */
	var ViewMetadata = (function () {
	    /**
	     * @param {?=} __0
	     */
	    function ViewMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
	        this.templateUrl = templateUrl;
	        this.template = template;
	        this.styleUrls = styleUrls;
	        this.styles = styles;
	        this.encapsulation = encapsulation;
	        this.animations = animations;
	        this.interpolation = interpolation;
	    }
	    return ViewMetadata;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes Represents the version of Angular
	 *
	 * \@stable
	 */
	var Version = (function () {
	    /**
	     * @param {?} full
	     */
	    function Version(full) {
	        this.full = full;
	    }
	    Object.defineProperty(Version.prototype, "major", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.full.split('.')[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Version.prototype, "minor", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.full.split('.')[1]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Version.prototype, "patch", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.full.split('.').slice(2).join('.'); },
	        enumerable: true,
	        configurable: true
	    });
	    return Version;
	}());
	/**
	 * \@stable
	 */
	var VERSION = new Version('4.0.0');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Inject decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Inject = makeParamDecorator('Inject', [['token', undefined]]);
	/**
	 * Optional decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Optional = makeParamDecorator('Optional', []);
	/**
	 * Injectable decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Injectable = makeDecorator('Injectable', []);
	/**
	 * Self decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Self = makeParamDecorator('Self', []);
	/**
	 * SkipSelf decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var SkipSelf = makeParamDecorator('SkipSelf', []);
	/**
	 * Host decorator and metadata.
	 *
	 * \@stable
	 * \@Annotation
	 */
	var Host = makeParamDecorator('Host', []);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Allows to refer to references which are not yet defined.
	 *
	 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
	 * DI is declared,
	 * but not yet defined. It is also used when the `token` which we use when creating a query is not
	 * yet defined.
	 *
	 * ### Example
	 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
	 * \@experimental
	 * @param {?} forwardRefFn
	 * @return {?}
	 */
	function forwardRef(forwardRefFn) {
	    ((forwardRefFn)).__forward_ref__ = forwardRef;
	    ((forwardRefFn)).toString = function () { return stringify(this()); };
	    return (((forwardRefFn)));
	}
	/**
	 * Lazily retrieves the reference value from a forwardRef.
	 *
	 * Acts as the identity function when given a non-forward-ref value.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
	 *
	 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
	 *
	 * See: {\@link forwardRef}
	 * \@experimental
	 * @param {?} type
	 * @return {?}
	 */
	function resolveForwardRef(type) {
	    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
	        type.__forward_ref__ === forwardRef) {
	        return ((type))();
	    }
	    else {
	        return type;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _THROW_IF_NOT_FOUND = new Object();
	var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	var _NullInjector = (function () {
	    function _NullInjector() {
	    }
	    /**
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    _NullInjector.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
	        if (notFoundValue === _THROW_IF_NOT_FOUND) {
	            throw new Error("No provider for " + stringify(token) + "!");
	        }
	        return notFoundValue;
	    };
	    return _NullInjector;
	}());
	/**
	 * \@whatItDoes Injector interface
	 * \@howToUse
	 * ```
	 * const injector: Injector = ...;
	 * injector.get(...);
	 * ```
	 *
	 * \@description
	 * For more details, see the {\@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
	 *
	 * ### Example
	 *
	 * {\@example core/di/ts/injector_spec.ts region='Injector'}
	 *
	 * `Injector` returns itself when given `Injector` as a token:
	 * {\@example core/di/ts/injector_spec.ts region='injectInjector'}
	 *
	 * \@stable
	 * @abstract
	 */
	var Injector = (function () {
	    function Injector() {
	    }
	    /**
	     * Retrieves an instance from the injector based on the provided token.
	     * If not found:
	     * - Throws {\@link NoProviderError} if no `notFoundValue` that is not equal to
	     * Injector.THROW_IF_NOT_FOUND is given
	     * - Returns the `notFoundValue` otherwise
	     * @abstract
	     * @template T
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    Injector.prototype.get = function (token, notFoundValue) { };
	    /**
	     * @deprecated from v4.0.0 use Type<T> or InjectToken<T>
	     * @suppress {duplicate}
	     * @abstract
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    Injector.prototype.get = function (token, notFoundValue) { };
	    return Injector;
	}());
	Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	Injector.NULL = new _NullInjector();
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ERROR_COMPONENT_TYPE = 'ngComponentType';
	var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
	var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
	var ERROR_LOGGER = 'ngErrorLogger';
	/**
	 * @param {?} error
	 * @return {?}
	 */
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function getDebugContext(error) {
	    return ((error))[ERROR_DEBUG_CONTEXT];
	}
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function getOriginalError(error) {
	    return ((error))[ERROR_ORIGINAL_ERROR];
	}
	/**
	 * @param {?} error
	 * @return {?}
	 */
	function getErrorLogger(error) {
	    return ((error))[ERROR_LOGGER] || defaultErrorLogger;
	}
	/**
	 * @param {?} console
	 * @param {...?} values
	 * @return {?}
	 */
	function defaultErrorLogger(console) {
	    var values = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        values[_i - 1] = arguments[_i];
	    }
	    console.error.apply(console, values);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes Provides a hook for centralized exception handling.
	 *
	 * \@description
	 *
	 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
	 * intercept error handling, write a custom exception handler that replaces this default as
	 * appropriate for your app.
	 *
	 * ### Example
	 *
	 * ```
	 * class MyErrorHandler implements ErrorHandler {
	 *   handleError(error) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * \@NgModule({
	 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
	 * })
	 * class MyModule {}
	 * ```
	 *
	 * \@stable
	 */
	var ErrorHandler = (function () {
	    /**
	     * @param {?=} deprecatedParameter
	     */
	    function ErrorHandler(
	        /**
	         * @deprecated since v4.0 parameter no longer has an effect, as ErrorHandler will never
	         * rethrow.
	         */
	        deprecatedParameter) {
	        /**
	         * \@internal
	         */
	        this._console = console;
	    }
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    ErrorHandler.prototype.handleError = function (error) {
	        var /** @type {?} */ originalError = this._findOriginalError(error);
	        var /** @type {?} */ context = this._findContext(error);
	        // Note: Browser consoles show the place from where console.error was called.
	        // We can use this to give users additional information about the error.
	        var /** @type {?} */ errorLogger = getErrorLogger(error);
	        errorLogger(this._console, "ERROR", error);
	        if (originalError) {
	            errorLogger(this._console, "ORIGINAL ERROR", originalError);
	        }
	        if (context) {
	            errorLogger(this._console, 'ERROR CONTEXT', context);
	        }
	    };
	    /**
	     * \@internal
	     * @param {?} error
	     * @return {?}
	     */
	    ErrorHandler.prototype._findContext = function (error) {
	        if (error) {
	            return getDebugContext(error) ? getDebugContext(error) :
	                this._findContext(getOriginalError(error));
	        }
	        return null;
	    };
	    /**
	     * \@internal
	     * @param {?} error
	     * @return {?}
	     */
	    ErrorHandler.prototype._findOriginalError = function (error) {
	        var /** @type {?} */ e = getOriginalError(error);
	        while (e && getOriginalError(e)) {
	            e = getOriginalError(e);
	        }
	        return e;
	    };
	    return ErrorHandler;
	}());
	/**
	 * @param {?} message
	 * @param {?} originalError
	 * @return {?}
	 */
	function wrappedError(message, originalError) {
	    var /** @type {?} */ msg = message + " caused by: " + (originalError instanceof Error ? originalError.message : originalError);
	    var /** @type {?} */ error = Error(msg);
	    ((error))[ERROR_ORIGINAL_ERROR] = originalError;
	    return error;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} keys
	 * @return {?}
	 */
	function findFirstClosedCycle(keys) {
	    var /** @type {?} */ res = [];
	    for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	        if (res.indexOf(keys[i]) > -1) {
	            res.push(keys[i]);
	            return res;
	        }
	        res.push(keys[i]);
	    }
	    return res;
	}
	/**
	 * @param {?} keys
	 * @return {?}
	 */
	function constructResolvingPath(keys) {
	    if (keys.length > 1) {
	        var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());
	        var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });
	        return ' (' + tokenStrs.join(' -> ') + ')';
	    }
	    return '';
	}
	/**
	 * @param {?} injector
	 * @param {?} key
	 * @param {?} constructResolvingMessage
	 * @param {?=} originalError
	 * @return {?}
	 */
	function injectionError(injector, key, constructResolvingMessage, originalError) {
	    var /** @type {?} */ error = ((originalError ? wrappedError('', originalError) : Error()));
	    error.addKey = addKey;
	    error.keys = [key];
	    error.injectors = [injector];
	    error.constructResolvingMessage = constructResolvingMessage;
	    error.message = error.constructResolvingMessage();
	    ((error))[ERROR_ORIGINAL_ERROR] = originalError;
	    return error;
	}
	/**
	 * @this {?}
	 * @param {?} injector
	 * @param {?} key
	 * @return {?}
	 */
	function addKey(injector, key) {
	    this.injectors.push(injector);
	    this.keys.push(key);
	    this.message = this.constructResolvingMessage();
	}
	/**
	 * Thrown when trying to retrieve a dependency by key from {\@link Injector}, but the
	 * {\@link Injector} does not have a {\@link Provider} for the given key.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b:B) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 * @param {?} injector
	 * @param {?} key
	 * @return {?}
	 */
	function noProviderError(injector, key) {
	    return injectionError(injector, key, function () {
	        var /** @type {?} */ first = stringify(this.keys[0].token);
	        return "No provider for " + first + "!" + constructResolvingPath(this.keys);
	    });
	}
	/**
	 * Thrown when dependencies form a cycle.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
	 *
	 * ```typescript
	 * var injector = Injector.resolveAndCreate([
	 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
	 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
	 * ]);
	 *
	 * expect(() => injector.get("one")).toThrowError();
	 * ```
	 *
	 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	 * @param {?} injector
	 * @param {?} key
	 * @return {?}
	 */
	function cyclicDependencyError(injector, key) {
	    return injectionError(injector, key, function () {
	        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(this.keys);
	    });
	}
	/**
	 * Thrown when a constructing type returns with an Error.
	 *
	 * The `InstantiationError` class contains the original error plus the dependency graph which caused
	 * this object to be instantiated.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor() {
	 *     throw new Error('message');
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([A]);
	 * try {
	 *   injector.get(A);
	 * } catch (e) {
	 *   expect(e instanceof InstantiationError).toBe(true);
	 *   expect(e.originalException.message).toEqual("message");
	 *   expect(e.originalStack).toBeDefined();
	 * }
	 * ```
	 * @param {?} injector
	 * @param {?} originalException
	 * @param {?} originalStack
	 * @param {?} key
	 * @return {?}
	 */
	function instantiationError(injector, originalException, originalStack, key) {
	    return injectionError(injector, key, function () {
	        var /** @type {?} */ first = stringify(this.keys[0].token);
	        return getOriginalError(this).message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
	    }, originalException);
	}
	/**
	 * Thrown when an object other then {\@link Provider} (or `Type`) is passed to {\@link Injector}
	 * creation.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
	 * ```
	 * @param {?} provider
	 * @return {?}
	 */
	function invalidProviderError(provider) {
	    return Error("Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
	}
	/**
	 * Thrown when the class has no annotation information.
	 *
	 * Lack of annotation information prevents the {\@link Injector} from determining which dependencies
	 * need to be injected into the constructor.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 *
	 * This error is also thrown when the class not marked with {\@link Injectable} has parameter types.
	 *
	 * ```typescript
	 * class B {}
	 *
	 * class A {
	 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
	 * ```
	 * \@stable
	 * @param {?} typeOrFunc
	 * @param {?} params
	 * @return {?}
	 */
	function noAnnotationError(typeOrFunc, params) {
	    var /** @type {?} */ signature = [];
	    for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {
	        var /** @type {?} */ parameter = params[i];
	        if (!parameter || parameter.length == 0) {
	            signature.push('?');
	        }
	        else {
	            signature.push(parameter.map(stringify).join(' '));
	        }
	    }
	    return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
	        signature.join(', ') + '). ' +
	        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
	        stringify(typeOrFunc) + '\' is decorated with Injectable.');
	}
	/**
	 * Thrown when getting an object by index.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
	 *
	 * ```typescript
	 * class A {}
	 *
	 * var injector = Injector.resolveAndCreate([A]);
	 *
	 * expect(() => injector.getAt(100)).toThrowError();
	 * ```
	 * \@stable
	 * @param {?} index
	 * @return {?}
	 */
	function outOfBoundsError(index) {
	    return Error("Index " + index + " is out-of-bounds.");
	}
	/**
	 * Thrown when a multi provider and a regular provider are bound to the same token.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate([
	 *   { provide: "Strings", useValue: "string1", multi: true},
	 *   { provide: "Strings", useValue: "string2", multi: false}
	 * ])).toThrowError();
	 * ```
	 * @param {?} provider1
	 * @param {?} provider2
	 * @return {?}
	 */
	function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
	    return Error("Cannot mix multi providers and regular providers, got: " + provider1 + " " + provider2);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A unique object used for retrieving items from the {\@link ReflectiveInjector}.
	 *
	 * Keys have:
	 * - a system-wide unique `id`.
	 * - a `token`.
	 *
	 * `Key` is used internally by {\@link ReflectiveInjector} because its system-wide unique `id` allows
	 * the
	 * injector to store created objects in a more efficient way.
	 *
	 * `Key` should not be created directly. {\@link ReflectiveInjector} creates keys automatically when
	 * resolving
	 * providers.
	 * \@experimental
	 */
	var ReflectiveKey = (function () {
	    /**
	     * Private
	     * @param {?} token
	     * @param {?} id
	     */
	    function ReflectiveKey(token, id) {
	        this.token = token;
	        this.id = id;
	        if (!token) {
	            throw new Error('Token must be defined!');
	        }
	    }
	    Object.defineProperty(ReflectiveKey.prototype, "displayName", {
	        /**
	         * Returns a stringified token.
	         * @return {?}
	         */
	        get: function () { return stringify(this.token); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Retrieves a `Key` for a token.
	     * @param {?} token
	     * @return {?}
	     */
	    ReflectiveKey.get = function (token) {
	        return _globalKeyRegistry.get(resolveForwardRef(token));
	    };
	    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
	        /**
	         * @return {?} the number of keys registered in the system.
	         */
	        get: function () { return _globalKeyRegistry.numberOfKeys; },
	        enumerable: true,
	        configurable: true
	    });
	    return ReflectiveKey;
	}());
	/**
	 * \@internal
	 */
	var KeyRegistry = (function () {
	    function KeyRegistry() {
	        this._allKeys = new Map();
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    KeyRegistry.prototype.get = function (token) {
	        if (token instanceof ReflectiveKey)
	            return token;
	        if (this._allKeys.has(token)) {
	            return this._allKeys.get(token);
	        }
	        var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
	        this._allKeys.set(token, newKey);
	        return newKey;
	    };
	    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._allKeys.size; },
	        enumerable: true,
	        configurable: true
	    });
	    return KeyRegistry;
	}());
	var _globalKeyRegistry = new KeyRegistry();
	/**
	 * \@whatItDoes Represents a type that a Component or other object is instances of.
	 *
	 * \@description
	 *
	 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
	 * the `MyCustomComponent` constructor function.
	 *
	 * \@stable
	 */
	var Type = Function;
	/**
	 * @param {?} v
	 * @return {?}
	 */
	function isType(v) {
	    return typeof v === 'function';
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Attention: This regex has to hold even if the code is minified!
	 */
	var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{\s*("use strict";)?\s*(return\s+)?(\S+\s+!==\s+null\s+&&\s+)?\S+\.apply\(this,\s*arguments\)/;
	var ReflectionCapabilities = (function () {
	    /**
	     * @param {?=} reflect
	     */
	    function ReflectionCapabilities(reflect) {
	        this._reflect = reflect || _global['Reflect'];
	    }
	    /**
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	    /**
	     * @template T
	     * @param {?} t
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.factory = function (t) { return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return new (t.bind.apply(t, [void 0].concat(args)))();
	    }; };
	    /**
	     * \@internal
	     * @param {?} paramTypes
	     * @param {?} paramAnnotations
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
	        var /** @type {?} */ result;
	        if (typeof paramTypes === 'undefined') {
	            result = new Array(paramAnnotations.length);
	        }
	        else {
	            result = new Array(paramTypes.length);
	        }
	        for (var /** @type {?} */ i = 0; i < result.length; i++) {
	            // TS outputs Object for parameters without types, while Traceur omits
	            // the annotations. For now we preserve the Traceur behavior to aid
	            // migration, but this can be revisited.
	            if (typeof paramTypes === 'undefined') {
	                result[i] = [];
	            }
	            else if (paramTypes[i] != Object) {
	                result[i] = [paramTypes[i]];
	            }
	            else {
	                result[i] = [];
	            }
	            if (paramAnnotations && paramAnnotations[i] != null) {
	                result[i] = result[i].concat(paramAnnotations[i]);
	            }
	        }
	        return result;
	    };
	    /**
	     * @param {?} type
	     * @param {?} parentCtor
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
	        // If we have no decorators, we only have function.length as metadata.
	        // In that case, to detect whether a child class declared an own constructor or not,
	        // we need to look inside of that constructor to check whether it is
	        // just calling the parent.
	        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
	        // that sets 'design:paramtypes' to []
	        // if a class inherits from another class but has no ctor declared itself.
	        if (DELEGATE_CTOR.exec(type.toString())) {
	            return null;
	        }
	        // Prefer the direct API.
	        if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {
	            return ((type)).parameters;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;
	        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
	            // Newer tsickle uses a function closure
	            // Retain the non-function case for compatibility with older tsickle
	            var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
	            var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
	            var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) { return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators); });
	            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	        }
	        // API for metadata created by invoking the decorators.
	        if (this._reflect != null && this._reflect.getOwnMetadata != null) {
	            var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
	            var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
	            if (paramTypes || paramAnnotations) {
	                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	            }
	        }
	        // If a class has no decorators, at least create metadata
	        // based on function.length.
	        // Note: We know that this is a real constructor as we checked
	        // the content of the constructor above.
	        return new Array(((type.length))).fill(undefined);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.parameters = function (type) {
	        // Note: only report metadata if we have at least one class decorator
	        // to stay in sync with the static reflector.
	        if (!isType(type)) {
	            return [];
	        }
	        var /** @type {?} */ parentCtor = getParentCtor(type);
	        var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);
	        if (!parameters && parentCtor !== Object) {
	            parameters = this.parameters(parentCtor);
	        }
	        return parameters || [];
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} parentCtor
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
	        // Prefer the direct API.
	        if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {
	            var /** @type {?} */ annotations = ((typeOrFunc)).annotations;
	            if (typeof annotations === 'function' && annotations.annotations) {
	                annotations = annotations.annotations;
	            }
	            return annotations;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {
	            return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);
	        }
	        // API for metadata created by invoking the decorators.
	        if (this._reflect && this._reflect.getOwnMetadata) {
	            return this._reflect.getOwnMetadata('annotations', typeOrFunc);
	        }
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
	        if (!isType(typeOrFunc)) {
	            return [];
	        }
	        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
	        var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
	        var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
	        return parentAnnotations.concat(ownAnnotations);
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} parentCtor
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
	        // Prefer the direct API.
	        if (((typeOrFunc)).propMetadata &&
	            ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
	            var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;
	            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
	                propMetadata = propMetadata.propMetadata;
	            }
	            return propMetadata;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        if (((typeOrFunc)).propDecorators &&
	            ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
	            var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;
	            var /** @type {?} */ propMetadata_1 = ({});
	            Object.keys(propDecorators_1).forEach(function (prop) {
	                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
	            });
	            return propMetadata_1;
	        }
	        // API for metadata created by invoking the decorators.
	        if (this._reflect && this._reflect.getOwnMetadata) {
	            return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
	        }
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	        if (!isType(typeOrFunc)) {
	            return {};
	        }
	        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
	        var /** @type {?} */ propMetadata = {};
	        if (parentCtor !== Object) {
	            var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);
	            Object.keys(parentPropMetadata_1).forEach(function (propName) {
	                propMetadata[propName] = parentPropMetadata_1[propName];
	            });
	        }
	        var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
	        if (ownPropMetadata) {
	            Object.keys(ownPropMetadata).forEach(function (propName) {
	                var /** @type {?} */ decorators = [];
	                if (propMetadata.hasOwnProperty(propName)) {
	                    decorators.push.apply(decorators, propMetadata[propName]);
	                }
	                decorators.push.apply(decorators, ownPropMetadata[propName]);
	                propMetadata[propName] = decorators;
	            });
	        }
	        return propMetadata;
	    };
	    /**
	     * @param {?} type
	     * @param {?} lcProperty
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return type instanceof Type && lcProperty in type.prototype;
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.getter = function (name) { return (new Function('o', 'return o.' + name + ';')); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.setter = function (name) {
	        return (new Function('o', 'v', 'return o.' + name + ' = v;'));
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.method = function (name) {
	        var /** @type {?} */ functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	        return (new Function('o', 'args', functionBody));
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.importUri = function (type) {
	        // StaticSymbol
	        if (typeof type === 'object' && type['filePath']) {
	            return type['filePath'];
	        }
	        // Runtime type
	        return "./" + stringify(type);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.resourceUri = function (type) { return "./" + stringify(type); };
	    /**
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @param {?} runtime
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
	        return runtime;
	    };
	    /**
	     * @param {?} enumIdentifier
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
	    return ReflectionCapabilities;
	}());
	/**
	 * @param {?} decoratorInvocations
	 * @return {?}
	 */
	function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
	    if (!decoratorInvocations) {
	        return [];
	    }
	    return decoratorInvocations.map(function (decoratorInvocation) {
	        var /** @type {?} */ decoratorType = decoratorInvocation.type;
	        var /** @type {?} */ annotationCls = decoratorType.annotationCls;
	        var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
	        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
	    });
	}
	/**
	 * @param {?} ctor
	 * @return {?}
	 */
	function getParentCtor(ctor) {
	    var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);
	    var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;
	    // Note: We always use `Object` as the null value
	    // to simplify checking later on.
	    return parentCtor || Object;
	}
	/**
	 * Provides read-only access to reflection data about symbols. Used internally by Angular
	 * to power dependency injection and compilation.
	 * @abstract
	 */
	var ReflectorReader = (function () {
	    function ReflectorReader() {
	    }
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.parameters = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.annotations = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.importUri = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    ReflectorReader.prototype.resourceUri = function (typeOrFunc) { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @param {?} runtime
	     * @return {?}
	     */
	    ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) { };
	    /**
	     * @abstract
	     * @param {?} identifier
	     * @param {?} name
	     * @return {?}
	     */
	    ReflectorReader.prototype.resolveEnum = function (identifier, name) { };
	    return ReflectorReader;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides access to reflection data about symbols. Used internally by Angular
	 * to power dependency injection and compilation.
	 */
	var Reflector = (function (_super) {
	    __extends(Reflector, _super);
	    /**
	     * @param {?} reflectionCapabilities
	     */
	    function Reflector(reflectionCapabilities) {
	        var _this = _super.call(this) || this;
	        _this.reflectionCapabilities = reflectionCapabilities;
	        return _this;
	    }
	    /**
	     * @param {?} caps
	     * @return {?}
	     */
	    Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    Reflector.prototype.parameters = function (typeOrFunc) {
	        return this.reflectionCapabilities.parameters(typeOrFunc);
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    Reflector.prototype.annotations = function (typeOrFunc) {
	        return this.reflectionCapabilities.annotations(typeOrFunc);
	    };
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    Reflector.prototype.propMetadata = function (typeOrFunc) {
	        return this.reflectionCapabilities.propMetadata(typeOrFunc);
	    };
	    /**
	     * @param {?} type
	     * @param {?} lcProperty
	     * @return {?}
	     */
	    Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
	    };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };
	    /**
	     * @param {?} name
	     * @param {?} moduleUrl
	     * @param {?} members
	     * @param {?} runtime
	     * @return {?}
	     */
	    Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
	        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
	    };
	    /**
	     * @param {?} identifier
	     * @param {?} name
	     * @return {?}
	     */
	    Reflector.prototype.resolveEnum = function (identifier, name) {
	        return this.reflectionCapabilities.resolveEnum(identifier, name);
	    };
	    return Reflector;
	}(ReflectorReader));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The {@link Reflector} used internally in Angular to access metadata
	 * about symbols.
	 */
	var reflector = new Reflector(new ReflectionCapabilities());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `Dependency` is used by the framework to extend DI.
	 * This is internal to Angular and should not be used directly.
	 */
	var ReflectiveDependency = (function () {
	    /**
	     * @param {?} key
	     * @param {?} optional
	     * @param {?} visibility
	     */
	    function ReflectiveDependency(key, optional, visibility) {
	        this.key = key;
	        this.optional = optional;
	        this.visibility = visibility;
	    }
	    /**
	     * @param {?} key
	     * @return {?}
	     */
	    ReflectiveDependency.fromKey = function (key) {
	        return new ReflectiveDependency(key, false, null);
	    };
	    return ReflectiveDependency;
	}());
	var _EMPTY_LIST = [];
	var ResolvedReflectiveProvider_ = (function () {
	    /**
	     * @param {?} key
	     * @param {?} resolvedFactories
	     * @param {?} multiProvider
	     */
	    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
	        this.key = key;
	        this.resolvedFactories = resolvedFactories;
	        this.multiProvider = multiProvider;
	    }
	    Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.resolvedFactories[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    return ResolvedReflectiveProvider_;
	}());
	/**
	 * An internal resolved representation of a factory function created by resolving {\@link
	 * Provider}.
	 * \@experimental
	 */
	var ResolvedReflectiveFactory = (function () {
	    /**
	     * @param {?} factory
	     * @param {?} dependencies
	     */
	    function ResolvedReflectiveFactory(factory, dependencies) {
	        this.factory = factory;
	        this.dependencies = dependencies;
	    }
	    return ResolvedReflectiveFactory;
	}());
	/**
	 * Resolve a single provider.
	 * @param {?} provider
	 * @return {?}
	 */
	function resolveReflectiveFactory(provider) {
	    var /** @type {?} */ factoryFn;
	    var /** @type {?} */ resolvedDeps;
	    if (provider.useClass) {
	        var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);
	        factoryFn = reflector.factory(useClass);
	        resolvedDeps = _dependenciesFor(useClass);
	    }
	    else if (provider.useExisting) {
	        factoryFn = function (aliasInstance) { return aliasInstance; };
	        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
	    }
	    else if (provider.useFactory) {
	        factoryFn = provider.useFactory;
	        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
	    }
	    else {
	        factoryFn = function () { return provider.useValue; };
	        resolvedDeps = _EMPTY_LIST;
	    }
	    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
	}
	/**
	 * Converts the {\@link Provider} into {\@link ResolvedProvider}.
	 *
	 * {\@link Injector} internally only uses {\@link ResolvedProvider}, {\@link Provider} contains
	 * convenience provider syntax.
	 * @param {?} provider
	 * @return {?}
	 */
	function resolveReflectiveProvider(provider) {
	    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
	}
	/**
	 * Resolve a list of Providers.
	 * @param {?} providers
	 * @return {?}
	 */
	function resolveReflectiveProviders(providers) {
	    var /** @type {?} */ normalized = _normalizeProviders(providers, []);
	    var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);
	    var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
	    return Array.from(resolvedProviderMap.values());
	}
	/**
	 * Merges a list of ResolvedProviders into a list where
	 * each key is contained exactly once and multi providers
	 * have been merged.
	 * @param {?} providers
	 * @param {?} normalizedProvidersMap
	 * @return {?}
	 */
	function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
	    for (var /** @type {?} */ i = 0; i < providers.length; i++) {
	        var /** @type {?} */ provider = providers[i];
	        var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);
	        if (existing) {
	            if (provider.multiProvider !== existing.multiProvider) {
	                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
	            }
	            if (provider.multiProvider) {
	                for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {
	                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
	                }
	            }
	            else {
	                normalizedProvidersMap.set(provider.key.id, provider);
	            }
	        }
	        else {
	            var /** @type {?} */ resolvedProvider = void 0;
	            if (provider.multiProvider) {
	                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
	            }
	            else {
	                resolvedProvider = provider;
	            }
	            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
	        }
	    }
	    return normalizedProvidersMap;
	}
	/**
	 * @param {?} providers
	 * @param {?} res
	 * @return {?}
	 */
	function _normalizeProviders(providers, res) {
	    providers.forEach(function (b) {
	        if (b instanceof Type) {
	            res.push({ provide: b, useClass: b });
	        }
	        else if (b && typeof b == 'object' && ((b)).provide !== undefined) {
	            res.push(/** @type {?} */ (b));
	        }
	        else if (b instanceof Array) {
	            _normalizeProviders(b, res);
	        }
	        else {
	            throw invalidProviderError(b);
	        }
	    });
	    return res;
	}
	/**
	 * @param {?} typeOrFunc
	 * @param {?} dependencies
	 * @return {?}
	 */
	function constructDependencies(typeOrFunc, dependencies) {
	    if (!dependencies) {
	        return _dependenciesFor(typeOrFunc);
	    }
	    else {
	        var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });
	        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
	    }
	}
	/**
	 * @param {?} typeOrFunc
	 * @return {?}
	 */
	function _dependenciesFor(typeOrFunc) {
	    var /** @type {?} */ params = reflector.parameters(typeOrFunc);
	    if (!params)
	        return [];
	    if (params.some(function (p) { return p == null; })) {
	        throw noAnnotationError(typeOrFunc, params);
	    }
	    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
	}
	/**
	 * @param {?} typeOrFunc
	 * @param {?} metadata
	 * @param {?} params
	 * @return {?}
	 */
	function _extractToken(typeOrFunc, metadata, params) {
	    var /** @type {?} */ token = null;
	    var /** @type {?} */ optional = false;
	    if (!Array.isArray(metadata)) {
	        if (metadata instanceof Inject) {
	            return _createDependency(metadata['token'], optional, null);
	        }
	        else {
	            return _createDependency(metadata, optional, null);
	        }
	    }
	    var /** @type {?} */ visibility = null;
	    for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {
	        var /** @type {?} */ paramMetadata = metadata[i];
	        if (paramMetadata instanceof Type) {
	            token = paramMetadata;
	        }
	        else if (paramMetadata instanceof Inject) {
	            token = paramMetadata['token'];
	        }
	        else if (paramMetadata instanceof Optional) {
	            optional = true;
	        }
	        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
	            visibility = paramMetadata;
	        }
	        else if (paramMetadata instanceof InjectionToken) {
	            token = paramMetadata;
	        }
	    }
	    token = resolveForwardRef(token);
	    if (token != null) {
	        return _createDependency(token, optional, visibility);
	    }
	    else {
	        throw noAnnotationError(typeOrFunc, params);
	    }
	}
	/**
	 * @param {?} token
	 * @param {?} optional
	 * @param {?} visibility
	 * @return {?}
	 */
	function _createDependency(token, optional, visibility) {
	    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Threshold for the dynamic version
	var UNDEFINED = new Object();
	/**
	 * A ReflectiveDependency injection container used for instantiating objects and resolving
	 * dependencies.
	 *
	 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	 * constructor dependencies.
	 *
	 * In typical use, application code asks for the dependencies in the constructor and they are
	 * resolved by the `Injector`.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
	 *
	 * The following example creates an `Injector` configured to create `Engine` and `Car`.
	 *
	 * ```typescript
	 * \@Injectable()
	 * class Engine {
	 * }
	 *
	 * \@Injectable()
	 * class Car {
	 *   constructor(public engine:Engine) {}
	 * }
	 *
	 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	 * var car = injector.get(Car);
	 * expect(car instanceof Car).toBe(true);
	 * expect(car.engine instanceof Engine).toBe(true);
	 * ```
	 *
	 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
	 * resolve all of the object's dependencies automatically.
	 *
	 * \@stable
	 * @abstract
	 */
	var ReflectiveInjector = (function () {
	    function ReflectiveInjector() {
	    }
	    /**
	     * Turns an array of provider definitions into an array of resolved providers.
	     *
	     * A resolution is a process of flattening multiple nested arrays and converting individual
	     * providers into an array of {\@link ResolvedReflectiveProvider}s.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
	     *
	     * expect(providers.length).toEqual(2);
	     *
	     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
	     * expect(providers[0].key.displayName).toBe("Car");
	     * expect(providers[0].dependencies.length).toEqual(1);
	     * expect(providers[0].factory).toBeDefined();
	     *
	     * expect(providers[1].key.displayName).toBe("Engine");
	     * });
	     * ```
	     *
	     * See {\@link ReflectiveInjector#fromResolvedProviders} for more info.
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector.resolve = function (providers) {
	        return resolveReflectiveProviders(providers);
	    };
	    /**
	     * Resolves an array of providers and creates an injector from those providers.
	     *
	     * The passed-in providers can be an array of `Type`, {\@link Provider},
	     * or a recursive array of more providers.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     *
	     * This function is slower than the corresponding `fromResolvedProviders`
	     * because it needs to resolve the passed-in providers first.
	     * See {\@link Injector#resolve} and {\@link Injector#fromResolvedProviders}.
	     * @param {?} providers
	     * @param {?=} parent
	     * @return {?}
	     */
	    ReflectiveInjector.resolveAndCreate = function (providers, parent) {
	        if (parent === void 0) { parent = null; }
	        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
	    };
	    /**
	     * Creates an injector from previously resolved providers.
	     *
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = ReflectiveInjector.resolve([Car, Engine]);
	     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     * \@experimental
	     * @param {?} providers
	     * @param {?=} parent
	     * @return {?}
	     */
	    ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
	        if (parent === void 0) { parent = null; }
	        return new ReflectiveInjector_(providers, parent);
	    };
	    /**
	     * Parent of this injector.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
	     *
	     * ```typescript
	     * var parent = ReflectiveInjector.resolveAndCreate([]);
	     * var child = parent.resolveAndCreateChild([]);
	     * expect(child.parent).toBe(parent);
	     * ```
	     * @abstract
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.parent = function () { };
	    /**
	     * Resolves an array of providers and creates a child injector from those providers.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * The passed-in providers can be an array of `Type`, {\@link Provider},
	     * or a recursive array of more providers.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
	     *
	     * ```typescript
	     * class ParentProvider {}
	     * class ChildProvider {}
	     *
	     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
	     * var child = parent.resolveAndCreateChild([ChildProvider]);
	     *
	     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	     * ```
	     *
	     * This function is slower than the corresponding `createChildFromResolved`
	     * because it needs to resolve the passed-in providers first.
	     * See {\@link Injector#resolve} and {\@link Injector#createChildFromResolved}.
	     * @abstract
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };
	    /**
	     * Creates a child injector from previously resolved providers.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
	     *
	     * ```typescript
	     * class ParentProvider {}
	     * class ChildProvider {}
	     *
	     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
	     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
	     *
	     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
	     * var child = parent.createChildFromResolved(childProviders);
	     *
	     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	     * ```
	     * @abstract
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };
	    /**
	     * Resolves a provider and instantiates an object in the context of the injector.
	     *
	     * The created object does not get cached by the injector.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	     *
	     * var car = injector.resolveAndInstantiate(Car);
	     * expect(car.engine).toBe(injector.get(Engine));
	     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
	     * ```
	     * @abstract
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };
	    /**
	     * Instantiates an object using a resolved provider in the context of the injector.
	     *
	     * The created object does not get cached by the injector.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	     * var carProvider = ReflectiveInjector.resolve([Car])[0];
	     * var car = injector.instantiateResolved(carProvider);
	     * expect(car.engine).toBe(injector.get(Engine));
	     * expect(car).not.toBe(injector.instantiateResolved(carProvider));
	     * ```
	     * @abstract
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };
	    /**
	     * @abstract
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };
	    return ReflectiveInjector;
	}());
	var ReflectiveInjector_ = (function () {
	    /**
	     * Private
	     * @param {?} _providers
	     * @param {?=} _parent
	     */
	    function ReflectiveInjector_(_providers, _parent) {
	        if (_parent === void 0) { _parent = null; }
	        /**
	         * \@internal
	         */
	        this._constructionCounter = 0;
	        this._providers = _providers;
	        this._parent = _parent;
	        var len = _providers.length;
	        this.keyIds = new Array(len);
	        this.objs = new Array(len);
	        for (var i = 0; i < len; i++) {
	            this.keyIds[i] = _providers[i].key.id;
	            this.objs[i] = UNDEFINED;
	        }
	    }
	    /**
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
	    };
	    Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._parent; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
	        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	        return this.createChildFromResolved(ResolvedReflectiveProviders);
	    };
	    /**
	     * @param {?} providers
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
	        var /** @type {?} */ inj = new ReflectiveInjector_(providers);
	        inj._parent = this;
	        return inj;
	    };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
	        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
	    };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
	        return this._instantiateProvider(provider);
	    };
	    /**
	     * @param {?} index
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {
	        if (index < 0 || index >= this._providers.length) {
	            throw outOfBoundsError(index);
	        }
	        return this._providers[index];
	    };
	    /**
	     * \@internal
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._new = function (provider) {
	        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
	            throw cyclicDependencyError(this, provider.key);
	        }
	        return this._instantiateProvider(provider);
	    };
	    /**
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };
	    /**
	     * @param {?} provider
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
	        if (provider.multiProvider) {
	            var /** @type {?} */ res = new Array(provider.resolvedFactories.length);
	            for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {
	                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
	            }
	            return res;
	        }
	        else {
	            return this._instantiate(provider, provider.resolvedFactories[0]);
	        }
	    };
	    /**
	     * @param {?} provider
	     * @param {?} ResolvedReflectiveFactory
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory$$1) {
	        var _this = this;
	        var /** @type {?} */ factory = ResolvedReflectiveFactory$$1.factory;
	        var /** @type {?} */ deps;
	        try {
	            deps =
	                ResolvedReflectiveFactory$$1.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });
	        }
	        catch (e) {
	            if (e.addKey) {
	                e.addKey(this, provider.key);
	            }
	            throw e;
	        }
	        var /** @type {?} */ obj;
	        try {
	            obj = factory.apply(void 0, deps);
	        }
	        catch (e) {
	            throw instantiationError(this, e, e.stack, provider.key);
	        }
	        return obj;
	    };
	    /**
	     * @param {?} dep
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {
	        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
	    };
	    /**
	     * @param {?} key
	     * @param {?} visibility
	     * @param {?} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {
	        if (key === INJECTOR_KEY) {
	            return this;
	        }
	        if (visibility instanceof Self) {
	            return this._getByKeySelf(key, notFoundValue);
	        }
	        else {
	            return this._getByKeyDefault(key, notFoundValue, visibility);
	        }
	    };
	    /**
	     * @param {?} keyId
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {
	        for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {
	            if (this.keyIds[i] === keyId) {
	                if (this.objs[i] === UNDEFINED) {
	                    this.objs[i] = this._new(this._providers[i]);
	                }
	                return this.objs[i];
	            }
	        }
	        return UNDEFINED;
	    };
	    /**
	     * \@internal
	     * @param {?} key
	     * @param {?} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
	        if (notFoundValue !== THROW_IF_NOT_FOUND) {
	            return notFoundValue;
	        }
	        else {
	            throw noProviderError(this, key);
	        }
	    };
	    /**
	     * \@internal
	     * @param {?} key
	     * @param {?} notFoundValue
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
	        var /** @type {?} */ obj = this._getObjByKeyId(key.id);
	        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
	    };
	    /**
	     * \@internal
	     * @param {?} key
	     * @param {?} notFoundValue
	     * @param {?} visibility
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {
	        var /** @type {?} */ inj;
	        if (visibility instanceof SkipSelf) {
	            inj = this._parent;
	        }
	        else {
	            inj = this;
	        }
	        while (inj instanceof ReflectiveInjector_) {
	            var /** @type {?} */ inj_ = (inj);
	            var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);
	            if (obj !== UNDEFINED)
	                return obj;
	            inj = inj_._parent;
	        }
	        if (inj !== null) {
	            return inj.get(key.token, notFoundValue);
	        }
	        else {
	            return this._throwOrNull(key, notFoundValue);
	        }
	    };
	    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
	                .join(', ');
	            return "ReflectiveInjector(providers: [" + providers + "])";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
	    return ReflectiveInjector_;
	}());
	var INJECTOR_KEY = ReflectiveKey.get(Injector);
	/**
	 * @param {?} injector
	 * @param {?} fn
	 * @return {?}
	 */
	function _mapProviders(injector, fn) {
	    var /** @type {?} */ res = new Array(injector._providers.length);
	    for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {
	        res[i] = fn(injector.getProviderAtIndex(i));
	    }
	    return res;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * The `di` module provides dependency injection container services.
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Determine if the argument is shaped like a Promise
	 * @param {?} obj
	 * @return {?}
	 */
	function isPromise(obj) {
	    // allow any Promise/A+ compliant thenable.
	    // It's up to the caller to ensure that obj.then conforms to the spec
	    return !!obj && typeof obj.then === 'function';
	}
	/**
	 * Determine if the argument is an Observable
	 * @param {?} obj
	 * @return {?}
	 */
	function isObservable(obj) {
	    // TODO use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved
	    return !!obj && typeof obj.subscribe === 'function';
	}
	/**
	 * @template V
	 * @param {?} m1
	 * @param {?} m2
	 * @return {?}
	 */
	function merge$1(m1, m2) {
	    var /** @type {?} */ m = {};
	    for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	        var k = _a[_i];
	        m[k] = m1[k];
	    }
	    for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	        var k = _c[_b];
	        m[k] = m2[k];
	    }
	    return m;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A function that will be executed when an application is initialized.
	 * \@experimental
	 */
	var APP_INITIALIZER = new InjectionToken('Application Initializer');
	/**
	 * A class that reflects the state of running {\@link APP_INITIALIZER}s.
	 *
	 * \@experimental
	 */
	var ApplicationInitStatus = (function () {
	    /**
	     * @param {?} appInits
	     */
	    function ApplicationInitStatus(appInits) {
	        var _this = this;
	        this._done = false;
	        var asyncInitPromises = [];
	        if (appInits) {
	            for (var i = 0; i < appInits.length; i++) {
	                var initResult = appInits[i]();
	                if (isPromise(initResult)) {
	                    asyncInitPromises.push(initResult);
	                }
	            }
	        }
	        this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });
	        if (asyncInitPromises.length === 0) {
	            this._done = true;
	        }
	    }
	    Object.defineProperty(ApplicationInitStatus.prototype, "done", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._done; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._donePromise; },
	        enumerable: true,
	        configurable: true
	    });
	    return ApplicationInitStatus;
	}());
	ApplicationInitStatus.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	ApplicationInitStatus.ctorParameters = function () { return [
	    { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A DI Token representing a unique string id assigned to the application by Angular and used
	 * primarily for prefixing application attributes and CSS styles when
	 * {\@link ViewEncapsulation#Emulated} is being used.
	 *
	 * If you need to avoid randomly generated value to be used as an application id, you can provide
	 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\@link Injector}
	 * using this token.
	 * \@experimental
	 */
	var APP_ID = new InjectionToken('AppId');
	/**
	 * @return {?}
	 */
	function _appIdRandomProviderFactory() {
	    return "" + _randomChar() + _randomChar() + _randomChar();
	}
	/**
	 * Providers that will generate a random APP_ID_TOKEN.
	 * \@experimental
	 */
	var APP_ID_RANDOM_PROVIDER = {
	    provide: APP_ID,
	    useFactory: _appIdRandomProviderFactory,
	    deps: [],
	};
	/**
	 * @return {?}
	 */
	function _randomChar() {
	    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
	}
	/**
	 * A function that will be executed when a platform is initialized.
	 * \@experimental
	 */
	var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
	/**
	 * A token that indicates an opaque platform id.
	 * \@experimental
	 */
	var PLATFORM_ID = new InjectionToken('Platform ID');
	/**
	 * All callbacks provided via this token will be called for every component that is bootstrapped.
	 * Signature of the callback:
	 *
	 * `(componentRef: ComponentRef) => void`.
	 *
	 * \@experimental
	 */
	var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
	/**
	 * A token which indicates the root directory of the application
	 * \@experimental
	 */
	var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Console = (function () {
	    function Console() {
	    }
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Console.prototype.log = function (message) {
	        // tslint:disable-next-line:no-console
	        console.log(message);
	    };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    Console.prototype.warn = function (message) {
	        // tslint:disable-next-line:no-console
	        console.warn(message);
	    };
	    return Console;
	}());
	Console.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	Console.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Combination of NgModuleFactory and ComponentFactorys.
	 *
	 * \@experimental
	 */
	var ModuleWithComponentFactories = (function () {
	    /**
	     * @param {?} ngModuleFactory
	     * @param {?} componentFactories
	     */
	    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
	        this.ngModuleFactory = ngModuleFactory;
	        this.componentFactories = componentFactories;
	    }
	    return ModuleWithComponentFactories;
	}());
	/**
	 * @return {?}
	 */
	function _throwError() {
	    throw new Error("Runtime compiler is not loaded");
	}
	/**
	 * Low-level service for running the angular compiler during runtime
	 * to create {\@link ComponentFactory}s, which
	 * can later be used to create and render a Component instance.
	 *
	 * Each `\@NgModule` provides an own `Compiler` to its injector,
	 * that will use the directives/pipes of the ng module for compilation
	 * of components.
	 * \@stable
	 */
	var Compiler = (function () {
	    function Compiler() {
	    }
	    /**
	     * Compiles the given NgModule and all of its components. All templates of the components listed
	     * in `entryComponents` have to be inlined.
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
	    /**
	     * Compiles the given NgModule and all of its components
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
	    /**
	     * Same as {\@link compileModuleSync} but also creates ComponentFactories for all components.
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	        throw _throwError();
	    };
	    /**
	     * Same as {\@link compileModuleAsync} but also creates ComponentFactories for all components.
	     * @template T
	     * @param {?} moduleType
	     * @return {?}
	     */
	    Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	        throw _throwError();
	    };
	    /**
	     * Exposes the CSS-style selectors that have been used in `ngContent` directives within
	     * the template of the given component.
	     * This is used by the `upgrade` library to compile the appropriate transclude content
	     * in the AngularJS wrapper component.
	     *
	     * @deprecated since v4. Use ComponentFactory.ngContentSelectors instead.
	     * @param {?} component
	     * @return {?}
	     */
	    Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };
	    /**
	     * Clears all caches.
	     * @return {?}
	     */
	    Compiler.prototype.clearCache = function () { };
	    /**
	     * Clears the cache for the given component/ngModule.
	     * @param {?} type
	     * @return {?}
	     */
	    Compiler.prototype.clearCacheFor = function (type) { };
	    return Compiler;
	}());
	Compiler.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	Compiler.ctorParameters = function () { return []; };
	/**
	 * Token to provide CompilerOptions in the platform injector.
	 *
	 * \@experimental
	 */
	var COMPILER_OPTIONS = new InjectionToken('compilerOptions');
	/**
	 * A factory for creating a Compiler
	 *
	 * \@experimental
	 * @abstract
	 */
	var CompilerFactory = (function () {
	    function CompilerFactory() {
	    }
	    /**
	     * @abstract
	     * @param {?=} options
	     * @return {?}
	     */
	    CompilerFactory.prototype.createCompiler = function (options) { };
	    return CompilerFactory;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an instance of a Component created via a {\@link ComponentFactory}.
	 *
	 * `ComponentRef` provides access to the Component Instance as well other objects related to this
	 * Component Instance and allows you to destroy the Component Instance via the {\@link #destroy}
	 * method.
	 * \@stable
	 * @abstract
	 */
	var ComponentRef = (function () {
	    function ComponentRef() {
	    }
	    /**
	     * Location of the Host Element of this Component Instance.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.location = function () { };
	    /**
	     * The injector on which the component instance exists.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.injector = function () { };
	    /**
	     * The instance of the Component.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.instance = function () { };
	    /**
	     * The {\@link ViewRef} of the Host View of this Component instance.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.hostView = function () { };
	    /**
	     * The {\@link ChangeDetectorRef} of the Component instance.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.changeDetectorRef = function () { };
	    /**
	     * The component type.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.componentType = function () { };
	    /**
	     * Destroys the component instance and all of the data structures associated with it.
	     * @abstract
	     * @return {?}
	     */
	    ComponentRef.prototype.destroy = function () { };
	    /**
	     * Allows to register a callback that will be called when the component is destroyed.
	     * @abstract
	     * @param {?} callback
	     * @return {?}
	     */
	    ComponentRef.prototype.onDestroy = function (callback) { };
	    return ComponentRef;
	}());
	/**
	 * \@stable
	 * @abstract
	 */
	var ComponentFactory = (function () {
	    function ComponentFactory() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.selector = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.componentType = function () { };
	    /**
	     * selector for all <ng-content> elements in the component.
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.ngContentSelectors = function () { };
	    /**
	     * the inputs of the component.
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.inputs = function () { };
	    /**
	     * the outputs of the component.
	     * @abstract
	     * @return {?}
	     */
	    ComponentFactory.prototype.outputs = function () { };
	    /**
	     * Creates a new component.
	     * @abstract
	     * @param {?} injector
	     * @param {?=} projectableNodes
	     * @param {?=} rootSelectorOrNode
	     * @param {?=} ngModule
	     * @return {?}
	     */
	    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) { };
	    return ComponentFactory;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} component
	 * @return {?}
	 */
	function noComponentFactoryError(component) {
	    var /** @type {?} */ error = Error("No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
	    ((error))[ERROR_COMPONENT] = component;
	    return error;
	}
	var ERROR_COMPONENT = 'ngComponent';
	/**
	 * @param {?} error
	 * @return {?}
	 */
	var _NullComponentFactoryResolver = (function () {
	    function _NullComponentFactoryResolver() {
	    }
	    /**
	     * @template T
	     * @param {?} component
	     * @return {?}
	     */
	    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	        throw noComponentFactoryError(component);
	    };
	    return _NullComponentFactoryResolver;
	}());
	/**
	 * \@stable
	 * @abstract
	 */
	var ComponentFactoryResolver = (function () {
	    function ComponentFactoryResolver() {
	    }
	    /**
	     * @abstract
	     * @template T
	     * @param {?} component
	     * @return {?}
	     */
	    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };
	    return ComponentFactoryResolver;
	}());
	ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
	var CodegenComponentFactoryResolver = (function () {
	    /**
	     * @param {?} factories
	     * @param {?} _parent
	     * @param {?} _ngModule
	     */
	    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
	        this._parent = _parent;
	        this._ngModule = _ngModule;
	        this._factories = new Map();
	        for (var i = 0; i < factories.length; i++) {
	            var factory = factories[i];
	            this._factories.set(factory.componentType, factory);
	        }
	    }
	    /**
	     * @template T
	     * @param {?} component
	     * @return {?}
	     */
	    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	        var /** @type {?} */ factory = this._factories.get(component) || this._parent.resolveComponentFactory(component);
	        return factory ? new ComponentFactoryBoundToModule(factory, this._ngModule) : null;
	    };
	    return CodegenComponentFactoryResolver;
	}());
	var ComponentFactoryBoundToModule = (function (_super) {
	    __extends(ComponentFactoryBoundToModule, _super);
	    /**
	     * @param {?} factory
	     * @param {?} ngModule
	     */
	    function ComponentFactoryBoundToModule(factory, ngModule) {
	        var _this = _super.call(this) || this;
	        _this.factory = factory;
	        _this.ngModule = ngModule;
	        return _this;
	    }
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "selector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.selector; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "componentType", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.componentType; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "ngContentSelectors", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.ngContentSelectors; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "inputs", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.inputs; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "outputs", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.factory.outputs; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} injector
	     * @param {?=} projectableNodes
	     * @param {?=} rootSelectorOrNode
	     * @param {?=} ngModule
	     * @return {?}
	     */
	    ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
	        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
	    };
	    return ComponentFactoryBoundToModule;
	}(ComponentFactory));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an instance of an NgModule created via a {\@link NgModuleFactory}.
	 *
	 * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
	 * NgModule Instance.
	 *
	 * \@stable
	 * @abstract
	 */
	var NgModuleRef = (function () {
	    function NgModuleRef() {
	    }
	    /**
	     * The injector that contains all of the providers of the NgModule.
	     * @abstract
	     * @return {?}
	     */
	    NgModuleRef.prototype.injector = function () { };
	    /**
	     * The ComponentFactoryResolver to get hold of the ComponentFactories
	     * declared in the `entryComponents` property of the module.
	     * @abstract
	     * @return {?}
	     */
	    NgModuleRef.prototype.componentFactoryResolver = function () { };
	    /**
	     * The NgModule instance.
	     * @abstract
	     * @return {?}
	     */
	    NgModuleRef.prototype.instance = function () { };
	    /**
	     * Destroys the module instance and all of the data structures associated with it.
	     * @abstract
	     * @return {?}
	     */
	    NgModuleRef.prototype.destroy = function () { };
	    /**
	     * Allows to register a callback that will be called when the module is destroyed.
	     * @abstract
	     * @param {?} callback
	     * @return {?}
	     */
	    NgModuleRef.prototype.onDestroy = function (callback) { };
	    return NgModuleRef;
	}());
	/**
	 * \@experimental
	 */
	var NgModuleFactory = (function () {
	    /**
	     * @param {?} _injectorClass
	     * @param {?} _moduleType
	     */
	    function NgModuleFactory(_injectorClass, _moduleType) {
	        this._injectorClass = _injectorClass;
	        this._moduleType = _moduleType;
	    }
	    Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._moduleType; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} parentInjector
	     * @return {?}
	     */
	    NgModuleFactory.prototype.create = function (parentInjector) {
	        var /** @type {?} */ instance = new this._injectorClass(parentInjector || Injector.NULL);
	        instance.create();
	        return instance;
	    };
	    return NgModuleFactory;
	}());
	var _UNDEFINED = new Object();
	/**
	 * @abstract
	 */
	var NgModuleInjector = (function () {
	    /**
	     * @param {?} parent
	     * @param {?} factories
	     * @param {?} bootstrapFactories
	     */
	    function NgModuleInjector(parent, factories, bootstrapFactories) {
	        var _this = this;
	        this.parent = parent;
	        this._destroyListeners = [];
	        this._destroyed = false;
	        this.bootstrapFactories =
	            bootstrapFactories.map(function (f) { return new ComponentFactoryBoundToModule(f, _this); });
	        this._cmpFactoryResolver = new CodegenComponentFactoryResolver(factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL), this);
	    }
	    /**
	     * @return {?}
	     */
	    NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    NgModuleInjector.prototype.createInternal = function () { };
	    /**
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    NgModuleInjector.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        if (token === Injector || token === NgModuleRef) {
	            return this;
	        }
	        if (token === ComponentFactoryResolver) {
	            return this._cmpFactoryResolver;
	        }
	        var /** @type {?} */ result = this.getInternal(token, _UNDEFINED);
	        return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
	    };
	    /**
	     * @abstract
	     * @param {?} token
	     * @param {?} notFoundValue
	     * @return {?}
	     */
	    NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };
	    Object.defineProperty(NgModuleInjector.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._cmpFactoryResolver; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgModuleInjector.prototype.destroy = function () {
	        if (this._destroyed) {
	            throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
	        }
	        this._destroyed = true;
	        this.destroyInternal();
	        this._destroyListeners.forEach(function (listener) { return listener(); });
	    };
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    NgModuleInjector.prototype.destroyInternal = function () { };
	    return NgModuleInjector;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var trace;
	var events;
	/**
	 * @return {?}
	 */
	function detectWTF() {
	    var /** @type {?} */ wtf = ((_global) /** TODO #9100 */)['wtf'];
	    if (wtf) {
	        trace = wtf['trace'];
	        if (trace) {
	            events = trace['events'];
	            return true;
	        }
	    }
	    return false;
	}
	/**
	 * @param {?} signature
	 * @param {?=} flags
	 * @return {?}
	 */
	function createScope$1(signature, flags) {
	    if (flags === void 0) { flags = null; }
	    return events.createScope(signature, flags);
	}
	/**
	 * @template T
	 * @param {?} scope
	 * @param {?=} returnValue
	 * @return {?}
	 */
	function leave(scope, returnValue) {
	    trace.leaveScope(scope, returnValue);
	    return returnValue;
	}
	/**
	 * @param {?} rangeType
	 * @param {?} action
	 * @return {?}
	 */
	function startTimeRange(rangeType, action) {
	    return trace.beginTimeRange(rangeType, action);
	}
	/**
	 * @param {?} range
	 * @return {?}
	 */
	function endTimeRange(range) {
	    trace.endTimeRange(range);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * True if WTF is enabled.
	 */
	var wtfEnabled = detectWTF();
	/**
	 * @param {?=} arg0
	 * @param {?=} arg1
	 * @return {?}
	 */
	function noopScope(arg0, arg1) {
	    return null;
	}
	/**
	 * Create trace scope.
	 *
	 * Scopes must be strictly nested and are analogous to stack frames, but
	 * do not have to follow the stack frames. Instead it is recommended that they follow logical
	 * nesting. You may want to use
	 * [Event
	 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
	 * as they are defined in WTF.
	 *
	 * Used to mark scope entry. The return value is used to leave the scope.
	 *
	 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
	 *
	 *     someMethod() {
	 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
	 *        // DO SOME WORK HERE
	 *        return wtfLeave(s, 123); // Return value 123
	 *     }
	 *
	 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
	 * negatively impact the performance of your application. For this reason we recommend that
	 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
	 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
	 * exception, will produce incorrect trace, but presence of exception signifies logic error which
	 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
	 * an exception is expected during normal execution while profiling.
	 *
	 * \@experimental
	 */
	var wtfCreateScope = wtfEnabled ? createScope$1 : function (signature, flags) { return noopScope; };
	/**
	 * Used to mark end of Scope.
	 *
	 * - `scope` to end.
	 * - `returnValue` (optional) to be passed to the WTF.
	 *
	 * Returns the `returnValue for easy chaining.
	 * \@experimental
	 */
	var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
	/**
	 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
	 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
	 * enabled.
	 *
	 *     someMethod() {
	 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
	 *        var future = new Future.delay(5).then((_) {
	 *          wtfEndTimeRange(s);
	 *        });
	 *     }
	 * \@experimental
	 */
	var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };
	/**
	 * Ends a async time range operation.
	 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
	 * enabled.
	 * \@experimental
	 */
	var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Use by directives and components to emit custom Events.
	 *
	 * ### Examples
	 *
	 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	 * title gets clicked:
	 *
	 * ```
	 * \@Component({
	 *   selector: 'zippy',
	 *   template: `
	 *   <div class="zippy">
	 *     <div (click)="toggle()">Toggle</div>
	 *     <div [hidden]="!visible">
	 *       <ng-content></ng-content>
	 *     </div>
	 *  </div>`})
	 * export class Zippy {
	 *   visible: boolean = true;
	 *   \@Output() open: EventEmitter<any> = new EventEmitter();
	 *   \@Output() close: EventEmitter<any> = new EventEmitter();
	 *
	 *   toggle() {
	 *     this.visible = !this.visible;
	 *     if (this.visible) {
	 *       this.open.emit(null);
	 *     } else {
	 *       this.close.emit(null);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * The events payload can be accessed by the parameter `$event` on the components output event
	 * handler:
	 *
	 * ```
	 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	 * ```
	 *
	 * Uses Rx.Observable but provides an adapter to make it work as specified here:
	 * https://github.com/jhusain/observable-spec
	 *
	 * Once a reference implementation of the spec is available, switch to it.
	 * \@stable
	 */
	var EventEmitter = (function (_super) {
	    __extends(EventEmitter, _super);
	    /**
	     * Creates an instance of [EventEmitter], which depending on [isAsync],
	     * delivers events synchronously or asynchronously.
	     * @param {?=} isAsync
	     */
	    function EventEmitter(isAsync) {
	        if (isAsync === void 0) { isAsync = false; }
	        var _this = _super.call(this) || this;
	        _this.__isAsync = isAsync;
	        return _this;
	    }
	    /**
	     * @param {?=} value
	     * @return {?}
	     */
	    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	    /**
	     * @param {?=} generatorOrNext
	     * @param {?=} error
	     * @param {?=} complete
	     * @return {?}
	     */
	    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	        var /** @type {?} */ schedulerFn;
	        var /** @type {?} */ errorFn = function (err) { return null; };
	        var /** @type {?} */ completeFn = function () { return null; };
	        if (generatorOrNext && typeof generatorOrNext === 'object') {
	            schedulerFn = this.__isAsync ? function (value) {
	                setTimeout(function () { return generatorOrNext.next(value); });
	            } : function (value) { generatorOrNext.next(value); };
	            if (generatorOrNext.error) {
	                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                    function (err) { generatorOrNext.error(err); };
	            }
	            if (generatorOrNext.complete) {
	                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                    function () { generatorOrNext.complete(); };
	            }
	        }
	        else {
	            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                function (value) { generatorOrNext(value); };
	            if (error) {
	                errorFn =
	                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	            }
	            if (complete) {
	                completeFn =
	                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	            }
	        }
	        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	    };
	    return EventEmitter;
	}(rxjs_Subject.Subject));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An injectable service for executing work inside or outside of the Angular zone.
	 *
	 * The most common use of this service is to optimize performance when starting a work consisting of
	 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	 * Angular. Such tasks can be kicked off via {\@link runOutsideAngular} and if needed, these tasks
	 * can reenter the Angular zone via {\@link run}.
	 *
	 * <!-- TODO: add/fix links to:
	 *   - docs explaining zones and the use of zones in Angular and change-detection
	 *   - link to runOutsideAngular/run (throughout this file!)
	 *   -->
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component, NgZone} from '\@angular/core';
	 * import {NgIf} from '\@angular/common';
	 *
	 * \@Component({
	 *   selector: 'ng-zone-demo'.
	 *   template: `
	 *     <h2>Demo: NgZone</h2>
	 *
	 *     <p>Progress: {{progress}}%</p>
	 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
	 *
	 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	 *   `,
	 * })
	 * export class NgZoneDemo {
	 *   progress: number = 0;
	 *   label: string;
	 *
	 *   constructor(private _ngZone: NgZone) {}
	 *
	 *   // Loop inside the Angular zone
	 *   // so the UI DOES refresh after each setTimeout cycle
	 *   processWithinAngularZone() {
	 *     this.label = 'inside';
	 *     this.progress = 0;
	 *     this._increaseProgress(() => console.log('Inside Done!'));
	 *   }
	 *
	 *   // Loop outside of the Angular zone
	 *   // so the UI DOES NOT refresh after each setTimeout cycle
	 *   processOutsideOfAngularZone() {
	 *     this.label = 'outside';
	 *     this.progress = 0;
	 *     this._ngZone.runOutsideAngular(() => {
	 *       this._increaseProgress(() => {
	 *       // reenter the Angular zone and display done
	 *       this._ngZone.run(() => {console.log('Outside Done!') });
	 *     }}));
	 *   }
	 *
	 *   _increaseProgress(doneCallback: () => void) {
	 *     this.progress += 1;
	 *     console.log(`Current progress: ${this.progress}%`);
	 *
	 *     if (this.progress < 100) {
	 *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
	 *     } else {
	 *       doneCallback();
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * \@experimental
	 */
	var NgZone = (function () {
	    /**
	     * @param {?} __0
	     */
	    function NgZone(_a) {
	        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
	        this._hasPendingMicrotasks = false;
	        this._hasPendingMacrotasks = false;
	        this._isStable = true;
	        this._nesting = 0;
	        this._onUnstable = new EventEmitter(false);
	        this._onMicrotaskEmpty = new EventEmitter(false);
	        this._onStable = new EventEmitter(false);
	        this._onErrorEvents = new EventEmitter(false);
	        if (typeof Zone == 'undefined') {
	            throw new Error('Angular requires Zone.js prolyfill.');
	        }
	        Zone.assertZonePatched();
	        this.outer = this.inner = Zone.current;
	        if (Zone['wtfZoneSpec']) {
	            this.inner = this.inner.fork(Zone['wtfZoneSpec']);
	        }
	        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
	            this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
	        }
	        this.forkInnerZoneWithAngularBehavior();
	    }
	    /**
	     * @return {?}
	     */
	    NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
	    /**
	     * @return {?}
	     */
	    NgZone.assertInAngularZone = function () {
	        if (!NgZone.isInAngularZone()) {
	            throw new Error('Expected to be in Angular Zone, but it is not!');
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgZone.assertNotInAngularZone = function () {
	        if (NgZone.isInAngularZone()) {
	            throw new Error('Expected to not be in Angular Zone, but it is!');
	        }
	    };
	    /**
	     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	     * outside of the Angular zone (typically started via {\@link runOutsideAngular}).
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * within the Angular zone.
	     *
	     * If a synchronous error happens it will be rethrown and not reported via `onError`.
	     * @param {?} fn
	     * @return {?}
	     */
	    NgZone.prototype.run = function (fn) { return this.inner.run(fn); };
	    /**
	     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
	     * rethrown.
	     * @param {?} fn
	     * @return {?}
	     */
	    NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };
	    /**
	     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
	     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * outside of the Angular zone.
	     *
	     * Use {\@link run} to reenter the Angular zone and do work that updates the application model.
	     * @param {?} fn
	     * @return {?}
	     */
	    NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };
	    Object.defineProperty(NgZone.prototype, "onUnstable", {
	        /**
	         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
	         * @return {?}
	         */
	        get: function () { return this._onUnstable; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
	        /**
	         * Notifies when there is no more microtasks enqueue in the current VM Turn.
	         * This is a hint for Angular to do change detection, which may enqueue more microtasks.
	         * For this reason this event can fire multiple times per VM Turn.
	         * @return {?}
	         */
	        get: function () { return this._onMicrotaskEmpty; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "onStable", {
	        /**
	         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
	         * implies we are about to relinquish VM turn.
	         * This event gets called just once.
	         * @return {?}
	         */
	        get: function () { return this._onStable; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "onError", {
	        /**
	         * Notify that an error has been delivered.
	         * @return {?}
	         */
	        get: function () { return this._onErrorEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "isStable", {
	        /**
	         * Whether there are no outstanding microtasks or macrotasks.
	         * @return {?}
	         */
	        get: function () { return this._isStable; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._hasPendingMicrotasks; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._hasPendingMacrotasks; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgZone.prototype.checkStable = function () {
	        var _this = this;
	        if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
	            try {
	                this._nesting++;
	                this._onMicrotaskEmpty.emit(null);
	            }
	            finally {
	                this._nesting--;
	                if (!this._hasPendingMicrotasks) {
	                    try {
	                        this.runOutsideAngular(function () { return _this._onStable.emit(null); });
	                    }
	                    finally {
	                        this._isStable = true;
	                    }
	                }
	            }
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {
	        var _this = this;
	        this.inner = this.inner.fork({
	            name: 'angular',
	            properties: /** @type {?} */ ({ 'isAngularZone': true }),
	            onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
	                try {
	                    _this.onEnter();
	                    return delegate.invokeTask(target, task, applyThis, applyArgs);
	                }
	                finally {
	                    _this.onLeave();
	                }
	            },
	            onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
	                try {
	                    _this.onEnter();
	                    return delegate.invoke(target, callback, applyThis, applyArgs, source);
	                }
	                finally {
	                    _this.onLeave();
	                }
	            },
	            onHasTask: function (delegate, current, target, hasTaskState) {
	                delegate.hasTask(target, hasTaskState);
	                if (current === target) {
	                    // We are only interested in hasTask events which originate from our zone
	                    // (A child hasTask event is not interesting to us)
	                    if (hasTaskState.change == 'microTask') {
	                        _this.setHasMicrotask(hasTaskState.microTask);
	                    }
	                    else if (hasTaskState.change == 'macroTask') {
	                        _this.setHasMacrotask(hasTaskState.macroTask);
	                    }
	                }
	            },
	            onHandleError: function (delegate, current, target, error) {
	                delegate.handleError(target, error);
	                _this.triggerError(error);
	                return false;
	            }
	        });
	    };
	    /**
	     * @return {?}
	     */
	    NgZone.prototype.onEnter = function () {
	        this._nesting++;
	        if (this._isStable) {
	            this._isStable = false;
	            this._onUnstable.emit(null);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgZone.prototype.onLeave = function () {
	        this._nesting--;
	        this.checkStable();
	    };
	    /**
	     * @param {?} hasMicrotasks
	     * @return {?}
	     */
	    NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {
	        this._hasPendingMicrotasks = hasMicrotasks;
	        this.checkStable();
	    };
	    /**
	     * @param {?} hasMacrotasks
	     * @return {?}
	     */
	    NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };
	    return NgZone;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The Testability service provides testing hooks that can be accessed from
	 * the browser and by services such as Protractor. Each bootstrapped Angular
	 * application on the page will have an instance of Testability.
	 * \@experimental
	 */
	var Testability = (function () {
	    /**
	     * @param {?} _ngZone
	     */
	    function Testability(_ngZone) {
	        this._ngZone = _ngZone;
	        /**
	         * \@internal
	         */
	        this._pendingCount = 0;
	        /**
	         * \@internal
	         */
	        this._isZoneStable = true;
	        /**
	         * Whether any work was done since the last 'whenStable' callback. This is
	         * useful to detect if this could have potentially destabilized another
	         * component while it is stabilizing.
	         * \@internal
	         */
	        this._didWork = false;
	        /**
	         * \@internal
	         */
	        this._callbacks = [];
	        this._watchAngularEvents();
	    }
	    /**
	     * \@internal
	     * @return {?}
	     */
	    Testability.prototype._watchAngularEvents = function () {
	        var _this = this;
	        this._ngZone.onUnstable.subscribe({
	            next: function () {
	                _this._didWork = true;
	                _this._isZoneStable = false;
	            }
	        });
	        this._ngZone.runOutsideAngular(function () {
	            _this._ngZone.onStable.subscribe({
	                next: function () {
	                    NgZone.assertNotInAngularZone();
	                    scheduleMicroTask(function () {
	                        _this._isZoneStable = true;
	                        _this._runCallbacksIfReady();
	                    });
	                }
	            });
	        });
	    };
	    /**
	     * @return {?}
	     */
	    Testability.prototype.increasePendingRequestCount = function () {
	        this._pendingCount += 1;
	        this._didWork = true;
	        return this._pendingCount;
	    };
	    /**
	     * @return {?}
	     */
	    Testability.prototype.decreasePendingRequestCount = function () {
	        this._pendingCount -= 1;
	        if (this._pendingCount < 0) {
	            throw new Error('pending async requests below zero');
	        }
	        this._runCallbacksIfReady();
	        return this._pendingCount;
	    };
	    /**
	     * @return {?}
	     */
	    Testability.prototype.isStable = function () {
	        return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
	    };
	    /**
	     * \@internal
	     * @return {?}
	     */
	    Testability.prototype._runCallbacksIfReady = function () {
	        var _this = this;
	        if (this.isStable()) {
	            // Schedules the call backs in a new frame so that it is always async.
	            scheduleMicroTask(function () {
	                while (_this._callbacks.length !== 0) {
	                    (_this._callbacks.pop())(_this._didWork);
	                }
	                _this._didWork = false;
	            });
	        }
	        else {
	            // Not Ready
	            this._didWork = true;
	        }
	    };
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    Testability.prototype.whenStable = function (callback) {
	        this._callbacks.push(callback);
	        this._runCallbacksIfReady();
	    };
	    /**
	     * @return {?}
	     */
	    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
	    /**
	     * @deprecated use findProviders
	     * @param {?} using
	     * @param {?} provider
	     * @param {?} exactMatch
	     * @return {?}
	     */
	    Testability.prototype.findBindings = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    /**
	     * @param {?} using
	     * @param {?} provider
	     * @param {?} exactMatch
	     * @return {?}
	     */
	    Testability.prototype.findProviders = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    return Testability;
	}());
	Testability.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	Testability.ctorParameters = function () { return [
	    { type: NgZone, },
	]; };
	/**
	 * A global registry of {\@link Testability} instances for specific elements.
	 * \@experimental
	 */
	var TestabilityRegistry = (function () {
	    function TestabilityRegistry() {
	        /**
	         * \@internal
	         */
	        this._applications = new Map();
	        _testabilityGetter.addToWindow(this);
	    }
	    /**
	     * @param {?} token
	     * @param {?} testability
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	        this._applications.set(token, testability);
	    };
	    /**
	     * @param {?} elem
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };
	    /**
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
	    /**
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
	    /**
	     * @param {?} elem
	     * @param {?=} findInAncestors
	     * @return {?}
	     */
	    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	        if (findInAncestors === void 0) { findInAncestors = true; }
	        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
	    };
	    return TestabilityRegistry;
	}());
	TestabilityRegistry.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	TestabilityRegistry.ctorParameters = function () { return []; };
	var _NoopGetTestability = (function () {
	    function _NoopGetTestability() {
	    }
	    /**
	     * @param {?} registry
	     * @return {?}
	     */
	    _NoopGetTestability.prototype.addToWindow = function (registry) { };
	    /**
	     * @param {?} registry
	     * @param {?} elem
	     * @param {?} findInAncestors
	     * @return {?}
	     */
	    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	        return null;
	    };
	    return _NoopGetTestability;
	}());
	/**
	 * Set the {\@link GetTestability} implementation used by the Angular testing framework.
	 * \@experimental
	 * @param {?} getter
	 * @return {?}
	 */
	function setTestabilityGetter(getter) {
	    _testabilityGetter = getter;
	}
	var _testabilityGetter = new _NoopGetTestability();
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _devMode = true;
	var _runModeLocked = false;
	var _platform;
	var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
	/**
	 * Disable Angular's development mode, which turns off assertions and other
	 * checks within the framework.
	 *
	 * One important assertion this disables verifies that a change detection pass
	 * does not result in additional changes to any bindings (also known as
	 * unidirectional data flow).
	 *
	 * \@stable
	 * @return {?}
	 */
	function enableProdMode() {
	    if (_runModeLocked) {
	        throw new Error('Cannot enable prod mode after platform setup.');
	    }
	    _devMode = false;
	}
	/**
	 * Returns whether Angular is in development mode. After called once,
	 * the value is locked and won't change any more.
	 *
	 * By default, this is true, unless a user calls `enableProdMode` before calling this.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @return {?}
	 */
	function isDevMode() {
	    _runModeLocked = true;
	    return _devMode;
	}
	/**
	 * A token for third-party components that can register themselves with NgProbe.
	 *
	 * \@experimental
	 */
	var NgProbeToken = (function () {
	    /**
	     * @param {?} name
	     * @param {?} token
	     */
	    function NgProbeToken(name, token) {
	        this.name = name;
	        this.token = token;
	    }
	    return NgProbeToken;
	}());
	/**
	 * Creates a platform.
	 * Platforms have to be eagerly created via this function.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @param {?} injector
	 * @return {?}
	 */
	function createPlatform(injector) {
	    if (_platform && !_platform.destroyed &&
	        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
	        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
	    }
	    _platform = injector.get(PlatformRef);
	    var /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);
	    if (inits)
	        inits.forEach(function (init) { return init(); });
	    return _platform;
	}
	/**
	 * Creates a factory for a platform
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @param {?} parentPlatformFactory
	 * @param {?} name
	 * @param {?=} providers
	 * @return {?}
	 */
	function createPlatformFactory(parentPlatformFactory, name, providers) {
	    if (providers === void 0) { providers = []; }
	    var /** @type {?} */ marker = new InjectionToken("Platform: " + name);
	    return function (extraProviders) {
	        if (extraProviders === void 0) { extraProviders = []; }
	        var /** @type {?} */ platform = getPlatform();
	        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
	            if (parentPlatformFactory) {
	                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
	            }
	            else {
	                createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
	            }
	        }
	        return assertPlatform(marker);
	    };
	}
	/**
	 * Checks that there currently is a platform which contains the given token as a provider.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @param {?} requiredToken
	 * @return {?}
	 */
	function assertPlatform(requiredToken) {
	    var /** @type {?} */ platform = getPlatform();
	    if (!platform) {
	        throw new Error('No platform exists!');
	    }
	    if (!platform.injector.get(requiredToken, null)) {
	        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
	    }
	    return platform;
	}
	/**
	 * Destroy the existing platform.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @return {?}
	 */
	function destroyPlatform() {
	    if (_platform && !_platform.destroyed) {
	        _platform.destroy();
	    }
	}
	/**
	 * Returns the current platform.
	 *
	 * \@experimental APIs related to application bootstrap are currently under review.
	 * @return {?}
	 */
	function getPlatform() {
	    return _platform && !_platform.destroyed ? _platform : null;
	}
	/**
	 * The Angular platform is the entry point for Angular on a web page. Each page
	 * has exactly one platform, and services (such as reflection) which are common
	 * to every Angular application running on the page are bound in its scope.
	 *
	 * A page's platform is initialized implicitly when {\@link bootstrap}() is called, or
	 * explicitly by calling {\@link createPlatform}().
	 *
	 * \@stable
	 * @abstract
	 */
	var PlatformRef = (function () {
	    function PlatformRef() {
	    }
	    /**
	     * Creates an instance of an `\@NgModule` for the given platform
	     * for offline compilation.
	     *
	     * ## Simple Example
	     *
	     * ```typescript
	     * my_module.ts:
	     *
	     * \@NgModule({
	     *   imports: [BrowserModule]
	     * })
	     * class MyModule {}
	     *
	     * main.ts:
	     * import {MyModuleNgFactory} from './my_module.ngfactory';
	     * import {platformBrowser} from '\@angular/platform-browser';
	     *
	     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
	     * ```
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @abstract
	     * @template M
	     * @param {?} moduleFactory
	     * @return {?}
	     */
	    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };
	    /**
	     * Creates an instance of an `\@NgModule` for a given platform using the given runtime compiler.
	     *
	     * ## Simple Example
	     *
	     * ```typescript
	     * \@NgModule({
	     *   imports: [BrowserModule]
	     * })
	     * class MyModule {}
	     *
	     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
	     * ```
	     * \@stable
	     * @abstract
	     * @template M
	     * @param {?} moduleType
	     * @param {?=} compilerOptions
	     * @return {?}
	     */
	    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };
	    /**
	     * Register a listener to be called when the platform is disposed.
	     * @abstract
	     * @param {?} callback
	     * @return {?}
	     */
	    PlatformRef.prototype.onDestroy = function (callback) { };
	    /**
	     * Retrieve the platform {\@link Injector}, which is the parent injector for
	     * every Angular application on the page and provides singleton providers.
	     * @abstract
	     * @return {?}
	     */
	    PlatformRef.prototype.injector = function () { };
	    /**
	     * Destroy the Angular platform and all Angular applications on the page.
	     * @abstract
	     * @return {?}
	     */
	    PlatformRef.prototype.destroy = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformRef.prototype.destroyed = function () { };
	    return PlatformRef;
	}());
	/**
	 * @param {?} errorHandler
	 * @param {?} callback
	 * @return {?}
	 */
	function _callAndReportToErrorHandler(errorHandler, callback) {
	    try {
	        var /** @type {?} */ result = callback();
	        if (isPromise(result)) {
	            return result.catch(function (e) {
	                errorHandler.handleError(e);
	                // rethrow as the exception handler might not do it
	                throw e;
	            });
	        }
	        return result;
	    }
	    catch (e) {
	        errorHandler.handleError(e);
	        // rethrow as the exception handler might not do it
	        throw e;
	    }
	}
	/**
	 * workaround https://github.com/angular/tsickle/issues/350
	 * @suppress {checkTypes}
	 */
	var PlatformRef_ = (function (_super) {
	    __extends(PlatformRef_, _super);
	    /**
	     * @param {?} _injector
	     */
	    function PlatformRef_(_injector) {
	        var _this = _super.call(this) || this;
	        _this._injector = _injector;
	        _this._modules = [];
	        _this._destroyListeners = [];
	        _this._destroyed = false;
	        return _this;
	    }
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	    Object.defineProperty(PlatformRef_.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PlatformRef_.prototype, "destroyed", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._destroyed; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    PlatformRef_.prototype.destroy = function () {
	        if (this._destroyed) {
	            throw new Error('The platform has already been destroyed!');
	        }
	        this._modules.slice().forEach(function (module) { return module.destroy(); });
	        this._destroyListeners.forEach(function (listener) { return listener(); });
	        this._destroyed = true;
	    };
	    /**
	     * @template M
	     * @param {?} moduleFactory
	     * @return {?}
	     */
	    PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
	        return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
	    };
	    /**
	     * @template M
	     * @param {?} moduleFactory
	     * @param {?} ngZone
	     * @return {?}
	     */
	    PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
	        var _this = this;
	        // Note: We need to create the NgZone _before_ we instantiate the module,
	        // as instantiating the module creates some providers eagerly.
	        // So we create a mini parent injector that just contains the new NgZone and
	        // pass that as parent to the NgModuleFactory.
	        if (!ngZone)
	            ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
	        // Attention: Don't use ApplicationRef.run here,
	        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
	        return ngZone.run(function () {
	            var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
	            var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));
	            var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
	            if (!exceptionHandler) {
	                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
	            }
	            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); });
	            ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });
	            return _callAndReportToErrorHandler(exceptionHandler, function () {
	                var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);
	                return initStatus.donePromise.then(function () {
	                    _this._moduleDoBootstrap(moduleRef);
	                    return moduleRef;
	                });
	            });
	        });
	    };
	    /**
	     * @template M
	     * @param {?} moduleType
	     * @param {?=} compilerOptions
	     * @return {?}
	     */
	    PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	        if (compilerOptions === void 0) { compilerOptions = []; }
	        return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
	    };
	    /**
	     * @template M
	     * @param {?} moduleType
	     * @param {?=} compilerOptions
	     * @param {?=} ngZone
	     * @return {?}
	     */
	    PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone) {
	        var _this = this;
	        if (compilerOptions === void 0) { compilerOptions = []; }
	        if (ngZone === void 0) { ngZone = null; }
	        var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);
	        var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
	        return compiler.compileModuleAsync(moduleType)
	            .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
	    };
	    /**
	     * @param {?} moduleRef
	     * @return {?}
	     */
	    PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
	        var /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);
	        if (moduleRef.bootstrapFactories.length > 0) {
	            moduleRef.bootstrapFactories.forEach(function (f) { return appRef.bootstrap(f); });
	        }
	        else if (moduleRef.instance.ngDoBootstrap) {
	            moduleRef.instance.ngDoBootstrap(appRef);
	        }
	        else {
	            throw new Error("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. " +
	                "Please define one of these.");
	        }
	        this._modules.push(moduleRef);
	    };
	    return PlatformRef_;
	}(PlatformRef));
	PlatformRef_.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	PlatformRef_.ctorParameters = function () { return [
	    { type: Injector, },
	]; };
	/**
	 * A reference to an Angular application running on a page.
	 *
	 * For more about Angular applications, see the documentation for {\@link bootstrap}.
	 *
	 * \@stable
	 * @abstract
	 */
	var ApplicationRef = (function () {
	    function ApplicationRef() {
	    }
	    /**
	     * Bootstrap a new component at the root level of the application.
	     *
	     * ### Bootstrap process
	     *
	     * When bootstrapping a new root component into an application, Angular mounts the
	     * specified application component onto DOM elements identified by the [componentType]'s
	     * selector and kicks off automatic change detection to finish initializing the component.
	     *
	     * ### Example
	     * {\@example core/ts/platform/platform.ts region='longform'}
	     * @abstract
	     * @template C
	     * @param {?} componentFactory
	     * @return {?}
	     */
	    ApplicationRef.prototype.bootstrap = function (componentFactory) { };
	    /**
	     * Invoke this method to explicitly process change detection and its side-effects.
	     *
	     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
	     * further changes are detected. If additional changes are picked up during this second cycle,
	     * bindings in the app have side-effects that cannot be resolved in a single change detection
	     * pass.
	     * In this case, Angular throws an error, since an Angular application can only have one change
	     * detection pass during which all change detection must complete.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.tick = function () { };
	    /**
	     * Get a list of component types registered to this application.
	     * This list is populated even before the component is created.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.componentTypes = function () { };
	    /**
	     * Get a list of components registered to this application.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.components = function () { };
	    /**
	     * Attaches a view so that it will be dirty checked.
	     * The view will be automatically detached when it is destroyed.
	     * This will throw if the view is already attached to a ViewContainer.
	     * @abstract
	     * @param {?} view
	     * @return {?}
	     */
	    ApplicationRef.prototype.attachView = function (view) { };
	    /**
	     * Detaches a view from dirty checking again.
	     * @abstract
	     * @param {?} view
	     * @return {?}
	     */
	    ApplicationRef.prototype.detachView = function (view) { };
	    /**
	     * Returns the number of attached views.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.viewCount = function () { };
	    /**
	     * Returns an Observable that indicates when the application is stable or unstable.
	     * @abstract
	     * @return {?}
	     */
	    ApplicationRef.prototype.isStable = function () { };
	    return ApplicationRef;
	}());
	/**
	 * workaround https://github.com/angular/tsickle/issues/350
	 * @suppress {checkTypes}
	 */
	var ApplicationRef_ = (function (_super) {
	    __extends(ApplicationRef_, _super);
	    /**
	     * @param {?} _zone
	     * @param {?} _console
	     * @param {?} _injector
	     * @param {?} _exceptionHandler
	     * @param {?} _componentFactoryResolver
	     * @param {?} _initStatus
	     */
	    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
	        var _this = _super.call(this) || this;
	        _this._zone = _zone;
	        _this._console = _console;
	        _this._injector = _injector;
	        _this._exceptionHandler = _exceptionHandler;
	        _this._componentFactoryResolver = _componentFactoryResolver;
	        _this._initStatus = _initStatus;
	        _this._bootstrapListeners = [];
	        _this._rootComponents = [];
	        _this._rootComponentTypes = [];
	        _this._views = [];
	        _this._runningTick = false;
	        _this._enforceNoNewChanges = false;
	        _this._stable = true;
	        _this._enforceNoNewChanges = isDevMode();
	        _this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
	        var isCurrentlyStable = new rxjs_Observable.Observable(function (observer) {
	            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&
	                !_this._zone.hasPendingMicrotasks;
	            _this._zone.runOutsideAngular(function () {
	                observer.next(_this._stable);
	                observer.complete();
	            });
	        });
	        var isStable = new rxjs_Observable.Observable(function (observer) {
	            var stableSub = _this._zone.onStable.subscribe(function () {
	                NgZone.assertNotInAngularZone();
	                // Check whether there are no pending macro/micro tasks in the next tick
	                // to allow for NgZone to update the state.
	                scheduleMicroTask(function () {
	                    if (!_this._stable && !_this._zone.hasPendingMacrotasks &&
	                        !_this._zone.hasPendingMicrotasks) {
	                        _this._stable = true;
	                        observer.next(true);
	                    }
	                });
	            });
	            var unstableSub = _this._zone.onUnstable.subscribe(function () {
	                NgZone.assertInAngularZone();
	                if (_this._stable) {
	                    _this._stable = false;
	                    _this._zone.runOutsideAngular(function () { observer.next(false); });
	                }
	            });
	            return function () {
	                stableSub.unsubscribe();
	                unstableSub.unsubscribe();
	            };
	        });
	        _this._isStable = rxjs_observable_merge.merge(isCurrentlyStable, rxjs_operator_share.share.call(isStable));
	        return _this;
	    }
	    /**
	     * @param {?} viewRef
	     * @return {?}
	     */
	    ApplicationRef_.prototype.attachView = function (viewRef) {
	        var /** @type {?} */ view = ((viewRef));
	        this._views.push(view);
	        view.attachToAppRef(this);
	    };
	    /**
	     * @param {?} viewRef
	     * @return {?}
	     */
	    ApplicationRef_.prototype.detachView = function (viewRef) {
	        var /** @type {?} */ view = ((viewRef));
	        remove(this._views, view);
	        view.detachFromAppRef();
	    };
	    /**
	     * @template C
	     * @param {?} componentOrFactory
	     * @return {?}
	     */
	    ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
	        var _this = this;
	        if (!this._initStatus.done) {
	            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
	        }
	        var /** @type {?} */ componentFactory;
	        if (componentOrFactory instanceof ComponentFactory) {
	            componentFactory = componentOrFactory;
	        }
	        else {
	            componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
	        }
	        this._rootComponentTypes.push(componentFactory.componentType);
	        // Create a factory associated with the current module if it's not bound to some other
	        var /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?
	            null :
	            this._injector.get(NgModuleRef);
	        var /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], componentFactory.selector, ngModule);
	        compRef.onDestroy(function () { _this._unloadComponent(compRef); });
	        var /** @type {?} */ testability = compRef.injector.get(Testability, null);
	        if (testability) {
	            compRef.injector.get(TestabilityRegistry)
	                .registerApplication(compRef.location.nativeElement, testability);
	        }
	        this._loadComponent(compRef);
	        if (isDevMode()) {
	            this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
	        }
	        return compRef;
	    };
	    /**
	     * @param {?} componentRef
	     * @return {?}
	     */
	    ApplicationRef_.prototype._loadComponent = function (componentRef) {
	        this.attachView(componentRef.hostView);
	        this.tick();
	        this._rootComponents.push(componentRef);
	        // Get the listeners lazily to prevent DI cycles.
	        var /** @type {?} */ listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
	        listeners.forEach(function (listener) { return listener(componentRef); });
	    };
	    /**
	     * @param {?} componentRef
	     * @return {?}
	     */
	    ApplicationRef_.prototype._unloadComponent = function (componentRef) {
	        this.detachView(componentRef.hostView);
	        remove(this._rootComponents, componentRef);
	    };
	    /**
	     * @return {?}
	     */
	    ApplicationRef_.prototype.tick = function () {
	        if (this._runningTick) {
	            throw new Error('ApplicationRef.tick is called recursively');
	        }
	        var /** @type {?} */ scope = ApplicationRef_._tickScope();
	        try {
	            this._runningTick = true;
	            this._views.forEach(function (view) { return view.detectChanges(); });
	            if (this._enforceNoNewChanges) {
	                this._views.forEach(function (view) { return view.checkNoChanges(); });
	            }
	        }
	        finally {
	            this._runningTick = false;
	            wtfLeave(scope);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    ApplicationRef_.prototype.ngOnDestroy = function () {
	        // TODO(alxhub): Dispose of the NgZone.
	        this._views.slice().forEach(function (view) { return view.destroy(); });
	    };
	    Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._views.length; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._rootComponentTypes; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef_.prototype, "components", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._rootComponents; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef_.prototype, "isStable", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._isStable; },
	        enumerable: true,
	        configurable: true
	    });
	    return ApplicationRef_;
	}(ApplicationRef));
	/**
	 * \@internal
	 */
	ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
	ApplicationRef_.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	ApplicationRef_.ctorParameters = function () { return [
	    { type: NgZone, },
	    { type: Console, },
	    { type: Injector, },
	    { type: ErrorHandler, },
	    { type: ComponentFactoryResolver, },
	    { type: ApplicationInitStatus, },
	]; };
	/**
	 * @template T
	 * @param {?} list
	 * @param {?} el
	 * @return {?}
	 */
	function remove(list, el) {
	    var /** @type {?} */ index = list.indexOf(el);
	    if (index > -1) {
	        list.splice(index, 1);
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Public API for Zone
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @deprecated Use `RendererType2` (and `Renderer2`) instead.
	 */
	var RenderComponentType = (function () {
	    /**
	     * @param {?} id
	     * @param {?} templateUrl
	     * @param {?} slotCount
	     * @param {?} encapsulation
	     * @param {?} styles
	     * @param {?} animations
	     */
	    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
	        this.id = id;
	        this.templateUrl = templateUrl;
	        this.slotCount = slotCount;
	        this.encapsulation = encapsulation;
	        this.styles = styles;
	        this.animations = animations;
	    }
	    return RenderComponentType;
	}());
	/**
	 * @deprecated Debug info is handeled internally in the view engine now.
	 * @abstract
	 */
	var RenderDebugInfo = (function () {
	    function RenderDebugInfo() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.injector = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.component = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.providerTokens = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.references = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.context = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    RenderDebugInfo.prototype.source = function () { };
	    return RenderDebugInfo;
	}());
	/**
	 * @deprecated Use the `Renderer2` instead.
	 * @abstract
	 */
	var Renderer = (function () {
	    function Renderer() {
	    }
	    /**
	     * @abstract
	     * @param {?} selectorOrNode
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };
	    /**
	     * @abstract
	     * @param {?} parentElement
	     * @param {?} name
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };
	    /**
	     * @abstract
	     * @param {?} hostElement
	     * @return {?}
	     */
	    Renderer.prototype.createViewRoot = function (hostElement) { };
	    /**
	     * @abstract
	     * @param {?} parentElement
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };
	    /**
	     * @abstract
	     * @param {?} parentElement
	     * @param {?} value
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };
	    /**
	     * @abstract
	     * @param {?} parentElement
	     * @param {?} nodes
	     * @return {?}
	     */
	    Renderer.prototype.projectNodes = function (parentElement, nodes) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @param {?} viewRootNodes
	     * @return {?}
	     */
	    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };
	    /**
	     * @abstract
	     * @param {?} viewRootNodes
	     * @return {?}
	     */
	    Renderer.prototype.detachView = function (viewRootNodes) { };
	    /**
	     * @abstract
	     * @param {?} hostElement
	     * @param {?} viewAllNodes
	     * @return {?}
	     */
	    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} name
	     * @param {?} callback
	     * @return {?}
	     */
	    Renderer.prototype.listen = function (renderElement, name, callback) { };
	    /**
	     * @abstract
	     * @param {?} target
	     * @param {?} name
	     * @param {?} callback
	     * @return {?}
	     */
	    Renderer.prototype.listenGlobal = function (target, name, callback) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} propertyName
	     * @param {?} propertyValue
	     * @return {?}
	     */
	    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} attributeName
	     * @param {?} attributeValue
	     * @return {?}
	     */
	    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };
	    /**
	     * Used only in debug mode to serialize property changes to dom nodes as attributes.
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} propertyName
	     * @param {?} propertyValue
	     * @return {?}
	     */
	    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} className
	     * @param {?} isAdd
	     * @return {?}
	     */
	    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} styleName
	     * @param {?} styleValue
	     * @return {?}
	     */
	    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };
	    /**
	     * @abstract
	     * @param {?} renderElement
	     * @param {?} methodName
	     * @param {?=} args
	     * @return {?}
	     */
	    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };
	    /**
	     * @abstract
	     * @param {?} renderNode
	     * @param {?} text
	     * @return {?}
	     */
	    Renderer.prototype.setText = function (renderNode, text) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} startingStyles
	     * @param {?} keyframes
	     * @param {?} duration
	     * @param {?} delay
	     * @param {?} easing
	     * @param {?=} previousPlayers
	     * @return {?}
	     */
	    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
	    return Renderer;
	}());
	var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
	/**
	 * Injectable service that provides a low-level interface for modifying the UI.
	 *
	 * Use this service to bypass Angular's templating and make custom UI changes that can't be
	 * expressed declaratively. For example if you need to set a property or an attribute whose name is
	 * not statically known, use {\@link #setElementProperty} or {\@link #setElementAttribute}
	 * respectively.
	 *
	 * If you are implementing a custom renderer, you must implement this interface.
	 *
	 * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
	 *
	 * @deprecated Use `RendererFactory2` instead.
	 * @abstract
	 */
	var RootRenderer = (function () {
	    function RootRenderer() {
	    }
	    /**
	     * @abstract
	     * @param {?} componentType
	     * @return {?}
	     */
	    RootRenderer.prototype.renderComponent = function (componentType) { };
	    return RootRenderer;
	}());
	/**
	 * \@experimental
	 * @abstract
	 */
	var RendererFactory2 = (function () {
	    function RendererFactory2() {
	    }
	    /**
	     * @abstract
	     * @param {?} hostElement
	     * @param {?} type
	     * @return {?}
	     */
	    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };
	    return RendererFactory2;
	}());
	var RendererStyleFlags2 = {};
	RendererStyleFlags2.Important = 1;
	RendererStyleFlags2.DashCase = 2;
	RendererStyleFlags2[RendererStyleFlags2.Important] = "Important";
	RendererStyleFlags2[RendererStyleFlags2.DashCase] = "DashCase";
	/**
	 * \@experimental
	 * @abstract
	 */
	var Renderer2 = (function () {
	    function Renderer2() {
	    }
	    /**
	     * This field can be used to store arbitrary data on this renderer instance.
	     * This is useful for renderers that delegate to other renderers.
	     * @abstract
	     * @return {?}
	     */
	    Renderer2.prototype.data = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    Renderer2.prototype.destroy = function () { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    Renderer2.prototype.createElement = function (name, namespace) { };
	    /**
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    Renderer2.prototype.createComment = function (value) { };
	    /**
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    Renderer2.prototype.createText = function (value) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} newChild
	     * @return {?}
	     */
	    Renderer2.prototype.appendChild = function (parent, newChild) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} newChild
	     * @param {?} refChild
	     * @return {?}
	     */
	    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} oldChild
	     * @return {?}
	     */
	    Renderer2.prototype.removeChild = function (parent, oldChild) { };
	    /**
	     * @abstract
	     * @param {?} selectorOrNode
	     * @return {?}
	     */
	    Renderer2.prototype.selectRootElement = function (selectorOrNode) { };
	    /**
	     * Attention: On WebWorkers, this will always return a value,
	     * as we are asking for a result synchronously. I.e.
	     * the caller can't rely on checking whether this is null or not.
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    Renderer2.prototype.parentNode = function (node) { };
	    /**
	     * Attention: On WebWorkers, this will always return a value,
	     * as we are asking for a result synchronously. I.e.
	     * the caller can't rely on checking whether this is null or not.
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    Renderer2.prototype.nextSibling = function (node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} namespace
	     * @return {?}
	     */
	    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    Renderer2.prototype.addClass = function (el, name) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    Renderer2.prototype.removeClass = function (el, name) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} style
	     * @param {?} value
	     * @param {?=} flags
	     * @return {?}
	     */
	    Renderer2.prototype.setStyle = function (el, style, value, flags) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} style
	     * @param {?=} flags
	     * @return {?}
	     */
	    Renderer2.prototype.removeStyle = function (el, style, flags) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    Renderer2.prototype.setProperty = function (el, name, value) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @param {?} value
	     * @return {?}
	     */
	    Renderer2.prototype.setValue = function (node, value) { };
	    /**
	     * @abstract
	     * @param {?} target
	     * @param {?} eventName
	     * @param {?} callback
	     * @return {?}
	     */
	    Renderer2.prototype.listen = function (target, eventName, callback) { };
	    return Renderer2;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Public API for render
	var ElementRef = (function () {
	    /**
	     * @param {?} nativeElement
	     */
	    function ElementRef(nativeElement) {
	        this.nativeElement = nativeElement;
	    }
	    return ElementRef;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Used to load ng module factories.
	 * \@stable
	 * @abstract
	 */
	var NgModuleFactoryLoader = (function () {
	    function NgModuleFactoryLoader() {
	    }
	    /**
	     * @abstract
	     * @param {?} path
	     * @return {?}
	     */
	    NgModuleFactoryLoader.prototype.load = function (path) { };
	    return NgModuleFactoryLoader;
	}());
	var moduleFactories = new Map();
	/**
	 * Registers a loaded module. Should only be called from generated NgModuleFactory code.
	 * \@experimental
	 * @param {?} id
	 * @param {?} factory
	 * @return {?}
	 */
	function registerModuleFactory(id, factory) {
	    var /** @type {?} */ existing = moduleFactories.get(id);
	    if (existing) {
	        throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
	    }
	    moduleFactories.set(id, factory);
	}
	/**
	 * @return {?}
	 */
	/**
	 * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
	 * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
	 * cannot be found.
	 * \@experimental
	 * @param {?} id
	 * @return {?}
	 */
	function getModuleFactory(id) {
	    var /** @type {?} */ factory = moduleFactories.get(id);
	    if (!factory)
	        throw new Error("No module with ID " + id + " loaded");
	    return factory;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An unmodifiable list of items that Angular keeps up to date when the state
	 * of the application changes.
	 *
	 * The type of object that {\@link Query} and {\@link ViewQueryMetadata} provide.
	 *
	 * Implements an iterable interface, therefore it can be used in both ES6
	 * javascript `for (var i of items)` loops as well as in Angular templates with
	 * `*ngFor="let i of myList"`.
	 *
	 * Changes can be observed by subscribing to the changes `Observable`.
	 *
	 * NOTE: In the future this class will implement an `Observable` interface.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
	 * ```typescript
	 * \@Component({...})
	 * class Container {
	 *   \@ViewChildren(Item) items:QueryList<Item>;
	 * }
	 * ```
	 * \@stable
	 */
	var QueryList = (function () {
	    function QueryList() {
	        this._dirty = true;
	        this._results = [];
	        this._emitter = new EventEmitter();
	    }
	    Object.defineProperty(QueryList.prototype, "changes", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._emitter; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "length", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._results.length; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "first", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._results[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "last", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._results[this.length - 1]; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * See
	     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
	     * @template U
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.map = function (fn) { return this._results.map(fn); };
	    /**
	     * See
	     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.filter = function (fn) {
	        return this._results.filter(fn);
	    };
	    /**
	     * See
	     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.find = function (fn) { return this._results.find(fn); };
	    /**
	     * See
	     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
	     * @template U
	     * @param {?} fn
	     * @param {?} init
	     * @return {?}
	     */
	    QueryList.prototype.reduce = function (fn, init) {
	        return this._results.reduce(fn, init);
	    };
	    /**
	     * See
	     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
	    /**
	     * See
	     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
	     * @param {?} fn
	     * @return {?}
	     */
	    QueryList.prototype.some = function (fn) {
	        return this._results.some(fn);
	    };
	    /**
	     * @return {?}
	     */
	    QueryList.prototype.toArray = function () { return this._results.slice(); };
	    /**
	     * @return {?}
	     */
	    QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };
	    /**
	     * @return {?}
	     */
	    QueryList.prototype.toString = function () { return this._results.toString(); };
	    /**
	     * @param {?} res
	     * @return {?}
	     */
	    QueryList.prototype.reset = function (res) {
	        this._results = flatten(res);
	        this._dirty = false;
	    };
	    /**
	     * @return {?}
	     */
	    QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
	    /**
	     * internal
	     * @return {?}
	     */
	    QueryList.prototype.setDirty = function () { this._dirty = true; };
	    Object.defineProperty(QueryList.prototype, "dirty", {
	        /**
	         * internal
	         * @return {?}
	         */
	        get: function () { return this._dirty; },
	        enumerable: true,
	        configurable: true
	    });
	    return QueryList;
	}());
	/**
	 * @template T
	 * @param {?} list
	 * @return {?}
	 */
	function flatten(list) {
	    return list.reduce(function (flat, item) {
	        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;
	        return ((flat)).concat(flatItem);
	    }, []);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _SEPARATOR = '#';
	var FACTORY_CLASS_SUFFIX = 'NgFactory';
	/**
	 * Configuration for SystemJsNgModuleLoader.
	 * token.
	 *
	 * \@experimental
	 * @abstract
	 */
	var SystemJsNgModuleLoaderConfig = (function () {
	    function SystemJsNgModuleLoaderConfig() {
	    }
	    return SystemJsNgModuleLoaderConfig;
	}());
	var DEFAULT_CONFIG = {
	    factoryPathPrefix: '',
	    factoryPathSuffix: '.ngfactory',
	};
	/**
	 * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
	 * \@experimental
	 */
	var SystemJsNgModuleLoader = (function () {
	    /**
	     * @param {?} _compiler
	     * @param {?=} config
	     */
	    function SystemJsNgModuleLoader(_compiler, config) {
	        this._compiler = _compiler;
	        this._config = config || DEFAULT_CONFIG;
	    }
	    /**
	     * @param {?} path
	     * @return {?}
	     */
	    SystemJsNgModuleLoader.prototype.load = function (path) {
	        var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;
	        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
	    };
	    /**
	     * @param {?} path
	     * @return {?}
	     */
	    SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
	        var _this = this;
	        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	        if (exportName === undefined) {
	            exportName = 'default';
	        }
	        return System.import(module)
	            .then(function (module) { return module[exportName]; })
	            .then(function (type) { return checkNotEmpty(type, module, exportName); })
	            .then(function (type) { return _this._compiler.compileModuleAsync(type); });
	    };
	    /**
	     * @param {?} path
	     * @return {?}
	     */
	    SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
	        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	        var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;
	        if (exportName === undefined) {
	            exportName = 'default';
	            factoryClassSuffix = '';
	        }
	        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
	            .then(function (module) { return module[exportName + factoryClassSuffix]; })
	            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
	    };
	    return SystemJsNgModuleLoader;
	}());
	SystemJsNgModuleLoader.decorators = [
	    { type: Injectable },
	];
	/**
	 * @nocollapse
	 */
	SystemJsNgModuleLoader.ctorParameters = function () { return [
	    { type: Compiler, },
	    { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
	]; };
	/**
	 * @param {?} value
	 * @param {?} modulePath
	 * @param {?} exportName
	 * @return {?}
	 */
	function checkNotEmpty(value, modulePath, exportName) {
	    if (!value) {
	        throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
	    }
	    return value;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an Embedded Template that can be used to instantiate Embedded Views.
	 *
	 * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element
	 * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into
	 * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for
	 * the `TemplateRef` from a Component or a Directive via {\@link Query}.
	 *
	 * To instantiate Embedded Views based on a Template, use
	 * {\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
	 * View Container.
	 * \@stable
	 * @abstract
	 */
	var TemplateRef = (function () {
	    function TemplateRef() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    TemplateRef.prototype.elementRef = function () { };
	    /**
	     * @abstract
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateRef.prototype.createEmbeddedView = function (context) { };
	    return TemplateRef;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents a container where one or more Views can be attached.
	 *
	 * The container can contain two kinds of Views. Host Views, created by instantiating a
	 * {\@link Component} via {\@link #createComponent}, and Embedded Views, created by instantiating an
	 * {\@link TemplateRef Embedded Template} via {\@link #createEmbeddedView}.
	 *
	 * The location of the View Container within the containing View is specified by the Anchor
	 * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
	 * have a single View Container.
	 *
	 * Root elements of Views attached to this container become siblings of the Anchor Element in
	 * the Rendered View.
	 *
	 * To access a `ViewContainerRef` of an Element, you can either place a {\@link Directive} injected
	 * with `ViewContainerRef` on the Element, or you obtain it via a {\@link ViewChild} query.
	 * \@stable
	 * @abstract
	 */
	var ViewContainerRef = (function () {
	    function ViewContainerRef() {
	    }
	    /**
	     * Anchor element that specifies the location of this container in the containing View.
	     * <!-- TODO: rename to anchorElement -->
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.element = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.injector = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.parentInjector = function () { };
	    /**
	     * Destroys all Views in this container.
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.clear = function () { };
	    /**
	     * Returns the {\@link ViewRef} for the View located in this container at the specified index.
	     * @abstract
	     * @param {?} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.get = function (index) { };
	    /**
	     * Returns the number of Views currently attached to this container.
	     * @abstract
	     * @return {?}
	     */
	    ViewContainerRef.prototype.length = function () { };
	    /**
	     * Instantiates an Embedded View based on the {\@link TemplateRef `templateRef`} and inserts it
	     * into this container at the specified `index`.
	     *
	     * If `index` is not specified, the new View will be inserted as the last View in the container.
	     *
	     * Returns the {\@link ViewRef} for the newly created View.
	     * @abstract
	     * @template C
	     * @param {?} templateRef
	     * @param {?=} context
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };
	    /**
	     * Instantiates a single {\@link Component} and inserts its Host View into this container at the
	     * specified `index`.
	     *
	     * The component is instantiated using its {\@link ComponentFactory} which can be
	     * obtained via {\@link ComponentFactoryResolver#resolveComponentFactory}.
	     *
	     * If `index` is not specified, the new View will be inserted as the last View in the container.
	     *
	     * You can optionally specify the {\@link Injector} that will be used as parent for the Component.
	     *
	     * Returns the {\@link ComponentRef} of the Host View created for the newly instantiated Component.
	     * @abstract
	     * @template C
	     * @param {?} componentFactory
	     * @param {?=} index
	     * @param {?=} injector
	     * @param {?=} projectableNodes
	     * @param {?=} ngModule
	     * @return {?}
	     */
	    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) { };
	    /**
	     * Inserts a View identified by a {\@link ViewRef} into the container at the specified `index`.
	     *
	     * If `index` is not specified, the new View will be inserted as the last View in the container.
	     *
	     * Returns the inserted {\@link ViewRef}.
	     * @abstract
	     * @param {?} viewRef
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.insert = function (viewRef, index) { };
	    /**
	     * Moves a View identified by a {\@link ViewRef} into the container at the specified `index`.
	     *
	     * Returns the inserted {\@link ViewRef}.
	     * @abstract
	     * @param {?} viewRef
	     * @param {?} currentIndex
	     * @return {?}
	     */
	    ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };
	    /**
	     * Returns the index of the View, specified via {\@link ViewRef}, within the current container or
	     * `-1` if this container doesn't contain the View.
	     * @abstract
	     * @param {?} viewRef
	     * @return {?}
	     */
	    ViewContainerRef.prototype.indexOf = function (viewRef) { };
	    /**
	     * Destroys a View attached to this container at the specified `index`.
	     *
	     * If `index` is not specified, the last View in the container will be removed.
	     * @abstract
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.remove = function (index) { };
	    /**
	     * Use along with {\@link #insert} to move a View within the current container.
	     *
	     * If the `index` param is omitted, the last {\@link ViewRef} is detached.
	     * @abstract
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef.prototype.detach = function (index) { };
	    return ViewContainerRef;
	}());
	/**
	 * \@stable
	 * @abstract
	 */
	var ChangeDetectorRef = (function () {
	    function ChangeDetectorRef() {
	    }
	    /**
	     * Marks all {\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.
	     *
	     * <!-- TODO: Add a link to a chapter on OnPush components -->
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))
	     *
	     * ```typescript
	     * \@Component({
	     *   selector: 'cmp',
	     *   changeDetection: ChangeDetectionStrategy.OnPush,
	     *   template: `Number of ticks: {{numberOfTicks}}`
	     * })
	     * class Cmp {
	     *   numberOfTicks = 0;
	     *
	     *   constructor(ref: ChangeDetectorRef) {
	     *     setInterval(() => {
	     *       this.numberOfTicks ++
	     *       // the following is required, otherwise the view will not be updated
	     *       this.ref.markForCheck();
	     *     }, 1000);
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'app',
	     *   changeDetection: ChangeDetectionStrategy.OnPush,
	     *   template: `
	     *     <cmp><cmp>
	     *   `,
	     * })
	     * class App {
	     * }
	     * ```
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.markForCheck = function () { };
	    /**
	     * Detaches the change detector from the change detector tree.
	     *
	     * The detached change detector will not be checked until it is reattached.
	     *
	     * This can also be used in combination with {\@link ChangeDetectorRef#detectChanges} to implement
	     * local change
	     * detection checks.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	     *
	     * ### Example
	     *
	     * The following example defines a component with a large list of readonly data.
	     * Imagine the data changes constantly, many times per second. For performance reasons,
	     * we want to check and update the list every five seconds. We can do that by detaching
	     * the component's change detector and doing a local check every five seconds.
	     *
	     * ```typescript
	     * class DataProvider {
	     *   // in a real application the returned data will be different every time
	     *   get data() {
	     *     return [1,2,3,4,5];
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'giant-list',
	     *   template: `
	     *     <li *ngFor="let d of dataProvider.data">Data {{d}}</lig>
	     *   `,
	     * })
	     * class GiantList {
	     *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {
	     *     ref.detach();
	     *     setInterval(() => {
	     *       this.ref.detectChanges();
	     *     }, 5000);
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'app',
	     *   providers: [DataProvider],
	     *   template: `
	     *     <giant-list><giant-list>
	     *   `,
	     * })
	     * class App {
	     * }
	     * ```
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.detach = function () { };
	    /**
	     * Checks the change detector and its children.
	     *
	     * This can also be used in combination with {\@link ChangeDetectorRef#detach} to implement local
	     * change detection
	     * checks.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	     *
	     * ### Example
	     *
	     * The following example defines a component with a large list of readonly data.
	     * Imagine, the data changes constantly, many times per second. For performance reasons,
	     * we want to check and update the list every five seconds.
	     *
	     * We can do that by detaching the component's change detector and doing a local change detection
	     * check
	     * every five seconds.
	     *
	     * See {\@link ChangeDetectorRef#detach} for more information.
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.detectChanges = function () { };
	    /**
	     * Checks the change detector and its children, and throws if any changes are detected.
	     *
	     * This is used in development mode to verify that running change detection doesn't introduce
	     * other changes.
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.checkNoChanges = function () { };
	    /**
	     * Reattach the change detector to the change detector tree.
	     *
	     * This also marks OnPush ancestors as to be checked. This reattached change detector will be
	     * checked during the next change detection run.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))
	     *
	     * The following example creates a component displaying `live` data. The component will detach
	     * its change detector from the main change detector tree when the component's live property
	     * is set to false.
	     *
	     * ```typescript
	     * class DataProvider {
	     *   data = 1;
	     *
	     *   constructor() {
	     *     setInterval(() => {
	     *       this.data = this.data * 2;
	     *     }, 500);
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'live-data',
	     *   inputs: ['live'],
	     *   template: 'Data: {{dataProvider.data}}'
	     * })
	     * class LiveData {
	     *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}
	     *
	     *   set live(value) {
	     *     if (value)
	     *       this.ref.reattach();
	     *     else
	     *       this.ref.detach();
	     *   }
	     * }
	     *
	     * \@Component({
	     *   selector: 'app',
	     *   providers: [DataProvider],
	     *   template: `
	     *     Live Update: <input type="checkbox" [(ngModel)]="live">
	     *     <live-data [live]="live"><live-data>
	     *   `,
	     * })
	     * class App {
	     *   live = true;
	     * }
	     * ```
	     * @abstract
	     * @return {?}
	     */
	    ChangeDetectorRef.prototype.reattach = function () { };
	    return ChangeDetectorRef;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@stable
	 * @abstract
	 */
	var ViewRef = (function (_super) {
	    __extends(ViewRef, _super);
	    function ViewRef() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * Destroys the view and all of the data structures associated with it.
	     * @abstract
	     * @return {?}
	     */
	    ViewRef.prototype.destroy = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    ViewRef.prototype.destroyed = function () { };
	    /**
	     * @abstract
	     * @param {?} callback
	     * @return {?}
	     */
	    ViewRef.prototype.onDestroy = function (callback) { };
	    return ViewRef;
	}(ChangeDetectorRef));
	/**
	 * Represents an Angular View.
	 *
	 * <!-- TODO: move the next two paragraphs to the dev guide -->
	 * A View is a fundamental building block of the application UI. It is the smallest grouping of
	 * Elements which are created and destroyed together.
	 *
	 * Properties of elements in a View can change, but the structure (number and order) of elements in
	 * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
	 * removing nested Views via a {\@link ViewContainerRef}. Each View can contain many View Containers.
	 * <!-- /TODO -->
	 *
	 * ### Example
	 *
	 * Given this template...
	 *
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <li *ngFor="let  item of items">{{item}}</li>
	 * </ul>
	 * ```
	 *
	 * We have two {\@link TemplateRef}s:
	 *
	 * Outer {\@link TemplateRef}:
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
	 * </ul>
	 * ```
	 *
	 * Inner {\@link TemplateRef}:
	 * ```
	 *   <li>{{item}}</li>
	 * ```
	 *
	 * Notice that the original template is broken down into two separate {\@link TemplateRef}s.
	 *
	 * The outer/inner {\@link TemplateRef}s are then assembled into views like so:
	 *
	 * ```
	 * <!-- ViewRef: outer-0 -->
	 * Count: 2
	 * <ul>
	 *   <ng-template view-container-ref></ng-template>
	 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	 * </ul>
	 * <!-- /ViewRef: outer-0 -->
	 * ```
	 * \@experimental
	 * @abstract
	 */
	var EmbeddedViewRef = (function (_super) {
	    __extends(EmbeddedViewRef, _super);
	    function EmbeddedViewRef() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    EmbeddedViewRef.prototype.context = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    EmbeddedViewRef.prototype.rootNodes = function () { };
	    return EmbeddedViewRef;
	}(ViewRef));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Public API for compiler
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EventListener = (function () {
	    /**
	     * @param {?} name
	     * @param {?} callback
	     */
	    function EventListener(name, callback) {
	        this.name = name;
	        this.callback = callback;
	    }
	    
	    return EventListener;
	}());
	/**
	 * \@experimental All debugging apis are currently experimental.
	 */
	var DebugNode = (function () {
	    /**
	     * @param {?} nativeNode
	     * @param {?} parent
	     * @param {?} _debugContext
	     */
	    function DebugNode(nativeNode, parent, _debugContext) {
	        this._debugContext = _debugContext;
	        this.nativeNode = nativeNode;
	        if (parent && parent instanceof DebugElement) {
	            parent.addChild(this);
	        }
	        else {
	            this.parent = null;
	        }
	        this.listeners = [];
	    }
	    Object.defineProperty(DebugNode.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._debugContext ? this._debugContext.injector : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "componentInstance", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._debugContext ? this._debugContext.component : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "context", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._debugContext ? this._debugContext.context : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "references", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this._debugContext ? this._debugContext.references : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "providerTokens", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this._debugContext ? this._debugContext.providerTokens : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "source", {
	        /**
	         * @deprecated since v4
	         * @return {?}
	         */
	        get: function () { return 'Deprecated since v4'; },
	        enumerable: true,
	        configurable: true
	    });
	    return DebugNode;
	}());
	/**
	 * \@experimental All debugging apis are currently experimental.
	 */
	var DebugElement = (function (_super) {
	    __extends(DebugElement, _super);
	    /**
	     * @param {?} nativeNode
	     * @param {?} parent
	     * @param {?} _debugContext
	     */
	    function DebugElement(nativeNode, parent, _debugContext) {
	        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;
	        _this.properties = {};
	        _this.attributes = {};
	        _this.classes = {};
	        _this.styles = {};
	        _this.childNodes = [];
	        _this.nativeElement = nativeNode;
	        return _this;
	    }
	    /**
	     * @param {?} child
	     * @return {?}
	     */
	    DebugElement.prototype.addChild = function (child) {
	        if (child) {
	            this.childNodes.push(child);
	            child.parent = this;
	        }
	    };
	    /**
	     * @param {?} child
	     * @return {?}
	     */
	    DebugElement.prototype.removeChild = function (child) {
	        var /** @type {?} */ childIndex = this.childNodes.indexOf(child);
	        if (childIndex !== -1) {
	            child.parent = null;
	            this.childNodes.splice(childIndex, 1);
	        }
	    };
	    /**
	     * @param {?} child
	     * @param {?} newChildren
	     * @return {?}
	     */
	    DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
	        var _this = this;
	        var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);
	        if (siblingIndex !== -1) {
	            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));
	            newChildren.forEach(function (c) {
	                if (c.parent) {
	                    c.parent.removeChild(c);
	                }
	                c.parent = _this;
	            });
	        }
	        var _a;
	    };
	    /**
	     * @param {?} refChild
	     * @param {?} newChild
	     * @return {?}
	     */
	    DebugElement.prototype.insertBefore = function (refChild, newChild) {
	        var /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);
	        if (refIndex === -1) {
	            this.addChild(newChild);
	        }
	        else {
	            if (newChild.parent) {
	                newChild.parent.removeChild(newChild);
	            }
	            newChild.parent = this;
	            this.childNodes.splice(refIndex, 0, newChild);
	        }
	    };
	    /**
	     * @param {?} predicate
	     * @return {?}
	     */
	    DebugElement.prototype.query = function (predicate) {
	        var /** @type {?} */ results = this.queryAll(predicate);
	        return results[0] || null;
	    };
	    /**
	     * @param {?} predicate
	     * @return {?}
	     */
	    DebugElement.prototype.queryAll = function (predicate) {
	        var /** @type {?} */ matches = [];
	        _queryElementChildren(this, predicate, matches);
	        return matches;
	    };
	    /**
	     * @param {?} predicate
	     * @return {?}
	     */
	    DebugElement.prototype.queryAllNodes = function (predicate) {
	        var /** @type {?} */ matches = [];
	        _queryNodeChildren(this, predicate, matches);
	        return matches;
	    };
	    Object.defineProperty(DebugElement.prototype, "children", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} eventName
	     * @param {?} eventObj
	     * @return {?}
	     */
	    DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
	        this.listeners.forEach(function (listener) {
	            if (listener.name == eventName) {
	                listener.callback(eventObj);
	            }
	        });
	    };
	    return DebugElement;
	}(DebugNode));
	/**
	 * \@experimental
	 * @param {?} debugEls
	 * @return {?}
	 */
	function asNativeElements(debugEls) {
	    return debugEls.map(function (el) { return el.nativeElement; });
	}
	/**
	 * @param {?} element
	 * @param {?} predicate
	 * @param {?} matches
	 * @return {?}
	 */
	function _queryElementChildren(element, predicate, matches) {
	    element.childNodes.forEach(function (node) {
	        if (node instanceof DebugElement) {
	            if (predicate(node)) {
	                matches.push(node);
	            }
	            _queryElementChildren(node, predicate, matches);
	        }
	    });
	}
	/**
	 * @param {?} parentNode
	 * @param {?} predicate
	 * @param {?} matches
	 * @return {?}
	 */
	function _queryNodeChildren(parentNode, predicate, matches) {
	    if (parentNode instanceof DebugElement) {
	        parentNode.childNodes.forEach(function (node) {
	            if (predicate(node)) {
	                matches.push(node);
	            }
	            if (node instanceof DebugElement) {
	                _queryNodeChildren(node, predicate, matches);
	            }
	        });
	    }
	}
	// Need to keep the nodes in a global Map so that multiple angular apps are supported.
	var _nativeNodeToDebugNode = new Map();
	/**
	 * \@experimental
	 * @param {?} nativeNode
	 * @return {?}
	 */
	function getDebugNode(nativeNode) {
	    return _nativeNodeToDebugNode.get(nativeNode);
	}
	/**
	 * @return {?}
	 */
	/**
	 * @param {?} node
	 * @return {?}
	 */
	function indexDebugNode(node) {
	    _nativeNodeToDebugNode.set(node.nativeNode, node);
	}
	/**
	 * @param {?} node
	 * @return {?}
	 */
	function removeDebugNodeFromIndex(node) {
	    _nativeNodeToDebugNode.delete(node.nativeNode);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} a
	 * @param {?} b
	 * @return {?}
	 */
	function devModeEqual(a, b) {
	    var /** @type {?} */ isListLikeIterableA = isListLikeIterable(a);
	    var /** @type {?} */ isListLikeIterableB = isListLikeIterable(b);
	    if (isListLikeIterableA && isListLikeIterableB) {
	        return areIterablesEqual(a, b, devModeEqual);
	    }
	    else {
	        var /** @type {?} */ isAObject = a && (typeof a === 'object' || typeof a === 'function');
	        var /** @type {?} */ isBObject = b && (typeof b === 'object' || typeof b === 'function');
	        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
	            return true;
	        }
	        else {
	            return looseIdentical(a, b);
	        }
	    }
	}
	/**
	 * Indicates that the result of a {\@link Pipe} transformation has changed even though the
	 * reference
	 * has not changed.
	 *
	 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	 *
	 * Example:
	 *
	 * ```
	 * if (this._latestValue === this._latestReturnedValue) {
	 *    return this._latestReturnedValue;
	 *  } else {
	 *    this._latestReturnedValue = this._latestValue;
	 *    return WrappedValue.wrap(this._latestValue); // this will force update
	 *  }
	 * ```
	 * \@stable
	 */
	var WrappedValue = (function () {
	    /**
	     * @param {?} wrapped
	     */
	    function WrappedValue(wrapped) {
	        this.wrapped = wrapped;
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    WrappedValue.wrap = function (value) { return new WrappedValue(value); };
	    return WrappedValue;
	}());
	/**
	 * Helper class for unwrapping WrappedValue s
	 */
	var ValueUnwrapper = (function () {
	    function ValueUnwrapper() {
	        this.hasWrappedValue = false;
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    ValueUnwrapper.prototype.unwrap = function (value) {
	        if (value instanceof WrappedValue) {
	            this.hasWrappedValue = true;
	            return value.wrapped;
	        }
	        return value;
	    };
	    /**
	     * @return {?}
	     */
	    ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };
	    return ValueUnwrapper;
	}());
	/**
	 * Represents a basic change from a previous to a new value.
	 * \@stable
	 */
	var SimpleChange = (function () {
	    /**
	     * @param {?} previousValue
	     * @param {?} currentValue
	     * @param {?} firstChange
	     */
	    function SimpleChange(previousValue, currentValue, firstChange) {
	        this.previousValue = previousValue;
	        this.currentValue = currentValue;
	        this.firstChange = firstChange;
	    }
	    /**
	     * Check whether the new value is the first value assigned.
	     * @return {?}
	     */
	    SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };
	    return SimpleChange;
	}());
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function isListLikeIterable(obj) {
	    if (!isJsObject(obj))
	        return false;
	    return Array.isArray(obj) ||
	        (!(obj instanceof Map) &&
	            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	}
	/**
	 * @param {?} a
	 * @param {?} b
	 * @param {?} comparator
	 * @return {?}
	 */
	function areIterablesEqual(a, b, comparator) {
	    var /** @type {?} */ iterator1 = a[getSymbolIterator()]();
	    var /** @type {?} */ iterator2 = b[getSymbolIterator()]();
	    while (true) {
	        var /** @type {?} */ item1 = iterator1.next();
	        var /** @type {?} */ item2 = iterator2.next();
	        if (item1.done && item2.done)
	            return true;
	        if (item1.done || item2.done)
	            return false;
	        if (!comparator(item1.value, item2.value))
	            return false;
	    }
	}
	/**
	 * @param {?} obj
	 * @param {?} fn
	 * @return {?}
	 */
	function iterateListLike(obj, fn) {
	    if (Array.isArray(obj)) {
	        for (var /** @type {?} */ i = 0; i < obj.length; i++) {
	            fn(obj[i]);
	        }
	    }
	    else {
	        var /** @type {?} */ iterator = obj[getSymbolIterator()]();
	        var /** @type {?} */ item = void 0;
	        while (!((item = iterator.next()).done)) {
	            fn(item.value);
	        }
	    }
	}
	/**
	 * @param {?} o
	 * @return {?}
	 */
	function isJsObject(o) {
	    return o !== null && (typeof o === 'function' || typeof o === 'object');
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DefaultIterableDifferFactory = (function () {
	    function DefaultIterableDifferFactory() {
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
	    /**
	     * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
	     * @template V
	     * @param {?=} cdRefOrTrackBy
	     * @param {?=} trackByFn
	     * @return {?}
	     */
	    DefaultIterableDifferFactory.prototype.create = function (cdRefOrTrackBy, trackByFn) {
	        return new DefaultIterableDiffer(trackByFn || (cdRefOrTrackBy));
	    };
	    return DefaultIterableDifferFactory;
	}());
	var trackByIdentity = function (index, item) { return item; };
	/**
	 * @deprecated v4.0.0 - Should not be part of public API.
	 */
	var DefaultIterableDiffer = (function () {
	    /**
	     * @param {?=} _trackByFn
	     */
	    function DefaultIterableDiffer(_trackByFn) {
	        this._trackByFn = _trackByFn;
	        this._length = null;
	        this._collection = null;
	        this._linkedRecords = null;
	        this._unlinkedRecords = null;
	        this._previousItHead = null;
	        this._itHead = null;
	        this._itTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._movesHead = null;
	        this._movesTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	        this._identityChangesHead = null;
	        this._identityChangesTail = null;
	        this._trackByFn = this._trackByFn || trackByIdentity;
	    }
	    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._collection; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._length; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._itHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
	        var /** @type {?} */ nextIt = this._itHead;
	        var /** @type {?} */ nextRemove = this._removalsHead;
	        var /** @type {?} */ addRemoveOffset = 0;
	        var /** @type {?} */ moveOffsets = null;
	        while (nextIt || nextRemove) {
	            // Figure out which is the next record to process
	            // Order: remove, add, move
	            var /** @type {?} */ record = !nextRemove ||
	                nextIt &&
	                    nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
	                nextIt :
	                nextRemove;
	            var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
	            var /** @type {?} */ currentIndex = record.currentIndex;
	            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
	            if (record === nextRemove) {
	                addRemoveOffset--;
	                nextRemove = nextRemove._nextRemoved;
	            }
	            else {
	                nextIt = nextIt._next;
	                if (record.previousIndex == null) {
	                    addRemoveOffset++;
	                }
	                else {
	                    // INVARIANT:  currentIndex < previousIndex
	                    if (!moveOffsets)
	                        moveOffsets = [];
	                    var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
	                    var /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;
	                    if (localMovePreviousIndex != localCurrentIndex) {
	                        for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {
	                            var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
	                            var /** @type {?} */ index = offset + i;
	                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {
	                                moveOffsets[i] = offset + 1;
	                            }
	                        }
	                        var /** @type {?} */ previousIndex = record.previousIndex;
	                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
	                    }
	                }
	            }
	            if (adjPreviousIndex !== currentIndex) {
	                fn(record, adjPreviousIndex, currentIndex);
	            }
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} collection
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.diff = function (collection) {
	        if (collection == null)
	            collection = [];
	        if (!isListLikeIterable(collection)) {
	            throw new Error("Error trying to diff '" + collection + "'");
	        }
	        if (this.check(collection)) {
	            return this;
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.onDestroy = function () { };
	    /**
	     * @param {?} collection
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.check = function (collection) {
	        var _this = this;
	        this._reset();
	        var /** @type {?} */ record = this._itHead;
	        var /** @type {?} */ mayBeDirty = false;
	        var /** @type {?} */ index;
	        var /** @type {?} */ item;
	        var /** @type {?} */ itemTrackBy;
	        if (Array.isArray(collection)) {
	            this._length = collection.length;
	            for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {
	                item = collection[index_1];
	                itemTrackBy = this._trackByFn(index_1, item);
	                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                    record = this._mismatch(record, item, itemTrackBy, index_1);
	                    mayBeDirty = true;
	                }
	                else {
	                    if (mayBeDirty) {
	                        // TODO(misko): can we limit this to duplicates only?
	                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
	                    }
	                    if (!looseIdentical(record.item, item))
	                        this._addIdentityChange(record, item);
	                }
	                record = record._next;
	            }
	        }
	        else {
	            index = 0;
	            iterateListLike(collection, function (item) {
	                itemTrackBy = _this._trackByFn(index, item);
	                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                    record = _this._mismatch(record, item, itemTrackBy, index);
	                    mayBeDirty = true;
	                }
	                else {
	                    if (mayBeDirty) {
	                        // TODO(misko): can we limit this to duplicates only?
	                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);
	                    }
	                    if (!looseIdentical(record.item, item))
	                        _this._addIdentityChange(record, item);
	                }
	                record = record._next;
	                index++;
	            });
	            this._length = index;
	        }
	        this._truncate(record);
	        this._collection = collection;
	        return this.isDirty;
	    };
	    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this._additionsHead !== null || this._movesHead !== null ||
	                this._removalsHead !== null || this._identityChangesHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Reset the state of the change objects to show no changes. This means set previousKey to
	     * currentKey, and clear all of the queues (additions, moves, removals).
	     * Set the previousIndexes of moved and added items to their currentIndexes
	     * Reset the list of additions, moves and removals
	     *
	     * \@internal
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var /** @type {?} */ record = void 0;
	            var /** @type {?} */ nextRecord = void 0;
	            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                record.previousIndex = record.currentIndex;
	            }
	            this._additionsHead = this._additionsTail = null;
	            for (record = this._movesHead; record !== null; record = nextRecord) {
	                record.previousIndex = record.currentIndex;
	                nextRecord = record._nextMoved;
	            }
	            this._movesHead = this._movesTail = null;
	            this._removalsHead = this._removalsTail = null;
	            this._identityChangesHead = this._identityChangesTail = null;
	        }
	    };
	    /**
	     * This is the core function which handles differences between collections.
	     *
	     * - `record` is the record which we saw at this position last time. If null then it is a new
	     *   item.
	     * - `item` is the current item in the collection
	     * - `index` is the position of the item in the collection
	     *
	     * \@internal
	     * @param {?} record
	     * @param {?} item
	     * @param {?} itemTrackBy
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
	        // The previous record after which we will append the current one.
	        var /** @type {?} */ previousRecord;
	        if (record === null) {
	            previousRecord = this._itTail;
	        }
	        else {
	            previousRecord = record._prev;
	            // Remove the record from the collection since we know it does not match the item.
	            this._remove(record);
	        }
	        // Attempt to see if we have seen the item before.
	        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
	        if (record !== null) {
	            // We have seen this before, we need to move it forward in the collection.
	            // But first we need to check if identity changed, so we can update in view if necessary
	            if (!looseIdentical(record.item, item))
	                this._addIdentityChange(record, item);
	            this._moveAfter(record, previousRecord, index);
	        }
	        else {
	            // Never seen it, check evicted list.
	            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	            if (record !== null) {
	                // It is an item which we have evicted earlier: reinsert it back into the list.
	                // But first we need to check if identity changed, so we can update in view if necessary
	                if (!looseIdentical(record.item, item))
	                    this._addIdentityChange(record, item);
	                this._reinsertAfter(record, previousRecord, index);
	            }
	            else {
	                // It is a new item: add it.
	                record =
	                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
	            }
	        }
	        return record;
	    };
	    /**
	     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	     *
	     * Use case: `[a, a]` => `[b, a, a]`
	     *
	     * If we did not have this check then the insertion of `b` would:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) leave `a` at index `1` as is. <-- this is wrong!
	     *   3) reinsert `a` at index 2. <-- this is wrong!
	     *
	     * The correct behavior is:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) reinsert `a` at index 1.
	     *   3) move `a` at from `1` to `2`.
	     *
	     *
	     * Double check that we have not evicted a duplicate item. We need to check if the item type may
	     * have already been removed:
	     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	     * at the end.
	     *
	     * \@internal
	     * @param {?} record
	     * @param {?} item
	     * @param {?} itemTrackBy
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
	        var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	        if (reinsertRecord !== null) {
	            record = this._reinsertAfter(reinsertRecord, record._prev, index);
	        }
	        else if (record.currentIndex != index) {
	            record.currentIndex = index;
	            this._addToMoves(record, index);
	        }
	        return record;
	    };
	    /**
	     * Get rid of any excess {\@link IterableChangeRecord_}s from the previous collection
	     *
	     * - `record` The first excess {\@link IterableChangeRecord_}.
	     *
	     * \@internal
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._truncate = function (record) {
	        // Anything after that needs to be removed;
	        while (record !== null) {
	            var /** @type {?} */ nextRecord = record._next;
	            this._addToRemovals(this._unlink(record));
	            record = nextRecord;
	        }
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.clear();
	        }
	        if (this._additionsTail !== null) {
	            this._additionsTail._nextAdded = null;
	        }
	        if (this._movesTail !== null) {
	            this._movesTail._nextMoved = null;
	        }
	        if (this._itTail !== null) {
	            this._itTail._next = null;
	        }
	        if (this._removalsTail !== null) {
	            this._removalsTail._nextRemoved = null;
	        }
	        if (this._identityChangesTail !== null) {
	            this._identityChangesTail._nextIdentityChange = null;
	        }
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} prevRecord
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.remove(record);
	        }
	        var /** @type {?} */ prev = record._prevRemoved;
	        var /** @type {?} */ next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} prevRecord
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
	        this._unlink(record);
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} prevRecord
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
	        this._insertAfter(record, prevRecord, index);
	        if (this._additionsTail === null) {
	            // todo(vicb)
	            // assert(this._additionsHead === null);
	            this._additionsTail = this._additionsHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_additionsTail._nextAdded === null);
	            // assert(record._nextAdded === null);
	            this._additionsTail = this._additionsTail._nextAdded = record;
	        }
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} prevRecord
	     * @param {?} index
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
	        // todo(vicb)
	        // assert(record != prevRecord);
	        // assert(record._next === null);
	        // assert(record._prev === null);
	        var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;
	        // todo(vicb)
	        // assert(next != record);
	        // assert(prevRecord != record);
	        record._next = next;
	        record._prev = prevRecord;
	        if (next === null) {
	            this._itTail = record;
	        }
	        else {
	            next._prev = record;
	        }
	        if (prevRecord === null) {
	            this._itHead = record;
	        }
	        else {
	            prevRecord._next = record;
	        }
	        if (this._linkedRecords === null) {
	            this._linkedRecords = new _DuplicateMap();
	        }
	        this._linkedRecords.put(record);
	        record.currentIndex = index;
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._remove = function (record) {
	        return this._addToRemovals(this._unlink(record));
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._unlink = function (record) {
	        if (this._linkedRecords !== null) {
	            this._linkedRecords.remove(record);
	        }
	        var /** @type {?} */ prev = record._prev;
	        var /** @type {?} */ next = record._next;
	        // todo(vicb)
	        // assert((record._prev = null) === null);
	        // assert((record._next = null) === null);
	        if (prev === null) {
	            this._itHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        if (next === null) {
	            this._itTail = prev;
	        }
	        else {
	            next._prev = prev;
	        }
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} toIndex
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
	        // todo(vicb)
	        // assert(record._nextMoved === null);
	        if (record.previousIndex === toIndex) {
	            return record;
	        }
	        if (this._movesTail === null) {
	            // todo(vicb)
	            // assert(_movesHead === null);
	            this._movesTail = this._movesHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_movesTail._nextMoved === null);
	            this._movesTail = this._movesTail._nextMoved = record;
	        }
	        return record;
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._addToRemovals = function (record) {
	        if (this._unlinkedRecords === null) {
	            this._unlinkedRecords = new _DuplicateMap();
	        }
	        this._unlinkedRecords.put(record);
	        record.currentIndex = null;
	        record._nextRemoved = null;
	        if (this._removalsTail === null) {
	            // todo(vicb)
	            // assert(_removalsHead === null);
	            this._removalsTail = this._removalsHead = record;
	            record._prevRemoved = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(_removalsTail._nextRemoved === null);
	            // assert(record._nextRemoved === null);
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = this._removalsTail._nextRemoved = record;
	        }
	        return record;
	    };
	    /**
	     * \@internal
	     * @param {?} record
	     * @param {?} item
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
	        record.item = item;
	        if (this._identityChangesTail === null) {
	            this._identityChangesTail = this._identityChangesHead = record;
	        }
	        else {
	            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
	        }
	        return record;
	    };
	    /**
	     * @return {?}
	     */
	    DefaultIterableDiffer.prototype.toString = function () {
	        var /** @type {?} */ list = [];
	        this.forEachItem(function (record) { return list.push(record); });
	        var /** @type {?} */ previous = [];
	        this.forEachPreviousItem(function (record) { return previous.push(record); });
	        var /** @type {?} */ additions = [];
	        this.forEachAddedItem(function (record) { return additions.push(record); });
	        var /** @type {?} */ moves = [];
	        this.forEachMovedItem(function (record) { return moves.push(record); });
	        var /** @type {?} */ removals = [];
	        this.forEachRemovedItem(function (record) { return removals.push(record); });
	        var /** @type {?} */ identityChanges = [];
	        this.forEachIdentityChange(function (record) { return identityChanges.push(record); });
	        return 'collection: ' + list.join(', ') + '\n' +
	            'previous: ' + previous.join(', ') + '\n' +
	            'additions: ' + additions.join(', ') + '\n' +
	            'moves: ' + moves.join(', ') + '\n' +
	            'removals: ' + removals.join(', ') + '\n' +
	            'identityChanges: ' + identityChanges.join(', ') + '\n';
	    };
	    return DefaultIterableDiffer;
	}());
	/**
	 * \@stable
	 */
	var IterableChangeRecord_ = (function () {
	    /**
	     * @param {?} item
	     * @param {?} trackById
	     */
	    function IterableChangeRecord_(item, trackById) {
	        this.item = item;
	        this.trackById = trackById;
	        this.currentIndex = null;
	        this.previousIndex = null;
	        /**
	         * \@internal
	         */
	        this._nextPrevious = null;
	        /**
	         * \@internal
	         */
	        this._prev = null;
	        /**
	         * \@internal
	         */
	        this._next = null;
	        /**
	         * \@internal
	         */
	        this._prevDup = null;
	        /**
	         * \@internal
	         */
	        this._nextDup = null;
	        /**
	         * \@internal
	         */
	        this._prevRemoved = null;
	        /**
	         * \@internal
	         */
	        this._nextRemoved = null;
	        /**
	         * \@internal
	         */
	        this._nextAdded = null;
	        /**
	         * \@internal
	         */
	        this._nextMoved = null;
	        /**
	         * \@internal
	         */
	        this._nextIdentityChange = null;
	    }
	    /**
	     * @return {?}
	     */
	    IterableChangeRecord_.prototype.toString = function () {
	        return this.previousIndex === this.currentIndex ? stringify(this.item) :
	            stringify(this.item) + '[' +
	                stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
	    };
	    return IterableChangeRecord_;
	}());
	var _DuplicateItemRecordList = (function () {
	    function _DuplicateItemRecordList() {
	        /**
	         * \@internal
	         */
	        this._head = null;
	        /**
	         * \@internal
	         */
	        this._tail = null;
	    }
	    /**
	     * Append the record to the list of duplicates.
	     *
	     * Note: by design all records in the list of duplicates hold the same value in record.item.
	     * @param {?} record
	     * @return {?}
	     */
	    _DuplicateItemRecordList.prototype.add = function (record) {
	        if (this._head === null) {
	            this._head = this._tail = record;
	            record._nextDup = null;
	            record._prevDup = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(record.item ==  _head.item ||
	            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	            this._tail._nextDup = record;
	            record._prevDup = this._tail;
	            record._nextDup = null;
	            this._tail = record;
	        }
	    };
	    /**
	     * @param {?} trackById
	     * @param {?} afterIndex
	     * @return {?}
	     */
	    _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
	        var /** @type {?} */ record;
	        for (record = this._head; record !== null; record = record._nextDup) {
	            if ((afterIndex === null || afterIndex < record.currentIndex) &&
	                looseIdentical(record.trackById, trackById)) {
	                return record;
	            }
	        }
	        return null;
	    };
	    /**
	     * Remove one {\@link IterableChangeRecord_} from the list of duplicates.
	     *
	     * Returns whether the list of duplicates is empty.
	     * @param {?} record
	     * @return {?}
	     */
	    _DuplicateItemRecordList.prototype.remove = function (record) {
	        // todo(vicb)
	        // assert(() {
	        //  // verify that the record being removed is in the list.
	        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
	        //    if (identical(cursor, record)) return true;
	        //  }
	        //  return false;
	        //});
	        var /** @type {?} */ prev = record._prevDup;
	        var /** @type {?} */ next = record._nextDup;
	        if (prev === null) {
	            this._head = next;
	        }
	        else {
	            prev._nextDup = next;
	        }
	        if (next === null) {
	            this._tail = prev;
	        }
	        else {
	            next._prevDup = prev;
	        }
	        return this._head === null;
	    };
	    return _DuplicateItemRecordList;
	}());
	var _DuplicateMap = (function () {
	    function _DuplicateMap() {
	        this.map = new Map();
	    }
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    _DuplicateMap.prototype.put = function (record) {
	        var /** @type {?} */ key = record.trackById;
	        var /** @type {?} */ duplicates = this.map.get(key);
	        if (!duplicates) {
	            duplicates = new _DuplicateItemRecordList();
	            this.map.set(key, duplicates);
	        }
	        duplicates.add(record);
	    };
	    /**
	     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
	     * have already iterated over, we use the afterIndex to pretend it is not there.
	     *
	     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	     * have any more `a`s needs to return the last `a` not the first or second.
	     * @param {?} trackById
	     * @param {?=} afterIndex
	     * @return {?}
	     */
	    _DuplicateMap.prototype.get = function (trackById, afterIndex) {
	        if (afterIndex === void 0) { afterIndex = null; }
	        var /** @type {?} */ key = trackById;
	        var /** @type {?} */ recordList = this.map.get(key);
	        return recordList ? recordList.get(trackById, afterIndex) : null;
	    };
	    /**
	     * Removes a {\@link IterableChangeRecord_} from the list of duplicates.
	     *
	     * The list of duplicates also is removed from the map if it gets empty.
	     * @param {?} record
	     * @return {?}
	     */
	    _DuplicateMap.prototype.remove = function (record) {
	        var /** @type {?} */ key = record.trackById;
	        var /** @type {?} */ recordList = this.map.get(key);
	        // Remove the list of duplicates when it gets empty
	        if (recordList.remove(record)) {
	            this.map.delete(key);
	        }
	        return record;
	    };
	    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.map.size === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    _DuplicateMap.prototype.clear = function () { this.map.clear(); };
	    /**
	     * @return {?}
	     */
	    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
	    return _DuplicateMap;
	}());
	/**
	 * @param {?} item
	 * @param {?} addRemoveOffset
	 * @param {?} moveOffsets
	 * @return {?}
	 */
	function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
	    var /** @type {?} */ previousIndex = item.previousIndex;
	    if (previousIndex === null)
	        return previousIndex;
	    var /** @type {?} */ moveOffset = 0;
	    if (moveOffsets && previousIndex < moveOffsets.length) {
	        moveOffset = moveOffsets[previousIndex];
	    }
	    return previousIndex + addRemoveOffset + moveOffset;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DefaultKeyValueDifferFactory = (function () {
	    function DefaultKeyValueDifferFactory() {
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
	    /**
	     * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
	     * @template K, V
	     * @param {?=} cd
	     * @return {?}
	     */
	    DefaultKeyValueDifferFactory.prototype.create = function (cd) {
	        return new DefaultKeyValueDiffer();
	    };
	    return DefaultKeyValueDifferFactory;
	}());
	var DefaultKeyValueDiffer = (function () {
	    function DefaultKeyValueDiffer() {
	        this._records = new Map();
	        this._mapHead = null;
	        this._previousMapHead = null;
	        this._changesHead = null;
	        this._changesTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this._additionsHead !== null || this._changesHead !== null ||
	                this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
	        var /** @type {?} */ record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    /**
	     * @param {?} map
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.diff = function (map) {
	        if (!map) {
	            map = new Map();
	        }
	        else if (!(map instanceof Map || isJsObject(map))) {
	            throw new Error("Error trying to diff '" + map + "'");
	        }
	        return this.check(map) ? this : null;
	    };
	    /**
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.onDestroy = function () { };
	    /**
	     * @param {?} map
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.check = function (map) {
	        var _this = this;
	        this._reset();
	        var /** @type {?} */ records = this._records;
	        var /** @type {?} */ oldSeqRecord = this._mapHead;
	        var /** @type {?} */ lastOldSeqRecord = null;
	        var /** @type {?} */ lastNewSeqRecord = null;
	        var /** @type {?} */ seqChanged = false;
	        this._forEach(map, function (value, key) {
	            var /** @type {?} */ newSeqRecord;
	            if (oldSeqRecord && key === oldSeqRecord.key) {
	                newSeqRecord = oldSeqRecord;
	                _this._maybeAddToChanges(newSeqRecord, value);
	            }
	            else {
	                seqChanged = true;
	                if (oldSeqRecord !== null) {
	                    _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	                    _this._addToRemovals(oldSeqRecord);
	                }
	                if (records.has(key)) {
	                    newSeqRecord = records.get(key);
	                    _this._maybeAddToChanges(newSeqRecord, value);
	                }
	                else {
	                    newSeqRecord = new KeyValueChangeRecord_(key);
	                    records.set(key, newSeqRecord);
	                    newSeqRecord.currentValue = value;
	                    _this._addToAdditions(newSeqRecord);
	                }
	            }
	            if (seqChanged) {
	                if (_this._isInRemovals(newSeqRecord)) {
	                    _this._removeFromRemovals(newSeqRecord);
	                }
	                if (lastNewSeqRecord == null) {
	                    _this._mapHead = newSeqRecord;
	                }
	                else {
	                    lastNewSeqRecord._next = newSeqRecord;
	                }
	            }
	            lastOldSeqRecord = oldSeqRecord;
	            lastNewSeqRecord = newSeqRecord;
	            oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
	        });
	        this._truncate(lastOldSeqRecord, oldSeqRecord);
	        return this.isDirty;
	    };
	    /**
	     * \@internal
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var /** @type {?} */ record = void 0;
	            // Record the state of the mapping
	            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                record.previousValue = record.currentValue;
	            }
	            for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                record.previousValue = record.currentValue;
	            }
	            this._changesHead = this._changesTail = null;
	            this._additionsHead = this._additionsTail = null;
	            this._removalsHead = this._removalsTail = null;
	        }
	    };
	    /**
	     * @param {?} lastRecord
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
	        while (record !== null) {
	            if (lastRecord === null) {
	                this._mapHead = null;
	            }
	            else {
	                lastRecord._next = null;
	            }
	            var /** @type {?} */ nextRecord = record._next;
	            this._addToRemovals(record);
	            lastRecord = record;
	            record = nextRecord;
	        }
	        for (var /** @type {?} */ rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
	            rec.previousValue = rec.currentValue;
	            rec.currentValue = null;
	            this._records.delete(rec.key);
	        }
	    };
	    /**
	     * @param {?} record
	     * @param {?} newValue
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
	        if (!looseIdentical(newValue, record.currentValue)) {
	            record.previousValue = record.currentValue;
	            record.currentValue = newValue;
	            this._addToChanges(record);
	        }
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
	        return record === this._removalsHead || record._nextRemoved !== null ||
	            record._prevRemoved !== null;
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
	        if (this._removalsHead === null) {
	            this._removalsHead = this._removalsTail = record;
	        }
	        else {
	            this._removalsTail._nextRemoved = record;
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = record;
	        }
	    };
	    /**
	     * @param {?} prev
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
	        var /** @type {?} */ next = record._next;
	        if (prev === null) {
	            this._mapHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        record._next = null;
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
	        var /** @type {?} */ prev = record._prevRemoved;
	        var /** @type {?} */ next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        record._prevRemoved = record._nextRemoved = null;
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
	        if (this._additionsHead === null) {
	            this._additionsHead = this._additionsTail = record;
	        }
	        else {
	            this._additionsTail._nextAdded = record;
	            this._additionsTail = record;
	        }
	    };
	    /**
	     * @param {?} record
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
	        if (this._changesHead === null) {
	            this._changesHead = this._changesTail = record;
	        }
	        else {
	            this._changesTail._nextChanged = record;
	            this._changesTail = record;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype.toString = function () {
	        var /** @type {?} */ items = [];
	        var /** @type {?} */ previous = [];
	        var /** @type {?} */ changes = [];
	        var /** @type {?} */ additions = [];
	        var /** @type {?} */ removals = [];
	        var /** @type {?} */ record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            items.push(stringify(record));
	        }
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            previous.push(stringify(record));
	        }
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            changes.push(stringify(record));
	        }
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            additions.push(stringify(record));
	        }
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            removals.push(stringify(record));
	        }
	        return 'map: ' + items.join(', ') + '\n' +
	            'previous: ' + previous.join(', ') + '\n' +
	            'additions: ' + additions.join(', ') + '\n' +
	            'changes: ' + changes.join(', ') + '\n' +
	            'removals: ' + removals.join(', ') + '\n';
	    };
	    /**
	     * \@internal
	     * @template K, V
	     * @param {?} obj
	     * @param {?} fn
	     * @return {?}
	     */
	    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
	        if (obj instanceof Map) {
	            obj.forEach(fn);
	        }
	        else {
	            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
	        }
	    };
	    return DefaultKeyValueDiffer;
	}());
	/**
	 * \@stable
	 */
	var KeyValueChangeRecord_ = (function () {
	    /**
	     * @param {?} key
	     */
	    function KeyValueChangeRecord_(key) {
	        this.key = key;
	        this.previousValue = null;
	        this.currentValue = null;
	        /**
	         * \@internal
	         */
	        this._nextPrevious = null;
	        /**
	         * \@internal
	         */
	        this._next = null;
	        /**
	         * \@internal
	         */
	        this._nextAdded = null;
	        /**
	         * \@internal
	         */
	        this._nextRemoved = null;
	        /**
	         * \@internal
	         */
	        this._prevRemoved = null;
	        /**
	         * \@internal
	         */
	        this._nextChanged = null;
	    }
	    /**
	     * @return {?}
	     */
	    KeyValueChangeRecord_.prototype.toString = function () {
	        return looseIdentical(this.previousValue, this.currentValue) ?
	            stringify(this.key) :
	            (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +
	                stringify(this.currentValue) + ']');
	    };
	    return KeyValueChangeRecord_;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	 * \@stable
	 */
	var IterableDiffers = (function () {
	    /**
	     * @param {?} factories
	     */
	    function IterableDiffers(factories) {
	        this.factories = factories;
	    }
	    /**
	     * @param {?} factories
	     * @param {?=} parent
	     * @return {?}
	     */
	    IterableDiffers.create = function (factories, parent) {
	        if (parent != null) {
	            var /** @type {?} */ copied = parent.factories.slice();
	            factories = factories.concat(copied);
	            return new IterableDiffers(factories);
	        }
	        else {
	            return new IterableDiffers(factories);
	        }
	    };
	    /**
	     * Takes an array of {\@link IterableDifferFactory} and returns a provider used to extend the
	     * inherited {\@link IterableDiffers} instance with the provided factories and return a new
	     * {\@link IterableDiffers} instance.
	     *
	     * The following example shows how to extend an existing list of factories,
	     * which will only be applied to the injector for this component and its children.
	     * This step is all that's required to make a new {\@link IterableDiffer} available.
	     *
	     * ### Example
	     *
	     * ```
	     * \@Component({
	     *   viewProviders: [
	     *     IterableDiffers.extend([new ImmutableListDiffer()])
	     *   ]
	     * })
	     * ```
	     * @param {?} factories
	     * @return {?}
	     */
	    IterableDiffers.extend = function (factories) {
	        return {
	            provide: IterableDiffers,
	            useFactory: function (parent) {
	                if (!parent) {
	                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                    // to
	                    // bootstrap(), which would override default pipes instead of extending them.
	                    throw new Error('Cannot extend IterableDiffers without a parent injector');
	                }
	                return IterableDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
	        };
	    };
	    /**
	     * @param {?} iterable
	     * @return {?}
	     */
	    IterableDiffers.prototype.find = function (iterable) {
	        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });
	        if (factory != null) {
	            return factory;
	        }
	        else {
	            throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
	        }
	    };
	    return IterableDiffers;
	}());
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function getTypeNameForDebugging(type) {
	    return type['name'] || typeof type;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	 * \@stable
	 */
	var KeyValueDiffers = (function () {
	    /**
	     * @param {?} factories
	     */
	    function KeyValueDiffers(factories) {
	        this.factories = factories;
	    }
	    /**
	     * @template S
	     * @param {?} factories
	     * @param {?=} parent
	     * @return {?}
	     */
	    KeyValueDiffers.create = function (factories, parent) {
	        if (parent) {
	            var /** @type {?} */ copied = parent.factories.slice();
	            factories = factories.concat(copied);
	        }
	        return new KeyValueDiffers(factories);
	    };
	    /**
	     * Takes an array of {\@link KeyValueDifferFactory} and returns a provider used to extend the
	     * inherited {\@link KeyValueDiffers} instance with the provided factories and return a new
	     * {\@link KeyValueDiffers} instance.
	     *
	     * The following example shows how to extend an existing list of factories,
	     * which will only be applied to the injector for this component and its children.
	     * This step is all that's required to make a new {\@link KeyValueDiffer} available.
	     *
	     * ### Example
	     *
	     * ```
	     * \@Component({
	     *   viewProviders: [
	     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
	     *   ]
	     * })
	     * ```
	     * @template S
	     * @param {?} factories
	     * @return {?}
	     */
	    KeyValueDiffers.extend = function (factories) {
	        return {
	            provide: KeyValueDiffers,
	            useFactory: function (parent) {
	                if (!parent) {
	                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                    // to bootstrap(), which would override default pipes instead of extending them.
	                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');
	                }
	                return KeyValueDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
	        };
	    };
	    /**
	     * @param {?} kv
	     * @return {?}
	     */
	    KeyValueDiffers.prototype.find = function (kv) {
	        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });
	        if (factory) {
	            return factory;
	        }
	        throw new Error("Cannot find a differ supporting object '" + kv + "'");
	    };
	    return KeyValueDiffers;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Structural diffing for `Object`s and `Map`s.
	 */
	var keyValDiff = [new DefaultKeyValueDifferFactory()];
	/**
	 * Structural diffing for `Iterable` types such as `Array`s.
	 */
	var iterableDiff = [new DefaultIterableDifferFactory()];
	var defaultIterableDiffers = new IterableDiffers(iterableDiff);
	var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Change detection enables data binding in Angular.
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @return {?}
	 */
	function _reflector() {
	    return reflector;
	}
	var _CORE_PLATFORM_PROVIDERS = [
	    // Set a default platform name for platforms that don't set it explicitly.
	    { provide: PLATFORM_ID, useValue: 'unknown' },
	    PlatformRef_,
	    { provide: PlatformRef, useExisting: PlatformRef_ },
	    { provide: Reflector, useFactory: _reflector, deps: [] },
	    { provide: ReflectorReader, useExisting: Reflector },
	    TestabilityRegistry,
	    Console,
	];
	/**
	 * This platform has to be included in any other platform
	 *
	 * \@experimental
	 */
	var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@experimental i18n support is experimental.
	 */
	var LOCALE_ID = new InjectionToken('LocaleId');
	/**
	 * \@experimental i18n support is experimental.
	 */
	var TRANSLATIONS = new InjectionToken('Translations');
	/**
	 * \@experimental i18n support is experimental.
	 */
	var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
	var MissingTranslationStrategy = {};
	MissingTranslationStrategy.Error = 0;
	MissingTranslationStrategy.Warning = 1;
	MissingTranslationStrategy.Ignore = 2;
	MissingTranslationStrategy[MissingTranslationStrategy.Error] = "Error";
	MissingTranslationStrategy[MissingTranslationStrategy.Warning] = "Warning";
	MissingTranslationStrategy[MissingTranslationStrategy.Ignore] = "Ignore";
	var SecurityContext = {};
	SecurityContext.NONE = 0;
	SecurityContext.HTML = 1;
	SecurityContext.STYLE = 2;
	SecurityContext.SCRIPT = 3;
	SecurityContext.URL = 4;
	SecurityContext.RESOURCE_URL = 5;
	SecurityContext[SecurityContext.NONE] = "NONE";
	SecurityContext[SecurityContext.HTML] = "HTML";
	SecurityContext[SecurityContext.STYLE] = "STYLE";
	SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
	SecurityContext[SecurityContext.URL] = "URL";
	SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
	/**
	 * Sanitizer is used by the views to sanitize potentially dangerous values.
	 *
	 * \@stable
	 * @abstract
	 */
	var Sanitizer = (function () {
	    function Sanitizer() {
	    }
	    /**
	     * @abstract
	     * @param {?} context
	     * @param {?} value
	     * @return {?}
	     */
	    Sanitizer.prototype.sanitize = function (context, value) { };
	    return Sanitizer;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Node instance data.
	 *
	 * We have a separate type per NodeType to save memory
	 * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)
	 *
	 * To keep our code monomorphic,
	 * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).
	 * This way, no usage site can get a `NodeData` from view.nodes and then use it for different
	 * purposes.
	 */
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asTextData(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asElementData(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asProviderData(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asPureExpressionData(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function asQueryList(view, index) {
	    return (view.nodes[index]);
	}
	/**
	 * @abstract
	 */
	var DebugContext = (function () {
	    function DebugContext() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.view = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.nodeIndex = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.injector = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.component = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.providerTokens = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.references = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.context = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.componentRenderElement = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DebugContext.prototype.renderNode = function () { };
	    /**
	     * @abstract
	     * @param {?} console
	     * @param {...?} values
	     * @return {?}
	     */
	    DebugContext.prototype.logError = function (console) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	    };
	    return DebugContext;
	}());
	/**
	 * This object is used to prevent cycles in the source files and to have a place where
	 * debug mode can hook it. It is lazily filled when `isDevMode` is known.
	 */
	var Services = {
	    setCurrentNode: undefined,
	    createRootView: undefined,
	    createEmbeddedView: undefined,
	    checkAndUpdateView: undefined,
	    checkNoChangesView: undefined,
	    destroyView: undefined,
	    resolveDep: undefined,
	    createDebugContext: undefined,
	    handleEvent: undefined,
	    updateDirectives: undefined,
	    updateRenderer: undefined,
	    dirtyParentQueries: undefined,
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} context
	 * @param {?} oldValue
	 * @param {?} currValue
	 * @param {?} isFirstCheck
	 * @return {?}
	 */
	function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
	    var /** @type {?} */ msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
	    if (isFirstCheck) {
	        msg +=
	            " It seems like the view has been created after its parent and its children have been dirty checked." +
	                " Has it been created in a change detection hook ?";
	    }
	    return viewDebugError(msg, context);
	}
	/**
	 * @param {?} err
	 * @param {?} context
	 * @return {?}
	 */
	function viewWrappedDebugError(err, context) {
	    if (!(err instanceof Error)) {
	        // errors that are not Error instances don't have a stack,
	        // so it is ok to wrap them into a new Error object...
	        err = new Error(err.toString());
	    }
	    _addDebugContext(err, context);
	    return err;
	}
	/**
	 * @param {?} msg
	 * @param {?} context
	 * @return {?}
	 */
	function viewDebugError(msg, context) {
	    var /** @type {?} */ err = new Error(msg);
	    _addDebugContext(err, context);
	    return err;
	}
	/**
	 * @param {?} err
	 * @param {?} context
	 * @return {?}
	 */
	function _addDebugContext(err, context) {
	    ((err))[ERROR_DEBUG_CONTEXT] = context;
	    ((err))[ERROR_LOGGER] = context.logError.bind(context);
	}
	/**
	 * @param {?} err
	 * @return {?}
	 */
	function isViewDebugError(err) {
	    return !!getDebugContext(err);
	}
	/**
	 * @param {?} action
	 * @return {?}
	 */
	function viewDestroyedError(action) {
	    return new Error("ViewDestroyedError: Attempt to use a destroyed view: " + action);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NOOP = function () { };
	var _tokenKeyCache = new Map();
	/**
	 * @param {?} token
	 * @return {?}
	 */
	function tokenKey(token) {
	    var /** @type {?} */ key = _tokenKeyCache.get(token);
	    if (!key) {
	        key = stringify(token) + '_' + _tokenKeyCache.size;
	        _tokenKeyCache.set(token, key);
	    }
	    return key;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIdx
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function unwrapValue(view, nodeIdx, bindingIdx, value) {
	    if (value instanceof WrappedValue) {
	        value = value.wrapped;
	        var /** @type {?} */ globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
	        var /** @type {?} */ oldValue = view.oldValues[globalBindingIdx];
	        if (oldValue instanceof WrappedValue) {
	            oldValue = oldValue.wrapped;
	        }
	        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
	    }
	    return value;
	}
	var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
	var EMPTY_RENDERER_TYPE_ID = '$$empty';
	/**
	 * @param {?} values
	 * @return {?}
	 */
	function createRendererType2(values) {
	    return {
	        id: UNDEFINED_RENDERER_TYPE_ID,
	        styles: values.styles,
	        encapsulation: values.encapsulation,
	        data: values.data
	    };
	}
	var _renderCompCount = 0;
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function resolveRendererType2(type) {
	    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
	        // first time we see this RendererType2. Initialize it...
	        var /** @type {?} */ isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||
	            type.styles.length || Object.keys(type.data).length);
	        if (isFilled) {
	            type.id = "c" + _renderCompCount++;
	        }
	        else {
	            type.id = EMPTY_RENDERER_TYPE_ID;
	        }
	    }
	    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
	        type = null;
	    }
	    return type;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function checkBinding(view, def, bindingIdx, value) {
	    var /** @type {?} */ oldValues = view.oldValues;
	    if ((view.state & 1 /* FirstCheck */) ||
	        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
	        return true;
	    }
	    return false;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function checkAndUpdateBinding(view, def, bindingIdx, value) {
	    if (checkBinding(view, def, bindingIdx, value)) {
	        view.oldValues[def.bindingIndex + bindingIdx] = value;
	        return true;
	    }
	    return false;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function checkBindingNoChanges(view, def, bindingIdx, value) {
	    var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];
	    if ((view.state & 1 /* FirstCheck */) || !devModeEqual(oldValue, value)) {
	        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.index), oldValue, value, (view.state & 1 /* FirstCheck */) !== 0);
	    }
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function markParentViewsForCheck(view) {
	    var /** @type {?} */ currView = view;
	    while (currView) {
	        if (currView.def.flags & 2 /* OnPush */) {
	            currView.state |= 2 /* ChecksEnabled */;
	        }
	        currView = currView.viewContainerParent || currView.parent;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @param {?} eventName
	 * @param {?} event
	 * @return {?}
	 */
	function dispatchEvent(view, nodeIndex, eventName, event) {
	    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	    var /** @type {?} */ startView = nodeDef.flags & 16777216 /* ComponentView */ ? asElementData(view, nodeIndex).componentView : view;
	    markParentViewsForCheck(startView);
	    return Services.handleEvent(view, nodeIndex, eventName, event);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function declaredViewContainer(view) {
	    if (view.parent) {
	        var /** @type {?} */ parentView = view.parent;
	        return asElementData(parentView, view.parentNodeDef.index);
	    }
	    return undefined;
	}
	/**
	 * for component views, this is the host element.
	 * for embedded views, this is the index of the parent node
	 * that contains the view container.
	 * @param {?} view
	 * @return {?}
	 */
	function viewParentEl(view) {
	    var /** @type {?} */ parentView = view.parent;
	    if (parentView) {
	        return view.parentNodeDef.parent;
	    }
	    else {
	        return null;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function renderNode(view, def) {
	    switch (def.flags & 100673535 /* Types */) {
	        case 1 /* TypeElement */:
	            return asElementData(view, def.index).renderElement;
	        case 2 /* TypeText */:
	            return asTextData(view, def.index).renderText;
	    }
	}
	/**
	 * @param {?} target
	 * @param {?} name
	 * @return {?}
	 */
	function elementEventFullName(target, name) {
	    return target ? target + ":" + name : name;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function isComponentView(view) {
	    return !!view.parent && !!(view.parentNodeDef.flags & 16384 /* Component */);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function isEmbeddedView(view) {
	    return !!view.parent && !(view.parentNodeDef.flags & 16384 /* Component */);
	}
	/**
	 * @param {?} queryId
	 * @return {?}
	 */
	function filterQueryId(queryId) {
	    return 1 << (queryId % 32);
	}
	/**
	 * @param {?} matchedQueriesDsl
	 * @return {?}
	 */
	function splitMatchedQueriesDsl(matchedQueriesDsl) {
	    var /** @type {?} */ matchedQueries = {};
	    var /** @type {?} */ matchedQueryIds = 0;
	    var /** @type {?} */ references = {};
	    if (matchedQueriesDsl) {
	        matchedQueriesDsl.forEach(function (_a) {
	            var queryId = _a[0], valueType = _a[1];
	            if (typeof queryId === 'number') {
	                matchedQueries[queryId] = valueType;
	                matchedQueryIds |= filterQueryId(queryId);
	            }
	            else {
	                references[queryId] = valueType;
	            }
	        });
	    }
	    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };
	}
	/**
	 * @param {?} view
	 * @param {?} renderHost
	 * @param {?} def
	 * @return {?}
	 */
	function getParentRenderElement(view, renderHost, def) {
	    var /** @type {?} */ renderParent = def.renderParent;
	    if (renderParent) {
	        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||
	            (renderParent.flags & 16777216 /* ComponentView */) === 0 ||
	            (renderParent.element.componentRendererType &&
	                renderParent.element.componentRendererType.encapsulation === ViewEncapsulation.Native)) {
	            // only children of non components, or children of components with native encapsulation should
	            // be attached.
	            return asElementData(view, def.renderParent.index).renderElement;
	        }
	    }
	    else {
	        return renderHost;
	    }
	}
	var VIEW_DEFINITION_CACHE = new WeakMap();
	/**
	 * @param {?} factory
	 * @return {?}
	 */
	function resolveViewDefinition(factory) {
	    var /** @type {?} */ value = VIEW_DEFINITION_CACHE.get(factory);
	    if (!value) {
	        value = factory(function () { return NOOP; });
	        value.factory = factory;
	        VIEW_DEFINITION_CACHE.set(factory, value);
	    }
	    return value;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function rootRenderNodes(view) {
	    var /** @type {?} */ renderNodes = [];
	    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);
	    return renderNodes;
	}
	/**
	 * @param {?} view
	 * @param {?} action
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?} target
	 * @return {?}
	 */
	function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
	    // We need to re-compute the parent node in case the nodes have been moved around manually
	    if (action === 3 /* RemoveChild */) {
	        parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));
	    }
	    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
	}
	/**
	 * @param {?} view
	 * @param {?} action
	 * @param {?} startIndex
	 * @param {?} endIndex
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?} target
	 * @return {?}
	 */
	function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
	    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 4 /* TypeNgContent */)) {
	            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
	        }
	        // jump to next sibling
	        i += nodeDef.childCount;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} ngContentIndex
	 * @param {?} action
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?} target
	 * @return {?}
	 */
	function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
	    var /** @type {?} */ compView = view;
	    while (compView && !isComponentView(compView)) {
	        compView = compView.parent;
	    }
	    var /** @type {?} */ hostView = compView.parent;
	    var /** @type {?} */ hostElDef = viewParentEl(compView);
	    var /** @type {?} */ startIndex = hostElDef.index + 1;
	    var /** @type {?} */ endIndex = hostElDef.index + hostElDef.childCount;
	    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
	        var /** @type {?} */ nodeDef = hostView.def.nodes[i];
	        if (nodeDef.ngContentIndex === ngContentIndex) {
	            visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);
	        }
	        // jump to next sibling
	        i += nodeDef.childCount;
	    }
	    if (!hostView.parent) {
	        // a root view
	        var /** @type {?} */ projectedNodes = view.root.projectableNodes[ngContentIndex];
	        if (projectedNodes) {
	            for (var /** @type {?} */ i = 0; i < projectedNodes.length; i++) {
	                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
	            }
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} action
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?} target
	 * @return {?}
	 */
	function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
	    if (nodeDef.flags & 4 /* TypeNgContent */) {
	        visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);
	    }
	    else {
	        var /** @type {?} */ rn = renderNode(view, nodeDef);
	        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 16777216 /* ComponentView */) &&
	            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {
	            // Note: we might need to do both actions.
	            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {
	                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
	            }
	            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {
	                var /** @type {?} */ compView = asElementData(view, nodeDef.index).componentView;
	                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
	            }
	        }
	        else {
	            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
	        }
	        if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
	            var /** @type {?} */ embeddedViews = asElementData(view, nodeDef.index).viewContainer._embeddedViews;
	            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
	                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
	            }
	        }
	        if (nodeDef.flags & 1 /* TypeElement */ && !nodeDef.element.name) {
	            visitSiblingRenderNodes(view, action, nodeDef.index + 1, nodeDef.index + nodeDef.childCount, parentNode, nextSibling, target);
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} renderNode
	 * @param {?} action
	 * @param {?} parentNode
	 * @param {?} nextSibling
	 * @param {?} target
	 * @return {?}
	 */
	function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
	    var /** @type {?} */ renderer = view.renderer;
	    switch (action) {
	        case 1 /* AppendChild */:
	            renderer.appendChild(parentNode, renderNode);
	            break;
	        case 2 /* InsertBefore */:
	            renderer.insertBefore(parentNode, renderNode, nextSibling);
	            break;
	        case 3 /* RemoveChild */:
	            renderer.removeChild(parentNode, renderNode);
	            break;
	        case 0 /* Collect */:
	            target.push(renderNode);
	            break;
	    }
	}
	var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
	/**
	 * @param {?} name
	 * @return {?}
	 */
	function splitNamespace(name) {
	    if (name[0] === ':') {
	        var /** @type {?} */ match = name.match(NS_PREFIX_RE);
	        return [match[1], match[2]];
	    }
	    return ['', name];
	}
	/**
	 * @param {?} bindings
	 * @return {?}
	 */
	function calcBindingFlags(bindings) {
	    var /** @type {?} */ flags = 0;
	    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	        flags |= bindings[i].flags;
	    }
	    return flags;
	}
	/**
	 * @param {?} valueCount
	 * @param {?} constAndInterp
	 * @return {?}
	 */
	function interpolate(valueCount, constAndInterp) {
	    var /** @type {?} */ result = '';
	    for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {
	        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
	    }
	    return result + constAndInterp[valueCount * 2];
	}
	/**
	 * @param {?} valueCount
	 * @param {?} c0
	 * @param {?} a1
	 * @param {?} c1
	 * @param {?=} a2
	 * @param {?=} c2
	 * @param {?=} a3
	 * @param {?=} c3
	 * @param {?=} a4
	 * @param {?=} c4
	 * @param {?=} a5
	 * @param {?=} c5
	 * @param {?=} a6
	 * @param {?=} c6
	 * @param {?=} a7
	 * @param {?=} c7
	 * @param {?=} a8
	 * @param {?=} c8
	 * @param {?=} a9
	 * @param {?=} c9
	 * @return {?}
	 */
	function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
	    switch (valueCount) {
	        case 1:
	            return c0 + _toStringWithNull(a1) + c1;
	        case 2:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
	        case 3:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3;
	        case 4:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4;
	        case 5:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
	        case 6:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
	        case 7:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7;
	        case 8:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
	        case 9:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
	        default:
	            throw new Error("Does not support more than 9 expressions");
	    }
	}
	/**
	 * @param {?} v
	 * @return {?}
	 */
	function _toStringWithNull(v) {
	    return v != null ? v.toString() : '';
	}
	var EMPTY_ARRAY = [];
	var EMPTY_MAP = {};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} flags
	 * @param {?} matchedQueriesDsl
	 * @param {?} ngContentIndex
	 * @param {?} childCount
	 * @param {?=} handleEvent
	 * @param {?=} templateFactory
	 * @return {?}
	 */
	function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
	    if (!handleEvent) {
	        handleEvent = NOOP;
	    }
	    flags |= 1 /* TypeElement */;
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    var /** @type {?} */ template = templateFactory ? resolveViewDefinition(templateFactory) : null;
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: {
	            ns: undefined,
	            name: undefined,
	            attrs: undefined, template: template,
	            componentProvider: undefined,
	            componentView: undefined,
	            componentRendererType: undefined,
	            publicProviders: undefined,
	            allProviders: undefined, handleEvent: handleEvent
	        },
	        provider: undefined,
	        text: undefined,
	        query: undefined,
	        ngContent: undefined
	    };
	}
	/**
	 * @param {?} flags
	 * @param {?} matchedQueriesDsl
	 * @param {?} ngContentIndex
	 * @param {?} childCount
	 * @param {?} namespaceAndName
	 * @param {?=} fixedAttrs
	 * @param {?=} bindings
	 * @param {?=} outputs
	 * @param {?=} handleEvent
	 * @param {?=} componentView
	 * @param {?=} componentRendererType
	 * @return {?}
	 */
	function elementDef(flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {
	    if (fixedAttrs === void 0) { fixedAttrs = []; }
	    if (!handleEvent) {
	        handleEvent = NOOP;
	    }
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    var /** @type {?} */ ns;
	    var /** @type {?} */ name;
	    if (namespaceAndName) {
	        _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
	    }
	    bindings = bindings || [];
	    var /** @type {?} */ bindingDefs = new Array(bindings.length);
	    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];
	        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];
	        var /** @type {?} */ securityContext = void 0;
	        var /** @type {?} */ suffix = void 0;
	        switch (bindingFlags & 15 /* Types */) {
	            case 4 /* TypeElementStyle */:
	                suffix = (suffixOrSecurityContext);
	                break;
	            case 1 /* TypeElementAttribute */:
	            case 8 /* TypeProperty */:
	                securityContext = (suffixOrSecurityContext);
	                break;
	        }
	        bindingDefs[i] =
	            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };
	    }
	    outputs = outputs || [];
	    var /** @type {?} */ outputDefs = new Array(outputs.length);
	    for (var /** @type {?} */ i = 0; i < outputs.length; i++) {
	        var _e = outputs[i], target = _e[0], eventName = _e[1];
	        outputDefs[i] = {
	            type: 0 /* ElementOutput */,
	            target: /** @type {?} */ (target), eventName: eventName,
	            propName: undefined
	        };
	    }
	    fixedAttrs = fixedAttrs || [];
	    var /** @type {?} */ attrs = (fixedAttrs.map(function (_a) {
	        var namespaceAndName = _a[0], value = _a[1];
	        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
	        return [ns, name, value];
	    }));
	    componentRendererType = resolveRendererType2(componentRendererType);
	    if (componentView) {
	        flags |= 16777216 /* ComponentView */;
	    }
	    flags |= 1 /* TypeElement */;
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
	        bindings: bindingDefs,
	        bindingFlags: calcBindingFlags(bindingDefs),
	        outputs: outputDefs,
	        element: {
	            ns: ns,
	            name: name,
	            attrs: attrs,
	            template: undefined,
	            // will bet set by the view definition
	            componentProvider: undefined, componentView: componentView, componentRendererType: componentRendererType,
	            publicProviders: undefined,
	            allProviders: undefined, handleEvent: handleEvent,
	        },
	        provider: undefined,
	        text: undefined,
	        query: undefined,
	        ngContent: undefined
	    };
	    var _b;
	}
	/**
	 * @param {?} view
	 * @param {?} renderHost
	 * @param {?} def
	 * @return {?}
	 */
	function createElement(view, renderHost, def) {
	    var /** @type {?} */ elDef = def.element;
	    var /** @type {?} */ rootSelectorOrNode = view.root.selectorOrNode;
	    var /** @type {?} */ renderer = view.renderer;
	    var /** @type {?} */ el;
	    if (view.parent || !rootSelectorOrNode) {
	        if (elDef.name) {
	            el = renderer.createElement(elDef.name, elDef.ns);
	        }
	        else {
	            el = renderer.createComment('');
	        }
	        var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
	        if (parentEl) {
	            renderer.appendChild(parentEl, el);
	        }
	    }
	    else {
	        el = renderer.selectRootElement(rootSelectorOrNode);
	    }
	    if (elDef.attrs) {
	        for (var /** @type {?} */ i = 0; i < elDef.attrs.length; i++) {
	            var _a = elDef.attrs[i], ns = _a[0], name = _a[1], value = _a[2];
	            renderer.setAttribute(el, name, value, ns);
	        }
	    }
	    return el;
	}
	/**
	 * @param {?} view
	 * @param {?} compView
	 * @param {?} def
	 * @param {?} el
	 * @return {?}
	 */
	function listenToElementOutputs(view, compView, def, el) {
	    for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {
	        var /** @type {?} */ output = def.outputs[i];
	        var /** @type {?} */ handleEventClosure = renderEventHandlerClosure(view, def.index, elementEventFullName(output.target, output.eventName));
	        var /** @type {?} */ listenTarget = output.target;
	        var /** @type {?} */ listenerView = view;
	        if (output.target === 'component') {
	            listenTarget = null;
	            listenerView = compView;
	        }
	        var /** @type {?} */ disposable = (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure));
	        view.disposables[def.outputIndex + i] = disposable;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} index
	 * @param {?} eventName
	 * @return {?}
	 */
	function renderEventHandlerClosure(view, index, eventName) {
	    return function (event) { return dispatchEvent(view, index, eventName, event); };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ bindLen = def.bindings.length;
	    var /** @type {?} */ changed = false;
	    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))
	        changed = true;
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdateElementDynamic(view, def, values) {
	    var /** @type {?} */ changed = false;
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        if (checkAndUpdateElementValue(view, def, i, values[i]))
	            changed = true;
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @return {?}
	 */
	function checkAndUpdateElementValue(view, def, bindingIdx, value) {
	    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
	        return false;
	    }
	    var /** @type {?} */ binding = def.bindings[bindingIdx];
	    var /** @type {?} */ elData = asElementData(view, def.index);
	    var /** @type {?} */ renderNode$$1 = elData.renderElement;
	    var /** @type {?} */ name = binding.name;
	    switch (binding.flags & 15 /* Types */) {
	        case 1 /* TypeElementAttribute */:
	            setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);
	            break;
	        case 2 /* TypeElementClass */:
	            setElementClass(view, renderNode$$1, name, value);
	            break;
	        case 4 /* TypeElementStyle */:
	            setElementStyle(view, binding, renderNode$$1, name, value);
	            break;
	        case 8 /* TypeProperty */:
	            var /** @type {?} */ bindView = (def.flags & 16777216 /* ComponentView */ &&
	                binding.flags & 32 /* SyntheticHostProperty */) ?
	                elData.componentView :
	                view;
	            setElementProperty(bindView, binding, renderNode$$1, name, value);
	            break;
	    }
	    return true;
	}
	/**
	 * @param {?} view
	 * @param {?} binding
	 * @param {?} renderNode
	 * @param {?} ns
	 * @param {?} name
	 * @param {?} value
	 * @return {?}
	 */
	function setElementAttribute(view, binding, renderNode$$1, ns, name, value) {
	    var /** @type {?} */ securityContext = binding.securityContext;
	    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
	    renderValue = renderValue != null ? renderValue.toString() : null;
	    var /** @type {?} */ renderer = view.renderer;
	    if (value != null) {
	        renderer.setAttribute(renderNode$$1, name, renderValue, ns);
	    }
	    else {
	        renderer.removeAttribute(renderNode$$1, name, ns);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} renderNode
	 * @param {?} name
	 * @param {?} value
	 * @return {?}
	 */
	function setElementClass(view, renderNode$$1, name, value) {
	    var /** @type {?} */ renderer = view.renderer;
	    if (value) {
	        renderer.addClass(renderNode$$1, name);
	    }
	    else {
	        renderer.removeClass(renderNode$$1, name);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} binding
	 * @param {?} renderNode
	 * @param {?} name
	 * @param {?} value
	 * @return {?}
	 */
	function setElementStyle(view, binding, renderNode$$1, name, value) {
	    var /** @type {?} */ renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);
	    if (renderValue != null) {
	        renderValue = renderValue.toString();
	        var /** @type {?} */ unit = binding.suffix;
	        if (unit != null) {
	            renderValue = renderValue + unit;
	        }
	    }
	    else {
	        renderValue = null;
	    }
	    var /** @type {?} */ renderer = view.renderer;
	    if (renderValue != null) {
	        renderer.setStyle(renderNode$$1, name, renderValue);
	    }
	    else {
	        renderer.removeStyle(renderNode$$1, name);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} binding
	 * @param {?} renderNode
	 * @param {?} name
	 * @param {?} value
	 * @return {?}
	 */
	function setElementProperty(view, binding, renderNode$$1, name, value) {
	    var /** @type {?} */ securityContext = binding.securityContext;
	    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
	    view.renderer.setProperty(renderNode$$1, name, renderValue);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} ngContentIndex
	 * @param {?} index
	 * @return {?}
	 */
	function ngContentDef(ngContentIndex, index) {
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: 4 /* TypeNgContent */,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {}, ngContentIndex: ngContentIndex,
	        childCount: 0,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: undefined,
	        provider: undefined,
	        text: undefined,
	        query: undefined,
	        ngContent: { index: index }
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} renderHost
	 * @param {?} def
	 * @return {?}
	 */
	function appendNgContent(view, renderHost, def) {
	    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
	    if (!parentEl) {
	        // Nothing to do if there is no parent element.
	        return;
	    }
	    var /** @type {?} */ ngContentIndex = def.ngContent.index;
	    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, undefined, undefined);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} parentView
	 * @param {?} elementData
	 * @param {?} viewIndex
	 * @param {?} view
	 * @return {?}
	 */
	function attachEmbeddedView(parentView, elementData, viewIndex, view) {
	    var /** @type {?} */ embeddedViews = elementData.viewContainer._embeddedViews;
	    if (viewIndex == null) {
	        viewIndex = embeddedViews.length;
	    }
	    view.viewContainerParent = parentView;
	    addToArray(embeddedViews, viewIndex, view);
	    var /** @type {?} */ dvcElementData = declaredViewContainer(view);
	    if (dvcElementData && dvcElementData !== elementData) {
	        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;
	        if (!projectedViews) {
	            projectedViews = dvcElementData.template._projectedViews = [];
	        }
	        projectedViews.push(view);
	    }
	    Services.dirtyParentQueries(view);
	    var /** @type {?} */ prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;
	    renderAttachEmbeddedView(elementData, prevView, view);
	}
	/**
	 * @param {?} elementData
	 * @param {?} viewIndex
	 * @return {?}
	 */
	function detachEmbeddedView(elementData, viewIndex) {
	    var /** @type {?} */ embeddedViews = elementData.viewContainer._embeddedViews;
	    if (viewIndex == null || viewIndex >= embeddedViews.length) {
	        viewIndex = embeddedViews.length - 1;
	    }
	    if (viewIndex < 0) {
	        return null;
	    }
	    var /** @type {?} */ view = embeddedViews[viewIndex];
	    view.viewContainerParent = undefined;
	    removeFromArray(embeddedViews, viewIndex);
	    var /** @type {?} */ dvcElementData = declaredViewContainer(view);
	    if (dvcElementData && dvcElementData !== elementData) {
	        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;
	        removeFromArray(projectedViews, projectedViews.indexOf(view));
	    }
	    Services.dirtyParentQueries(view);
	    renderDetachView(view);
	    return view;
	}
	/**
	 * @param {?} elementData
	 * @param {?} oldViewIndex
	 * @param {?} newViewIndex
	 * @return {?}
	 */
	function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
	    var /** @type {?} */ embeddedViews = elementData.viewContainer._embeddedViews;
	    var /** @type {?} */ view = embeddedViews[oldViewIndex];
	    removeFromArray(embeddedViews, oldViewIndex);
	    if (newViewIndex == null) {
	        newViewIndex = embeddedViews.length;
	    }
	    addToArray(embeddedViews, newViewIndex, view);
	    // Note: Don't need to change projectedViews as the order in there
	    // as always invalid...
	    Services.dirtyParentQueries(view);
	    renderDetachView(view);
	    var /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
	    renderAttachEmbeddedView(elementData, prevView, view);
	    return view;
	}
	/**
	 * @param {?} elementData
	 * @param {?} prevView
	 * @param {?} view
	 * @return {?}
	 */
	function renderAttachEmbeddedView(elementData, prevView, view) {
	    var /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) : elementData.renderElement;
	    var /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);
	    var /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);
	    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
	    // However, browsers automatically do `appendChild` when there is no `nextSibling`.
	    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function renderDetachView(view) {
	    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);
	}
	/**
	 * @param {?} arr
	 * @param {?} index
	 * @param {?} value
	 * @return {?}
	 */
	function addToArray(arr, index, value) {
	    // perf: array.push is faster than array.splice!
	    if (index >= arr.length) {
	        arr.push(value);
	    }
	    else {
	        arr.splice(index, 0, value);
	    }
	}
	/**
	 * @param {?} arr
	 * @param {?} index
	 * @return {?}
	 */
	function removeFromArray(arr, index) {
	    // perf: array.pop is faster than array.splice!
	    if (index >= arr.length - 1) {
	        arr.pop();
	    }
	    else {
	        arr.splice(index, 1);
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EMPTY_CONTEXT = new Object();
	/**
	 * @param {?} selector
	 * @param {?} componentType
	 * @param {?} viewDefFactory
	 * @param {?} inputs
	 * @param {?} outputs
	 * @param {?} ngContentSelectors
	 * @return {?}
	 */
	function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
	    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
	}
	/**
	 * @param {?} componentFactory
	 * @return {?}
	 */
	function getComponentViewDefinitionFactory(componentFactory) {
	    return ((componentFactory)).viewDefFactory;
	}
	var ComponentFactory_ = (function (_super) {
	    __extends(ComponentFactory_, _super);
	    /**
	     * @param {?} selector
	     * @param {?} componentType
	     * @param {?} viewDefFactory
	     * @param {?} _inputs
	     * @param {?} _outputs
	     * @param {?} ngContentSelectors
	     */
	    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
	        var _this = 
	        // Attention: this ctor is called as top level function.
	        // Putting any logic in here will destroy closure tree shaking!
	        _super.call(this) || this;
	        _this.selector = selector;
	        _this.componentType = componentType;
	        _this._inputs = _inputs;
	        _this._outputs = _outputs;
	        _this.ngContentSelectors = ngContentSelectors;
	        _this.viewDefFactory = viewDefFactory;
	        return _this;
	    }
	    Object.defineProperty(ComponentFactory_.prototype, "inputs", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ inputsArr = [];
	            for (var /** @type {?} */ propName in this._inputs) {
	                var /** @type {?} */ templateName = this._inputs[propName];
	                inputsArr.push({ propName: propName, templateName: templateName });
	            }
	            return inputsArr;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactory_.prototype, "outputs", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ outputsArr = [];
	            for (var /** @type {?} */ propName in this._outputs) {
	                var /** @type {?} */ templateName = this._outputs[propName];
	                outputsArr.push({ propName: propName, templateName: templateName });
	            }
	            return outputsArr;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Creates a new component.
	     * @param {?} injector
	     * @param {?=} projectableNodes
	     * @param {?=} rootSelectorOrNode
	     * @param {?=} ngModule
	     * @return {?}
	     */
	    ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
	        if (!ngModule) {
	            throw new Error('ngModule should be provided');
	        }
	        var /** @type {?} */ viewDef = resolveViewDefinition(this.viewDefFactory);
	        var /** @type {?} */ componentNodeIndex = viewDef.nodes[0].element.componentProvider.index;
	        var /** @type {?} */ view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
	        var /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;
	        view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);
	        return new ComponentRef_(view, new ViewRef_(view), component);
	    };
	    return ComponentFactory_;
	}(ComponentFactory));
	var ComponentRef_ = (function (_super) {
	    __extends(ComponentRef_, _super);
	    /**
	     * @param {?} _view
	     * @param {?} _viewRef
	     * @param {?} _component
	     */
	    function ComponentRef_(_view, _viewRef, _component) {
	        var _this = _super.call(this) || this;
	        _this._view = _view;
	        _this._viewRef = _viewRef;
	        _this._component = _component;
	        _this._elDef = _this._view.def.nodes[0];
	        return _this;
	    }
	    Object.defineProperty(ComponentRef_.prototype, "location", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return new ElementRef(asElementData(this._view, this._elDef.index).renderElement);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef_.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return new Injector_(this._view, this._elDef); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef_.prototype, "instance", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._component; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(ComponentRef_.prototype, "hostView", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._viewRef; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._viewRef; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(ComponentRef_.prototype, "componentType", {
	        /**
	         * @return {?}
	         */
	        get: function () { return (this._component.constructor); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };
	    return ComponentRef_;
	}(ComponentRef));
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} elData
	 * @return {?}
	 */
	function createViewContainerData(view, elDef, elData) {
	    return new ViewContainerRef_(view, elDef, elData);
	}
	var ViewContainerRef_ = (function () {
	    /**
	     * @param {?} _view
	     * @param {?} _elDef
	     * @param {?} _data
	     */
	    function ViewContainerRef_(_view, _elDef, _data) {
	        this._view = _view;
	        this._elDef = _elDef;
	        this._data = _data;
	        /**
	         * \@internal
	         */
	        this._embeddedViews = [];
	    }
	    Object.defineProperty(ViewContainerRef_.prototype, "element", {
	        /**
	         * @return {?}
	         */
	        get: function () { return new ElementRef(this._data.renderElement); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return new Injector_(this._view, this._elDef); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ view = this._view;
	            var /** @type {?} */ elDef = this._elDef.parent;
	            while (!elDef && view) {
	                elDef = viewParentEl(view);
	                view = view.parent;
	            }
	            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.clear = function () {
	        var /** @type {?} */ len = this._embeddedViews.length;
	        for (var /** @type {?} */ i = len - 1; i >= 0; i--) {
	            var /** @type {?} */ view = detachEmbeddedView(this._data, i);
	            Services.destroyView(view);
	        }
	    };
	    /**
	     * @param {?} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.get = function (index) {
	        var /** @type {?} */ view = this._embeddedViews[index];
	        if (view) {
	            var /** @type {?} */ ref = new ViewRef_(view);
	            ref.attachToViewContainerRef(this);
	            return ref;
	        }
	        return null;
	    };
	    Object.defineProperty(ViewContainerRef_.prototype, "length", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._embeddedViews.length; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    /**
	     * @template C
	     * @param {?} templateRef
	     * @param {?=} context
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
	        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || ({}));
	        this.insert(viewRef, index);
	        return viewRef;
	    };
	    /**
	     * @template C
	     * @param {?} componentFactory
	     * @param {?=} index
	     * @param {?=} injector
	     * @param {?=} projectableNodes
	     * @param {?=} ngModuleRef
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {
	        var /** @type {?} */ contextInjector = injector || this.parentInjector;
	        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
	            ngModuleRef = contextInjector.get(NgModuleRef);
	        }
	        var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
	        this.insert(componentRef.hostView, index);
	        return componentRef;
	    };
	    /**
	     * @param {?} viewRef
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.insert = function (viewRef, index) {
	        var /** @type {?} */ viewRef_ = (viewRef);
	        var /** @type {?} */ viewData = viewRef_._view;
	        attachEmbeddedView(this._view, this._data, index, viewData);
	        viewRef_.attachToViewContainerRef(this);
	        return viewRef;
	    };
	    /**
	     * @param {?} viewRef
	     * @param {?} currentIndex
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
	        var /** @type {?} */ previousIndex = this._embeddedViews.indexOf(viewRef._view);
	        moveEmbeddedView(this._data, previousIndex, currentIndex);
	        return viewRef;
	    };
	    /**
	     * @param {?} viewRef
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.indexOf = function (viewRef) {
	        return this._embeddedViews.indexOf(((viewRef))._view);
	    };
	    /**
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.remove = function (index) {
	        var /** @type {?} */ viewData = detachEmbeddedView(this._data, index);
	        if (viewData) {
	            Services.destroyView(viewData);
	        }
	    };
	    /**
	     * @param {?=} index
	     * @return {?}
	     */
	    ViewContainerRef_.prototype.detach = function (index) {
	        var /** @type {?} */ view = detachEmbeddedView(this._data, index);
	        return view ? new ViewRef_(view) : null;
	    };
	    return ViewContainerRef_;
	}());
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function createChangeDetectorRef(view) {
	    return new ViewRef_(view);
	}
	var ViewRef_ = (function () {
	    /**
	     * @param {?} _view
	     */
	    function ViewRef_(_view) {
	        this._view = _view;
	        this._viewContainerRef = null;
	        this._appRef = null;
	    }
	    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
	        /**
	         * @return {?}
	         */
	        get: function () { return rootRenderNodes(this._view); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "context", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._view.context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "destroyed", {
	        /**
	         * @return {?}
	         */
	        get: function () { return (this._view.state & 8 /* Destroyed */) !== 0; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.detach = function () { this._view.state &= ~2 /* ChecksEnabled */; };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.detectChanges = function () { Services.checkAndUpdateView(this._view); };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.reattach = function () { this._view.state |= 2 /* ChecksEnabled */; };
	    /**
	     * @param {?} callback
	     * @return {?}
	     */
	    ViewRef_.prototype.onDestroy = function (callback) {
	        if (!this._view.disposables) {
	            this._view.disposables = [];
	        }
	        this._view.disposables.push(/** @type {?} */ (callback));
	    };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.destroy = function () {
	        if (this._appRef) {
	            this._appRef.detachView(this);
	        }
	        else if (this._viewContainerRef) {
	            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
	        }
	        Services.destroyView(this._view);
	    };
	    /**
	     * @return {?}
	     */
	    ViewRef_.prototype.detachFromAppRef = function () {
	        this._appRef = null;
	        renderDetachView(this._view);
	        Services.dirtyParentQueries(this._view);
	    };
	    /**
	     * @param {?} appRef
	     * @return {?}
	     */
	    ViewRef_.prototype.attachToAppRef = function (appRef) {
	        if (this._viewContainerRef) {
	            throw new Error('This view is already attached to a ViewContainer!');
	        }
	        this._appRef = appRef;
	    };
	    /**
	     * @param {?} vcRef
	     * @return {?}
	     */
	    ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {
	        if (this._appRef) {
	            throw new Error('This view is already attached directly to the ApplicationRef!');
	        }
	        this._viewContainerRef = vcRef;
	    };
	    return ViewRef_;
	}());
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createTemplateData(view, def) {
	    return new TemplateRef_(view, def);
	}
	var TemplateRef_ = (function (_super) {
	    __extends(TemplateRef_, _super);
	    /**
	     * @param {?} _parentView
	     * @param {?} _def
	     */
	    function TemplateRef_(_parentView, _def) {
	        var _this = _super.call(this) || this;
	        _this._parentView = _parentView;
	        _this._def = _def;
	        return _this;
	    }
	    /**
	     * @param {?} context
	     * @return {?}
	     */
	    TemplateRef_.prototype.createEmbeddedView = function (context) {
	        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, context));
	    };
	    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return new ElementRef(asElementData(this._parentView, this._def.index).renderElement);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TemplateRef_;
	}(TemplateRef));
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @return {?}
	 */
	function createInjector(view, elDef) {
	    return new Injector_(view, elDef);
	}
	var Injector_ = (function () {
	    /**
	     * @param {?} view
	     * @param {?} elDef
	     */
	    function Injector_(view, elDef) {
	        this.view = view;
	        this.elDef = elDef;
	    }
	    /**
	     * @param {?} token
	     * @param {?=} notFoundValue
	     * @return {?}
	     */
	    Injector_.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	        var /** @type {?} */ allowPrivateServices = this.elDef ? (this.elDef.flags & 16777216 /* ComponentView */) !== 0 : false;
	        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);
	    };
	    return Injector_;
	}());
	/**
	 * @param {?} view
	 * @param {?} index
	 * @return {?}
	 */
	function nodeValue(view, index) {
	    var /** @type {?} */ def = view.def.nodes[index];
	    if (def.flags & 1 /* TypeElement */) {
	        var /** @type {?} */ elData = asElementData(view, def.index);
	        return def.element.template ? elData.template : elData.renderElement;
	    }
	    else if (def.flags & 2 /* TypeText */) {
	        return asTextData(view, def.index).renderText;
	    }
	    else if (def.flags & (10112 /* CatProvider */ | 8 /* TypePipe */)) {
	        return asProviderData(view, def.index).instance;
	    }
	    throw new Error("Illegal state: read nodeValue for node index " + index);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function createRendererV1(view) {
	    return new RendererAdapter(view.renderer);
	}
	var RendererAdapter = (function () {
	    /**
	     * @param {?} delegate
	     */
	    function RendererAdapter(delegate) {
	        this.delegate = delegate;
	    }
	    /**
	     * @param {?} selectorOrNode
	     * @return {?}
	     */
	    RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {
	        return this.delegate.selectRootElement(selectorOrNode);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} namespaceAndName
	     * @return {?}
	     */
	    RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {
	        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
	        var /** @type {?} */ el = this.delegate.createElement(name, ns);
	        if (parent) {
	            this.delegate.appendChild(parent, el);
	        }
	        return el;
	    };
	    /**
	     * @param {?} hostElement
	     * @return {?}
	     */
	    RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };
	    /**
	     * @param {?} parentElement
	     * @return {?}
	     */
	    RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {
	        var /** @type {?} */ comment = this.delegate.createComment('');
	        if (parentElement) {
	            this.delegate.appendChild(parentElement, comment);
	        }
	        return comment;
	    };
	    /**
	     * @param {?} parentElement
	     * @param {?} value
	     * @return {?}
	     */
	    RendererAdapter.prototype.createText = function (parentElement, value) {
	        var /** @type {?} */ node = this.delegate.createText(value);
	        if (parentElement) {
	            this.delegate.appendChild(parentElement, node);
	        }
	        return node;
	    };
	    /**
	     * @param {?} parentElement
	     * @param {?} nodes
	     * @return {?}
	     */
	    RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {
	        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	            this.delegate.appendChild(parentElement, nodes[i]);
	        }
	    };
	    /**
	     * @param {?} node
	     * @param {?} viewRootNodes
	     * @return {?}
	     */
	    RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {
	        var /** @type {?} */ parentElement = this.delegate.parentNode(node);
	        var /** @type {?} */ nextSibling = this.delegate.nextSibling(node);
	        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
	            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);
	        }
	    };
	    /**
	     * @param {?} viewRootNodes
	     * @return {?}
	     */
	    RendererAdapter.prototype.detachView = function (viewRootNodes) {
	        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
	            var /** @type {?} */ node = viewRootNodes[i];
	            var /** @type {?} */ parentElement = this.delegate.parentNode(node);
	            this.delegate.removeChild(parentElement, node);
	        }
	    };
	    /**
	     * @param {?} hostElement
	     * @param {?} viewAllNodes
	     * @return {?}
	     */
	    RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {
	        for (var /** @type {?} */ i = 0; i < viewAllNodes.length; i++) {
	            this.delegate.destroyNode(viewAllNodes[i]);
	        }
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} name
	     * @param {?} callback
	     * @return {?}
	     */
	    RendererAdapter.prototype.listen = function (renderElement, name, callback) {
	        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));
	    };
	    /**
	     * @param {?} target
	     * @param {?} name
	     * @param {?} callback
	     * @return {?}
	     */
	    RendererAdapter.prototype.listenGlobal = function (target, name, callback) {
	        return this.delegate.listen(target, name, /** @type {?} */ (callback));
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} propertyName
	     * @param {?} propertyValue
	     * @return {?}
	     */
	    RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	        this.delegate.setProperty(renderElement, propertyName, propertyValue);
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} namespaceAndName
	     * @param {?} attributeValue
	     * @return {?}
	     */
	    RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {
	        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
	        if (attributeValue != null) {
	            this.delegate.setAttribute(renderElement, name, attributeValue, ns);
	        }
	        else {
	            this.delegate.removeAttribute(renderElement, name, ns);
	        }
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} propertyName
	     * @param {?} propertyValue
	     * @return {?}
	     */
	    RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
	    /**
	     * @param {?} renderElement
	     * @param {?} className
	     * @param {?} isAdd
	     * @return {?}
	     */
	    RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {
	        if (isAdd) {
	            this.delegate.addClass(renderElement, className);
	        }
	        else {
	            this.delegate.removeClass(renderElement, className);
	        }
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} styleName
	     * @param {?} styleValue
	     * @return {?}
	     */
	    RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	        if (styleValue != null) {
	            this.delegate.setStyle(renderElement, styleName, styleValue);
	        }
	        else {
	            this.delegate.removeStyle(renderElement, styleName);
	        }
	    };
	    /**
	     * @param {?} renderElement
	     * @param {?} methodName
	     * @param {?} args
	     * @return {?}
	     */
	    RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	        ((renderElement))[methodName].apply(renderElement, args);
	    };
	    /**
	     * @param {?} renderNode
	     * @param {?} text
	     * @return {?}
	     */
	    RendererAdapter.prototype.setText = function (renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); };
	    /**
	     * @return {?}
	     */
	    RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };
	    return RendererAdapter;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var RendererV1TokenKey = tokenKey(Renderer);
	var Renderer2TokenKey = tokenKey(Renderer2);
	var ElementRefTokenKey = tokenKey(ElementRef);
	var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
	var TemplateRefTokenKey = tokenKey(TemplateRef);
	var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
	var InjectorRefTokenKey = tokenKey(Injector);
	var NOT_CREATED = new Object();
	/**
	 * @param {?} flags
	 * @param {?} matchedQueries
	 * @param {?} childCount
	 * @param {?} ctor
	 * @param {?} deps
	 * @param {?=} props
	 * @param {?=} outputs
	 * @return {?}
	 */
	function directiveDef(flags, matchedQueries, childCount, ctor, deps, props, outputs) {
	    var /** @type {?} */ bindings = [];
	    if (props) {
	        for (var /** @type {?} */ prop in props) {
	            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];
	            bindings[bindingIndex] = {
	                flags: 8 /* TypeProperty */,
	                name: prop, nonMinifiedName: nonMinifiedName,
	                ns: undefined,
	                securityContext: undefined,
	                suffix: undefined
	            };
	        }
	    }
	    var /** @type {?} */ outputDefs = [];
	    if (outputs) {
	        for (var /** @type {?} */ propName in outputs) {
	            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });
	        }
	    }
	    flags |= 8192 /* TypeDirective */;
	    return _def(flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
	}
	/**
	 * @param {?} flags
	 * @param {?} ctor
	 * @param {?} deps
	 * @return {?}
	 */
	function pipeDef(flags, ctor, deps) {
	    flags |= 8 /* TypePipe */;
	    return _def(flags, null, 0, ctor, ctor, deps);
	}
	/**
	 * @param {?} flags
	 * @param {?} matchedQueries
	 * @param {?} token
	 * @param {?} value
	 * @param {?} deps
	 * @return {?}
	 */
	function providerDef(flags, matchedQueries, token, value, deps) {
	    return _def(flags, matchedQueries, 0, token, value, deps);
	}
	/**
	 * @param {?} flags
	 * @param {?} matchedQueriesDsl
	 * @param {?} childCount
	 * @param {?} token
	 * @param {?} value
	 * @param {?} deps
	 * @param {?=} bindings
	 * @param {?=} outputs
	 * @return {?}
	 */
	function _def(flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    if (!outputs) {
	        outputs = [];
	    }
	    if (!bindings) {
	        bindings = [];
	    }
	    var /** @type {?} */ depDefs = deps.map(function (value) {
	        var /** @type {?} */ token;
	        var /** @type {?} */ flags;
	        if (Array.isArray(value)) {
	            flags = value[0], token = value[1];
	        }
	        else {
	            flags = 0 /* None */;
	            token = value;
	        }
	        return { flags: flags, token: token, tokenKey: tokenKey(token) };
	    });
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,
	        ngContentIndex: undefined, childCount: childCount, bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings), outputs: outputs,
	        element: undefined,
	        provider: { token: token, tokenKey: tokenKey(token), value: value, deps: depDefs },
	        text: undefined,
	        query: undefined,
	        ngContent: undefined
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createProviderInstance(view, def) {
	    return def.flags & 2048 /* LazyProvider */ ? NOT_CREATED : _createProviderInstance(view, def);
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createPipeInstance(view, def) {
	    // deps are looked up from component.
	    var /** @type {?} */ compView = view;
	    while (compView.parent && !isComponentView(compView)) {
	        compView = compView.parent;
	    }
	    // pipes can see the private services of the component
	    var /** @type {?} */ allowPrivateServices = true;
	    // pipes are always eager and classes!
	    return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createDirectiveInstance(view, def) {
	    // components can see other private services, other directives can't.
	    var /** @type {?} */ allowPrivateServices = (def.flags & 16384 /* Component */) > 0;
	    // directives are always eager and classes!
	    var /** @type {?} */ instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);
	    if (def.outputs.length) {
	        for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {
	            var /** @type {?} */ output = def.outputs[i];
	            var /** @type {?} */ subscription = instance[output.propName].subscribe(eventHandlerClosure(view, def.parent.index, output.eventName));
	            view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
	        }
	    }
	    return instance;
	}
	/**
	 * @param {?} view
	 * @param {?} index
	 * @param {?} eventName
	 * @return {?}
	 */
	function eventHandlerClosure(view, index, eventName) {
	    return function (event) { return dispatchEvent(view, index, eventName, event); };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ providerData = asProviderData(view, def.index);
	    var /** @type {?} */ directive = providerData.instance;
	    var /** @type {?} */ changed = false;
	    var /** @type {?} */ changes;
	    var /** @type {?} */ bindLen = def.bindings.length;
	    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 0, v0, changes);
	    }
	    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 1, v1, changes);
	    }
	    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 2, v2, changes);
	    }
	    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 3, v3, changes);
	    }
	    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 4, v4, changes);
	    }
	    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 5, v5, changes);
	    }
	    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 6, v6, changes);
	    }
	    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 7, v7, changes);
	    }
	    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 8, v8, changes);
	    }
	    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 9, v9, changes);
	    }
	    if (changes) {
	        directive.ngOnChanges(changes);
	    }
	    if ((view.state & 1 /* FirstCheck */) && (def.flags & 32768 /* OnInit */)) {
	        directive.ngOnInit();
	    }
	    if (def.flags & 131072 /* DoCheck */) {
	        directive.ngDoCheck();
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdateDirectiveDynamic(view, def, values) {
	    var /** @type {?} */ providerData = asProviderData(view, def.index);
	    var /** @type {?} */ directive = providerData.instance;
	    var /** @type {?} */ changed = false;
	    var /** @type {?} */ changes;
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        if (checkBinding(view, def, i, values[i])) {
	            changed = true;
	            changes = updateProp(view, providerData, def, i, values[i], changes);
	        }
	    }
	    if (changes) {
	        directive.ngOnChanges(changes);
	    }
	    if ((view.state & 1 /* FirstCheck */) && (def.flags & 32768 /* OnInit */)) {
	        directive.ngOnInit();
	    }
	    if (def.flags & 131072 /* DoCheck */) {
	        directive.ngDoCheck();
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function _createProviderInstance(view, def) {
	    // private services can see other private services
	    var /** @type {?} */ allowPrivateServices = (def.flags & 4096 /* PrivateProvider */) > 0;
	    var /** @type {?} */ providerDef = def.provider;
	    var /** @type {?} */ injectable;
	    switch (def.flags & 100673535 /* Types */) {
	        case 256 /* TypeClassProvider */:
	            injectable =
	                createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
	            break;
	        case 512 /* TypeFactoryProvider */:
	            injectable =
	                callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
	            break;
	        case 1024 /* TypeUseExistingProvider */:
	            injectable = resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);
	            break;
	        case 128 /* TypeValueProvider */:
	            injectable = providerDef.value;
	            break;
	    }
	    return injectable;
	}
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} allowPrivateServices
	 * @param {?} ctor
	 * @param {?} deps
	 * @return {?}
	 */
	function createClass(view, elDef, allowPrivateServices, ctor, deps) {
	    var /** @type {?} */ len = deps.length;
	    var /** @type {?} */ injectable;
	    switch (len) {
	        case 0:
	            injectable = new ctor();
	            break;
	        case 1:
	            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
	            break;
	        case 2:
	            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
	            break;
	        case 3:
	            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
	            break;
	        default:
	            var /** @type {?} */ depValues = new Array(len);
	            for (var /** @type {?} */ i = 0; i < len; i++) {
	                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
	            }
	            injectable = new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();
	    }
	    return injectable;
	}
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} allowPrivateServices
	 * @param {?} factory
	 * @param {?} deps
	 * @return {?}
	 */
	function callFactory(view, elDef, allowPrivateServices, factory, deps) {
	    var /** @type {?} */ len = deps.length;
	    var /** @type {?} */ injectable;
	    switch (len) {
	        case 0:
	            injectable = factory();
	            break;
	        case 1:
	            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
	            break;
	        case 2:
	            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
	            break;
	        case 3:
	            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
	            break;
	        default:
	            var /** @type {?} */ depValues = Array(len);
	            for (var /** @type {?} */ i = 0; i < len; i++) {
	                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
	            }
	            injectable = factory.apply(void 0, depValues);
	    }
	    return injectable;
	}
	// This default value is when checking the hierarchy for a token.
	//
	// It means both:
	// - the token is not provided by the current injector,
	// - only the element injectors should be checked (ie do not check module injectors
	//
	//          mod1
	//         /
	//       el1   mod2
	//         \  /
	//         el2
	//
	// When requesting el2.injector.get(token), we should check in the following order and return the
	// first found value:
	// - el2.injector.get(token, default)
	// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
	// - mod2.injector.get(token, default)
	var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} allowPrivateServices
	 * @param {?} depDef
	 * @param {?=} notFoundValue
	 * @return {?}
	 */
	function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {
	    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	    if (depDef.flags & 8 /* Value */) {
	        return depDef.token;
	    }
	    var /** @type {?} */ startView = view;
	    if (depDef.flags & 2 /* Optional */) {
	        notFoundValue = null;
	    }
	    var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;
	    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {
	        allowPrivateServices = false;
	        elDef = elDef.parent;
	    }
	    while (view) {
	        if (elDef) {
	            switch (tokenKey$$1) {
	                case RendererV1TokenKey: {
	                    var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);
	                    return createRendererV1(compView);
	                }
	                case Renderer2TokenKey: {
	                    var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);
	                    return compView.renderer;
	                }
	                case ElementRefTokenKey:
	                    return new ElementRef(asElementData(view, elDef.index).renderElement);
	                case ViewContainerRefTokenKey:
	                    return asElementData(view, elDef.index).viewContainer;
	                case TemplateRefTokenKey: {
	                    if (elDef.element.template) {
	                        return asElementData(view, elDef.index).template;
	                    }
	                    break;
	                }
	                case ChangeDetectorRefTokenKey: {
	                    var /** @type {?} */ cdView = findCompView(view, elDef, allowPrivateServices);
	                    return createChangeDetectorRef(cdView);
	                }
	                case InjectorRefTokenKey:
	                    return createInjector(view, elDef);
	                default:
	                    var /** @type {?} */ providerDef_1 = (allowPrivateServices ? elDef.element.allProviders :
	                        elDef.element.publicProviders)[tokenKey$$1];
	                    if (providerDef_1) {
	                        var /** @type {?} */ providerData = asProviderData(view, providerDef_1.index);
	                        if (providerData.instance === NOT_CREATED) {
	                            providerData.instance = _createProviderInstance(view, providerDef_1);
	                        }
	                        return providerData.instance;
	                    }
	            }
	        }
	        allowPrivateServices = isComponentView(view);
	        elDef = viewParentEl(view);
	        view = view.parent;
	    }
	    var /** @type {?} */ value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);
	    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
	        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
	        // Return the value from the root element injector when
	        // - it provides it
	        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
	        // - the module injector should not be checked
	        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
	        return value;
	    }
	    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
	}
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} allowPrivateServices
	 * @return {?}
	 */
	function findCompView(view, elDef, allowPrivateServices) {
	    var /** @type {?} */ compView;
	    if (allowPrivateServices) {
	        compView = asElementData(view, elDef.index).componentView;
	    }
	    else {
	        compView = view;
	        while (compView.parent && !isComponentView(compView)) {
	            compView = compView.parent;
	        }
	    }
	    return compView;
	}
	/**
	 * @param {?} view
	 * @param {?} providerData
	 * @param {?} def
	 * @param {?} bindingIdx
	 * @param {?} value
	 * @param {?} changes
	 * @return {?}
	 */
	function updateProp(view, providerData, def, bindingIdx, value, changes) {
	    if (def.flags & 16384 /* Component */) {
	        var /** @type {?} */ compView = asElementData(view, def.parent.index).componentView;
	        if (compView.def.flags & 2 /* OnPush */) {
	            compView.state |= 2 /* ChecksEnabled */;
	        }
	    }
	    var /** @type {?} */ binding = def.bindings[bindingIdx];
	    var /** @type {?} */ propName = binding.name;
	    // Note: This is still safe with Closure Compiler as
	    // the user passed in the property name as an object has to `providerDef`,
	    // so Closure Compiler will have renamed the property correctly already.
	    providerData.instance[propName] = value;
	    if (def.flags & 262144 /* OnChanges */) {
	        changes = changes || {};
	        var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];
	        if (oldValue instanceof WrappedValue) {
	            oldValue = oldValue.wrapped;
	        }
	        var /** @type {?} */ binding_1 = def.bindings[bindingIdx];
	        changes[binding_1.nonMinifiedName] =
	            new SimpleChange(oldValue, value, (view.state & 1 /* FirstCheck */) !== 0);
	    }
	    view.oldValues[def.bindingIndex + bindingIdx] = value;
	    return changes;
	}
	/**
	 * @param {?} view
	 * @param {?} lifecycles
	 * @return {?}
	 */
	function callLifecycleHooksChildrenFirst(view, lifecycles) {
	    if (!(view.def.nodeFlags & lifecycles)) {
	        return;
	    }
	    var /** @type {?} */ nodes = view.def.nodes;
	    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	        var /** @type {?} */ nodeDef = nodes[i];
	        var /** @type {?} */ parent = nodeDef.parent;
	        if (!parent && nodeDef.flags & lifecycles) {
	            // matching root node (e.g. a pipe)
	            callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
	        }
	        if ((nodeDef.childFlags & lifecycles) === 0) {
	            // no child matches one of the lifecycles
	            i += nodeDef.childCount;
	        }
	        while (parent && (parent.flags & 1 /* TypeElement */) &&
	            i === parent.index + parent.childCount) {
	            // last child of an element
	            if (parent.directChildFlags & lifecycles) {
	                callElementProvidersLifecycles(view, parent, lifecycles);
	            }
	            parent = parent.parent;
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} elDef
	 * @param {?} lifecycles
	 * @return {?}
	 */
	function callElementProvidersLifecycles(view, elDef, lifecycles) {
	    for (var /** @type {?} */ i = elDef.index + 1; i <= elDef.index + elDef.childCount; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & lifecycles) {
	            callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
	        }
	        // only visit direct children
	        i += nodeDef.childCount;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} index
	 * @param {?} lifecycles
	 * @return {?}
	 */
	function callProviderLifecycles(view, index, lifecycles) {
	    var /** @type {?} */ provider = asProviderData(view, index).instance;
	    if (provider === NOT_CREATED) {
	        return;
	    }
	    Services.setCurrentNode(view, index);
	    if (lifecycles & 524288 /* AfterContentInit */) {
	        provider.ngAfterContentInit();
	    }
	    if (lifecycles & 1048576 /* AfterContentChecked */) {
	        provider.ngAfterContentChecked();
	    }
	    if (lifecycles & 2097152 /* AfterViewInit */) {
	        provider.ngAfterViewInit();
	    }
	    if (lifecycles & 4194304 /* AfterViewChecked */) {
	        provider.ngAfterViewChecked();
	    }
	    if (lifecycles & 65536 /* OnDestroy */) {
	        provider.ngOnDestroy();
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} argCount
	 * @return {?}
	 */
	function purePipeDef(argCount) {
	    // argCount + 1 to include the pipe as first arg
	    return _pureExpressionDef(64 /* TypePurePipe */, new Array(argCount + 1));
	}
	/**
	 * @param {?} argCount
	 * @return {?}
	 */
	function pureArrayDef(argCount) {
	    return _pureExpressionDef(16 /* TypePureArray */, new Array(argCount));
	}
	/**
	 * @param {?} propertyNames
	 * @return {?}
	 */
	function pureObjectDef(propertyNames) {
	    return _pureExpressionDef(32 /* TypePureObject */, propertyNames);
	}
	/**
	 * @param {?} flags
	 * @param {?} propertyNames
	 * @return {?}
	 */
	function _pureExpressionDef(flags, propertyNames) {
	    var /** @type {?} */ bindings = new Array(propertyNames.length);
	    for (var /** @type {?} */ i = 0; i < propertyNames.length; i++) {
	        var /** @type {?} */ prop = propertyNames[i];
	        bindings[i] = {
	            flags: 8 /* TypeProperty */,
	            name: prop,
	            ns: undefined,
	            nonMinifiedName: prop,
	            securityContext: undefined,
	            suffix: undefined
	        };
	    }
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {},
	        ngContentIndex: undefined,
	        childCount: 0, bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings),
	        outputs: [],
	        element: undefined,
	        provider: undefined,
	        text: undefined,
	        query: undefined,
	        ngContent: undefined
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @return {?}
	 */
	function createPureExpression(view, def) {
	    return { value: undefined };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ bindings = def.bindings;
	    var /** @type {?} */ changed = false;
	    var /** @type {?} */ bindLen = bindings.length;
	    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
	        changed = true;
	    if (changed) {
	        var /** @type {?} */ data = asPureExpressionData(view, def.index);
	        var /** @type {?} */ value = void 0;
	        switch (def.flags & 100673535 /* Types */) {
	            case 16 /* TypePureArray */:
	                value = new Array(bindings.length);
	                if (bindLen > 0)
	                    value[0] = v0;
	                if (bindLen > 1)
	                    value[1] = v1;
	                if (bindLen > 2)
	                    value[2] = v2;
	                if (bindLen > 3)
	                    value[3] = v3;
	                if (bindLen > 4)
	                    value[4] = v4;
	                if (bindLen > 5)
	                    value[5] = v5;
	                if (bindLen > 6)
	                    value[6] = v6;
	                if (bindLen > 7)
	                    value[7] = v7;
	                if (bindLen > 8)
	                    value[8] = v8;
	                if (bindLen > 9)
	                    value[9] = v9;
	                break;
	            case 32 /* TypePureObject */:
	                value = {};
	                if (bindLen > 0)
	                    value[bindings[0].name] = v0;
	                if (bindLen > 1)
	                    value[bindings[1].name] = v1;
	                if (bindLen > 2)
	                    value[bindings[2].name] = v2;
	                if (bindLen > 3)
	                    value[bindings[3].name] = v3;
	                if (bindLen > 4)
	                    value[bindings[4].name] = v4;
	                if (bindLen > 5)
	                    value[bindings[5].name] = v5;
	                if (bindLen > 6)
	                    value[bindings[6].name] = v6;
	                if (bindLen > 7)
	                    value[bindings[7].name] = v7;
	                if (bindLen > 8)
	                    value[bindings[8].name] = v8;
	                if (bindLen > 9)
	                    value[bindings[9].name] = v9;
	                break;
	            case 64 /* TypePurePipe */:
	                var /** @type {?} */ pipe = v0;
	                switch (bindLen) {
	                    case 1:
	                        value = pipe.transform(v0);
	                        break;
	                    case 2:
	                        value = pipe.transform(v1);
	                        break;
	                    case 3:
	                        value = pipe.transform(v1, v2);
	                        break;
	                    case 4:
	                        value = pipe.transform(v1, v2, v3);
	                        break;
	                    case 5:
	                        value = pipe.transform(v1, v2, v3, v4);
	                        break;
	                    case 6:
	                        value = pipe.transform(v1, v2, v3, v4, v5);
	                        break;
	                    case 7:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6);
	                        break;
	                    case 8:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
	                        break;
	                    case 9:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
	                        break;
	                    case 10:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
	                        break;
	                }
	                break;
	        }
	        data.value = value;
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdatePureExpressionDynamic(view, def, values) {
	    var /** @type {?} */ bindings = def.bindings;
	    var /** @type {?} */ changed = false;
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        // Note: We need to loop over all values, so that
	        // the old values are updates as well!
	        if (checkAndUpdateBinding(view, def, i, values[i])) {
	            changed = true;
	        }
	    }
	    if (changed) {
	        var /** @type {?} */ data = asPureExpressionData(view, def.index);
	        var /** @type {?} */ value = void 0;
	        switch (def.flags & 100673535 /* Types */) {
	            case 16 /* TypePureArray */:
	                value = values;
	                break;
	            case 32 /* TypePureObject */:
	                value = {};
	                for (var /** @type {?} */ i = 0; i < values.length; i++) {
	                    value[bindings[i].name] = values[i];
	                }
	                break;
	            case 64 /* TypePurePipe */:
	                var /** @type {?} */ pipe = values[0];
	                var /** @type {?} */ params = values.slice(1);
	                value = pipe.transform.apply(pipe, params);
	                break;
	        }
	        data.value = value;
	    }
	    return changed;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} flags
	 * @param {?} id
	 * @param {?} bindings
	 * @return {?}
	 */
	function queryDef(flags, id, bindings) {
	    var /** @type {?} */ bindingDefs = [];
	    for (var /** @type {?} */ propName in bindings) {
	        var /** @type {?} */ bindingType = bindings[propName];
	        bindingDefs.push({ propName: propName, bindingType: bindingType });
	    }
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        ngContentIndex: undefined,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {},
	        childCount: 0,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: undefined,
	        provider: undefined,
	        text: undefined,
	        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },
	        ngContent: undefined
	    };
	}
	/**
	 * @return {?}
	 */
	function createQuery() {
	    return new QueryList();
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function dirtyParentQueries(view) {
	    var /** @type {?} */ queryIds = view.def.nodeMatchedQueries;
	    while (view.parent && isEmbeddedView(view)) {
	        var /** @type {?} */ tplDef = view.parentNodeDef;
	        view = view.parent;
	        // content queries
	        var /** @type {?} */ end = tplDef.index + tplDef.childCount;
	        for (var /** @type {?} */ i = 0; i <= end; i++) {
	            var /** @type {?} */ nodeDef = view.def.nodes[i];
	            if ((nodeDef.flags & 33554432 /* TypeContentQuery */) &&
	                (nodeDef.flags & 268435456 /* DynamicQuery */) &&
	                (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {
	                asQueryList(view, i).setDirty();
	            }
	            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.index) ||
	                !(nodeDef.childFlags & 33554432 /* TypeContentQuery */) ||
	                !(nodeDef.childFlags & 268435456 /* DynamicQuery */)) {
	                // skip elements that don't contain the template element or no query.
	                i += nodeDef.childCount;
	            }
	        }
	    }
	    // view queries
	    if (view.def.nodeFlags & 67108864 /* TypeViewQuery */) {
	        for (var /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {
	            var /** @type {?} */ nodeDef = view.def.nodes[i];
	            if ((nodeDef.flags & 67108864 /* TypeViewQuery */) && (nodeDef.flags & 268435456 /* DynamicQuery */)) {
	                asQueryList(view, i).setDirty();
	            }
	            // only visit the root nodes
	            i += nodeDef.childCount;
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @return {?}
	 */
	function checkAndUpdateQuery(view, nodeDef) {
	    var /** @type {?} */ queryList = asQueryList(view, nodeDef.index);
	    if (!queryList.dirty) {
	        return;
	    }
	    var /** @type {?} */ directiveInstance;
	    var /** @type {?} */ newValues;
	    if (nodeDef.flags & 33554432 /* TypeContentQuery */) {
	        var /** @type {?} */ elementDef_1 = nodeDef.parent.parent;
	        newValues = calcQueryValues(view, elementDef_1.index, elementDef_1.index + elementDef_1.childCount, nodeDef.query, []);
	        directiveInstance = asProviderData(view, nodeDef.parent.index).instance;
	    }
	    else if (nodeDef.flags & 67108864 /* TypeViewQuery */) {
	        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);
	        directiveInstance = view.component;
	    }
	    queryList.reset(newValues);
	    var /** @type {?} */ bindings = nodeDef.query.bindings;
	    var /** @type {?} */ notify = false;
	    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	        var /** @type {?} */ binding = bindings[i];
	        var /** @type {?} */ boundValue = void 0;
	        switch (binding.bindingType) {
	            case 0 /* First */:
	                boundValue = queryList.first;
	                break;
	            case 1 /* All */:
	                boundValue = queryList;
	                notify = true;
	                break;
	        }
	        directiveInstance[binding.propName] = boundValue;
	    }
	    if (notify) {
	        queryList.notifyOnChanges();
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} startIndex
	 * @param {?} endIndex
	 * @param {?} queryDef
	 * @param {?} values
	 * @return {?}
	 */
	function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
	    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        var /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];
	        if (valueType != null) {
	            values.push(getQueryValue(view, nodeDef, valueType));
	        }
	        if (nodeDef.flags & 1 /* TypeElement */ && nodeDef.element.template &&
	            (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) === queryDef.filterId) {
	            // check embedded views that were attached at the place of their template.
	            var /** @type {?} */ elementData = asElementData(view, i);
	            if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
	                var /** @type {?} */ embeddedViews = elementData.viewContainer._embeddedViews;
	                for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
	                    var /** @type {?} */ embeddedView = embeddedViews[k];
	                    var /** @type {?} */ dvc = declaredViewContainer(embeddedView);
	                    if (dvc && dvc === elementData) {
	                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
	                    }
	                }
	            }
	            var /** @type {?} */ projectedViews = elementData.template._projectedViews;
	            if (projectedViews) {
	                for (var /** @type {?} */ k = 0; k < projectedViews.length; k++) {
	                    var /** @type {?} */ projectedView = projectedViews[k];
	                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
	                }
	            }
	        }
	        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
	            // if no child matches the query, skip the children.
	            i += nodeDef.childCount;
	        }
	    }
	    return values;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} queryValueType
	 * @return {?}
	 */
	function getQueryValue(view, nodeDef, queryValueType) {
	    if (queryValueType != null) {
	        // a match
	        var /** @type {?} */ value = void 0;
	        switch (queryValueType) {
	            case 1 /* RenderElement */:
	                value = asElementData(view, nodeDef.index).renderElement;
	                break;
	            case 0 /* ElementRef */:
	                value = new ElementRef(asElementData(view, nodeDef.index).renderElement);
	                break;
	            case 2 /* TemplateRef */:
	                value = asElementData(view, nodeDef.index).template;
	                break;
	            case 3 /* ViewContainerRef */:
	                value = asElementData(view, nodeDef.index).viewContainer;
	                break;
	            case 4 /* Provider */:
	                value = asProviderData(view, nodeDef.index).instance;
	                break;
	        }
	        return value;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} ngContentIndex
	 * @param {?} constants
	 * @return {?}
	 */
	function textDef(ngContentIndex, constants) {
	    var /** @type {?} */ bindings = new Array(constants.length - 1);
	    for (var /** @type {?} */ i = 1; i < constants.length; i++) {
	        bindings[i - 1] = {
	            flags: 8 /* TypeProperty */,
	            name: undefined,
	            ns: undefined,
	            nonMinifiedName: undefined,
	            securityContext: undefined,
	            suffix: constants[i]
	        };
	    }
	    var /** @type {?} */ flags = 2;
	    return {
	        // will bet set by the view definition
	        index: undefined,
	        parent: undefined,
	        renderParent: undefined,
	        bindingIndex: undefined,
	        outputIndex: undefined,
	        // regular values
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {}, ngContentIndex: ngContentIndex,
	        childCount: 0, bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings),
	        outputs: [],
	        element: undefined,
	        provider: undefined,
	        text: { prefix: constants[0] },
	        query: undefined,
	        ngContent: undefined
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} renderHost
	 * @param {?} def
	 * @return {?}
	 */
	function createText(view, renderHost, def) {
	    var /** @type {?} */ renderNode$$1;
	    var /** @type {?} */ renderer = view.renderer;
	    renderNode$$1 = renderer.createText(def.text.prefix);
	    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
	    if (parentEl) {
	        renderer.appendChild(parentEl, renderNode$$1);
	    }
	    return { renderText: renderNode$$1 };
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ changed = false;
	    var /** @type {?} */ bindings = def.bindings;
	    var /** @type {?} */ bindLen = bindings.length;
	    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
	        changed = true;
	    if (changed) {
	        var /** @type {?} */ value = def.text.prefix;
	        if (bindLen > 0)
	            value += _addInterpolationPart(v0, bindings[0]);
	        if (bindLen > 1)
	            value += _addInterpolationPart(v1, bindings[1]);
	        if (bindLen > 2)
	            value += _addInterpolationPart(v2, bindings[2]);
	        if (bindLen > 3)
	            value += _addInterpolationPart(v3, bindings[3]);
	        if (bindLen > 4)
	            value += _addInterpolationPart(v4, bindings[4]);
	        if (bindLen > 5)
	            value += _addInterpolationPart(v5, bindings[5]);
	        if (bindLen > 6)
	            value += _addInterpolationPart(v6, bindings[6]);
	        if (bindLen > 7)
	            value += _addInterpolationPart(v7, bindings[7]);
	        if (bindLen > 8)
	            value += _addInterpolationPart(v8, bindings[8]);
	        if (bindLen > 9)
	            value += _addInterpolationPart(v9, bindings[9]);
	        var /** @type {?} */ renderNode$$1 = asTextData(view, def.index).renderText;
	        view.renderer.setValue(renderNode$$1, value);
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} def
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdateTextDynamic(view, def, values) {
	    var /** @type {?} */ bindings = def.bindings;
	    var /** @type {?} */ changed = false;
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        // Note: We need to loop over all values, so that
	        // the old values are updates as well!
	        if (checkAndUpdateBinding(view, def, i, values[i])) {
	            changed = true;
	        }
	    }
	    if (changed) {
	        var /** @type {?} */ value = '';
	        for (var /** @type {?} */ i = 0; i < values.length; i++) {
	            value = value + _addInterpolationPart(values[i], bindings[i]);
	        }
	        value = def.text.prefix + value;
	        var /** @type {?} */ renderNode$$1 = asTextData(view, def.index).renderText;
	        view.renderer.setValue(renderNode$$1, value);
	    }
	    return changed;
	}
	/**
	 * @param {?} value
	 * @param {?} binding
	 * @return {?}
	 */
	function _addInterpolationPart(value, binding) {
	    var /** @type {?} */ valueStr = value != null ? value.toString() : '';
	    return valueStr + binding.suffix;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} flags
	 * @param {?} nodes
	 * @param {?=} updateDirectives
	 * @param {?=} updateRenderer
	 * @return {?}
	 */
	function viewDef(flags, nodes, updateDirectives, updateRenderer) {
	    // clone nodes and set auto calculated values
	    var /** @type {?} */ viewBindingCount = 0;
	    var /** @type {?} */ viewDisposableCount = 0;
	    var /** @type {?} */ viewNodeFlags = 0;
	    var /** @type {?} */ viewRootNodeFlags = 0;
	    var /** @type {?} */ viewMatchedQueries = 0;
	    var /** @type {?} */ currentParent = null;
	    var /** @type {?} */ currentElementHasPublicProviders = false;
	    var /** @type {?} */ currentElementHasPrivateProviders = false;
	    var /** @type {?} */ lastRenderRootNode = null;
	    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	        while (currentParent && i > currentParent.index + currentParent.childCount) {
	            var /** @type {?} */ newParent = currentParent.parent;
	            if (newParent) {
	                newParent.childFlags |= currentParent.childFlags;
	                newParent.childMatchedQueries |= currentParent.childMatchedQueries;
	            }
	            currentParent = newParent;
	        }
	        var /** @type {?} */ node = nodes[i];
	        node.index = i;
	        node.parent = currentParent;
	        node.bindingIndex = viewBindingCount;
	        node.outputIndex = viewDisposableCount;
	        // renderParent needs to account for ng-container!
	        var /** @type {?} */ currentRenderParent = void 0;
	        if (currentParent && currentParent.flags & 1 /* TypeElement */ &&
	            !currentParent.element.name) {
	            currentRenderParent = currentParent.renderParent;
	        }
	        else {
	            currentRenderParent = currentParent;
	        }
	        node.renderParent = currentRenderParent;
	        if (node.element) {
	            var /** @type {?} */ elDef = node.element;
	            elDef.publicProviders =
	                currentParent ? currentParent.element.publicProviders : Object.create(null);
	            elDef.allProviders = elDef.publicProviders;
	            // Note: We assume that all providers of an element are before any child element!
	            currentElementHasPublicProviders = false;
	            currentElementHasPrivateProviders = false;
	        }
	        validateNode(currentParent, node, nodes.length);
	        viewNodeFlags |= node.flags;
	        viewMatchedQueries |= node.matchedQueryIds;
	        if (node.element && node.element.template) {
	            viewMatchedQueries |= node.element.template.nodeMatchedQueries;
	        }
	        if (currentParent) {
	            currentParent.childFlags |= node.flags;
	            currentParent.directChildFlags |= node.flags;
	            currentParent.childMatchedQueries |= node.matchedQueryIds;
	            if (node.element && node.element.template) {
	                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
	            }
	        }
	        else {
	            viewRootNodeFlags |= node.flags;
	        }
	        viewBindingCount += node.bindings.length;
	        viewDisposableCount += node.outputs.length;
	        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {
	            lastRenderRootNode = node;
	        }
	        if (node.flags & 10112 /* CatProvider */) {
	            if (!currentElementHasPublicProviders) {
	                currentElementHasPublicProviders = true;
	                // Use prototypical inheritance to not get O(n^2) complexity...
	                currentParent.element.publicProviders =
	                    Object.create(currentParent.element.publicProviders);
	                currentParent.element.allProviders = currentParent.element.publicProviders;
	            }
	            var /** @type {?} */ isPrivateService = (node.flags & 4096 /* PrivateProvider */) !== 0;
	            var /** @type {?} */ isComponent = (node.flags & 16384 /* Component */) !== 0;
	            if (!isPrivateService || isComponent) {
	                currentParent.element.publicProviders[node.provider.tokenKey] = node;
	            }
	            else {
	                if (!currentElementHasPrivateProviders) {
	                    currentElementHasPrivateProviders = true;
	                    // Use protoyypical inheritance to not get O(n^2) complexity...
	                    currentParent.element.allProviders = Object.create(currentParent.element.publicProviders);
	                }
	                currentParent.element.allProviders[node.provider.tokenKey] = node;
	            }
	            if (isComponent) {
	                currentParent.element.componentProvider = node;
	            }
	        }
	        if (node.childCount) {
	            currentParent = node;
	        }
	    }
	    while (currentParent) {
	        var /** @type {?} */ newParent = currentParent.parent;
	        if (newParent) {
	            newParent.childFlags |= currentParent.childFlags;
	            newParent.childMatchedQueries |= currentParent.childMatchedQueries;
	        }
	        currentParent = newParent;
	    }
	    var /** @type {?} */ handleEvent = function (view, nodeIndex, eventName, event) { return nodes[nodeIndex].element.handleEvent(view, eventName, event); };
	    return {
	        // Will be filled later...
	        factory: undefined,
	        nodeFlags: viewNodeFlags,
	        rootNodeFlags: viewRootNodeFlags,
	        nodeMatchedQueries: viewMatchedQueries, flags: flags,
	        nodes: nodes,
	        updateDirectives: updateDirectives || NOOP,
	        updateRenderer: updateRenderer || NOOP,
	        handleEvent: handleEvent || NOOP,
	        bindingCount: viewBindingCount,
	        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode
	    };
	}
	/**
	 * @param {?} parent
	 * @param {?} node
	 * @param {?} nodeCount
	 * @return {?}
	 */
	function validateNode(parent, node, nodeCount) {
	    var /** @type {?} */ template = node.element && node.element.template;
	    if (template) {
	        if (!template.lastRenderRootNode) {
	            throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
	        }
	        if (template.lastRenderRootNode &&
	            template.lastRenderRootNode.flags & 8388608 /* EmbeddedViews */) {
	            throw new Error("Illegal State: Last root node of a template can't have embedded views, at index " + node.index + "!");
	        }
	    }
	    if (node.flags & 10112 /* CatProvider */) {
	        var /** @type {?} */ parentFlags = parent ? parent.flags : null;
	        if ((parentFlags & 1 /* TypeElement */) === 0) {
	            throw new Error("Illegal State: Provider/Directive nodes need to be children of elements or anchors, at index " + node.index + "!");
	        }
	    }
	    if (node.query) {
	        if (node.flags & 33554432 /* TypeContentQuery */ &&
	            (!parent || (parent.flags & 8192 /* TypeDirective */) === 0)) {
	            throw new Error("Illegal State: Content Query nodes need to be children of directives, at index " + node.index + "!");
	        }
	        if (node.flags & 67108864 /* TypeViewQuery */ && parent) {
	            throw new Error("Illegal State: View Query nodes have to be top level nodes, at index " + node.index + "!");
	        }
	    }
	    if (node.childCount) {
	        var /** @type {?} */ parentEnd = parent ? parent.index + parent.childCount : nodeCount - 1;
	        if (node.index <= parentEnd && node.index + node.childCount > parentEnd) {
	            throw new Error("Illegal State: childCount of node leads outside of parent, at index " + node.index + "!");
	        }
	    }
	}
	/**
	 * @param {?} parent
	 * @param {?} anchorDef
	 * @param {?=} context
	 * @return {?}
	 */
	function createEmbeddedView(parent, anchorDef$$1, context) {
	    // embedded views are seen as siblings to the anchor, so we need
	    // to get the parent of the anchor and use it as parentIndex.
	    var /** @type {?} */ view = createView(parent.root, parent.renderer, parent, anchorDef$$1, anchorDef$$1.element.template);
	    initView(view, parent.component, context);
	    createViewNodes(view);
	    return view;
	}
	/**
	 * @param {?} root
	 * @param {?} def
	 * @param {?=} context
	 * @return {?}
	 */
	function createRootView(root, def, context) {
	    var /** @type {?} */ view = createView(root, root.renderer, null, null, def);
	    initView(view, context, context);
	    createViewNodes(view);
	    return view;
	}
	/**
	 * @param {?} root
	 * @param {?} renderer
	 * @param {?} parent
	 * @param {?} parentNodeDef
	 * @param {?} def
	 * @return {?}
	 */
	function createView(root, renderer, parent, parentNodeDef, def) {
	    var /** @type {?} */ nodes = new Array(def.nodes.length);
	    var /** @type {?} */ disposables = def.outputCount ? new Array(def.outputCount) : undefined;
	    var /** @type {?} */ view = {
	        def: def,
	        parent: parent,
	        viewContainerParent: undefined, parentNodeDef: parentNodeDef,
	        context: undefined,
	        component: undefined, nodes: nodes,
	        state: 1 /* FirstCheck */ | 2 /* ChecksEnabled */, root: root, renderer: renderer,
	        oldValues: new Array(def.bindingCount), disposables: disposables
	    };
	    return view;
	}
	/**
	 * @param {?} view
	 * @param {?} component
	 * @param {?} context
	 * @return {?}
	 */
	function initView(view, component, context) {
	    view.component = component;
	    view.context = context;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function createViewNodes(view) {
	    var /** @type {?} */ renderHost;
	    if (isComponentView(view)) {
	        var /** @type {?} */ hostDef = view.parentNodeDef;
	        renderHost = asElementData(view.parent, hostDef.parent.index).renderElement;
	    }
	    var /** @type {?} */ def = view.def;
	    var /** @type {?} */ nodes = view.nodes;
	    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = def.nodes[i];
	        Services.setCurrentNode(view, i);
	        var /** @type {?} */ nodeData = void 0;
	        switch (nodeDef.flags & 100673535 /* Types */) {
	            case 1 /* TypeElement */:
	                var /** @type {?} */ el = (createElement(view, renderHost, nodeDef));
	                var /** @type {?} */ componentView = void 0;
	                if (nodeDef.flags & 16777216 /* ComponentView */) {
	                    var /** @type {?} */ compViewDef = resolveViewDefinition(nodeDef.element.componentView);
	                    var /** @type {?} */ rendererType = nodeDef.element.componentRendererType;
	                    var /** @type {?} */ compRenderer = void 0;
	                    if (!rendererType) {
	                        compRenderer = view.root.renderer;
	                    }
	                    else {
	                        compRenderer = view.root.rendererFactory.createRenderer(el, rendererType);
	                    }
	                    componentView = createView(view.root, compRenderer, view, nodeDef.element.componentProvider, compViewDef);
	                }
	                listenToElementOutputs(view, componentView, nodeDef, el);
	                nodeData = ({
	                    renderElement: el,
	                    componentView: componentView,
	                    viewContainer: undefined,
	                    template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined
	                });
	                if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
	                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
	                }
	                break;
	            case 2 /* TypeText */:
	                nodeData = (createText(view, renderHost, nodeDef));
	                break;
	            case 256 /* TypeClassProvider */:
	            case 512 /* TypeFactoryProvider */:
	            case 1024 /* TypeUseExistingProvider */:
	            case 128 /* TypeValueProvider */: {
	                var /** @type {?} */ instance = createProviderInstance(view, nodeDef);
	                nodeData = ({ instance: instance });
	                break;
	            }
	            case 8 /* TypePipe */: {
	                var /** @type {?} */ instance = createPipeInstance(view, nodeDef);
	                nodeData = ({ instance: instance });
	                break;
	            }
	            case 8192 /* TypeDirective */: {
	                var /** @type {?} */ instance = createDirectiveInstance(view, nodeDef);
	                nodeData = ({ instance: instance });
	                if (nodeDef.flags & 16384 /* Component */) {
	                    var /** @type {?} */ compView = asElementData(view, nodeDef.parent.index).componentView;
	                    initView(compView, instance, instance);
	                }
	                break;
	            }
	            case 16 /* TypePureArray */:
	            case 32 /* TypePureObject */:
	            case 64 /* TypePurePipe */:
	                nodeData = (createPureExpression(view, nodeDef));
	                break;
	            case 33554432 /* TypeContentQuery */:
	            case 67108864 /* TypeViewQuery */:
	                nodeData = (createQuery());
	                break;
	            case 4 /* TypeNgContent */:
	                appendNgContent(view, renderHost, nodeDef);
	                // no runtime data needed for NgContent...
	                nodeData = undefined;
	                break;
	        }
	        nodes[i] = nodeData;
	    }
	    // Create the ViewData.nodes of component views after we created everything else,
	    // so that e.g. ng-content works
	    execComponentViewsAction(view, ViewAction.CreateViewNodes);
	    // fill static content and view queries
	    execQueriesAction(view, 33554432 /* TypeContentQuery */ | 67108864 /* TypeViewQuery */, 134217728 /* StaticQuery */, 0 /* CheckAndUpdate */);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function checkNoChangesView(view) {
	    Services.updateDirectives(view, 1 /* CheckNoChanges */);
	    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
	    Services.updateRenderer(view, 1 /* CheckNoChanges */);
	    execComponentViewsAction(view, ViewAction.CheckNoChanges);
	    // Note: We don't check queries for changes as we didn't do this in v2.x.
	    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function checkAndUpdateView(view) {
	    Services.updateDirectives(view, 0 /* CheckAndUpdate */);
	    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
	    execQueriesAction(view, 33554432 /* TypeContentQuery */, 268435456 /* DynamicQuery */, 0 /* CheckAndUpdate */);
	    callLifecycleHooksChildrenFirst(view, 1048576 /* AfterContentChecked */ |
	        (view.state & 1 /* FirstCheck */ ? 524288 /* AfterContentInit */ : 0));
	    Services.updateRenderer(view, 0 /* CheckAndUpdate */);
	    execComponentViewsAction(view, ViewAction.CheckAndUpdate);
	    execQueriesAction(view, 67108864 /* TypeViewQuery */, 268435456 /* DynamicQuery */, 0 /* CheckAndUpdate */);
	    callLifecycleHooksChildrenFirst(view, 4194304 /* AfterViewChecked */ |
	        (view.state & 1 /* FirstCheck */ ? 2097152 /* AfterViewInit */ : 0));
	    if (view.def.flags & 2 /* OnPush */) {
	        view.state &= ~2 /* ChecksEnabled */;
	    }
	    view.state &= ~1 /* FirstCheck */;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} argStyle
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    if (argStyle === 0 /* Inline */) {
	        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    }
	    else {
	        return checkAndUpdateNodeDynamic(view, nodeDef, v0);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ changed = false;
	    switch (nodeDef.flags & 100673535 /* Types */) {
	        case 1 /* TypeElement */:
	            changed = checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	            break;
	        case 2 /* TypeText */:
	            changed = checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	            break;
	        case 8192 /* TypeDirective */:
	            changed =
	                checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	            break;
	        case 16 /* TypePureArray */:
	        case 32 /* TypePureObject */:
	        case 64 /* TypePurePipe */:
	            changed =
	                checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	            break;
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} values
	 * @return {?}
	 */
	function checkAndUpdateNodeDynamic(view, nodeDef, values) {
	    var /** @type {?} */ changed = false;
	    switch (nodeDef.flags & 100673535 /* Types */) {
	        case 1 /* TypeElement */:
	            changed = checkAndUpdateElementDynamic(view, nodeDef, values);
	            break;
	        case 2 /* TypeText */:
	            changed = checkAndUpdateTextDynamic(view, nodeDef, values);
	            break;
	        case 8192 /* TypeDirective */:
	            changed = checkAndUpdateDirectiveDynamic(view, nodeDef, values);
	            break;
	        case 16 /* TypePureArray */:
	        case 32 /* TypePureObject */:
	        case 64 /* TypePurePipe */:
	            changed = checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
	            break;
	    }
	    if (changed) {
	        // Update oldValues after all bindings have been updated,
	        // as a setter for a property might update other properties.
	        var /** @type {?} */ bindLen = nodeDef.bindings.length;
	        var /** @type {?} */ bindingStart = nodeDef.bindingIndex;
	        var /** @type {?} */ oldValues = view.oldValues;
	        for (var /** @type {?} */ i = 0; i < bindLen; i++) {
	            oldValues[bindingStart + i] = values[i];
	        }
	    }
	    return changed;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} argStyle
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    if (argStyle === 0 /* Inline */) {
	        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    }
	    else {
	        checkNoChangesNodeDynamic(view, nodeDef, v0);
	    }
	    // Returning false is ok here as we would have thrown in case of a change.
	    return false;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} v0
	 * @param {?} v1
	 * @param {?} v2
	 * @param {?} v3
	 * @param {?} v4
	 * @param {?} v5
	 * @param {?} v6
	 * @param {?} v7
	 * @param {?} v8
	 * @param {?} v9
	 * @return {?}
	 */
	function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ bindLen = nodeDef.bindings.length;
	    if (bindLen > 0)
	        checkBindingNoChanges(view, nodeDef, 0, v0);
	    if (bindLen > 1)
	        checkBindingNoChanges(view, nodeDef, 1, v1);
	    if (bindLen > 2)
	        checkBindingNoChanges(view, nodeDef, 2, v2);
	    if (bindLen > 3)
	        checkBindingNoChanges(view, nodeDef, 3, v3);
	    if (bindLen > 4)
	        checkBindingNoChanges(view, nodeDef, 4, v4);
	    if (bindLen > 5)
	        checkBindingNoChanges(view, nodeDef, 5, v5);
	    if (bindLen > 6)
	        checkBindingNoChanges(view, nodeDef, 6, v6);
	    if (bindLen > 7)
	        checkBindingNoChanges(view, nodeDef, 7, v7);
	    if (bindLen > 8)
	        checkBindingNoChanges(view, nodeDef, 8, v8);
	    if (bindLen > 9)
	        checkBindingNoChanges(view, nodeDef, 9, v9);
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} values
	 * @return {?}
	 */
	function checkNoChangesNodeDynamic(view, nodeDef, values) {
	    for (var /** @type {?} */ i = 0; i < values.length; i++) {
	        checkBindingNoChanges(view, nodeDef, i, values[i]);
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @return {?}
	 */
	function checkNoChangesQuery(view, nodeDef) {
	    var /** @type {?} */ queryList = asQueryList(view, nodeDef.index);
	    if (queryList.dirty) {
	        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.index), "Query " + nodeDef.query.id + " not dirty", "Query " + nodeDef.query.id + " dirty", (view.state & 1 /* FirstCheck */) !== 0);
	    }
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function destroyView(view) {
	    if (view.state & 8 /* Destroyed */) {
	        return;
	    }
	    execEmbeddedViewsAction(view, ViewAction.Destroy);
	    execComponentViewsAction(view, ViewAction.Destroy);
	    callLifecycleHooksChildrenFirst(view, 65536 /* OnDestroy */);
	    if (view.disposables) {
	        for (var /** @type {?} */ i = 0; i < view.disposables.length; i++) {
	            view.disposables[i]();
	        }
	    }
	    if (view.renderer.destroyNode) {
	        destroyViewNodes(view);
	    }
	    if (isComponentView(view)) {
	        view.renderer.destroy();
	    }
	    view.state |= 8 /* Destroyed */;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function destroyViewNodes(view) {
	    var /** @type {?} */ len = view.def.nodes.length;
	    for (var /** @type {?} */ i = 0; i < len; i++) {
	        var /** @type {?} */ def = view.def.nodes[i];
	        if (def.flags & 1 /* TypeElement */) {
	            view.renderer.destroyNode(asElementData(view, i).renderElement);
	        }
	        else if (def.flags & 2 /* TypeText */) {
	            view.renderer.destroyNode(asTextData(view, i).renderText);
	        }
	    }
	}
	var ViewAction = {};
	ViewAction.CreateViewNodes = 0;
	ViewAction.CheckNoChanges = 1;
	ViewAction.CheckAndUpdate = 2;
	ViewAction.Destroy = 3;
	ViewAction[ViewAction.CreateViewNodes] = "CreateViewNodes";
	ViewAction[ViewAction.CheckNoChanges] = "CheckNoChanges";
	ViewAction[ViewAction.CheckAndUpdate] = "CheckAndUpdate";
	ViewAction[ViewAction.Destroy] = "Destroy";
	/**
	 * @param {?} view
	 * @param {?} action
	 * @return {?}
	 */
	function execComponentViewsAction(view, action) {
	    var /** @type {?} */ def = view.def;
	    if (!(def.nodeFlags & 16777216 /* ComponentView */)) {
	        return;
	    }
	    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = def.nodes[i];
	        if (nodeDef.flags & 16777216 /* ComponentView */) {
	            // a leaf
	            callViewAction(asElementData(view, i).componentView, action);
	        }
	        else if ((nodeDef.childFlags & 16777216 /* ComponentView */) === 0) {
	            // a parent with leafs
	            // no child is a component,
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} action
	 * @return {?}
	 */
	function execEmbeddedViewsAction(view, action) {
	    var /** @type {?} */ def = view.def;
	    if (!(def.nodeFlags & 8388608 /* EmbeddedViews */)) {
	        return;
	    }
	    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = def.nodes[i];
	        if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
	            // a leaf
	            var /** @type {?} */ embeddedViews = asElementData(view, i).viewContainer._embeddedViews;
	            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
	                callViewAction(embeddedViews[k], action);
	            }
	        }
	        else if ((nodeDef.childFlags & 8388608 /* EmbeddedViews */) === 0) {
	            // a parent with leafs
	            // no child is a component,
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} action
	 * @return {?}
	 */
	function callViewAction(view, action) {
	    var /** @type {?} */ viewState = view.state;
	    switch (action) {
	        case ViewAction.CheckNoChanges:
	            if ((viewState & 2 /* ChecksEnabled */) &&
	                (viewState & (4 /* Errored */ | 8 /* Destroyed */)) === 0) {
	                checkNoChangesView(view);
	            }
	            break;
	        case ViewAction.CheckAndUpdate:
	            if ((viewState & 2 /* ChecksEnabled */) &&
	                (viewState & (4 /* Errored */ | 8 /* Destroyed */)) === 0) {
	                checkAndUpdateView(view);
	            }
	            break;
	        case ViewAction.Destroy:
	            destroyView(view);
	            break;
	        case ViewAction.CreateViewNodes:
	            createViewNodes(view);
	            break;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} queryFlags
	 * @param {?} staticDynamicQueryFlag
	 * @param {?} checkType
	 * @return {?}
	 */
	function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
	    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
	        return;
	    }
	    var /** @type {?} */ nodeCount = view.def.nodes.length;
	    for (var /** @type {?} */ i = 0; i < nodeCount; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {
	            Services.setCurrentNode(view, nodeDef.index);
	            switch (checkType) {
	                case 0 /* CheckAndUpdate */:
	                    checkAndUpdateQuery(view, nodeDef);
	                    break;
	                case 1 /* CheckNoChanges */:
	                    checkNoChangesQuery(view, nodeDef);
	                    break;
	            }
	        }
	        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
	            // no child has a matching query
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var initialized = false;
	/**
	 * @return {?}
	 */
	function initServicesIfNeeded() {
	    if (initialized) {
	        return;
	    }
	    initialized = true;
	    var /** @type {?} */ services = isDevMode() ? createDebugServices() : createProdServices();
	    Services.setCurrentNode = services.setCurrentNode;
	    Services.createRootView = services.createRootView;
	    Services.createEmbeddedView = services.createEmbeddedView;
	    Services.checkAndUpdateView = services.checkAndUpdateView;
	    Services.checkNoChangesView = services.checkNoChangesView;
	    Services.destroyView = services.destroyView;
	    Services.resolveDep = resolveDep;
	    Services.createDebugContext = services.createDebugContext;
	    Services.handleEvent = services.handleEvent;
	    Services.updateDirectives = services.updateDirectives;
	    Services.updateRenderer = services.updateRenderer;
	    Services.dirtyParentQueries = dirtyParentQueries;
	}
	/**
	 * @return {?}
	 */
	function createProdServices() {
	    return {
	        setCurrentNode: function () { },
	        createRootView: createProdRootView,
	        createEmbeddedView: createEmbeddedView,
	        checkAndUpdateView: checkAndUpdateView,
	        checkNoChangesView: checkNoChangesView,
	        destroyView: destroyView,
	        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
	        handleEvent: function (view, nodeIndex, eventName, event) { return view.def.handleEvent(view, nodeIndex, eventName, event); },
	        updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
	            prodCheckNoChangesNode, view); },
	        updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
	            prodCheckNoChangesNode, view); },
	    };
	}
	/**
	 * @return {?}
	 */
	function createDebugServices() {
	    return {
	        setCurrentNode: debugSetCurrentNode,
	        createRootView: debugCreateRootView,
	        createEmbeddedView: debugCreateEmbeddedView,
	        checkAndUpdateView: debugCheckAndUpdateView,
	        checkNoChangesView: debugCheckNoChangesView,
	        destroyView: debugDestroyView,
	        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
	        handleEvent: debugHandleEvent,
	        updateDirectives: debugUpdateDirectives,
	        updateRenderer: debugUpdateRenderer
	    };
	}
	/**
	 * @param {?} elInjector
	 * @param {?} projectableNodes
	 * @param {?} rootSelectorOrNode
	 * @param {?} def
	 * @param {?} ngModule
	 * @param {?=} context
	 * @return {?}
	 */
	function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
	    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);
	    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
	}
	/**
	 * @param {?} elInjector
	 * @param {?} projectableNodes
	 * @param {?} rootSelectorOrNode
	 * @param {?} def
	 * @param {?} ngModule
	 * @param {?=} context
	 * @return {?}
	 */
	function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
	    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);
	    var /** @type {?} */ root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
	    return callWithDebugContext(DebugAction.create, createRootView, null, [root, def, context]);
	}
	/**
	 * @param {?} elInjector
	 * @param {?} ngModule
	 * @param {?} rendererFactory
	 * @param {?} projectableNodes
	 * @param {?} rootSelectorOrNode
	 * @return {?}
	 */
	function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
	    var /** @type {?} */ sanitizer = ngModule.injector.get(Sanitizer);
	    var /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);
	    return {
	        ngModule: ngModule,
	        injector: elInjector, projectableNodes: projectableNodes,
	        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer
	    };
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @param {?} argStyle
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function prodCheckAndUpdateNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    return (nodeDef.flags & 112 /* CatPureExpression */) ?
	        asPureExpressionData(view, nodeIndex).value :
	        undefined;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @param {?} argStyle
	 * @param {?=} v0
	 * @param {?=} v1
	 * @param {?=} v2
	 * @param {?=} v3
	 * @param {?=} v4
	 * @param {?=} v5
	 * @param {?=} v6
	 * @param {?=} v7
	 * @param {?=} v8
	 * @param {?=} v9
	 * @return {?}
	 */
	function prodCheckNoChangesNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    return (nodeDef.flags & 112 /* CatPureExpression */) ?
	        asPureExpressionData(view, nodeIndex).value :
	        undefined;
	}
	/**
	 * @param {?} parent
	 * @param {?} anchorDef
	 * @param {?=} context
	 * @return {?}
	 */
	function debugCreateEmbeddedView(parent, anchorDef, context) {
	    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parent, anchorDef, context]);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function debugCheckAndUpdateView(view) {
	    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function debugCheckNoChangesView(view) {
	    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function debugDestroyView(view) {
	    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
	}
	var DebugAction = {};
	DebugAction.create = 0;
	DebugAction.detectChanges = 1;
	DebugAction.checkNoChanges = 2;
	DebugAction.destroy = 3;
	DebugAction.handleEvent = 4;
	DebugAction[DebugAction.create] = "create";
	DebugAction[DebugAction.detectChanges] = "detectChanges";
	DebugAction[DebugAction.checkNoChanges] = "checkNoChanges";
	DebugAction[DebugAction.destroy] = "destroy";
	DebugAction[DebugAction.handleEvent] = "handleEvent";
	var _currentAction;
	var _currentView;
	var _currentNodeIndex;
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @return {?}
	 */
	function debugSetCurrentNode(view, nodeIndex) {
	    _currentView = view;
	    _currentNodeIndex = nodeIndex;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @param {?} eventName
	 * @param {?} event
	 * @return {?}
	 */
	function debugHandleEvent(view, nodeIndex, eventName, event) {
	    debugSetCurrentNode(view, nodeIndex);
	    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
	}
	/**
	 * @param {?} view
	 * @param {?} checkType
	 * @return {?}
	 */
	function debugUpdateDirectives(view, checkType) {
	    if (view.state & 8 /* Destroyed */) {
	        throw viewDestroyedError(DebugAction[_currentAction]);
	    }
	    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
	    return view.def.updateDirectives(debugCheckDirectivesFn, view);
	    /**
	     * @param {?} view
	     * @param {?} nodeIndex
	     * @param {?} argStyle
	     * @param {...?} values
	     * @return {?}
	     */
	    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
	        var values = [];
	        for (var _i = 3; _i < arguments.length; _i++) {
	            values[_i - 3] = arguments[_i];
	        }
	        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	        if (checkType === 0 /* CheckAndUpdate */) {
	            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
	        }
	        else {
	            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
	        }
	        if (nodeDef.flags & 8192 /* TypeDirective */) {
	            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
	        }
	        return (nodeDef.flags & 112 /* CatPureExpression */) ?
	            asPureExpressionData(view, nodeDef.index).value :
	            undefined;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} checkType
	 * @return {?}
	 */
	function debugUpdateRenderer(view, checkType) {
	    if (view.state & 8 /* Destroyed */) {
	        throw viewDestroyedError(DebugAction[_currentAction]);
	    }
	    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
	    return view.def.updateRenderer(debugCheckRenderNodeFn, view);
	    /**
	     * @param {?} view
	     * @param {?} nodeIndex
	     * @param {?} argStyle
	     * @param {...?} values
	     * @return {?}
	     */
	    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
	        var values = [];
	        for (var _i = 3; _i < arguments.length; _i++) {
	            values[_i - 3] = arguments[_i];
	        }
	        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
	        if (checkType === 0 /* CheckAndUpdate */) {
	            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
	        }
	        else {
	            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
	        }
	        if (nodeDef.flags & 3 /* CatRenderNode */) {
	            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
	        }
	        return (nodeDef.flags & 112 /* CatPureExpression */) ?
	            asPureExpressionData(view, nodeDef.index).value :
	            undefined;
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} argStyle
	 * @param {?} givenValues
	 * @return {?}
	 */
	function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
	    var /** @type {?} */ changed = ((checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));
	    if (changed) {
	        var /** @type {?} */ values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;
	        if (nodeDef.flags & 8192 /* TypeDirective */) {
	            var /** @type {?} */ bindingValues = {};
	            for (var /** @type {?} */ i = 0; i < nodeDef.bindings.length; i++) {
	                var /** @type {?} */ binding = nodeDef.bindings[i];
	                var /** @type {?} */ value = values[i];
	                if (binding.flags & 8 /* TypeProperty */) {
	                    bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] =
	                        normalizeDebugBindingValue(value);
	                }
	            }
	            var /** @type {?} */ elDef = nodeDef.parent;
	            var /** @type {?} */ el = asElementData(view, elDef.index).renderElement;
	            if (!elDef.element.name) {
	                // a comment.
	                view.renderer.setValue(el, "bindings=" + JSON.stringify(bindingValues, null, 2));
	            }
	            else {
	                // a regular element.
	                for (var /** @type {?} */ attr in bindingValues) {
	                    var /** @type {?} */ value = bindingValues[attr];
	                    if (value != null) {
	                        view.renderer.setAttribute(el, attr, value);
	                    }
	                    else {
	                        view.renderer.removeAttribute(el, attr);
	                    }
	                }
	            }
	        }
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} argStyle
	 * @param {?} values
	 * @return {?}
	 */
	function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
	    ((checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));
	}
	/**
	 * @param {?} name
	 * @return {?}
	 */
	function normalizeDebugBindingName(name) {
	    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
	    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
	    return "ng-reflect-" + name;
	}
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	/**
	 * @param {?} input
	 * @return {?}
	 */
	function camelCaseToDashCase(input) {
	    return input.replace(CAMEL_CASE_REGEXP, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        return '-' + m[1].toLowerCase();
	    });
	}
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function normalizeDebugBindingValue(value) {
	    try {
	        // Limit the size of the value as otherwise the DOM just gets polluted.
	        return value ? value.toString().slice(0, 30) : value;
	    }
	    catch (e) {
	        return '[ERROR] Exception while trying to serialize the value';
	    }
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @return {?}
	 */
	function nextDirectiveWithBinding(view, nodeIndex) {
	    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & 8192 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {
	            return i;
	        }
	    }
	    return undefined;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeIndex
	 * @return {?}
	 */
	function nextRenderNodeWithBinding(view, nodeIndex) {
	    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {
	        var /** @type {?} */ nodeDef = view.def.nodes[i];
	        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {
	            return i;
	        }
	    }
	    return undefined;
	}
	var DebugContext_ = (function () {
	    /**
	     * @param {?} view
	     * @param {?} nodeIndex
	     */
	    function DebugContext_(view, nodeIndex) {
	        this.view = view;
	        this.nodeIndex = nodeIndex;
	        if (nodeIndex == null) {
	            this.nodeIndex = nodeIndex = 0;
	        }
	        this.nodeDef = view.def.nodes[nodeIndex];
	        var elDef = this.nodeDef;
	        var elView = view;
	        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {
	            elDef = elDef.parent;
	        }
	        if (!elDef) {
	            while (!elDef && elView) {
	                elDef = viewParentEl(elView);
	                elView = elView.parent;
	            }
	        }
	        this.elDef = elDef;
	        this.elView = elView;
	    }
	    Object.defineProperty(DebugContext_.prototype, "elOrCompView", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            // Has to be done lazily as we use the DebugContext also during creation of elements...
	            return asElementData(this.elView, this.elDef.index).componentView || this.view;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "injector", {
	        /**
	         * @return {?}
	         */
	        get: function () { return createInjector(this.elView, this.elDef); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "component", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.elOrCompView.component; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "context", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.elOrCompView.context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "providerTokens", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ tokens = [];
	            if (this.elDef) {
	                for (var /** @type {?} */ i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
	                    var /** @type {?} */ childDef = this.elView.def.nodes[i];
	                    if (childDef.flags & 10112 /* CatProvider */) {
	                        tokens.push(childDef.provider.token);
	                    }
	                    i += childDef.childCount;
	                }
	            }
	            return tokens;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "references", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ references = {};
	            if (this.elDef) {
	                collectReferences(this.elView, this.elDef, references);
	                for (var /** @type {?} */ i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
	                    var /** @type {?} */ childDef = this.elView.def.nodes[i];
	                    if (childDef.flags & 10112 /* CatProvider */) {
	                        collectReferences(this.elView, childDef, references);
	                    }
	                    i += childDef.childCount;
	                }
	            }
	            return references;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "componentRenderElement", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            var /** @type {?} */ elData = findHostElement(this.elOrCompView);
	            return elData ? elData.renderElement : undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "renderNode", {
	        /**
	         * @return {?}
	         */
	        get: function () {
	            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :
	                renderNode(this.elView, this.elDef);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} console
	     * @param {...?} values
	     * @return {?}
	     */
	    DebugContext_.prototype.logError = function (console) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var /** @type {?} */ logViewDef;
	        var /** @type {?} */ logNodeIndex;
	        if (this.nodeDef.flags & 2 /* TypeText */) {
	            logViewDef = this.view.def;
	            logNodeIndex = this.nodeDef.index;
	        }
	        else {
	            logViewDef = this.elView.def;
	            logNodeIndex = this.elDef.index;
	        }
	        // Note: we only generate a log function for text and element nodes
	        // to make the generated code as small as possible.
	        var /** @type {?} */ renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
	        var /** @type {?} */ currRenderNodeIndex = -1;
	        var /** @type {?} */ nodeLogger = function () {
	            currRenderNodeIndex++;
	            if (currRenderNodeIndex === renderNodeIndex) {
	                return (_a = console.error).bind.apply(_a, [console].concat(values));
	            }
	            else {
	                return NOOP;
	            }
	            var _a;
	        };
	        logViewDef.factory(nodeLogger);
	        if (currRenderNodeIndex < renderNodeIndex) {
	            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
	            console.error.apply(console, values);
	        }
	    };
	    return DebugContext_;
	}());
	/**
	 * @param {?} viewDef
	 * @param {?} nodeIndex
	 * @return {?}
	 */
	function getRenderNodeIndex(viewDef$$1, nodeIndex) {
	    var /** @type {?} */ renderNodeIndex = -1;
	    for (var /** @type {?} */ i = 0; i <= nodeIndex; i++) {
	        var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];
	        if (nodeDef.flags & 3 /* CatRenderNode */) {
	            renderNodeIndex++;
	        }
	    }
	    return renderNodeIndex;
	}
	/**
	 * @param {?} view
	 * @return {?}
	 */
	function findHostElement(view) {
	    while (view && !isComponentView(view)) {
	        view = view.parent;
	    }
	    if (view.parent) {
	        return asElementData(view.parent, viewParentEl(view).index);
	    }
	    return undefined;
	}
	/**
	 * @param {?} view
	 * @param {?} nodeDef
	 * @param {?} references
	 * @return {?}
	 */
	function collectReferences(view, nodeDef, references) {
	    for (var /** @type {?} */ refName in nodeDef.references) {
	        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
	    }
	}
	/**
	 * @param {?} action
	 * @param {?} fn
	 * @param {?} self
	 * @param {?} args
	 * @return {?}
	 */
	function callWithDebugContext(action, fn, self, args) {
	    var /** @type {?} */ oldAction = _currentAction;
	    var /** @type {?} */ oldView = _currentView;
	    var /** @type {?} */ oldNodeIndex = _currentNodeIndex;
	    try {
	        _currentAction = action;
	        var /** @type {?} */ result = fn.apply(self, args);
	        _currentView = oldView;
	        _currentNodeIndex = oldNodeIndex;
	        _currentAction = oldAction;
	        return result;
	    }
	    catch (e) {
	        if (isViewDebugError(e) || !_currentView) {
	            throw e;
	        }
	        _currentView.state |= 4 /* Errored */;
	        throw viewWrappedDebugError(e, getCurrentDebugContext());
	    }
	}
	/**
	 * @return {?}
	 */
	function getCurrentDebugContext() {
	    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
	}
	var DebugRendererFactory2 = (function () {
	    /**
	     * @param {?} delegate
	     */
	    function DebugRendererFactory2(delegate) {
	        this.delegate = delegate;
	    }
	    /**
	     * @param {?} element
	     * @param {?} renderData
	     * @return {?}
	     */
	    DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {
	        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
	    };
	    return DebugRendererFactory2;
	}());
	var DebugRenderer2 = (function () {
	    /**
	     * @param {?} delegate
	     */
	    function DebugRenderer2(delegate) {
	        this.delegate = delegate;
	    }
	    Object.defineProperty(DebugRenderer2.prototype, "data", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.delegate.data; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DebugRenderer2.prototype.destroyNode = function (node) {
	        removeDebugNodeFromIndex(getDebugNode(node));
	        if (this.delegate.destroyNode) {
	            this.delegate.destroyNode(node);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };
	    /**
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DebugRenderer2.prototype.createElement = function (name, namespace) {
	        var /** @type {?} */ el = this.delegate.createElement(name, namespace);
	        var /** @type {?} */ debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            var /** @type {?} */ debugEl = new DebugElement(el, null, debugCtx);
	            debugEl.name = name;
	            indexDebugNode(debugEl);
	        }
	        return el;
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DebugRenderer2.prototype.createComment = function (value) {
	        var /** @type {?} */ comment = this.delegate.createComment(value);
	        var /** @type {?} */ debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugNode(comment, null, debugCtx));
	        }
	        return comment;
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DebugRenderer2.prototype.createText = function (value) {
	        var /** @type {?} */ text = this.delegate.createText(value);
	        var /** @type {?} */ debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugNode(text, null, debugCtx));
	        }
	        return text;
	    };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @return {?}
	     */
	    DebugRenderer2.prototype.appendChild = function (parent, newChild) {
	        var /** @type {?} */ debugEl = getDebugNode(parent);
	        var /** @type {?} */ debugChildEl = getDebugNode(newChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
	            debugEl.addChild(debugChildEl);
	        }
	        this.delegate.appendChild(parent, newChild);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @param {?} refChild
	     * @return {?}
	     */
	    DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
	        var /** @type {?} */ debugEl = getDebugNode(parent);
	        var /** @type {?} */ debugChildEl = getDebugNode(newChild);
	        var /** @type {?} */ debugRefEl = getDebugNode(refChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
	            debugEl.insertBefore(debugRefEl, debugChildEl);
	        }
	        this.delegate.insertBefore(parent, newChild, refChild);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} oldChild
	     * @return {?}
	     */
	    DebugRenderer2.prototype.removeChild = function (parent, oldChild) {
	        var /** @type {?} */ debugEl = getDebugNode(parent);
	        var /** @type {?} */ debugChildEl = getDebugNode(oldChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
	            debugEl.removeChild(debugChildEl);
	        }
	        this.delegate.removeChild(parent, oldChild);
	    };
	    /**
	     * @param {?} selectorOrNode
	     * @return {?}
	     */
	    DebugRenderer2.prototype.selectRootElement = function (selectorOrNode) {
	        var /** @type {?} */ el = this.delegate.selectRootElement(selectorOrNode);
	        var /** @type {?} */ debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugElement(el, null, debugCtx));
	        }
	        return el;
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;
	            debugEl.attributes[fullName] = value;
	        }
	        this.delegate.setAttribute(el, name, value, namespace);
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;
	            debugEl.attributes[fullName] = null;
	        }
	        this.delegate.removeAttribute(el, name, namespace);
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DebugRenderer2.prototype.addClass = function (el, name) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.classes[name] = true;
	        }
	        this.delegate.addClass(el, name);
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DebugRenderer2.prototype.removeClass = function (el, name) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.classes[name] = false;
	        }
	        this.delegate.removeClass(el, name);
	    };
	    /**
	     * @param {?} el
	     * @param {?} style
	     * @param {?} value
	     * @param {?} flags
	     * @return {?}
	     */
	    DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.styles[style] = value;
	        }
	        this.delegate.setStyle(el, style, value, flags);
	    };
	    /**
	     * @param {?} el
	     * @param {?} style
	     * @param {?} flags
	     * @return {?}
	     */
	    DebugRenderer2.prototype.removeStyle = function (el, style, flags) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.styles[style] = null;
	        }
	        this.delegate.removeStyle(el, style, flags);
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DebugRenderer2.prototype.setProperty = function (el, name, value) {
	        var /** @type {?} */ debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.properties[name] = value;
	        }
	        this.delegate.setProperty(el, name, value);
	    };
	    /**
	     * @param {?} target
	     * @param {?} eventName
	     * @param {?} callback
	     * @return {?}
	     */
	    DebugRenderer2.prototype.listen = function (target, eventName, callback) {
	        if (typeof target !== 'string') {
	            var /** @type {?} */ debugEl = getDebugNode(target);
	            if (debugEl) {
	                debugEl.listeners.push(new EventListener(eventName, callback));
	            }
	        }
	        return this.delegate.listen(target, eventName, callback);
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };
	    /**
	     * @param {?} node
	     * @param {?} value
	     * @return {?}
	     */
	    DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };
	    return DebugRenderer2;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @return {?}
	 */
	function _iterableDiffersFactory() {
	    return defaultIterableDiffers;
	}
	/**
	 * @return {?}
	 */
	function _keyValueDiffersFactory() {
	    return defaultKeyValueDiffers;
	}
	/**
	 * @param {?=} locale
	 * @return {?}
	 */
	function _localeFactory(locale) {
	    return locale || 'en-US';
	}
	/**
	 * @return {?}
	 */
	function _initViewEngine() {
	    initServicesIfNeeded();
	}
	/**
	 * This module includes the providers of \@angular/core that are needed
	 * to bootstrap components via `ApplicationRef`.
	 *
	 * \@experimental
	 */
	var ApplicationModule = (function () {
	    /**
	     * @param {?} appRef
	     */
	    function ApplicationModule(appRef) {
	    }
	    return ApplicationModule;
	}());
	ApplicationModule.decorators = [
	    { type: NgModule, args: [{
	                providers: [
	                    ApplicationRef_,
	                    { provide: ApplicationRef, useExisting: ApplicationRef_ },
	                    ApplicationInitStatus,
	                    Compiler,
	                    APP_ID_RANDOM_PROVIDER,
	                    { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
	                    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
	                    {
	                        provide: LOCALE_ID,
	                        useFactory: _localeFactory,
	                        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
	                    },
	                    { provide: APP_INITIALIZER, useValue: _initViewEngine, multi: true },
	                ]
	            },] },
	];
	/**
	 * @nocollapse
	 */
	ApplicationModule.ctorParameters = function () { return [
	    { type: ApplicationRef, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var LifecycleHooks = {};
	LifecycleHooks.OnInit = 0;
	LifecycleHooks.OnDestroy = 1;
	LifecycleHooks.DoCheck = 2;
	LifecycleHooks.OnChanges = 3;
	LifecycleHooks.AfterContentInit = 4;
	LifecycleHooks.AfterContentChecked = 5;
	LifecycleHooks.AfterViewInit = 6;
	LifecycleHooks.AfterViewChecked = 7;
	LifecycleHooks[LifecycleHooks.OnInit] = "OnInit";
	LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy";
	LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck";
	LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges";
	LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit";
	LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked";
	LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit";
	LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked";
	var LIFECYCLE_HOOKS_VALUES = [
	    LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,
	    LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,
	    LifecycleHooks.AfterViewChecked
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@experimental Animation support is experimental.
	 */
	/**
	 * `trigger` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `trigger` Creates an animation trigger which will a list of {\@link state state} and {\@link
	 * transition transition} entries that will be evaluated when the expression bound to the trigger
	 * changes.
	 *
	 * Triggers are registered within the component annotation data under the {\@link
	 * Component#animations-anchor animations section}. An animation trigger can be placed on an element
	 * within a template by referencing the name of the trigger followed by the expression value that the
	 * trigger is bound to (in the form of `[\@triggerName]="expression"`.
	 *
	 * ### Usage
	 *
	 * `trigger` will create an animation trigger reference based on the provided `name` value. The
	 * provided `animation` value is expected to be an array consisting of {\@link state state} and {\@link
	 * transition transition} declarations.
	 *
	 * ```typescript
	 * \@Component({
	 *   selector: 'my-component',
	 *   templateUrl: 'my-component-tpl.html',
	 *   animations: [
	 *     trigger("myAnimationTrigger", [
	 *       state(...),
	 *       state(...),
	 *       transition(...),
	 *       transition(...)
	 *     ])
	 *   ]
	 * })
	 * class MyComponent {
	 *   myStatusExp = "something";
	 * }
	 * ```
	 *
	 * The template associated with this component will make use of the `myAnimationTrigger` animation
	 * trigger by binding to an element within its template code.
	 *
	 * ```html
	 * <!-- somewhere inside of my-component-tpl.html -->
	 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
	 * tools/gulp-tasks/validate-commit-message.js ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} name
	 * @param {?} definitions
	 * @return {?}
	 */
	function trigger$1(name, definitions) {
	    return { name: name, definitions: definitions };
	}
	/**
	 * `animate` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `animate` specifies an animation step that will apply the provided `styles` data for a given
	 * amount of time based on the provided `timing` expression value. Calls to `animate` are expected
	 * to be used within {\@link sequence an animation sequence}, {\@link group group}, or {\@link
	 * transition transition}.
	 *
	 * ### Usage
	 *
	 * The `animate` function accepts two input parameters: `timing` and `styles`:
	 *
	 * - `timing` is a string based value that can be a combination of a duration with optional delay
	 * and easing values. The format for the expression breaks down to `duration delay easing`
	 * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
	 * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the
	 * `duration` value in millisecond form.
	 * - `styles` is the style input data which can either be a call to {\@link style style} or {\@link
	 * keyframes keyframes}. If left empty then the styles from the destination state will be collected
	 * and used (this is useful when describing an animation step that will complete an animation by
	 * {\@link transition#the-final-animate-call animating to the final state}).
	 *
	 * ```typescript
	 * // various functions for specifying timing data
	 * animate(500, style(...))
	 * animate("1s", style(...))
	 * animate("100ms 0.5s", style(...))
	 * animate("5s ease", style(...))
	 * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
	 *
	 * // either style() of keyframes() can be used
	 * animate(500, style({ background: "red" }))
	 * animate(500, keyframes([
	 *   style({ background: "blue" })),
	 *   style({ background: "red" }))
	 * ])
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} timings
	 * @param {?=} styles
	 * @return {?}
	 */
	function animate$1(timings, styles) {
	    if (styles === void 0) { styles = null; }
	    return { type: 4 /* Animate */, styles: styles, timings: timings };
	}
	/**
	 * `group` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are
	 * useful when a series of styles must be animated/closed off at different statrting/ending times.
	 *
	 * The `group` function can either be used within a {\@link sequence sequence} or a {\@link transition
	 * transition} and it will only continue to the next instruction once all of the inner animation
	 * steps have completed.
	 *
	 * ### Usage
	 *
	 * The `steps` data that is passed into the `group` animation function can either consist of {\@link
	 * style style} or {\@link animate animate} function calls. Each call to `style()` or `animate()`
	 * within a group will be executed instantly (use {\@link keyframes keyframes} or a {\@link
	 * animate#usage animate() with a delay value} to offset styles to be applied at a later time).
	 *
	 * ```typescript
	 * group([
	 *   animate("1s", { background: "black" }))
	 *   animate("2s", { color: "white" }))
	 * ])
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} steps
	 * @return {?}
	 */
	function group$1(steps) {
	    return { type: 3 /* Group */, steps: steps };
	}
	/**
	 * `sequence` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by
	 * default when an array is passed as animation data into {\@link transition transition}.)
	 *
	 * The `sequence` function can either be used within a {\@link group group} or a {\@link transition
	 * transition} and it will only continue to the next instruction once each of the inner animation
	 * steps have completed.
	 *
	 * To perform animation styling in parallel with other animation steps then have a look at the
	 * {\@link group group} animation function.
	 *
	 * ### Usage
	 *
	 * The `steps` data that is passed into the `sequence` animation function can either consist of
	 * {\@link style style} or {\@link animate animate} function calls. A call to `style()` will apply the
	 * provided styling data immediately while a call to `animate()` will apply its styling data over a
	 * given time depending on its timing data.
	 *
	 * ```typescript
	 * sequence([
	 *   style({ opacity: 0 })),
	 *   animate("1s", { opacity: 1 }))
	 * ])
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} steps
	 * @return {?}
	 */
	function sequence$1(steps) {
	    return { type: 2 /* Sequence */, steps: steps };
	}
	/**
	 * `style` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `style` declares a key/value object containing CSS properties/styles that can then be used for
	 * {\@link state animation states}, within an {\@link sequence animation sequence}, or as styling data
	 * for both {\@link animate animate} and {\@link keyframes keyframes}.
	 *
	 * ### Usage
	 *
	 * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs
	 * to be defined.
	 *
	 * ```typescript
	 * // string values are used for css properties
	 * style({ background: "red", color: "blue" })
	 *
	 * // numerical (pixel) values are also supported
	 * style({ width: 100, height: 0 })
	 * ```
	 *
	 * #### Auto-styles (using `*`)
	 *
	 * When an asterix (`*`) character is used as a value then it will be detected from the element
	 * being animated and applied as animation data when the animation starts.
	 *
	 * This feature proves useful for a state depending on layout and/or environment factors; in such
	 * cases the styles are calculated just before the animation starts.
	 *
	 * ```typescript
	 * // the steps below will animate from 0 to the
	 * // actual height of the element
	 * style({ height: 0 }),
	 * animate("1s", style({ height: "*" }))
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} tokens
	 * @return {?}
	 */
	function style$1(tokens) {
	    return { type: 6 /* Style */, styles: tokens };
	}
	/**
	 * `state` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `state` declares an animation state within the given trigger. When a state is active within a
	 * component then its associated styles will persist on the element that the trigger is attached to
	 * (even when the animation ends).
	 *
	 * To animate between states, have a look at the animation {\@link transition transition} DSL
	 * function. To register states to an animation trigger please have a look at the {\@link trigger
	 * trigger} function.
	 *
	 * #### The `void` state
	 *
	 * The `void` state value is a reserved word that angular uses to determine when the element is not
	 * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
	 * associated element is void).
	 *
	 * #### The `*` (default) state
	 *
	 * The `*` state (when styled) is a fallback state that will be used if the state that is being
	 * animated is not declared within the trigger.
	 *
	 * ### Usage
	 *
	 * `state` will declare an animation state with its associated styles
	 * within the given trigger.
	 *
	 * - `stateNameExpr` can be one or more state names separated by commas.
	 * - `styles` refers to the {\@link style styling data} that will be persisted on the element once
	 * the state has been reached.
	 *
	 * ```typescript
	 * // "void" is a reserved name for a state and is used to represent
	 * // the state in which an element is detached from from the application.
	 * state("void", style({ height: 0 }))
	 *
	 * // user-defined states
	 * state("closed", style({ height: 0 }))
	 * state("open, visible", style({ height: "*" }))
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} name
	 * @param {?} styles
	 * @return {?}
	 */
	function state$1(name, styles) {
	    return { type: 0 /* State */, name: name, styles: styles };
	}
	/**
	 * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `keyframes` specifies a collection of {\@link style style} entries each optionally characterized
	 * by an `offset` value.
	 *
	 * ### Usage
	 *
	 * The `keyframes` animation function is designed to be used alongside the {\@link animate animate}
	 * animation function. Instead of applying animations from where they are currently to their
	 * destination, keyframes can describe how each style entry is applied and at what point within the
	 * animation arc (much like CSS Keyframe Animations do).
	 *
	 * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what
	 * percentage of the animate time the styles will be applied.
	 *
	 * ```typescript
	 * // the provided offset values describe when each backgroundColor value is applied.
	 * animate("5s", keyframes([
	 *   style({ backgroundColor: "red", offset: 0 }),
	 *   style({ backgroundColor: "blue", offset: 0.2 }),
	 *   style({ backgroundColor: "orange", offset: 0.3 }),
	 *   style({ backgroundColor: "black", offset: 1 })
	 * ]))
	 * ```
	 *
	 * Alternatively, if there are no `offset` values used within the style entries then the offsets
	 * will be calculated automatically.
	 *
	 * ```typescript
	 * animate("5s", keyframes([
	 *   style({ backgroundColor: "red" }) // offset = 0
	 *   style({ backgroundColor: "blue" }) // offset = 0.33
	 *   style({ backgroundColor: "orange" }) // offset = 0.66
	 *   style({ backgroundColor: "black" }) // offset = 1
	 * ]))
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} steps
	 * @return {?}
	 */
	function keyframes$1(steps) {
	    return { type: 5 /* KeyframeSequence */, steps: steps };
	}
	/**
	 * `transition` is an animation-specific function that is designed to be used inside of Angular2's
	 * animation DSL language. If this information is new, please navigate to the {\@link
	 * Component#animations-anchor component animations metadata page} to gain a better understanding of
	 * how animations in Angular2 are used.
	 *
	 * `transition` declares the {\@link sequence sequence of animation steps} that will be run when the
	 * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>
	 * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting
	 * and/or ending state).
	 *
	 * A function can also be provided as the `stateChangeExpr` argument for a transition and this
	 * function will be executed each time a state change occurs. If the value returned within the
	 * function is true then the associated animation will be run.
	 *
	 * Animation transitions are placed within an {\@link trigger animation trigger}. For an transition
	 * to animate to a state value and persist its styles then one or more {\@link state animation
	 * states} is expected to be defined.
	 *
	 * ### Usage
	 *
	 * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
	 * what the previous state is and what the current state has become. In other words, if a transition
	 * is defined that matches the old/current state criteria then the associated animation will be
	 * triggered.
	 *
	 * ```typescript
	 * // all transition/state changes are defined within an animation trigger
	 * trigger("myAnimationTrigger", [
	 *   // if a state is defined then its styles will be persisted when the
	 *   // animation has fully completed itself
	 *   state("on", style({ background: "green" })),
	 *   state("off", style({ background: "grey" })),
	 *
	 *   // a transition animation that will be kicked off when the state value
	 *   // bound to "myAnimationTrigger" changes from "on" to "off"
	 *   transition("on => off", animate(500)),
	 *
	 *   // it is also possible to do run the same animation for both directions
	 *   transition("on <=> off", animate(500)),
	 *
	 *   // or to define multiple states pairs separated by commas
	 *   transition("on => off, off => void", animate(500)),
	 *
	 *   // this is a catch-all state change for when an element is inserted into
	 *   // the page and the destination state is unknown
	 *   transition("void => *", [
	 *     style({ opacity: 0 }),
	 *     animate(500)
	 *   ]),
	 *
	 *   // this will capture a state change between any states
	 *   transition("* => *", animate("1s 0s")),
	 *
	 *   // you can also go full out and include a function
	 *   transition((fromState, toState) => {
	 *     // when `true` then it will allow the animation below to be invoked
	 *     return fromState == "off" && toState == "on";
	 *   }, animate("1s 0s"))
	 * ])
	 * ```
	 *
	 * The template associated with this component will make use of the `myAnimationTrigger` animation
	 * trigger by binding to an element within its template code.
	 *
	 * ```html
	 * <!-- somewhere inside of my-component-tpl.html -->
	 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
	 * ```
	 *
	 * #### The final `animate` call
	 *
	 * If the final step within the transition steps is a call to `animate()` that **only** uses a
	 * timing value with **no style data** then it will be automatically used as the final animation arc
	 * for the element to animate itself to the final state. This involves an automatic mix of
	 * adding/removing CSS styles so that the element will be in the exact state it should be for the
	 * applied state to be presented correctly.
	 *
	 * ```
	 * // start off by hiding the element, but make sure that it animates properly to whatever state
	 * // is currently active for "myAnimationTrigger"
	 * transition("void => *", [
	 *   style({ opacity: 0 }),
	 *   animate(500)
	 * ])
	 * ```
	 *
	 * ### Transition Aliases (`:enter` and `:leave`)
	 *
	 * Given that enter (insertion) and leave (removal) animations are so common, the `transition`
	 * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*
	 * => void` state changes.
	 *
	 * ```
	 * transition(":enter", [
	 *   style({ opacity: 0 }),
	 *   animate(500, style({ opacity: 1 }))
	 * ])
	 * transition(":leave", [
	 *   animate(500, style({ opacity: 0 }))
	 * ])
	 * ```
	 *
	 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	 *
	 * \@experimental Animation support is experimental.
	 * @param {?} stateChangeExpr
	 * @param {?} steps
	 * @return {?}
	 */
	function transition$1(stateChangeExpr, steps) {
	    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps };
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 */
	var AUTO_STYLE$$1 = '*';
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} name
	 * @param {?} definitions
	 * @return {?}
	 */
	function trigger$$1(name, definitions) {
	    return trigger$1(name, definitions);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} timings
	 * @param {?=} styles
	 * @return {?}
	 */
	function animate$$1(timings, styles) {
	    if (styles === void 0) { styles = null; }
	    return animate$1(timings, styles);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} steps
	 * @return {?}
	 */
	function group$$1(steps) {
	    return group$1(steps);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} steps
	 * @return {?}
	 */
	function sequence$$1(steps) {
	    return sequence$1(steps);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} tokens
	 * @return {?}
	 */
	function style$$1(tokens) {
	    return style$1(tokens);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} name
	 * @param {?} styles
	 * @return {?}
	 */
	function state$$1(name, styles) {
	    return state$1(name, styles);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} steps
	 * @return {?}
	 */
	function keyframes$$1(steps) {
	    return keyframes$1(steps);
	}
	/**
	 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
	 * @param {?} stateChangeExpr
	 * @param {?} steps
	 * @return {?}
	 */
	function transition$$1(stateChangeExpr, steps) {
	    return transition$1(stateChangeExpr, steps);
	}
	
	exports.Class = Class;
	exports.createPlatform = createPlatform;
	exports.assertPlatform = assertPlatform;
	exports.destroyPlatform = destroyPlatform;
	exports.getPlatform = getPlatform;
	exports.PlatformRef = PlatformRef;
	exports.ApplicationRef = ApplicationRef;
	exports.enableProdMode = enableProdMode;
	exports.isDevMode = isDevMode;
	exports.createPlatformFactory = createPlatformFactory;
	exports.NgProbeToken = NgProbeToken;
	exports.APP_ID = APP_ID;
	exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
	exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
	exports.PLATFORM_ID = PLATFORM_ID;
	exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
	exports.APP_INITIALIZER = APP_INITIALIZER;
	exports.ApplicationInitStatus = ApplicationInitStatus;
	exports.DebugElement = DebugElement;
	exports.DebugNode = DebugNode;
	exports.asNativeElements = asNativeElements;
	exports.getDebugNode = getDebugNode;
	exports.Testability = Testability;
	exports.TestabilityRegistry = TestabilityRegistry;
	exports.setTestabilityGetter = setTestabilityGetter;
	exports.TRANSLATIONS = TRANSLATIONS;
	exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
	exports.LOCALE_ID = LOCALE_ID;
	exports.MissingTranslationStrategy = MissingTranslationStrategy;
	exports.ApplicationModule = ApplicationModule;
	exports.wtfCreateScope = wtfCreateScope;
	exports.wtfLeave = wtfLeave;
	exports.wtfStartTimeRange = wtfStartTimeRange;
	exports.wtfEndTimeRange = wtfEndTimeRange;
	exports.Type = Type;
	exports.EventEmitter = EventEmitter;
	exports.ErrorHandler = ErrorHandler;
	exports.Sanitizer = Sanitizer;
	exports.SecurityContext = SecurityContext;
	exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
	exports.Attribute = Attribute;
	exports.ContentChild = ContentChild;
	exports.ContentChildren = ContentChildren;
	exports.Query = Query;
	exports.ViewChild = ViewChild;
	exports.ViewChildren = ViewChildren;
	exports.Component = Component;
	exports.Directive = Directive;
	exports.HostBinding = HostBinding;
	exports.HostListener = HostListener;
	exports.Input = Input;
	exports.Output = Output;
	exports.Pipe = Pipe;
	exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
	exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
	exports.NgModule = NgModule;
	exports.ViewEncapsulation = ViewEncapsulation;
	exports.Version = Version;
	exports.VERSION = VERSION;
	exports.forwardRef = forwardRef;
	exports.resolveForwardRef = resolveForwardRef;
	exports.Injector = Injector;
	exports.ReflectiveInjector = ReflectiveInjector;
	exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
	exports.ReflectiveKey = ReflectiveKey;
	exports.InjectionToken = InjectionToken;
	exports.OpaqueToken = OpaqueToken;
	exports.Inject = Inject;
	exports.Optional = Optional;
	exports.Injectable = Injectable;
	exports.Self = Self;
	exports.SkipSelf = SkipSelf;
	exports.Host = Host;
	exports.NgZone = NgZone;
	exports.RenderComponentType = RenderComponentType;
	exports.Renderer = Renderer;
	exports.Renderer2 = Renderer2;
	exports.RendererFactory2 = RendererFactory2;
	exports.RendererStyleFlags2 = RendererStyleFlags2;
	exports.RootRenderer = RootRenderer;
	exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
	exports.Compiler = Compiler;
	exports.CompilerFactory = CompilerFactory;
	exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
	exports.ComponentFactory = ComponentFactory;
	exports.ComponentRef = ComponentRef;
	exports.ComponentFactoryResolver = ComponentFactoryResolver;
	exports.ElementRef = ElementRef;
	exports.NgModuleFactory = NgModuleFactory;
	exports.NgModuleRef = NgModuleRef;
	exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
	exports.getModuleFactory = getModuleFactory;
	exports.QueryList = QueryList;
	exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
	exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
	exports.TemplateRef = TemplateRef;
	exports.ViewContainerRef = ViewContainerRef;
	exports.EmbeddedViewRef = EmbeddedViewRef;
	exports.ViewRef = ViewRef;
	exports.ChangeDetectionStrategy = ChangeDetectionStrategy;
	exports.ChangeDetectorRef = ChangeDetectorRef;
	exports.DefaultIterableDiffer = DefaultIterableDiffer;
	exports.IterableDiffers = IterableDiffers;
	exports.KeyValueDiffers = KeyValueDiffers;
	exports.SimpleChange = SimpleChange;
	exports.WrappedValue = WrappedValue;
	exports.platformCore = platformCore;
	exports.ɵALLOW_MULTIPLE_PLATFORMS = ALLOW_MULTIPLE_PLATFORMS;
	exports.ɵAPP_ID_RANDOM_PROVIDER = APP_ID_RANDOM_PROVIDER;
	exports.ɵValueUnwrapper = ValueUnwrapper;
	exports.ɵdevModeEqual = devModeEqual;
	exports.ɵisListLikeIterable = isListLikeIterable;
	exports.ɵChangeDetectorStatus = ChangeDetectorStatus;
	exports.ɵisDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;
	exports.ɵConsole = Console;
	exports.ɵERROR_COMPONENT_TYPE = ERROR_COMPONENT_TYPE;
	exports.ɵComponentFactory = ComponentFactory;
	exports.ɵCodegenComponentFactoryResolver = CodegenComponentFactoryResolver;
	exports.ɵLIFECYCLE_HOOKS_VALUES = LIFECYCLE_HOOKS_VALUES;
	exports.ɵLifecycleHooks = LifecycleHooks;
	exports.ɵViewMetadata = ViewMetadata;
	exports.ɵReflector = Reflector;
	exports.ɵreflector = reflector;
	exports.ɵReflectionCapabilities = ReflectionCapabilities;
	exports.ɵReflectorReader = ReflectorReader;
	exports.ɵRenderDebugInfo = RenderDebugInfo;
	exports.ɵglobal = _global;
	exports.ɵlooseIdentical = looseIdentical;
	exports.ɵstringify = stringify;
	exports.ɵmakeDecorator = makeDecorator;
	exports.ɵisObservable = isObservable;
	exports.ɵisPromise = isPromise;
	exports.ɵmerge = merge$1;
	exports.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR;
	exports.ɵNgModuleInjector = NgModuleInjector;
	exports.ɵregisterModuleFactory = registerModuleFactory;
	exports.ɵEMPTY_ARRAY = EMPTY_ARRAY;
	exports.ɵEMPTY_MAP = EMPTY_MAP;
	exports.ɵand = anchorDef;
	exports.ɵccf = createComponentFactory;
	exports.ɵcrt = createRendererType2;
	exports.ɵdid = directiveDef;
	exports.ɵeld = elementDef;
	exports.ɵelementEventFullName = elementEventFullName;
	exports.ɵgetComponentViewDefinitionFactory = getComponentViewDefinitionFactory;
	exports.ɵinlineInterpolate = inlineInterpolate;
	exports.ɵinterpolate = interpolate;
	exports.ɵncd = ngContentDef;
	exports.ɵnov = nodeValue;
	exports.ɵpid = pipeDef;
	exports.ɵprd = providerDef;
	exports.ɵpad = pureArrayDef;
	exports.ɵpod = pureObjectDef;
	exports.ɵppd = purePipeDef;
	exports.ɵqud = queryDef;
	exports.ɵted = textDef;
	exports.ɵunv = unwrapValue;
	exports.ɵvid = viewDef;
	exports.AUTO_STYLE = AUTO_STYLE$$1;
	exports.trigger = trigger$$1;
	exports.animate = animate$$1;
	exports.group = group$$1;
	exports.sequence = sequence$$1;
	exports.style = style$$1;
	exports.state = state$$1;
	exports.keyframes = keyframes$$1;
	exports.transition = transition$$1;
	exports.ɵba = animate$1;
	exports.ɵbb = group$1;
	exports.ɵbf = keyframes$1;
	exports.ɵbc = sequence$1;
	exports.ɵbe = state$1;
	exports.ɵbd = style$1;
	exports.ɵbg = transition$1;
	exports.ɵz = trigger$1;
	exports.ɵo = _initViewEngine;
	exports.ɵl = _iterableDiffersFactory;
	exports.ɵm = _keyValueDiffersFactory;
	exports.ɵn = _localeFactory;
	exports.ɵf = ApplicationRef_;
	exports.ɵg = _appIdRandomProviderFactory;
	exports.ɵh = defaultIterableDiffers;
	exports.ɵi = defaultKeyValueDiffers;
	exports.ɵj = DefaultIterableDifferFactory;
	exports.ɵk = DefaultKeyValueDifferFactory;
	exports.ɵc = ReflectiveInjector_;
	exports.ɵd = ReflectiveDependency;
	exports.ɵe = resolveReflectiveProviders;
	exports.ɵp = wtfEnabled;
	exports.ɵr = createScope$1;
	exports.ɵq = detectWTF;
	exports.ɵu = endTimeRange;
	exports.ɵs = leave;
	exports.ɵt = startTimeRange;
	exports.ɵa = makeParamDecorator;
	exports.ɵb = makePropDecorator;
	exports.ɵw = _def;
	exports.ɵx = DebugContext;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));
	//# sourceMappingURL=core.umd.js.map
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(487), __webpack_require__(485)) :
		typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}),global.ng.common,global.ng.core));
	}(this, (function (exports,_angular_common,_angular_core) { 'use strict';
	
	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _DOM = null;
	/**
	 * @return {?}
	 */
	function getDOM() {
	    return _DOM;
	}
	/**
	 * @param {?} adapter
	 * @return {?}
	 */
	/**
	 * @param {?} adapter
	 * @return {?}
	 */
	function setRootDomAdapter(adapter) {
	    if (!_DOM) {
	        _DOM = adapter;
	    }
	}
	/**
	 * Provides DOM operations in an environment-agnostic way.
	 *
	 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
	 * can introduce XSS risks.
	 * @abstract
	 */
	var DomAdapter = (function () {
	    function DomAdapter() {
	        this.resourceLoaderType = null;
	    }
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.hasProperty = function (element, name) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setProperty = function (el, name, value) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getProperty = function (el, name) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} methodName
	     * @param {?} args
	     * @return {?}
	     */
	    DomAdapter.prototype.invoke = function (el, methodName, args) { };
	    /**
	     * @abstract
	     * @param {?} error
	     * @return {?}
	     */
	    DomAdapter.prototype.logError = function (error) { };
	    /**
	     * @abstract
	     * @param {?} error
	     * @return {?}
	     */
	    DomAdapter.prototype.log = function (error) { };
	    /**
	     * @abstract
	     * @param {?} error
	     * @return {?}
	     */
	    DomAdapter.prototype.logGroup = function (error) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.logGroupEnd = function () { };
	    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
	        /**
	         * Maps attribute names to their corresponding property names for cases
	         * where attribute name doesn't match property name.
	         * @return {?}
	         */
	        get: function () { return this._attrToPropMap; },
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        set: function (value) { this._attrToPropMap = value; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    
	    /**
	     * @abstract
	     * @param {?} nodeA
	     * @param {?} nodeB
	     * @return {?}
	     */
	    DomAdapter.prototype.contains = function (nodeA, nodeB) { };
	    /**
	     * @abstract
	     * @param {?} templateHtml
	     * @return {?}
	     */
	    DomAdapter.prototype.parse = function (templateHtml) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} selector
	     * @return {?}
	     */
	    DomAdapter.prototype.querySelector = function (el, selector) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} selector
	     * @return {?}
	     */
	    DomAdapter.prototype.querySelectorAll = function (el, selector) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} evt
	     * @param {?} listener
	     * @return {?}
	     */
	    DomAdapter.prototype.on = function (el, evt, listener) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} evt
	     * @param {?} listener
	     * @return {?}
	     */
	    DomAdapter.prototype.onAndCancel = function (el, evt, listener) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} evt
	     * @return {?}
	     */
	    DomAdapter.prototype.dispatchEvent = function (el, evt) { };
	    /**
	     * @abstract
	     * @param {?} eventType
	     * @return {?}
	     */
	    DomAdapter.prototype.createMouseEvent = function (eventType) { };
	    /**
	     * @abstract
	     * @param {?} eventType
	     * @return {?}
	     */
	    DomAdapter.prototype.createEvent = function (eventType) { };
	    /**
	     * @abstract
	     * @param {?} evt
	     * @return {?}
	     */
	    DomAdapter.prototype.preventDefault = function (evt) { };
	    /**
	     * @abstract
	     * @param {?} evt
	     * @return {?}
	     */
	    DomAdapter.prototype.isPrevented = function (evt) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getInnerHTML = function (el) { };
	    /**
	     * Returns content if el is a <template> element, null otherwise.
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getTemplateContent = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getOuterHTML = function (el) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.nodeName = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.nodeValue = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.type = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.content = function (node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.firstChild = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.nextSibling = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.parentElement = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.childNodes = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.childNodesAsList = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.clearNodes = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.appendChild = function (el, node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.removeChild = function (el, node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} newNode
	     * @param {?} oldNode
	     * @return {?}
	     */
	    DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.remove = function (el) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.insertBefore = function (parent, ref, node) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} nodes
	     * @return {?}
	     */
	    DomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) { };
	    /**
	     * @abstract
	     * @param {?} parent
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.insertAfter = function (parent, el, node) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setInnerHTML = function (el, value) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getText = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setText = function (el, value) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getValue = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setValue = function (el, value) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getChecked = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setChecked = function (el, value) { };
	    /**
	     * @abstract
	     * @param {?} text
	     * @return {?}
	     */
	    DomAdapter.prototype.createComment = function (text) { };
	    /**
	     * @abstract
	     * @param {?} html
	     * @return {?}
	     */
	    DomAdapter.prototype.createTemplate = function (html) { };
	    /**
	     * @abstract
	     * @param {?} tagName
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createElement = function (tagName, doc) { };
	    /**
	     * @abstract
	     * @param {?} ns
	     * @param {?} tagName
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };
	    /**
	     * @abstract
	     * @param {?} text
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createTextNode = function (text, doc) { };
	    /**
	     * @abstract
	     * @param {?} attrName
	     * @param {?} attrValue
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };
	    /**
	     * @abstract
	     * @param {?} css
	     * @param {?=} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.createStyleElement = function (css, doc) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.createShadowRoot = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getShadowRoot = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getHost = function (el) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getDistributedNodes = function (el) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.clone /*<T extends Node>*/ = function (node) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getElementsByClassName = function (element, name) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getElementsByTagName = function (element, name) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.classList = function (element) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    DomAdapter.prototype.addClass = function (element, className) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    DomAdapter.prototype.removeClass = function (element, className) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    DomAdapter.prototype.hasClass = function (element, className) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} styleName
	     * @param {?} styleValue
	     * @return {?}
	     */
	    DomAdapter.prototype.setStyle = function (element, styleName, styleValue) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} styleName
	     * @return {?}
	     */
	    DomAdapter.prototype.removeStyle = function (element, styleName) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} styleName
	     * @return {?}
	     */
	    DomAdapter.prototype.getStyle = function (element, styleName) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} styleName
	     * @param {?=} styleValue
	     * @return {?}
	     */
	    DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.tagName = function (element) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.attributeMap = function (element) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.hasAttribute = function (element, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.getAttribute = function (element, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setAttribute = function (element, name, value) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setAttributeNS = function (element, ns, name, value) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.removeAttribute = function (element, attribute) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} attribute
	     * @return {?}
	     */
	    DomAdapter.prototype.removeAttributeNS = function (element, ns, attribute) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.templateAwareRoot = function (el) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.createHtmlDocument = function () { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.getBoundingClientRect = function (el) { };
	    /**
	     * @abstract
	     * @param {?} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.getTitle = function (doc) { };
	    /**
	     * @abstract
	     * @param {?} doc
	     * @param {?} newTitle
	     * @return {?}
	     */
	    DomAdapter.prototype.setTitle = function (doc, newTitle) { };
	    /**
	     * @abstract
	     * @param {?} n
	     * @param {?} selector
	     * @return {?}
	     */
	    DomAdapter.prototype.elementMatches = function (n, selector) { };
	    /**
	     * @abstract
	     * @param {?} el
	     * @return {?}
	     */
	    DomAdapter.prototype.isTemplateElement = function (el) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.isTextNode = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.isCommentNode = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.isElementNode = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.hasShadowRoot = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.isShadowRoot = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node) { };
	    /**
	     * @abstract
	     * @param {?} node
	     * @return {?}
	     */
	    DomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (node) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.getHref = function (element) { };
	    /**
	     * @abstract
	     * @param {?} event
	     * @return {?}
	     */
	    DomAdapter.prototype.getEventKey = function (event) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} baseUrl
	     * @param {?} href
	     * @return {?}
	     */
	    DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsDOMEvents = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsNativeShadowDOM = function () { };
	    /**
	     * @abstract
	     * @param {?} doc
	     * @param {?} target
	     * @return {?}
	     */
	    DomAdapter.prototype.getGlobalEventTarget = function (doc, target) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getHistory = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getLocation = function () { };
	    /**
	     * @abstract
	     * @param {?} doc
	     * @return {?}
	     */
	    DomAdapter.prototype.getBaseHref = function (doc) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.resetBaseElement = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getUserAgent = function () { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setData = function (element, name, value) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @return {?}
	     */
	    DomAdapter.prototype.getComputedStyle = function (element) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getData = function (element, name) { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setGlobalVar = function (name, value) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsWebAnimation = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.performanceNow = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getAnimationPrefix = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.getTransitionEnd = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsAnimation = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    DomAdapter.prototype.supportsCookies = function () { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @return {?}
	     */
	    DomAdapter.prototype.getCookie = function (name) { };
	    /**
	     * @abstract
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DomAdapter.prototype.setCookie = function (name, value) { };
	    return DomAdapter;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides DOM operations in any browser environment.
	 *
	 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
	 * can introduce XSS risks.
	 * @abstract
	 */
	var GenericBrowserDomAdapter = (function (_super) {
	    __extends(GenericBrowserDomAdapter, _super);
	    function GenericBrowserDomAdapter() {
	        var _this = _super.call(this) || this;
	        _this._animationPrefix = null;
	        _this._transitionEnd = null;
	        try {
	            var element_1 = _this.createElement('div', document);
	            if (_this.getStyle(element_1, 'animationName') != null) {
	                _this._animationPrefix = '';
	            }
	            else {
	                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
	                for (var i = 0; i < domPrefixes.length; i++) {
	                    if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {
	                        _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
	                        break;
	                    }
	                }
	            }
	            var transEndEventNames_1 = {
	                WebkitTransition: 'webkitTransitionEnd',
	                MozTransition: 'transitionend',
	                OTransition: 'oTransitionEnd otransitionend',
	                transition: 'transitionend'
	            };
	            Object.keys(transEndEventNames_1).forEach(function (key) {
	                if (_this.getStyle(element_1, key) != null) {
	                    _this._transitionEnd = transEndEventNames_1[key];
	                }
	            });
	        }
	        catch (e) {
	            _this._animationPrefix = null;
	            _this._transitionEnd = null;
	        }
	        return _this;
	    }
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };
	    /**
	     * @param {?} el
	     * @param {?} baseUrl
	     * @param {?} href
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	    };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
	        return typeof ((document.body)).createShadowRoot === 'function';
	    };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };
	    /**
	     * @return {?}
	     */
	    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
	        return this._animationPrefix != null && this._transitionEnd != null;
	    };
	    return GenericBrowserDomAdapter;
	}(DomAdapter));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _attrToPropMap = {
	    'class': 'className',
	    'innerHtml': 'innerHTML',
	    'readonly': 'readOnly',
	    'tabindex': 'tabIndex',
	};
	var DOM_KEY_LOCATION_NUMPAD = 3;
	// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	var _keyMap = {
	    // The following values are here for cross-browser compatibility and to match the W3C standard
	    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	    '\b': 'Backspace',
	    '\t': 'Tab',
	    '\x7F': 'Delete',
	    '\x1B': 'Escape',
	    'Del': 'Delete',
	    'Esc': 'Escape',
	    'Left': 'ArrowLeft',
	    'Right': 'ArrowRight',
	    'Up': 'ArrowUp',
	    'Down': 'ArrowDown',
	    'Menu': 'ContextMenu',
	    'Scroll': 'ScrollLock',
	    'Win': 'OS'
	};
	// There is a bug in Chrome for numeric keypad keys:
	// https://code.google.com/p/chromium/issues/detail?id=155654
	// 1, 2, 3 ... are reported as A, B, C ...
	var _chromeNumKeyPadMap = {
	    'A': '1',
	    'B': '2',
	    'C': '3',
	    'D': '4',
	    'E': '5',
	    'F': '6',
	    'G': '7',
	    'H': '8',
	    'I': '9',
	    'J': '*',
	    'K': '+',
	    'M': '-',
	    'N': '.',
	    'O': '/',
	    '\x60': '0',
	    '\x90': 'NumLock'
	};
	var nodeContains;
	if (_angular_core.ɵglobal['Node']) {
	    nodeContains = _angular_core.ɵglobal['Node'].prototype.contains || function (node) {
	        return !!(this.compareDocumentPosition(node) & 16);
	    };
	}
	var BrowserDomAdapter = (function (_super) {
	    __extends(BrowserDomAdapter, _super);
	    function BrowserDomAdapter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @param {?} templateHtml
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };
	    /**
	     * @param {?} el
	     * @param {?} methodName
	     * @param {?} args
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { ((el))[methodName].apply(((el)), args); };
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.logError = function (error) {
	        if (window.console) {
	            if (console.error) {
	                console.error(error);
	            }
	            else {
	                console.log(error);
	            }
	        }
	    };
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.log = function (error) {
	        if (window.console) {
	            window.console.log && window.console.log(error);
	        }
	    };
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.logGroup = function (error) {
	        if (window.console) {
	            window.console.group && window.console.group(error);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.logGroupEnd = function () {
	        if (window.console) {
	            window.console.groupEnd && window.console.groupEnd();
	        }
	    };
	    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
	        /**
	         * @return {?}
	         */
	        get: function () { return _attrToPropMap; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} nodeA
	     * @param {?} nodeB
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };
	    /**
	     * @param {?} el
	     * @param {?} selector
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };
	    /**
	     * @param {?} el
	     * @param {?} selector
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
	    /**
	     * @param {?} el
	     * @param {?} evt
	     * @param {?} listener
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
	    /**
	     * @param {?} el
	     * @param {?} evt
	     * @param {?} listener
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	        el.addEventListener(evt, listener, false);
	        // Needed to follow Dart's subscription semantic, until fix of
	        // https://code.google.com/p/dart/issues/detail?id=17406
	        return function () { el.removeEventListener(evt, listener, false); };
	    };
	    /**
	     * @param {?} el
	     * @param {?} evt
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
	    /**
	     * @param {?} eventType
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	        var /** @type {?} */ evt = document.createEvent('MouseEvent');
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    /**
	     * @param {?} eventType
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createEvent = function (eventType) {
	        var /** @type {?} */ evt = document.createEvent('Event');
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    /**
	     * @param {?} evt
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.preventDefault = function (evt) {
	        evt.preventDefault();
	        evt.returnValue = false;
	    };
	    /**
	     * @param {?} evt
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isPrevented = function (evt) {
	        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getTemplateContent = function (el) {
	        return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.type = function (node) { return node.type; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.content = function (node) {
	        if (this.hasProperty(node, 'content')) {
	            return ((node)).content;
	        }
	        else {
	            return node;
	        }
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.childNodesAsList = function (el) {
	        var /** @type {?} */ childNodes = el.childNodes;
	        var /** @type {?} */ res = new Array(childNodes.length);
	        for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {
	            res[i] = childNodes[i];
	        }
	        return res;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.clearNodes = function (el) {
	        while (el.firstChild) {
	            el.removeChild(el.firstChild);
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
	    /**
	     * @param {?} el
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
	    /**
	     * @param {?} el
	     * @param {?} newChild
	     * @param {?} oldChild
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.remove = function (node) {
	        if (node.parentNode) {
	            node.parentNode.removeChild(node);
	        }
	        return node;
	    };
	    /**
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) { parent.insertBefore(node, ref); };
	    /**
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} nodes
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {
	        nodes.forEach(function (n) { return parent.insertBefore(n, ref); });
	    };
	    /**
	     * @param {?} parent
	     * @param {?} ref
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };
	    /**
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
	    /**
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
	    /**
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
	    /**
	     * @param {?} el
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
	    /**
	     * @param {?} text
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
	    /**
	     * @param {?} html
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createTemplate = function (html) {
	        var /** @type {?} */ t = document.createElement('template');
	        t.innerHTML = html;
	        return t;
	    };
	    /**
	     * @param {?} tagName
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createElement(tagName);
	    };
	    /**
	     * @param {?} ns
	     * @param {?} tagName
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createElementNS(ns, tagName);
	    };
	    /**
	     * @param {?} text
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createTextNode(text);
	    };
	    /**
	     * @param {?} attrName
	     * @param {?} attrValue
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	        if (doc === void 0) { doc = document; }
	        var /** @type {?} */ el = (doc.createElement('SCRIPT'));
	        el.setAttribute(attrName, attrValue);
	        return el;
	    };
	    /**
	     * @param {?} css
	     * @param {?=} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	        if (doc === void 0) { doc = document; }
	        var /** @type {?} */ style = (doc.createElement('style'));
	        this.appendChild(style, this.createTextNode(css));
	        return style;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
	        return element.getElementsByClassName(name);
	    };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
	        return element.getElementsByTagName(name);
	    };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
	    /**
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
	    /**
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
	    /**
	     * @param {?} element
	     * @param {?} className
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasClass = function (element, className) {
	        return element.classList.contains(className);
	    };
	    /**
	     * @param {?} element
	     * @param {?} styleName
	     * @param {?} styleValue
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
	        element.style[styleName] = styleValue;
	    };
	    /**
	     * @param {?} element
	     * @param {?} stylename
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
	        // IE requires '' instead of null
	        // see https://github.com/angular/angular/issues/7916
	        element.style[stylename] = '';
	    };
	    /**
	     * @param {?} element
	     * @param {?} stylename
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
	    /**
	     * @param {?} element
	     * @param {?} styleName
	     * @param {?=} styleValue
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
	        if (styleValue === void 0) { styleValue = null; }
	        var /** @type {?} */ value = this.getStyle(element, styleName) || '';
	        return styleValue ? value == styleValue : value.length > 0;
	    };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.attributeMap = function (element) {
	        var /** @type {?} */ res = new Map();
	        var /** @type {?} */ elAttrs = element.attributes;
	        for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {
	            var /** @type {?} */ attrib = elAttrs[i];
	            res.set(attrib.name, attrib.value);
	        }
	        return res;
	    };
	    /**
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
	        return element.hasAttribute(attribute);
	    };
	    /**
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} attribute
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
	        return element.hasAttributeNS(ns, attribute);
	    };
	    /**
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
	        return element.getAttribute(attribute);
	    };
	    /**
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
	        return element.getAttributeNS(ns, name);
	    };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
	    /**
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
	        element.setAttributeNS(ns, name, value);
	    };
	    /**
	     * @param {?} element
	     * @param {?} attribute
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
	    /**
	     * @param {?} element
	     * @param {?} ns
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
	        element.removeAttributeNS(ns, name);
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.createHtmlDocument = function () {
	        return document.implementation.createHTMLDocument('fakeTitle');
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
	        try {
	            return el.getBoundingClientRect();
	        }
	        catch (e) {
	            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
	        }
	    };
	    /**
	     * @param {?} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getTitle = function (doc) { return document.title; };
	    /**
	     * @param {?} doc
	     * @param {?} newTitle
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) { document.title = newTitle || ''; };
	    /**
	     * @param {?} n
	     * @param {?} selector
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
	        if (n instanceof HTMLElement) {
	            return n.matches && n.matches(selector) ||
	                n.msMatchesSelector && n.msMatchesSelector(selector) ||
	                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
	        }
	        return false;
	    };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	        return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
	        return node.shadowRoot != null && node instanceof HTMLElement;
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };
	    /**
	     * @param {?} event
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getEventKey = function (event) {
	        var /** @type {?} */ key = event.key;
	        if (key == null) {
	            key = event.keyIdentifier;
	            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	            // Safari cf
	            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	            if (key == null) {
	                return 'Unidentified';
	            }
	            if (key.startsWith('U+')) {
	                key = String.fromCharCode(parseInt(key.substring(2), 16));
	                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                    // There is a bug in Chrome for numeric keypad keys:
	                    // https://code.google.com/p/chromium/issues/detail?id=155654
	                    // 1, 2, 3 ... are reported as A, B, C ...
	                    key = ((_chromeNumKeyPadMap))[key];
	                }
	            }
	        }
	        return _keyMap[key] || key;
	    };
	    /**
	     * @param {?} doc
	     * @param {?} target
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {
	        if (target === 'window') {
	            return window;
	        }
	        if (target === 'document') {
	            return document;
	        }
	        if (target === 'body') {
	            return document.body;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
	    /**
	     * @param {?} doc
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getBaseHref = function (doc) {
	        var /** @type {?} */ href = getBaseElementHref();
	        return href == null ? null : relativePath(href);
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setData = function (element, name, value) {
	        this.setAttribute(element, 'data-' + name, value);
	    };
	    /**
	     * @param {?} element
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getData = function (element, name) {
	        return this.getAttribute(element, 'data-' + name);
	    };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
	    /**
	     * @param {?} path
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath(_angular_core.ɵglobal, path, value); };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.supportsWebAnimation = function () {
	        return typeof ((Element)).prototype['animate'] === 'function';
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.performanceNow = function () {
	        // performance.now() is not available in all browsers, see
	        // http://caniuse.com/#search=performance.now
	        return window.performance && window.performance.now ? window.performance.now() :
	            new Date().getTime();
	    };
	    /**
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
	    /**
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    BrowserDomAdapter.prototype.setCookie = function (name, value) {
	        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
	        // not clear other cookies.
	        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
	    };
	    return BrowserDomAdapter;
	}(GenericBrowserDomAdapter));
	var baseElement = null;
	/**
	 * @return {?}
	 */
	function getBaseElementHref() {
	    if (!baseElement) {
	        baseElement = document.querySelector('base');
	        if (!baseElement) {
	            return null;
	        }
	    }
	    return baseElement.getAttribute('href');
	}
	// based on urlUtils.js in AngularJS 1
	var urlParsingNode;
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function relativePath(url) {
	    if (!urlParsingNode) {
	        urlParsingNode = document.createElement('a');
	    }
	    urlParsingNode.setAttribute('href', url);
	    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	        '/' + urlParsingNode.pathname;
	}
	/**
	 * @param {?} cookieStr
	 * @param {?} name
	 * @return {?}
	 */
	function parseCookieValue(cookieStr, name) {
	    name = encodeURIComponent(name);
	    for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
	        var cookie = _a[_i];
	        var /** @type {?} */ eqIndex = cookie.indexOf('=');
	        var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
	        if (cookieName.trim() === name) {
	            return decodeURIComponent(cookieValue);
	        }
	    }
	    return null;
	}
	/**
	 * @param {?} global
	 * @param {?} path
	 * @param {?} value
	 * @return {?}
	 */
	function setValueOnPath(global, path, value) {
	    var /** @type {?} */ parts = path.split('.');
	    var /** @type {?} */ obj = global;
	    while (parts.length > 1) {
	        var /** @type {?} */ name = parts.shift();
	        if (obj.hasOwnProperty(name) && obj[name] != null) {
	            obj = obj[name];
	        }
	        else {
	            obj = obj[name] = {};
	        }
	    }
	    if (obj === undefined || obj === null) {
	        obj = {};
	    }
	    obj[parts.shift()] = value;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
	 *
	 * Note: Document might not be available in the Application Context when Application and Rendering
	 * Contexts are not the same (e.g. when running the application into a Web Worker).
	 *
	 * \@stable
	 */
	var DOCUMENT = new _angular_core.InjectionToken('DocumentToken');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 * @return {?}
	 */
	function supportsState() {
	    return !!window.history.pushState;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
	 * This class should not be used directly by an application developer. Instead, use
	 * {\@link Location}.
	 */
	var BrowserPlatformLocation = (function (_super) {
	    __extends(BrowserPlatformLocation, _super);
	    /**
	     * @param {?} _doc
	     */
	    function BrowserPlatformLocation(_doc) {
	        var _this = _super.call(this) || this;
	        _this._doc = _doc;
	        _this._init();
	        return _this;
	    }
	    /**
	     * \@internal
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype._init = function () {
	        this._location = getDOM().getLocation();
	        this._history = getDOM().getHistory();
	    };
	    Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._location; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(this._doc); };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.onPopState = function (fn) {
	        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
	    };
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.onHashChange = function (fn) {
	        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
	    };
	    Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._location.pathname; },
	        /**
	         * @param {?} newPath
	         * @return {?}
	         */
	        set: function (newPath) { this._location.pathname = newPath; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._location.search; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._location.hash; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
	        if (supportsState()) {
	            this._history.pushState(state, title, url);
	        }
	        else {
	            this._location.hash = url;
	        }
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
	        if (supportsState()) {
	            this._history.replaceState(state, title, url);
	        }
	        else {
	            this._location.hash = url;
	        }
	    };
	    /**
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
	    /**
	     * @return {?}
	     */
	    BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
	    return BrowserPlatformLocation;
	}(_angular_common.PlatformLocation));
	BrowserPlatformLocation.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	BrowserPlatformLocation.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A service that can be used to get and add meta tags.
	 *
	 * \@experimental
	 */
	var Meta = (function () {
	    /**
	     * @param {?} _doc
	     */
	    function Meta(_doc) {
	        this._doc = _doc;
	        this._dom = getDOM();
	    }
	    /**
	     * @param {?} tag
	     * @param {?=} forceCreation
	     * @return {?}
	     */
	    Meta.prototype.addTag = function (tag, forceCreation) {
	        if (forceCreation === void 0) { forceCreation = false; }
	        if (!tag)
	            return null;
	        return this._getOrCreateElement(tag, forceCreation);
	    };
	    /**
	     * @param {?} tags
	     * @param {?=} forceCreation
	     * @return {?}
	     */
	    Meta.prototype.addTags = function (tags, forceCreation) {
	        var _this = this;
	        if (forceCreation === void 0) { forceCreation = false; }
	        if (!tags)
	            return [];
	        return tags.reduce(function (result, tag) {
	            if (tag) {
	                result.push(_this._getOrCreateElement(tag, forceCreation));
	            }
	            return result;
	        }, []);
	    };
	    /**
	     * @param {?} attrSelector
	     * @return {?}
	     */
	    Meta.prototype.getTag = function (attrSelector) {
	        if (!attrSelector)
	            return null;
	        return this._dom.querySelector(this._doc, "meta[" + attrSelector + "]");
	    };
	    /**
	     * @param {?} attrSelector
	     * @return {?}
	     */
	    Meta.prototype.getTags = function (attrSelector) {
	        if (!attrSelector)
	            return [];
	        var /** @type {?} */ list /*NodeList*/ = this._dom.querySelectorAll(this._doc, "meta[" + attrSelector + "]");
	        return list ? [].slice.call(list) : [];
	    };
	    /**
	     * @param {?} tag
	     * @param {?=} selector
	     * @return {?}
	     */
	    Meta.prototype.updateTag = function (tag, selector) {
	        if (!tag)
	            return null;
	        selector = selector || this._parseSelector(tag);
	        var /** @type {?} */ meta = this.getTag(selector);
	        if (meta) {
	            return this._setMetaElementAttributes(tag, meta);
	        }
	        return this._getOrCreateElement(tag, true);
	    };
	    /**
	     * @param {?} attrSelector
	     * @return {?}
	     */
	    Meta.prototype.removeTag = function (attrSelector) { this.removeTagElement(this.getTag(attrSelector)); };
	    /**
	     * @param {?} meta
	     * @return {?}
	     */
	    Meta.prototype.removeTagElement = function (meta) {
	        if (meta) {
	            this._dom.remove(meta);
	        }
	    };
	    /**
	     * @param {?} meta
	     * @param {?=} forceCreation
	     * @return {?}
	     */
	    Meta.prototype._getOrCreateElement = function (meta, forceCreation) {
	        if (forceCreation === void 0) { forceCreation = false; }
	        if (!forceCreation) {
	            var /** @type {?} */ selector = this._parseSelector(meta);
	            var /** @type {?} */ elem = this.getTag(selector);
	            // It's allowed to have multiple elements with the same name so it's not enough to
	            // just check that element with the same name already present on the page. We also need to
	            // check if element has tag attributes
	            if (elem && this._containsAttributes(meta, elem))
	                return elem;
	        }
	        var /** @type {?} */ element = (this._dom.createElement('meta'));
	        this._setMetaElementAttributes(meta, element);
	        var /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];
	        this._dom.appendChild(head, element);
	        return element;
	    };
	    /**
	     * @param {?} tag
	     * @param {?} el
	     * @return {?}
	     */
	    Meta.prototype._setMetaElementAttributes = function (tag, el) {
	        var _this = this;
	        Object.keys(tag).forEach(function (prop) { return _this._dom.setAttribute(el, prop, tag[prop]); });
	        return el;
	    };
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    Meta.prototype._parseSelector = function (tag) {
	        var /** @type {?} */ attr = tag.name ? 'name' : 'property';
	        return attr + "=\"" + tag[attr] + "\"";
	    };
	    /**
	     * @param {?} tag
	     * @param {?} elem
	     * @return {?}
	     */
	    Meta.prototype._containsAttributes = function (tag, elem) {
	        var _this = this;
	        return Object.keys(tag).every(function (key) { return _this._dom.getAttribute(elem, key) === tag[key]; });
	    };
	    return Meta;
	}());
	Meta.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	Meta.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An id that identifies a particular application being bootstrapped, that should
	 * match across the client/server boundary.
	 */
	var TRANSITION_ID = new _angular_core.InjectionToken('TRANSITION_ID');
	/**
	 * @param {?} transitionId
	 * @param {?} document
	 * @return {?}
	 */
	function bootstrapListenerFactory(transitionId, document) {
	    var /** @type {?} */ factory = function () {
	        var /** @type {?} */ dom = getDOM();
	        var /** @type {?} */ styles = Array.prototype.slice.apply(dom.querySelectorAll(document, "style[ng-transition]"));
	        styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })
	            .forEach(function (el) { return dom.remove(el); });
	    };
	    return factory;
	}
	var SERVER_TRANSITION_PROVIDERS = [
	    {
	        provide: _angular_core.APP_INITIALIZER,
	        useFactory: bootstrapListenerFactory,
	        deps: [TRANSITION_ID, DOCUMENT],
	        multi: true
	    },
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BrowserGetTestability = (function () {
	    function BrowserGetTestability() {
	    }
	    /**
	     * @return {?}
	     */
	    BrowserGetTestability.init = function () { _angular_core.setTestabilityGetter(new BrowserGetTestability()); };
	    /**
	     * @param {?} registry
	     * @return {?}
	     */
	    BrowserGetTestability.prototype.addToWindow = function (registry) {
	        _angular_core.ɵglobal['getAngularTestability'] = function (elem, findInAncestors) {
	            if (findInAncestors === void 0) { findInAncestors = true; }
	            var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);
	            if (testability == null) {
	                throw new Error('Could not find testability for element.');
	            }
	            return testability;
	        };
	        _angular_core.ɵglobal['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };
	        _angular_core.ɵglobal['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };
	        var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {
	            var /** @type {?} */ testabilities = _angular_core.ɵglobal['getAllAngularTestabilities']();
	            var /** @type {?} */ count = testabilities.length;
	            var /** @type {?} */ didWork = false;
	            var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {
	                didWork = didWork || didWork_;
	                count--;
	                if (count == 0) {
	                    callback(didWork);
	                }
	            };
	            testabilities.forEach(function (testability /** TODO #9100 */) {
	                testability.whenStable(decrement);
	            });
	        };
	        if (!_angular_core.ɵglobal['frameworkStabilizers']) {
	            _angular_core.ɵglobal['frameworkStabilizers'] = [];
	        }
	        _angular_core.ɵglobal['frameworkStabilizers'].push(whenAllStable);
	    };
	    /**
	     * @param {?} registry
	     * @param {?} elem
	     * @param {?} findInAncestors
	     * @return {?}
	     */
	    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	        if (elem == null) {
	            return null;
	        }
	        var /** @type {?} */ t = registry.getTestability(elem);
	        if (t != null) {
	            return t;
	        }
	        else if (!findInAncestors) {
	            return null;
	        }
	        if (getDOM().isShadowRoot(elem)) {
	            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
	        }
	        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
	    };
	    return BrowserGetTestability;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A service that can be used to get and set the title of a current HTML document.
	 *
	 * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
	 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
	 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
	 * title value.
	 *
	 * \@experimental
	 */
	var Title = (function () {
	    /**
	     * @param {?} _doc
	     */
	    function Title(_doc) {
	        this._doc = _doc;
	    }
	    /**
	     * Get the title of the current HTML document.
	     * @return {?}
	     */
	    Title.prototype.getTitle = function () { return getDOM().getTitle(this._doc); };
	    /**
	     * Set the title of the current HTML document.
	     * @param {?} newTitle
	     * @return {?}
	     */
	    Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(this._doc, newTitle); };
	    return Title;
	}());
	Title.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	Title.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CORE_TOKENS = {
	    'ApplicationRef': _angular_core.ApplicationRef,
	    'NgZone': _angular_core.NgZone,
	};
	var INSPECT_GLOBAL_NAME = 'ng.probe';
	var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
	/**
	 * Returns a {\@link DebugElement} for the given native DOM element, or
	 * null if the given native element does not have an Angular view associated
	 * with it.
	 * @param {?} element
	 * @return {?}
	 */
	function inspectNativeElement(element) {
	    return _angular_core.getDebugNode(element);
	}
	/**
	 * Deprecated. Use the one from '\@angular/core'.
	 * @deprecated
	 */
	var NgProbeToken$1 = (function () {
	    /**
	     * @param {?} name
	     * @param {?} token
	     */
	    function NgProbeToken$1(name, token) {
	        this.name = name;
	        this.token = token;
	    }
	    return NgProbeToken$1;
	}());
	/**
	 * @param {?} extraTokens
	 * @param {?} coreTokens
	 * @return {?}
	 */
	function _createNgProbe(extraTokens, coreTokens) {
	    var /** @type {?} */ tokens = (extraTokens || []).concat(coreTokens || []);
	    getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
	    getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, _angular_core.ɵmerge(CORE_TOKENS, _ngProbeTokensToMap(tokens || [])));
	    return function () { return inspectNativeElement; };
	}
	/**
	 * @param {?} tokens
	 * @return {?}
	 */
	function _ngProbeTokensToMap(tokens) {
	    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
	}
	/**
	 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
	 */
	var ELEMENT_PROBE_PROVIDERS = [
	    {
	        provide: _angular_core.APP_INITIALIZER,
	        useFactory: _createNgProbe,
	        deps: [
	            [NgProbeToken$1, new _angular_core.Optional()],
	            [_angular_core.NgProbeToken, new _angular_core.Optional()],
	        ],
	        multi: true,
	    },
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@stable
	 */
	var EVENT_MANAGER_PLUGINS = new _angular_core.InjectionToken('EventManagerPlugins');
	/**
	 * \@stable
	 */
	var EventManager = (function () {
	    /**
	     * @param {?} plugins
	     * @param {?} _zone
	     */
	    function EventManager(plugins, _zone) {
	        var _this = this;
	        this._zone = _zone;
	        this._eventNameToPlugin = new Map();
	        plugins.forEach(function (p) { return p.manager = _this; });
	        this._plugins = plugins.slice().reverse();
	    }
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    EventManager.prototype.addEventListener = function (element, eventName, handler) {
	        var /** @type {?} */ plugin = this._findPluginFor(eventName);
	        return plugin.addEventListener(element, eventName, handler);
	    };
	    /**
	     * @param {?} target
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var /** @type {?} */ plugin = this._findPluginFor(eventName);
	        return plugin.addGlobalEventListener(target, eventName, handler);
	    };
	    /**
	     * @return {?}
	     */
	    EventManager.prototype.getZone = function () { return this._zone; };
	    /**
	     * \@internal
	     * @param {?} eventName
	     * @return {?}
	     */
	    EventManager.prototype._findPluginFor = function (eventName) {
	        var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);
	        if (plugin) {
	            return plugin;
	        }
	        var /** @type {?} */ plugins = this._plugins;
	        for (var /** @type {?} */ i = 0; i < plugins.length; i++) {
	            var /** @type {?} */ plugin_1 = plugins[i];
	            if (plugin_1.supports(eventName)) {
	                this._eventNameToPlugin.set(eventName, plugin_1);
	                return plugin_1;
	            }
	        }
	        throw new Error("No event manager plugin found for event " + eventName);
	    };
	    return EventManager;
	}());
	EventManager.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	EventManager.ctorParameters = function () { return [
	    { type: Array, decorators: [{ type: _angular_core.Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
	    { type: _angular_core.NgZone, },
	]; };
	/**
	 * @abstract
	 */
	var EventManagerPlugin = (function () {
	    /**
	     * @param {?} _doc
	     */
	    function EventManagerPlugin(_doc) {
	        this._doc = _doc;
	    }
	    /**
	     * @abstract
	     * @param {?} eventName
	     * @return {?}
	     */
	    EventManagerPlugin.prototype.supports = function (eventName) { };
	    /**
	     * @abstract
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
	        var /** @type {?} */ target = getDOM().getGlobalEventTarget(this._doc, element);
	        if (!target) {
	            throw new Error("Unsupported event target " + target + " for event " + eventName);
	        }
	        return this.addEventListener(target, eventName, handler);
	    };
	    
	    return EventManagerPlugin;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SharedStylesHost = (function () {
	    function SharedStylesHost() {
	        /**
	         * \@internal
	         */
	        this._stylesSet = new Set();
	    }
	    /**
	     * @param {?} styles
	     * @return {?}
	     */
	    SharedStylesHost.prototype.addStyles = function (styles) {
	        var _this = this;
	        var /** @type {?} */ additions = new Set();
	        styles.forEach(function (style) {
	            if (!_this._stylesSet.has(style)) {
	                _this._stylesSet.add(style);
	                additions.add(style);
	            }
	        });
	        this.onStylesAdded(additions);
	    };
	    /**
	     * @param {?} additions
	     * @return {?}
	     */
	    SharedStylesHost.prototype.onStylesAdded = function (additions) { };
	    /**
	     * @return {?}
	     */
	    SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };
	    return SharedStylesHost;
	}());
	SharedStylesHost.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	SharedStylesHost.ctorParameters = function () { return []; };
	var DomSharedStylesHost = (function (_super) {
	    __extends(DomSharedStylesHost, _super);
	    /**
	     * @param {?} _doc
	     */
	    function DomSharedStylesHost(_doc) {
	        var _this = _super.call(this) || this;
	        _this._doc = _doc;
	        _this._hostNodes = new Set();
	        _this._styleNodes = new Set();
	        _this._hostNodes.add(_doc.head);
	        return _this;
	    }
	    /**
	     * @param {?} styles
	     * @param {?} host
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	        var _this = this;
	        styles.forEach(function (style) {
	            var /** @type {?} */ styleEl = _this._doc.createElement('style');
	            styleEl.textContent = style;
	            _this._styleNodes.add(host.appendChild(styleEl));
	        });
	    };
	    /**
	     * @param {?} hostNode
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype.addHost = function (hostNode) {
	        this._addStylesToHost(this._stylesSet, hostNode);
	        this._hostNodes.add(hostNode);
	    };
	    /**
	     * @param {?} hostNode
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
	    /**
	     * @param {?} additions
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
	        var _this = this;
	        this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });
	    };
	    /**
	     * @return {?}
	     */
	    DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };
	    return DomSharedStylesHost;
	}(SharedStylesHost));
	DomSharedStylesHost.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	DomSharedStylesHost.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NAMESPACE_URIS = {
	    'svg': 'http://www.w3.org/2000/svg',
	    'xhtml': 'http://www.w3.org/1999/xhtml',
	    'xlink': 'http://www.w3.org/1999/xlink',
	    'xml': 'http://www.w3.org/XML/1998/namespace',
	    'xmlns': 'http://www.w3.org/2000/xmlns/',
	};
	var COMPONENT_REGEX = /%COMP%/g;
	var COMPONENT_VARIABLE = '%COMP%';
	var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	/**
	 * @param {?} componentShortId
	 * @return {?}
	 */
	function shimContentAttribute(componentShortId) {
	    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
	}
	/**
	 * @param {?} componentShortId
	 * @return {?}
	 */
	function shimHostAttribute(componentShortId) {
	    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
	}
	/**
	 * @param {?} compId
	 * @param {?} styles
	 * @param {?} target
	 * @return {?}
	 */
	function flattenStyles(compId, styles, target) {
	    for (var /** @type {?} */ i = 0; i < styles.length; i++) {
	        var /** @type {?} */ style = styles[i];
	        if (Array.isArray(style)) {
	            flattenStyles(compId, style, target);
	        }
	        else {
	            style = style.replace(COMPONENT_REGEX, compId);
	            target.push(style);
	        }
	    }
	    return target;
	}
	/**
	 * @param {?} eventHandler
	 * @return {?}
	 */
	function decoratePreventDefault(eventHandler) {
	    return function (event) {
	        var /** @type {?} */ allowDefaultBehavior = eventHandler(event);
	        if (allowDefaultBehavior === false) {
	            // TODO(tbosch): move preventDefault into event plugins...
	            event.preventDefault();
	            event.returnValue = false;
	        }
	    };
	}
	var DomRendererFactory2 = (function () {
	    /**
	     * @param {?} eventManager
	     * @param {?} sharedStylesHost
	     */
	    function DomRendererFactory2(eventManager, sharedStylesHost) {
	        this.eventManager = eventManager;
	        this.sharedStylesHost = sharedStylesHost;
	        this.rendererByCompId = new Map();
	        this.defaultRenderer = new DefaultDomRenderer2(eventManager);
	    }
	    
	    /**
	     * @param {?} element
	     * @param {?} type
	     * @return {?}
	     */
	    DomRendererFactory2.prototype.createRenderer = function (element, type) {
	        if (!element || !type) {
	            return this.defaultRenderer;
	        }
	        switch (type.encapsulation) {
	            case _angular_core.ViewEncapsulation.Emulated: {
	                var /** @type {?} */ renderer = this.rendererByCompId.get(type.id);
	                if (!renderer) {
	                    renderer =
	                        new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);
	                    this.rendererByCompId.set(type.id, renderer);
	                }
	                ((renderer)).applyToHost(element);
	                return renderer;
	            }
	            case _angular_core.ViewEncapsulation.Native:
	                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);
	            default: {
	                if (!this.rendererByCompId.has(type.id)) {
	                    var /** @type {?} */ styles = flattenStyles(type.id, type.styles, []);
	                    this.sharedStylesHost.addStyles(styles);
	                    this.rendererByCompId.set(type.id, this.defaultRenderer);
	                }
	                return this.defaultRenderer;
	            }
	        }
	    };
	    return DomRendererFactory2;
	}());
	DomRendererFactory2.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	DomRendererFactory2.ctorParameters = function () { return [
	    { type: EventManager, },
	    { type: DomSharedStylesHost, },
	]; };
	var DefaultDomRenderer2 = (function () {
	    /**
	     * @param {?} eventManager
	     */
	    function DefaultDomRenderer2(eventManager) {
	        this.eventManager = eventManager;
	        this.data = Object.create(null);
	    }
	    /**
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.destroy = function () { };
	    /**
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.createElement = function (name, namespace) {
	        if (namespace) {
	            return document.createElementNS(NAMESPACE_URIS[namespace], name);
	        }
	        return document.createElement(name);
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.createComment = function (value) { return document.createComment(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.createText = function (value) { return document.createTextNode(value); };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @param {?} refChild
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
	        if (parent) {
	            parent.insertBefore(newChild, refChild);
	        }
	    };
	    /**
	     * @param {?} parent
	     * @param {?} oldChild
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {
	        if (parent) {
	            parent.removeChild(oldChild);
	        }
	    };
	    /**
	     * @param {?} selectorOrNode
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode) {
	        var /** @type {?} */ el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :
	            selectorOrNode;
	        if (!el) {
	            throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
	        }
	        el.textContent = '';
	        return el;
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.parentNode = function (node) { return node.parentNode; };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
	        if (namespace) {
	            name = namespace + ":" + name;
	            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];
	            if (namespaceUri) {
	                el.setAttributeNS(namespaceUri, name, value);
	            }
	            else {
	                el.setAttribute(name, value);
	            }
	        }
	        else {
	            el.setAttribute(name, value);
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?=} namespace
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {
	        if (namespace) {
	            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];
	            if (namespaceUri) {
	                el.removeAttributeNS(namespaceUri, name);
	            }
	            else {
	                el.removeAttribute(namespace + ":" + name);
	            }
	        }
	        else {
	            el.removeAttribute(name);
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };
	    /**
	     * @param {?} el
	     * @param {?} style
	     * @param {?} value
	     * @param {?} flags
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {
	        if (flags & _angular_core.RendererStyleFlags2.DashCase) {
	            el.style.setProperty(style, value, !!(flags & _angular_core.RendererStyleFlags2.Important) ? 'important' : '');
	        }
	        else {
	            el.style[style] = value;
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} style
	     * @param {?} flags
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {
	        if (flags & _angular_core.RendererStyleFlags2.DashCase) {
	            el.style.removeProperty(style);
	        }
	        else {
	            // IE requires '' instead of null
	            // see https://github.com/angular/angular/issues/7916
	            el.style[style] = '';
	        }
	    };
	    /**
	     * @param {?} el
	     * @param {?} name
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {
	        checkNoSyntheticProp(name, 'property');
	        el[name] = value;
	    };
	    /**
	     * @param {?} node
	     * @param {?} value
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.setValue = function (node, value) { node.nodeValue = value; };
	    /**
	     * @param {?} target
	     * @param {?} event
	     * @param {?} callback
	     * @return {?}
	     */
	    DefaultDomRenderer2.prototype.listen = function (target, event, callback) {
	        checkNoSyntheticProp(event, 'listener');
	        if (typeof target === 'string') {
	            return (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback)));
	        }
	        return ((this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))));
	    };
	    return DefaultDomRenderer2;
	}());
	var AT_CHARCODE = '@'.charCodeAt(0);
	/**
	 * @param {?} name
	 * @param {?} nameKind
	 * @return {?}
	 */
	function checkNoSyntheticProp(name, nameKind) {
	    if (name.charCodeAt(0) === AT_CHARCODE) {
	        throw new Error("Found the synthetic " + nameKind + " " + name + ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.");
	    }
	}
	var EmulatedEncapsulationDomRenderer2 = (function (_super) {
	    __extends(EmulatedEncapsulationDomRenderer2, _super);
	    /**
	     * @param {?} eventManager
	     * @param {?} sharedStylesHost
	     * @param {?} component
	     */
	    function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {
	        var _this = _super.call(this, eventManager) || this;
	        _this.component = component;
	        var styles = flattenStyles(component.id, component.styles, []);
	        sharedStylesHost.addStyles(styles);
	        _this.contentAttr = shimContentAttribute(component.id);
	        _this.hostAttr = shimHostAttribute(component.id);
	        return _this;
	    }
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };
	    /**
	     * @param {?} parent
	     * @param {?} name
	     * @return {?}
	     */
	    EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {
	        var /** @type {?} */ el = _super.prototype.createElement.call(this, parent, name);
	        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');
	        return el;
	    };
	    return EmulatedEncapsulationDomRenderer2;
	}(DefaultDomRenderer2));
	var ShadowDomRenderer = (function (_super) {
	    __extends(ShadowDomRenderer, _super);
	    /**
	     * @param {?} eventManager
	     * @param {?} sharedStylesHost
	     * @param {?} hostEl
	     * @param {?} component
	     */
	    function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
	        var _this = _super.call(this, eventManager) || this;
	        _this.sharedStylesHost = sharedStylesHost;
	        _this.hostEl = hostEl;
	        _this.component = component;
	        _this.shadowRoot = hostEl.createShadowRoot();
	        _this.sharedStylesHost.addHost(_this.shadowRoot);
	        var styles = flattenStyles(component.id, component.styles, []);
	        for (var i = 0; i < styles.length; i++) {
	            var styleEl = document.createElement('style');
	            styleEl.textContent = styles[i];
	            _this.shadowRoot.appendChild(styleEl);
	        }
	        return _this;
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) { return node === this.hostEl ? this.shadowRoot : node; };
	    /**
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.destroy = function () { this.sharedStylesHost.removeHost(this.shadowRoot); };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {
	        return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} newChild
	     * @param {?} refChild
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
	        return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
	    };
	    /**
	     * @param {?} parent
	     * @param {?} oldChild
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {
	        return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);
	    };
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    ShadowDomRenderer.prototype.parentNode = function (node) {
	        return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));
	    };
	    return ShadowDomRenderer;
	}(DefaultDomRenderer2));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DomEventsPlugin = (function (_super) {
	    __extends(DomEventsPlugin, _super);
	    /**
	     * @param {?} doc
	     */
	    function DomEventsPlugin(doc) {
	        return _super.call(this, doc) || this;
	    }
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        element.addEventListener(eventName, /** @type {?} */ (handler), false);
	        return function () { return element.removeEventListener(eventName, /** @type {?} */ (handler), false); };
	    };
	    return DomEventsPlugin;
	}(EventManagerPlugin));
	DomEventsPlugin.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	DomEventsPlugin.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EVENT_NAMES = {
	    // pan
	    'pan': true,
	    'panstart': true,
	    'panmove': true,
	    'panend': true,
	    'pancancel': true,
	    'panleft': true,
	    'panright': true,
	    'panup': true,
	    'pandown': true,
	    // pinch
	    'pinch': true,
	    'pinchstart': true,
	    'pinchmove': true,
	    'pinchend': true,
	    'pinchcancel': true,
	    'pinchin': true,
	    'pinchout': true,
	    // press
	    'press': true,
	    'pressup': true,
	    // rotate
	    'rotate': true,
	    'rotatestart': true,
	    'rotatemove': true,
	    'rotateend': true,
	    'rotatecancel': true,
	    // swipe
	    'swipe': true,
	    'swipeleft': true,
	    'swiperight': true,
	    'swipeup': true,
	    'swipedown': true,
	    // tap
	    'tap': true,
	};
	/**
	 * A DI token that you can use to provide{\@link HammerGestureConfig} to Angular. Use it to configure
	 * Hammer gestures.
	 *
	 * \@experimental
	 */
	var HAMMER_GESTURE_CONFIG = new _angular_core.InjectionToken('HammerGestureConfig');
	/**
	 * \@experimental
	 */
	var HammerGestureConfig = (function () {
	    function HammerGestureConfig() {
	        this.events = [];
	        this.overrides = {};
	    }
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    HammerGestureConfig.prototype.buildHammer = function (element) {
	        var /** @type {?} */ mc = new Hammer(element);
	        mc.get('pinch').set({ enable: true });
	        mc.get('rotate').set({ enable: true });
	        for (var /** @type {?} */ eventName in this.overrides) {
	            mc.get(eventName).set(this.overrides[eventName]);
	        }
	        return mc;
	    };
	    return HammerGestureConfig;
	}());
	HammerGestureConfig.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	HammerGestureConfig.ctorParameters = function () { return []; };
	var HammerGesturesPlugin = (function (_super) {
	    __extends(HammerGesturesPlugin, _super);
	    /**
	     * @param {?} doc
	     * @param {?} _config
	     */
	    function HammerGesturesPlugin(doc, _config) {
	        var _this = _super.call(this, doc) || this;
	        _this._config = _config;
	        return _this;
	    }
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    HammerGesturesPlugin.prototype.supports = function (eventName) {
	        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
	            return false;
	        }
	        if (!((window)).Hammer) {
	            throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
	        }
	        return true;
	    };
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var _this = this;
	        var /** @type {?} */ zone = this.manager.getZone();
	        eventName = eventName.toLowerCase();
	        return zone.runOutsideAngular(function () {
	            // Creating the manager bind events, must be done outside of angular
	            var /** @type {?} */ mc = _this._config.buildHammer(element);
	            var /** @type {?} */ callback = function (eventObj) {
	                zone.runGuarded(function () { handler(eventObj); });
	            };
	            mc.on(eventName, callback);
	            return function () { return mc.off(eventName, callback); };
	        });
	    };
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
	    return HammerGesturesPlugin;
	}(EventManagerPlugin));
	HammerGesturesPlugin.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	HammerGesturesPlugin.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	    { type: HammerGestureConfig, decorators: [{ type: _angular_core.Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
	var MODIFIER_KEY_GETTERS = {
	    'alt': function (event) { return event.altKey; },
	    'control': function (event) { return event.ctrlKey; },
	    'meta': function (event) { return event.metaKey; },
	    'shift': function (event) { return event.shiftKey; }
	};
	/**
	 * \@experimental
	 */
	var KeyEventsPlugin = (function (_super) {
	    __extends(KeyEventsPlugin, _super);
	    /**
	     * @param {?} doc
	     */
	    function KeyEventsPlugin(doc) {
	        return _super.call(this, doc) || this;
	    }
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
	    /**
	     * @param {?} element
	     * @param {?} eventName
	     * @param {?} handler
	     * @return {?}
	     */
	    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var /** @type {?} */ parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	        var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
	        return this.manager.getZone().runOutsideAngular(function () {
	            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
	        });
	    };
	    /**
	     * @param {?} eventName
	     * @return {?}
	     */
	    KeyEventsPlugin.parseEventName = function (eventName) {
	        var /** @type {?} */ parts = eventName.toLowerCase().split('.');
	        var /** @type {?} */ domEventName = parts.shift();
	        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
	            return null;
	        }
	        var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(parts.pop());
	        var /** @type {?} */ fullKey = '';
	        MODIFIER_KEYS.forEach(function (modifierName) {
	            var /** @type {?} */ index = parts.indexOf(modifierName);
	            if (index > -1) {
	                parts.splice(index, 1);
	                fullKey += modifierName + '.';
	            }
	        });
	        fullKey += key;
	        if (parts.length != 0 || key.length === 0) {
	            // returning null instead of throwing to let another plugin process the event
	            return null;
	        }
	        var /** @type {?} */ result = {};
	        result['domEventName'] = domEventName;
	        result['fullKey'] = fullKey;
	        return result;
	    };
	    /**
	     * @param {?} event
	     * @return {?}
	     */
	    KeyEventsPlugin.getEventFullKey = function (event) {
	        var /** @type {?} */ fullKey = '';
	        var /** @type {?} */ key = getDOM().getEventKey(event);
	        key = key.toLowerCase();
	        if (key === ' ') {
	            key = 'space'; // for readability
	        }
	        else if (key === '.') {
	            key = 'dot'; // because '.' is used as a separator in event names
	        }
	        MODIFIER_KEYS.forEach(function (modifierName) {
	            if (modifierName != key) {
	                var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
	                if (modifierGetter(event)) {
	                    fullKey += modifierName + '.';
	                }
	            }
	        });
	        fullKey += key;
	        return fullKey;
	    };
	    /**
	     * @param {?} fullKey
	     * @param {?} handler
	     * @param {?} zone
	     * @return {?}
	     */
	    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
	        return function (event /** TODO #9100 */) {
	            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
	                zone.runGuarded(function () { return handler(event); });
	            }
	        };
	    };
	    /**
	     * \@internal
	     * @param {?} keyName
	     * @return {?}
	     */
	    KeyEventsPlugin._normalizeKey = function (keyName) {
	        // TODO: switch to a Map if the mapping grows too much
	        switch (keyName) {
	            case 'esc':
	                return 'escape';
	            default:
	                return keyName;
	        }
	    };
	    return KeyEventsPlugin;
	}(EventManagerPlugin));
	KeyEventsPlugin.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	KeyEventsPlugin.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A pattern that recognizes a commonly useful subset of URLs that are safe.
	 *
	 * This regular expression matches a subset of URLs that will not cause script
	 * execution if used in URL context within a HTML document. Specifically, this
	 * regular expression matches if (comment from here on and regex copied from
	 * Soy's EscapingConventions):
	 * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
	 * (2) or no protocol.  A protocol must be followed by a colon. The below
	 *     allows that by allowing colons only after one of the characters [/?#].
	 *     A colon after a hash (#) must be in the fragment.
	 *     Otherwise, a colon after a (?) must be in a query.
	 *     Otherwise, a colon after a single solidus (/) must be in a path.
	 *     Otherwise, a colon after a double solidus (//) must be in the authority
	 *     (before port).
	 *
	 * The pattern disallows &, used in HTML entity declarations before
	 * one of the characters in [/?#]. This disallows HTML entities used in the
	 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
	 * It also disallows HTML entities in the first path part of a relative path,
	 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
	 * that. More importantly, it disallows masking of a colon,
	 * e.g. "javascript&#58;...".
	 *
	 * This regular expression was taken from the Closure sanitization library.
	 */
	var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
	/** A pattern that matches safe data URLs. Only matches image, video and audio types. */
	var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function sanitizeUrl(url) {
	    url = String(url);
	    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
	        return url;
	    if (_angular_core.isDevMode()) {
	        getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
	    }
	    return 'unsafe:' + url;
	}
	/**
	 * @param {?} srcset
	 * @return {?}
	 */
	function sanitizeSrcset(srcset) {
	    srcset = String(srcset);
	    return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */
	var inertElement = null;
	/** Lazily initialized to make sure the DOM adapter gets set before use. */
	var DOM = null;
	/**
	 * Returns an HTML element that is guaranteed to not execute code when creating elements in it.
	 * @return {?}
	 */
	function getInertElement() {
	    if (inertElement)
	        return inertElement;
	    DOM = getDOM();
	    // Prefer using <template> element if supported.
	    var /** @type {?} */ templateEl = DOM.createElement('template');
	    if ('content' in templateEl)
	        return templateEl;
	    var /** @type {?} */ doc = DOM.createHtmlDocument();
	    inertElement = DOM.querySelector(doc, 'body');
	    if (inertElement == null) {
	        // usually there should be only one body element in the document, but IE doesn't have any, so we
	        // need to create one.
	        var /** @type {?} */ html = DOM.createElement('html', doc);
	        inertElement = DOM.createElement('body', doc);
	        DOM.appendChild(html, inertElement);
	        DOM.appendChild(doc, html);
	    }
	    return inertElement;
	}
	/**
	 * @param {?} tags
	 * @return {?}
	 */
	function tagSet(tags) {
	    var /** @type {?} */ res = {};
	    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
	        var t = _a[_i];
	        res[t] = true;
	    }
	    return res;
	}
	/**
	 * @param {...?} sets
	 * @return {?}
	 */
	function merge() {
	    var sets = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sets[_i] = arguments[_i];
	    }
	    var /** @type {?} */ res = {};
	    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
	        var s = sets_1[_a];
	        for (var /** @type {?} */ v in s) {
	            if (s.hasOwnProperty(v))
	                res[v] = true;
	        }
	    }
	    return res;
	}
	// Good source of info about elements and attributes
	// http://dev.w3.org/html5/spec/Overview.html#semantics
	// http://simon.html5.org/html-elements
	// Safe Void Elements - HTML5
	// http://dev.w3.org/html5/spec/Overview.html#void-elements
	var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
	// Elements that you can, intentionally, leave open (and which close themselves)
	// http://dev.w3.org/html5/spec/Overview.html#optional-tags
	var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
	var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
	var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
	// Safe Block Elements - HTML5
	var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
	    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
	    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
	// Inline Elements - HTML5
	var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
	    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
	    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
	var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
	// Attributes that have href and hence need to be sanitized
	var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
	// Attributes that have special href set hence need to be sanitized
	var SRCSET_ATTRS = tagSet('srcset');
	var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
	    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
	    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
	    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
	    'valign,value,vspace,width');
	// NB: This currently conciously doesn't support SVG. SVG sanitization has had several security
	// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
	// innerHTML is required, SVG attributes should be added here.
	// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
	// can be sanitized, but they increase security surface area without a legitimate use case, so they
	// are left out here.
	var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
	/**
	 * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
	 * attributes.
	 */
	var SanitizingHtmlSerializer = (function () {
	    function SanitizingHtmlSerializer() {
	        this.sanitizedSomething = false;
	        this.buf = [];
	    }
	    /**
	     * @param {?} el
	     * @return {?}
	     */
	    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
	        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
	        // However this code never accesses properties off of `document` before deleting its contents
	        // again, so it shouldn't be vulnerable to DOM clobbering.
	        var /** @type {?} */ current = el.firstChild;
	        while (current) {
	            if (DOM.isElementNode(current)) {
	                this.startElement(/** @type {?} */ (current));
	            }
	            else if (DOM.isTextNode(current)) {
	                this.chars(DOM.nodeValue(current));
	            }
	            else {
	                // Strip non-element, non-text nodes.
	                this.sanitizedSomething = true;
	            }
	            if (DOM.firstChild(current)) {
	                current = DOM.firstChild(current);
	                continue;
	            }
	            while (current) {
	                // Leaving the element. Walk up and to the right, closing tags as we go.
	                if (DOM.isElementNode(current)) {
	                    this.endElement(/** @type {?} */ (current));
	                }
	                var /** @type {?} */ next = checkClobberedElement(current, DOM.nextSibling(current));
	                if (next) {
	                    current = next;
	                    break;
	                }
	                current = checkClobberedElement(current, DOM.parentElement(current));
	            }
	        }
	        return this.buf.join('');
	    };
	    /**
	     * @param {?} element
	     * @return {?}
	     */
	    SanitizingHtmlSerializer.prototype.startElement = function (element) {
	        var _this = this;
	        var /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();
	        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
	            this.sanitizedSomething = true;
	            return;
	        }
	        this.buf.push('<');
	        this.buf.push(tagName);
	        DOM.attributeMap(element).forEach(function (value, attrName) {
	            var /** @type {?} */ lower = attrName.toLowerCase();
	            if (!VALID_ATTRS.hasOwnProperty(lower)) {
	                _this.sanitizedSomething = true;
	                return;
	            }
	            // TODO(martinprobst): Special case image URIs for data:image/...
	            if (URI_ATTRS[lower])
	                value = sanitizeUrl(value);
	            if (SRCSET_ATTRS[lower])
	                value = sanitizeSrcset(value);
	            _this.buf.push(' ');
	            _this.buf.push(attrName);
	            _this.buf.push('="');
	            _this.buf.push(encodeEntities(value));
	            _this.buf.push('"');
	        });
	        this.buf.push('>');
	    };
	    /**
	     * @param {?} current
	     * @return {?}
	     */
	    SanitizingHtmlSerializer.prototype.endElement = function (current) {
	        var /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();
	        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
	            this.buf.push('</');
	            this.buf.push(tagName);
	            this.buf.push('>');
	        }
	    };
	    /**
	     * @param {?} chars
	     * @return {?}
	     */
	    SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };
	    return SanitizingHtmlSerializer;
	}());
	/**
	 * @param {?} node
	 * @param {?} nextNode
	 * @return {?}
	 */
	function checkClobberedElement(node, nextNode) {
	    if (nextNode && DOM.contains(node, nextNode)) {
	        throw new Error("Failed to sanitize html because the element is clobbered: " + DOM.getOuterHTML(node));
	    }
	    return nextNode;
	}
	// Regular Expressions for parsing tags and attributes
	var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	// ! to ~ is the ASCII range.
	var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
	/**
	 * Escapes all potentially dangerous characters, so that the
	 * resulting string can be safely inserted into attribute or
	 * element text.
	 * @param {?} value
	 * @return {?}
	 */
	function encodeEntities(value) {
	    return value.replace(/&/g, '&amp;')
	        .replace(SURROGATE_PAIR_REGEXP, function (match) {
	        var /** @type {?} */ hi = match.charCodeAt(0);
	        var /** @type {?} */ low = match.charCodeAt(1);
	        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	    })
	        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
	        .replace(/</g, '&lt;')
	        .replace(/>/g, '&gt;');
	}
	/**
	 * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
	 * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
	 *
	 * This is undesirable since we don't want to allow any of these custom attributes. This method
	 * strips them all.
	 * @param {?} el
	 * @return {?}
	 */
	function stripCustomNsAttrs(el) {
	    DOM.attributeMap(el).forEach(function (_, attrName) {
	        if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
	            DOM.removeAttribute(el, attrName);
	        }
	    });
	    for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
	        var n = _a[_i];
	        if (DOM.isElementNode(n))
	            stripCustomNsAttrs(/** @type {?} */ (n));
	    }
	}
	/**
	 * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
	 * the DOM in a browser environment.
	 * @param {?} defaultDoc
	 * @param {?} unsafeHtmlInput
	 * @return {?}
	 */
	function sanitizeHtml(defaultDoc, unsafeHtmlInput) {
	    try {
	        var /** @type {?} */ containerEl = getInertElement();
	        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
	        var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
	        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
	        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
	        var /** @type {?} */ mXSSAttempts = 5;
	        var /** @type {?} */ parsedHtml = unsafeHtml;
	        do {
	            if (mXSSAttempts === 0) {
	                throw new Error('Failed to sanitize html because the input is unstable');
	            }
	            mXSSAttempts--;
	            unsafeHtml = parsedHtml;
	            DOM.setInnerHTML(containerEl, unsafeHtml);
	            if (defaultDoc.documentMode) {
	                // strip custom-namespaced attributes on IE<=11
	                stripCustomNsAttrs(containerEl);
	            }
	            parsedHtml = DOM.getInnerHTML(containerEl);
	        } while (unsafeHtml !== parsedHtml);
	        var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();
	        var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
	        // Clear out the body element.
	        var /** @type {?} */ parent = DOM.getTemplateContent(containerEl) || containerEl;
	        for (var _i = 0, _a = DOM.childNodesAsList(parent); _i < _a.length; _i++) {
	            var child = _a[_i];
	            DOM.removeChild(parent, child);
	        }
	        if (_angular_core.isDevMode() && sanitizer.sanitizedSomething) {
	            DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
	        }
	        return safeHtml;
	    }
	    catch (e) {
	        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
	        inertElement = null;
	        throw e;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Regular expression for safe style values.
	 *
	 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
	 *
	 * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
	 * font-family) and hence could allow multiple values to get injected, but that should pose no risk
	 * of XSS.
	 *
	 * The function expression checks only for XSS safety, not for CSS validity.
	 *
	 * This regular expression was taken from the Closure sanitization library, and augmented for
	 * transformation values.
	 */
	var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
	var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
	var COLOR_FNS = '(?:rgb|hsl)a?';
	var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
	var CSS3_FNS = '(?:calc|attr)';
	var FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
	var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|" +
	    ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") +
	    (FN_ARGS + ")$"), 'g');
	/**
	 * Matches a `url(...)` value with an arbitrary argument as long as it does
	 * not contain parentheses.
	 *
	 * The URL value still needs to be sanitized separately.
	 *
	 * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
	 * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
	 * by observing whether scroll bars are displayed, or character ranges used by a font face
	 * definition.
	 *
	 * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
	 * binding a URL value without further cooperation from the page will cause an information leak, and
	 * if so, it is just a leak, not a full blown XSS vulnerability.
	 *
	 * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
	 * code is permissive and allows URLs that sanitize otherwise.
	 */
	var URL_RE = /^url\(([^)]+)\)$/;
	/**
	 * Checks that quotes (" and ') are properly balanced inside a string. Assumes
	 * that neither escape (\) nor any other character that could result in
	 * breaking out of a string parsing context are allowed;
	 * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
	 *
	 * This code was taken from the Closure sanitization library.
	 * @param {?} value
	 * @return {?}
	 */
	function hasBalancedQuotes(value) {
	    var /** @type {?} */ outsideSingle = true;
	    var /** @type {?} */ outsideDouble = true;
	    for (var /** @type {?} */ i = 0; i < value.length; i++) {
	        var /** @type {?} */ c = value.charAt(i);
	        if (c === '\'' && outsideDouble) {
	            outsideSingle = !outsideSingle;
	        }
	        else if (c === '"' && outsideSingle) {
	            outsideDouble = !outsideDouble;
	        }
	    }
	    return outsideSingle && outsideDouble;
	}
	/**
	 * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
	 * value) and returns a value that is safe to use in a browser environment.
	 * @param {?} value
	 * @return {?}
	 */
	function sanitizeStyle(value) {
	    value = String(value).trim(); // Make sure it's actually a string.
	    if (!value)
	        return '';
	    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
	    // reasoning behind this.
	    var /** @type {?} */ urlMatch = value.match(URL_RE);
	    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
	        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
	        return value; // Safe style values.
	    }
	    if (_angular_core.isDevMode()) {
	        getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
	    }
	    return 'unsafe';
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
	 * values to be safe to use in the different DOM contexts.
	 *
	 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
	 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
	 * the website.
	 *
	 * In specific situations, it might be necessary to disable sanitization, for example if the
	 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
	 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
	 * methods, and then binding to that value from the template.
	 *
	 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
	 * Cross Site Scripting (XSS) security bug!
	 *
	 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
	 * close as possible to the source of the value, to make it easy to verify no security bug is
	 * created by its use.
	 *
	 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
	 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
	 * code. The sanitizer leaves safe values intact.
	 *
	 * \@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
	 * sanitization for the value passed in. Carefully check and audit all values and code paths going
	 * into this call. Make sure any user data is appropriately escaped for this security context.
	 * For more detail, see the [Security Guide](http://g.co/ng/security).
	 *
	 * \@stable
	 * @abstract
	 */
	var DomSanitizer = (function () {
	    function DomSanitizer() {
	    }
	    /**
	     * Sanitizes a value for use in the given SecurityContext.
	     *
	     * If value is trusted for the context, this method will unwrap the contained safe value and use
	     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example
	     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation
	     * is responsible to make sure that the value can definitely be safely used in the given context.
	     * @abstract
	     * @param {?} context
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.sanitize = function (context, value) { };
	    /**
	     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML
	     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will
	     * leave safe HTML intact, so in most situations this method should not be used.
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };
	    /**
	     * Bypass security and trust the given value to be safe style value (CSS).
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };
	    /**
	     * Bypass security and trust the given value to be safe JavaScript.
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };
	    /**
	     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used
	     * in hyperlinks or `<img src>`.
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };
	    /**
	     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may
	     * be used to load executable code from, like `<script src>`, or `<iframe src>`.
	     *
	     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	     * security risks!
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };
	    return DomSanitizer;
	}());
	var DomSanitizerImpl = (function (_super) {
	    __extends(DomSanitizerImpl, _super);
	    /**
	     * @param {?} _doc
	     */
	    function DomSanitizerImpl(_doc) {
	        var _this = _super.call(this) || this;
	        _this._doc = _doc;
	        return _this;
	    }
	    /**
	     * @param {?} ctx
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
	        if (value == null)
	            return null;
	        switch (ctx) {
	            case _angular_core.SecurityContext.NONE:
	                return value;
	            case _angular_core.SecurityContext.HTML:
	                if (value instanceof SafeHtmlImpl)
	                    return value.changingThisBreaksApplicationSecurity;
	                this.checkNotSafeValue(value, 'HTML');
	                return sanitizeHtml(this._doc, String(value));
	            case _angular_core.SecurityContext.STYLE:
	                if (value instanceof SafeStyleImpl)
	                    return value.changingThisBreaksApplicationSecurity;
	                this.checkNotSafeValue(value, 'Style');
	                return sanitizeStyle(value);
	            case _angular_core.SecurityContext.SCRIPT:
	                if (value instanceof SafeScriptImpl)
	                    return value.changingThisBreaksApplicationSecurity;
	                this.checkNotSafeValue(value, 'Script');
	                throw new Error('unsafe value used in a script context');
	            case _angular_core.SecurityContext.URL:
	                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
	                    // Allow resource URLs in URL contexts, they are strictly more trusted.
	                    return value.changingThisBreaksApplicationSecurity;
	                }
	                this.checkNotSafeValue(value, 'URL');
	                return sanitizeUrl(String(value));
	            case _angular_core.SecurityContext.RESOURCE_URL:
	                if (value instanceof SafeResourceUrlImpl) {
	                    return value.changingThisBreaksApplicationSecurity;
	                }
	                this.checkNotSafeValue(value, 'ResourceURL');
	                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
	            default:
	                throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
	        }
	    };
	    /**
	     * @param {?} value
	     * @param {?} expectedType
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
	        if (value instanceof SafeValueImpl) {
	            throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " " +
	                "(see http://g.co/ng/security#xss)");
	        }
	    };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
	        return new SafeResourceUrlImpl(value);
	    };
	    return DomSanitizerImpl;
	}(DomSanitizer));
	DomSanitizerImpl.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	DomSanitizerImpl.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	]; };
	/**
	 * @abstract
	 */
	var SafeValueImpl = (function () {
	    /**
	     * @param {?} changingThisBreaksApplicationSecurity
	     */
	    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
	        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
	        // empty
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    SafeValueImpl.prototype.getTypeName = function () { };
	    /**
	     * @return {?}
	     */
	    SafeValueImpl.prototype.toString = function () {
	        return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity +
	            " (see http://g.co/ng/security#xss)";
	    };
	    return SafeValueImpl;
	}());
	var SafeHtmlImpl = (function (_super) {
	    __extends(SafeHtmlImpl, _super);
	    function SafeHtmlImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
	    return SafeHtmlImpl;
	}(SafeValueImpl));
	var SafeStyleImpl = (function (_super) {
	    __extends(SafeStyleImpl, _super);
	    function SafeStyleImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
	    return SafeStyleImpl;
	}(SafeValueImpl));
	var SafeScriptImpl = (function (_super) {
	    __extends(SafeScriptImpl, _super);
	    function SafeScriptImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
	    return SafeScriptImpl;
	}(SafeValueImpl));
	var SafeUrlImpl = (function (_super) {
	    __extends(SafeUrlImpl, _super);
	    function SafeUrlImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
	    return SafeUrlImpl;
	}(SafeValueImpl));
	var SafeResourceUrlImpl = (function (_super) {
	    __extends(SafeResourceUrlImpl, _super);
	    function SafeResourceUrlImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @return {?}
	     */
	    SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
	    return SafeResourceUrlImpl;
	}(SafeValueImpl));
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
	    { provide: _angular_core.PLATFORM_ID, useValue: _angular_common.ɵPLATFORM_BROWSER_ID },
	    { provide: _angular_core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
	    { provide: _angular_common.PlatformLocation, useClass: BrowserPlatformLocation },
	    { provide: DOCUMENT, useFactory: _document, deps: [] },
	];
	/**
	 * \@security Replacing built-in sanitization providers exposes the application to XSS risks.
	 * Attacker-controlled data introduced by an unsanitized provider could expose your
	 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	 * \@experimental
	 */
	var BROWSER_SANITIZATION_PROVIDERS = [
	    { provide: _angular_core.Sanitizer, useExisting: DomSanitizer },
	    { provide: DomSanitizer, useClass: DomSanitizerImpl },
	];
	/**
	 * \@stable
	 */
	var platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
	/**
	 * @return {?}
	 */
	function initDomAdapter() {
	    BrowserDomAdapter.makeCurrent();
	    BrowserGetTestability.init();
	}
	/**
	 * @return {?}
	 */
	function errorHandler() {
	    return new _angular_core.ErrorHandler();
	}
	/**
	 * @return {?}
	 */
	function _document() {
	    return document;
	}
	/**
	 * The ng module for the browser.
	 *
	 * \@stable
	 */
	var BrowserModule = (function () {
	    /**
	     * @param {?} parentModule
	     */
	    function BrowserModule(parentModule) {
	        if (parentModule) {
	            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
	        }
	    }
	    /**
	     * Configures a browser-based application to transition from a server-rendered app, if
	     * one is present on the page. The specified parameters must include an application id,
	     * which must match between the client and server applications.
	     *
	     * \@experimental
	     * @param {?} params
	     * @return {?}
	     */
	    BrowserModule.withServerTransition = function (params) {
	        return {
	            ngModule: BrowserModule,
	            providers: [
	                { provide: _angular_core.APP_ID, useValue: params.appId },
	                { provide: TRANSITION_ID, useExisting: _angular_core.APP_ID },
	                SERVER_TRANSITION_PROVIDERS,
	            ],
	        };
	    };
	    return BrowserModule;
	}());
	BrowserModule.decorators = [
	    { type: _angular_core.NgModule, args: [{
	                providers: [
	                    BROWSER_SANITIZATION_PROVIDERS,
	                    { provide: _angular_core.ErrorHandler, useFactory: errorHandler, deps: [] },
	                    { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
	                    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
	                    { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
	                    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
	                    DomRendererFactory2,
	                    { provide: _angular_core.RendererFactory2, useExisting: DomRendererFactory2 },
	                    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
	                    DomSharedStylesHost,
	                    _angular_core.Testability,
	                    EventManager,
	                    ELEMENT_PROBE_PROVIDERS,
	                    Meta,
	                    Title,
	                ],
	                exports: [_angular_common.CommonModule, _angular_core.ApplicationModule]
	            },] },
	];
	/**
	 * @nocollapse
	 */
	BrowserModule.ctorParameters = function () { return [
	    { type: BrowserModule, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.SkipSelf },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var win = typeof window !== 'undefined' && window || {};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ChangeDetectionPerfRecord = (function () {
	    /**
	     * @param {?} msPerTick
	     * @param {?} numTicks
	     */
	    function ChangeDetectionPerfRecord(msPerTick, numTicks) {
	        this.msPerTick = msPerTick;
	        this.numTicks = numTicks;
	    }
	    return ChangeDetectionPerfRecord;
	}());
	/**
	 * Entry point for all Angular profiling-related debug tools. This object
	 * corresponds to the `ng.profiler` in the dev console.
	 */
	var AngularProfiler = (function () {
	    /**
	     * @param {?} ref
	     */
	    function AngularProfiler(ref) {
	        this.appRef = ref.injector.get(_angular_core.ApplicationRef);
	    }
	    /**
	     * Exercises change detection in a loop and then prints the average amount of
	     * time in milliseconds how long a single round of change detection takes for
	     * the current state of the UI. It runs a minimum of 5 rounds for a minimum
	     * of 500 milliseconds.
	     *
	     * Optionally, a user may pass a `config` parameter containing a map of
	     * options. Supported options are:
	     *
	     * `record` (boolean) - causes the profiler to record a CPU profile while
	     * it exercises the change detector. Example:
	     *
	     * ```
	     * ng.profiler.timeChangeDetection({record: true})
	     * ```
	     * @param {?} config
	     * @return {?}
	     */
	    AngularProfiler.prototype.timeChangeDetection = function (config) {
	        var /** @type {?} */ record = config && config['record'];
	        var /** @type {?} */ profileName = 'Change Detection';
	        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
	        var /** @type {?} */ isProfilerAvailable = win.console.profile != null;
	        if (record && isProfilerAvailable) {
	            win.console.profile(profileName);
	        }
	        var /** @type {?} */ start = getDOM().performanceNow();
	        var /** @type {?} */ numTicks = 0;
	        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
	            this.appRef.tick();
	            numTicks++;
	        }
	        var /** @type {?} */ end = getDOM().performanceNow();
	        if (record && isProfilerAvailable) {
	            // need to cast to <any> because type checker thinks there's no argument
	            // while in fact there is:
	            //
	            // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
	            ((win.console.profileEnd))(profileName);
	        }
	        var /** @type {?} */ msPerTick = (end - start) / numTicks;
	        win.console.log("ran " + numTicks + " change detection cycles");
	        win.console.log(msPerTick.toFixed(2) + " ms per check");
	        return new ChangeDetectionPerfRecord(msPerTick, numTicks);
	    };
	    return AngularProfiler;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var PROFILER_GLOBAL_NAME = 'ng.profiler';
	/**
	 * Enabled Angular debug tools that are accessible via your browser's
	 * developer console.
	 *
	 * Usage:
	 *
	 * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
	 * 1. Type `ng.` (usually the console will show auto-complete suggestion)
	 * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
	 *    then hit Enter.
	 *
	 * \@experimental All debugging apis are currently experimental.
	 * @template T
	 * @param {?} ref
	 * @return {?}
	 */
	function enableDebugTools(ref) {
	    getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));
	    return ref;
	}
	/**
	 * Disables Angular tools.
	 *
	 * \@experimental All debugging apis are currently experimental.
	 * @return {?}
	 */
	function disableDebugTools() {
	    getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, null);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Predicates for use with {\@link DebugElement}'s query functions.
	 *
	 * \@experimental All debugging apis are currently experimental.
	 */
	var By = (function () {
	    function By() {
	    }
	    /**
	     * Match all elements.
	     *
	     * ## Example
	     *
	     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
	     * @return {?}
	     */
	    By.all = function () { return function (debugElement) { return true; }; };
	    /**
	     * Match elements by the given CSS selector.
	     *
	     * ## Example
	     *
	     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
	     * @param {?} selector
	     * @return {?}
	     */
	    By.css = function (selector) {
	        return function (debugElement) {
	            return debugElement.nativeElement != null ?
	                getDOM().elementMatches(debugElement.nativeElement, selector) :
	                false;
	        };
	    };
	    /**
	     * Match elements that have the given directive present.
	     *
	     * ## Example
	     *
	     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
	     * @param {?} type
	     * @return {?}
	     */
	    By.directive = function (type) {
	        return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1; };
	    };
	    return By;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Entry point for all public APIs of the common package.
	 */
	/**
	 * \@stable
	 */
	var VERSION = new _angular_core.Version('4.0.0');
	
	exports.BrowserModule = BrowserModule;
	exports.platformBrowser = platformBrowser;
	exports.Meta = Meta;
	exports.Title = Title;
	exports.disableDebugTools = disableDebugTools;
	exports.enableDebugTools = enableDebugTools;
	exports.By = By;
	exports.NgProbeToken = NgProbeToken$1;
	exports.DOCUMENT = DOCUMENT;
	exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
	exports.EventManager = EventManager;
	exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
	exports.HammerGestureConfig = HammerGestureConfig;
	exports.DomSanitizer = DomSanitizer;
	exports.VERSION = VERSION;
	exports.ɵBROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS;
	exports.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS = INTERNAL_BROWSER_PLATFORM_PROVIDERS;
	exports.ɵinitDomAdapter = initDomAdapter;
	exports.ɵBrowserDomAdapter = BrowserDomAdapter;
	exports.ɵsetValueOnPath = setValueOnPath;
	exports.ɵBrowserPlatformLocation = BrowserPlatformLocation;
	exports.ɵTRANSITION_ID = TRANSITION_ID;
	exports.ɵBrowserGetTestability = BrowserGetTestability;
	exports.ɵELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS;
	exports.ɵDomAdapter = DomAdapter;
	exports.ɵgetDOM = getDOM;
	exports.ɵsetRootDomAdapter = setRootDomAdapter;
	exports.ɵDomRendererFactory2 = DomRendererFactory2;
	exports.ɵNAMESPACE_URIS = NAMESPACE_URIS;
	exports.ɵflattenStyles = flattenStyles;
	exports.ɵshimContentAttribute = shimContentAttribute;
	exports.ɵshimHostAttribute = shimHostAttribute;
	exports.ɵDomEventsPlugin = DomEventsPlugin;
	exports.ɵHammerGesturesPlugin = HammerGesturesPlugin;
	exports.ɵKeyEventsPlugin = KeyEventsPlugin;
	exports.ɵDomSharedStylesHost = DomSharedStylesHost;
	exports.ɵSharedStylesHost = SharedStylesHost;
	exports.ɵb = _document;
	exports.ɵa = errorHandler;
	exports.ɵh = GenericBrowserDomAdapter;
	exports.ɵg = SERVER_TRANSITION_PROVIDERS;
	exports.ɵf = bootstrapListenerFactory;
	exports.ɵc = _createNgProbe;
	exports.ɵd = EventManagerPlugin;
	exports.ɵe = DomSanitizerImpl;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));
	//# sourceMappingURL=platform-browser.umd.js.map


/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(485)) :
		typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
		(factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}),global.ng.core));
	}(this, (function (exports,_angular_core) { 'use strict';
	
	var __extends = (undefined && undefined.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * @license Angular v4.0.0
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This class should not be used directly by an application developer. Instead, use
	 * {\@link Location}.
	 *
	 * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
	 * agnostic.
	 * This means that we can have different implementation of `PlatformLocation` for the different
	 * platforms
	 * that angular supports. For example, the default `PlatformLocation` is {\@link
	 * BrowserPlatformLocation},
	 * however when you run your app in a WebWorker you use {\@link WebWorkerPlatformLocation}.
	 *
	 * The `PlatformLocation` class is used directly by all implementations of {\@link LocationStrategy}
	 * when
	 * they need to interact with the DOM apis like pushState, popState, etc...
	 *
	 * {\@link LocationStrategy} in turn is used by the {\@link Location} service which is used directly
	 * by
	 * the {\@link Router} in order to navigate between routes. Since all interactions between {\@link
	 * Router} /
	 * {\@link Location} / {\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
	 * class
	 * they are all platform independent.
	 *
	 * \@stable
	 * @abstract
	 */
	var PlatformLocation = (function () {
	    function PlatformLocation() {
	    }
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformLocation.prototype.getBaseHrefFromDOM = function () { };
	    /**
	     * @abstract
	     * @param {?} fn
	     * @return {?}
	     */
	    PlatformLocation.prototype.onPopState = function (fn) { };
	    /**
	     * @abstract
	     * @param {?} fn
	     * @return {?}
	     */
	    PlatformLocation.prototype.onHashChange = function (fn) { };
	    Object.defineProperty(PlatformLocation.prototype, "pathname", {
	        /**
	         * @return {?}
	         */
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PlatformLocation.prototype, "search", {
	        /**
	         * @return {?}
	         */
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PlatformLocation.prototype, "hash", {
	        /**
	         * @return {?}
	         */
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @abstract
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @return {?}
	     */
	    PlatformLocation.prototype.replaceState = function (state, title, url) { };
	    /**
	     * @abstract
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @return {?}
	     */
	    PlatformLocation.prototype.pushState = function (state, title, url) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformLocation.prototype.forward = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    PlatformLocation.prototype.back = function () { };
	    return PlatformLocation;
	}());
	/**
	 * \@whatItDoes indicates when a location is initialized
	 * \@experimental
	 */
	var LOCATION_INITIALIZED = new _angular_core.InjectionToken('Location Initialized');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `LocationStrategy` is responsible for representing and reading route state
	 * from the browser's URL. Angular provides two strategies:
	 * {\@link HashLocationStrategy} and {\@link PathLocationStrategy}.
	 *
	 * This is used under the hood of the {\@link Location} service.
	 *
	 * Applications should use the {\@link Router} or {\@link Location} services to
	 * interact with application route state.
	 *
	 * For instance, {\@link HashLocationStrategy} produces URLs like
	 * `http://example.com#/foo`, and {\@link PathLocationStrategy} produces
	 * `http://example.com/foo` as an equivalent URL.
	 *
	 * See these two classes for more.
	 *
	 * \@stable
	 * @abstract
	 */
	var LocationStrategy = (function () {
	    function LocationStrategy() {
	    }
	    /**
	     * @abstract
	     * @param {?=} includeHash
	     * @return {?}
	     */
	    LocationStrategy.prototype.path = function (includeHash) { };
	    /**
	     * @abstract
	     * @param {?} internal
	     * @return {?}
	     */
	    LocationStrategy.prototype.prepareExternalUrl = function (internal) { };
	    /**
	     * @abstract
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @param {?} queryParams
	     * @return {?}
	     */
	    LocationStrategy.prototype.pushState = function (state, title, url, queryParams) { };
	    /**
	     * @abstract
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @param {?} queryParams
	     * @return {?}
	     */
	    LocationStrategy.prototype.replaceState = function (state, title, url, queryParams) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    LocationStrategy.prototype.forward = function () { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    LocationStrategy.prototype.back = function () { };
	    /**
	     * @abstract
	     * @param {?} fn
	     * @return {?}
	     */
	    LocationStrategy.prototype.onPopState = function (fn) { };
	    /**
	     * @abstract
	     * @return {?}
	     */
	    LocationStrategy.prototype.getBaseHref = function () { };
	    return LocationStrategy;
	}());
	/**
	 * The `APP_BASE_HREF` token represents the base href to be used with the
	 * {\@link PathLocationStrategy}.
	 *
	 * If you're using {\@link PathLocationStrategy}, you must provide a provider to a string
	 * representing the URL prefix that should be preserved when generating and recognizing
	 * URLs.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {Component, NgModule} from '\@angular/core';
	 * import {APP_BASE_HREF} from '\@angular/common';
	 *
	 * \@NgModule({
	 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
	 * })
	 * class AppModule {}
	 * ```
	 *
	 * \@stable
	 */
	var APP_BASE_HREF = new _angular_core.InjectionToken('appBaseHref');
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.
	 * \@description
	 * Depending on which {\@link LocationStrategy} is used, `Location` will either persist
	 * to the URL's path or the URL's hash segment.
	 *
	 * Note: it's better to use {\@link Router#navigate} service to trigger route changes. Use
	 * `Location` only if you need to interact with or create normalized URLs outside of
	 * routing.
	 *
	 * `Location` is responsible for normalizing the URL against the application's base href.
	 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
	 * trailing slash:
	 * - `/my/app/user/123` is normalized
	 * - `my/app/user/123` **is not** normalized
	 * - `/my/app/user/123/` **is not** normalized
	 *
	 * ### Example
	 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
	 * \@stable
	 */
	var Location = (function () {
	    /**
	     * @param {?} platformStrategy
	     */
	    function Location(platformStrategy) {
	        var _this = this;
	        /**
	         * \@internal
	         */
	        this._subject = new _angular_core.EventEmitter();
	        this._platformStrategy = platformStrategy;
	        var browserBaseHref = this._platformStrategy.getBaseHref();
	        this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
	        this._platformStrategy.onPopState(function (ev) {
	            _this._subject.emit({
	                'url': _this.path(true),
	                'pop': true,
	                'type': ev.type,
	            });
	        });
	    }
	    /**
	     * @param {?=} includeHash
	     * @return {?}
	     */
	    Location.prototype.path = function (includeHash) {
	        if (includeHash === void 0) { includeHash = false; }
	        return this.normalize(this._platformStrategy.path(includeHash));
	    };
	    /**
	     * Normalizes the given path and compares to the current normalized path.
	     * @param {?} path
	     * @param {?=} query
	     * @return {?}
	     */
	    Location.prototype.isCurrentPathEqualTo = function (path, query) {
	        if (query === void 0) { query = ''; }
	        return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
	    };
	    /**
	     * Given a string representing a URL, returns the normalized URL path without leading or
	     * trailing slashes.
	     * @param {?} url
	     * @return {?}
	     */
	    Location.prototype.normalize = function (url) {
	        return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
	    };
	    /**
	     * Given a string representing a URL, returns the platform-specific external URL path.
	     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
	     * before normalizing. This method will also add a hash if `HashLocationStrategy` is
	     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
	     * @param {?} url
	     * @return {?}
	     */
	    Location.prototype.prepareExternalUrl = function (url) {
	        if (url && url[0] !== '/') {
	            url = '/' + url;
	        }
	        return this._platformStrategy.prepareExternalUrl(url);
	    };
	    /**
	     * Changes the browsers URL to the normalized version of the given URL, and pushes a
	     * new item onto the platform's history.
	     * @param {?} path
	     * @param {?=} query
	     * @return {?}
	     */
	    Location.prototype.go = function (path, query) {
	        if (query === void 0) { query = ''; }
	        this._platformStrategy.pushState(null, '', path, query);
	    };
	    /**
	     * Changes the browsers URL to the normalized version of the given URL, and replaces
	     * the top item on the platform's history stack.
	     * @param {?} path
	     * @param {?=} query
	     * @return {?}
	     */
	    Location.prototype.replaceState = function (path, query) {
	        if (query === void 0) { query = ''; }
	        this._platformStrategy.replaceState(null, '', path, query);
	    };
	    /**
	     * Navigates forward in the platform's history.
	     * @return {?}
	     */
	    Location.prototype.forward = function () { this._platformStrategy.forward(); };
	    /**
	     * Navigates back in the platform's history.
	     * @return {?}
	     */
	    Location.prototype.back = function () { this._platformStrategy.back(); };
	    /**
	     * Subscribe to the platform's `popState` events.
	     * @param {?} onNext
	     * @param {?=} onThrow
	     * @param {?=} onReturn
	     * @return {?}
	     */
	    Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
	        if (onThrow === void 0) { onThrow = null; }
	        if (onReturn === void 0) { onReturn = null; }
	        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
	    };
	    /**
	     * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
	     * is.
	     * @param {?} params
	     * @return {?}
	     */
	    Location.normalizeQueryParams = function (params) {
	        return params && params[0] !== '?' ? '?' + params : params;
	    };
	    /**
	     * Given 2 parts of a url, join them with a slash if needed.
	     * @param {?} start
	     * @param {?} end
	     * @return {?}
	     */
	    Location.joinWithSlash = function (start, end) {
	        if (start.length == 0) {
	            return end;
	        }
	        if (end.length == 0) {
	            return start;
	        }
	        var /** @type {?} */ slashes = 0;
	        if (start.endsWith('/')) {
	            slashes++;
	        }
	        if (end.startsWith('/')) {
	            slashes++;
	        }
	        if (slashes == 2) {
	            return start + end.substring(1);
	        }
	        if (slashes == 1) {
	            return start + end;
	        }
	        return start + '/' + end;
	    };
	    /**
	     * If url has a trailing slash, remove it, otherwise return url as is.
	     * @param {?} url
	     * @return {?}
	     */
	    Location.stripTrailingSlash = function (url) { return url.replace(/\/$/, ''); };
	    return Location;
	}());
	Location.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	Location.ctorParameters = function () { return [
	    { type: LocationStrategy, },
	]; };
	/**
	 * @param {?} baseHref
	 * @param {?} url
	 * @return {?}
	 */
	function _stripBaseHref(baseHref, url) {
	    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
	}
	/**
	 * @param {?} url
	 * @return {?}
	 */
	function _stripIndexHtml(url) {
	    return url.replace(/\/index.html$/, '');
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes Use URL hash for storing application location data.
	 * \@description
	 * `HashLocationStrategy` is a {\@link LocationStrategy} used to configure the
	 * {\@link Location} service to represent its state in the
	 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
	 * of the browser's URL.
	 *
	 * For instance, if you call `location.go('/foo')`, the browser's URL will become
	 * `example.com#/foo`.
	 *
	 * ### Example
	 *
	 * {\@example common/location/ts/hash_location_component.ts region='LocationComponent'}
	 *
	 * \@stable
	 */
	var HashLocationStrategy = (function (_super) {
	    __extends(HashLocationStrategy, _super);
	    /**
	     * @param {?} _platformLocation
	     * @param {?=} _baseHref
	     */
	    function HashLocationStrategy(_platformLocation, _baseHref) {
	        var _this = _super.call(this) || this;
	        _this._platformLocation = _platformLocation;
	        _this._baseHref = '';
	        if (_baseHref != null) {
	            _this._baseHref = _baseHref;
	        }
	        return _this;
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.onPopState = function (fn) {
	        this._platformLocation.onPopState(fn);
	        this._platformLocation.onHashChange(fn);
	    };
	    /**
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	    /**
	     * @param {?=} includeHash
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.path = function (includeHash) {
	        if (includeHash === void 0) { includeHash = false; }
	        // the hash value is always prefixed with a `#`
	        // and if it is empty then it will stay empty
	        var /** @type {?} */ path = this._platformLocation.hash;
	        if (path == null)
	            path = '#';
	        return path.length > 0 ? path.substring(1) : path;
	    };
	    /**
	     * @param {?} internal
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	        var /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);
	        return url.length > 0 ? ('#' + url) : url;
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} path
	     * @param {?} queryParams
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
	        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	        if (url.length == 0) {
	            url = this._platformLocation.pathname;
	        }
	        this._platformLocation.pushState(state, title, url);
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} path
	     * @param {?} queryParams
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
	        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	        if (url.length == 0) {
	            url = this._platformLocation.pathname;
	        }
	        this._platformLocation.replaceState(state, title, url);
	    };
	    /**
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	    /**
	     * @return {?}
	     */
	    HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	    return HashLocationStrategy;
	}(LocationStrategy));
	HashLocationStrategy.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	HashLocationStrategy.ctorParameters = function () { return [
	    { type: PlatformLocation, },
	    { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@whatItDoes Use URL for storing application location data.
	 * \@description
	 * `PathLocationStrategy` is a {\@link LocationStrategy} used to configure the
	 * {\@link Location} service to represent its state in the
	 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
	 * browser's URL.
	 *
	 * If you're using `PathLocationStrategy`, you must provide a {\@link APP_BASE_HREF}
	 * or add a base element to the document. This URL prefix that will be preserved
	 * when generating and recognizing URLs.
	 *
	 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
	 * `location.go('/foo')`, the browser's URL will become
	 * `example.com/my/app/foo`.
	 *
	 * Similarly, if you add `<base href='/my/app'/>` to the document and call
	 * `location.go('/foo')`, the browser's URL will become
	 * `example.com/my/app/foo`.
	 *
	 * ### Example
	 *
	 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
	 *
	 * \@stable
	 */
	var PathLocationStrategy = (function (_super) {
	    __extends(PathLocationStrategy, _super);
	    /**
	     * @param {?} _platformLocation
	     * @param {?=} href
	     */
	    function PathLocationStrategy(_platformLocation, href) {
	        var _this = _super.call(this) || this;
	        _this._platformLocation = _platformLocation;
	        if (href == null) {
	            href = _this._platformLocation.getBaseHrefFromDOM();
	        }
	        if (href == null) {
	            throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
	        }
	        _this._baseHref = href;
	        return _this;
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.onPopState = function (fn) {
	        this._platformLocation.onPopState(fn);
	        this._platformLocation.onHashChange(fn);
	    };
	    /**
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	    /**
	     * @param {?} internal
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	        return Location.joinWithSlash(this._baseHref, internal);
	    };
	    /**
	     * @param {?=} includeHash
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.path = function (includeHash) {
	        if (includeHash === void 0) { includeHash = false; }
	        var /** @type {?} */ pathname = this._platformLocation.pathname +
	            Location.normalizeQueryParams(this._platformLocation.search);
	        var /** @type {?} */ hash = this._platformLocation.hash;
	        return hash && includeHash ? "" + pathname + hash : pathname;
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @param {?} queryParams
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
	        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	        this._platformLocation.pushState(state, title, externalUrl);
	    };
	    /**
	     * @param {?} state
	     * @param {?} title
	     * @param {?} url
	     * @param {?} queryParams
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
	        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	        this._platformLocation.replaceState(state, title, externalUrl);
	    };
	    /**
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	    /**
	     * @return {?}
	     */
	    PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	    return PathLocationStrategy;
	}(LocationStrategy));
	PathLocationStrategy.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	PathLocationStrategy.ctorParameters = function () { return [
	    { type: PlatformLocation, },
	    { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@experimental
	 * @abstract
	 */
	var NgLocalization = (function () {
	    function NgLocalization() {
	    }
	    /**
	     * @abstract
	     * @param {?} value
	     * @return {?}
	     */
	    NgLocalization.prototype.getPluralCategory = function (value) { };
	    return NgLocalization;
	}());
	/**
	 * Returns the plural category for a given value.
	 * - "=value" when the case exists,
	 * - the plural category otherwise
	 *
	 * \@internal
	 * @param {?} value
	 * @param {?} cases
	 * @param {?} ngLocalization
	 * @return {?}
	 */
	function getPluralCategory(value, cases, ngLocalization) {
	    var /** @type {?} */ key = "=" + value;
	    if (cases.indexOf(key) > -1) {
	        return key;
	    }
	    key = ngLocalization.getPluralCategory(value);
	    if (cases.indexOf(key) > -1) {
	        return key;
	    }
	    if (cases.indexOf('other') > -1) {
	        return 'other';
	    }
	    throw new Error("No plural message found for value \"" + value + "\"");
	}
	/**
	 * Returns the plural case based on the locale
	 *
	 * \@experimental
	 */
	var NgLocaleLocalization = (function (_super) {
	    __extends(NgLocaleLocalization, _super);
	    /**
	     * @param {?} locale
	     */
	    function NgLocaleLocalization(locale) {
	        var _this = _super.call(this) || this;
	        _this.locale = locale;
	        return _this;
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    NgLocaleLocalization.prototype.getPluralCategory = function (value) {
	        var /** @type {?} */ plural = getPluralCase(this.locale, value);
	        switch (plural) {
	            case Plural.Zero:
	                return 'zero';
	            case Plural.One:
	                return 'one';
	            case Plural.Two:
	                return 'two';
	            case Plural.Few:
	                return 'few';
	            case Plural.Many:
	                return 'many';
	            default:
	                return 'other';
	        }
	    };
	    return NgLocaleLocalization;
	}(NgLocalization));
	NgLocaleLocalization.decorators = [
	    { type: _angular_core.Injectable },
	];
	/**
	 * @nocollapse
	 */
	NgLocaleLocalization.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	var Plural = {};
	Plural.Zero = 0;
	Plural.One = 1;
	Plural.Two = 2;
	Plural.Few = 3;
	Plural.Many = 4;
	Plural.Other = 5;
	Plural[Plural.Zero] = "Zero";
	Plural[Plural.One] = "One";
	Plural[Plural.Two] = "Two";
	Plural[Plural.Few] = "Few";
	Plural[Plural.Many] = "Many";
	Plural[Plural.Other] = "Other";
	/**
	 * Returns the plural case based on the locale
	 *
	 * \@experimental
	 * @param {?} locale
	 * @param {?} nLike
	 * @return {?}
	 */
	function getPluralCase(locale, nLike) {
	    // TODO(vicb): lazy compute
	    if (typeof nLike === 'string') {
	        nLike = parseInt(/** @type {?} */ (nLike), 10);
	    }
	    var /** @type {?} */ n = (nLike);
	    var /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\.?/, '');
	    var /** @type {?} */ i = Math.floor(Math.abs(n));
	    var /** @type {?} */ v = nDecimal.length;
	    var /** @type {?} */ f = parseInt(nDecimal, 10);
	    var /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
	    var /** @type {?} */ lang = locale.split('-')[0].toLowerCase();
	    switch (lang) {
	        case 'af':
	        case 'asa':
	        case 'az':
	        case 'bem':
	        case 'bez':
	        case 'bg':
	        case 'brx':
	        case 'ce':
	        case 'cgg':
	        case 'chr':
	        case 'ckb':
	        case 'ee':
	        case 'el':
	        case 'eo':
	        case 'es':
	        case 'eu':
	        case 'fo':
	        case 'fur':
	        case 'gsw':
	        case 'ha':
	        case 'haw':
	        case 'hu':
	        case 'jgo':
	        case 'jmc':
	        case 'ka':
	        case 'kk':
	        case 'kkj':
	        case 'kl':
	        case 'ks':
	        case 'ksb':
	        case 'ky':
	        case 'lb':
	        case 'lg':
	        case 'mas':
	        case 'mgo':
	        case 'ml':
	        case 'mn':
	        case 'nb':
	        case 'nd':
	        case 'ne':
	        case 'nn':
	        case 'nnh':
	        case 'nyn':
	        case 'om':
	        case 'or':
	        case 'os':
	        case 'ps':
	        case 'rm':
	        case 'rof':
	        case 'rwk':
	        case 'saq':
	        case 'seh':
	        case 'sn':
	        case 'so':
	        case 'sq':
	        case 'ta':
	        case 'te':
	        case 'teo':
	        case 'tk':
	        case 'tr':
	        case 'ug':
	        case 'uz':
	        case 'vo':
	        case 'vun':
	        case 'wae':
	        case 'xog':
	            if (n === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'agq':
	        case 'bas':
	        case 'cu':
	        case 'dav':
	        case 'dje':
	        case 'dua':
	        case 'dyo':
	        case 'ebu':
	        case 'ewo':
	        case 'guz':
	        case 'kam':
	        case 'khq':
	        case 'ki':
	        case 'kln':
	        case 'kok':
	        case 'ksf':
	        case 'lrc':
	        case 'lu':
	        case 'luo':
	        case 'luy':
	        case 'mer':
	        case 'mfe':
	        case 'mgh':
	        case 'mua':
	        case 'mzn':
	        case 'nmg':
	        case 'nus':
	        case 'qu':
	        case 'rn':
	        case 'rw':
	        case 'sbp':
	        case 'twq':
	        case 'vai':
	        case 'yav':
	        case 'yue':
	        case 'zgh':
	        case 'ak':
	        case 'ln':
	        case 'mg':
	        case 'pa':
	        case 'ti':
	            if (n === Math.floor(n) && n >= 0 && n <= 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'am':
	        case 'as':
	        case 'bn':
	        case 'fa':
	        case 'gu':
	        case 'hi':
	        case 'kn':
	        case 'mr':
	        case 'zu':
	            if (i === 0 || n === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'ar':
	            if (n === 0)
	                return Plural.Zero;
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
	                return Plural.Few;
	            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
	                return Plural.Many;
	            return Plural.Other;
	        case 'ast':
	        case 'ca':
	        case 'de':
	        case 'en':
	        case 'et':
	        case 'fi':
	        case 'fy':
	        case 'gl':
	        case 'it':
	        case 'nl':
	        case 'sv':
	        case 'sw':
	        case 'ur':
	        case 'yi':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            return Plural.Other;
	        case 'be':
	            if (n % 10 === 1 && !(n % 100 === 11))
	                return Plural.One;
	            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
	                !(n % 100 >= 12 && n % 100 <= 14))
	                return Plural.Few;
	            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
	                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
	                return Plural.Many;
	            return Plural.Other;
	        case 'br':
	            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
	                return Plural.One;
	            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
	                return Plural.Two;
	            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
	                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
	                    n % 100 >= 90 && n % 100 <= 99))
	                return Plural.Few;
	            if (!(n === 0) && n % 1e6 === 0)
	                return Plural.Many;
	            return Plural.Other;
	        case 'bs':
	        case 'hr':
	        case 'sr':
	            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
	                return Plural.One;
	            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                !(i % 100 >= 12 && i % 100 <= 14) ||
	                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
	                    !(f % 100 >= 12 && f % 100 <= 14))
	                return Plural.Few;
	            return Plural.Other;
	        case 'cs':
	        case 'sk':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
	                return Plural.Few;
	            if (!(v === 0))
	                return Plural.Many;
	            return Plural.Other;
	        case 'cy':
	            if (n === 0)
	                return Plural.Zero;
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            if (n === 3)
	                return Plural.Few;
	            if (n === 6)
	                return Plural.Many;
	            return Plural.Other;
	        case 'da':
	            if (n === 1 || !(t === 0) && (i === 0 || i === 1))
	                return Plural.One;
	            return Plural.Other;
	        case 'dsb':
	        case 'hsb':
	            if (v === 0 && i % 100 === 1 || f % 100 === 1)
	                return Plural.One;
	            if (v === 0 && i % 100 === 2 || f % 100 === 2)
	                return Plural.Two;
	            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
	                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
	                return Plural.Few;
	            return Plural.Other;
	        case 'ff':
	        case 'fr':
	        case 'hy':
	        case 'kab':
	            if (i === 0 || i === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'fil':
	            if (v === 0 && (i === 1 || i === 2 || i === 3) ||
	                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
	                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
	                return Plural.One;
	            return Plural.Other;
	        case 'ga':
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            if (n === Math.floor(n) && n >= 3 && n <= 6)
	                return Plural.Few;
	            if (n === Math.floor(n) && n >= 7 && n <= 10)
	                return Plural.Many;
	            return Plural.Other;
	        case 'gd':
	            if (n === 1 || n === 11)
	                return Plural.One;
	            if (n === 2 || n === 12)
	                return Plural.Two;
	            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
	                return Plural.Few;
	            return Plural.Other;
	        case 'gv':
	            if (v === 0 && i % 10 === 1)
	                return Plural.One;
	            if (v === 0 && i % 10 === 2)
	                return Plural.Two;
	            if (v === 0 &&
	                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
	                return Plural.Few;
	            if (!(v === 0))
	                return Plural.Many;
	            return Plural.Other;
	        case 'he':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (i === 2 && v === 0)
	                return Plural.Two;
	            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
	                return Plural.Many;
	            return Plural.Other;
	        case 'is':
	            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
	                return Plural.One;
	            return Plural.Other;
	        case 'ksh':
	            if (n === 0)
	                return Plural.Zero;
	            if (n === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'kw':
	        case 'naq':
	        case 'se':
	        case 'smn':
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            return Plural.Other;
	        case 'lag':
	            if (n === 0)
	                return Plural.Zero;
	            if ((i === 0 || i === 1) && !(n === 0))
	                return Plural.One;
	            return Plural.Other;
	        case 'lt':
	            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
	                return Plural.One;
	            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
	                !(n % 100 >= 11 && n % 100 <= 19))
	                return Plural.Few;
	            if (!(f === 0))
	                return Plural.Many;
	            return Plural.Other;
	        case 'lv':
	        case 'prg':
	            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
	                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
	                return Plural.Zero;
	            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
	                !(v === 2) && f % 10 === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'mk':
	            if (v === 0 && i % 10 === 1 || f % 10 === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'mt':
	            if (n === 1)
	                return Plural.One;
	            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
	                return Plural.Few;
	            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
	                return Plural.Many;
	            return Plural.Other;
	        case 'pl':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                !(i % 100 >= 12 && i % 100 <= 14))
	                return Plural.Few;
	            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
	                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
	                return Plural.Many;
	            return Plural.Other;
	        case 'pt':
	            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
	                return Plural.One;
	            return Plural.Other;
	        case 'ro':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (!(v === 0) || n === 0 ||
	                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
	                return Plural.Few;
	            return Plural.Other;
	        case 'ru':
	        case 'uk':
	            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
	                return Plural.One;
	            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                !(i % 100 >= 12 && i % 100 <= 14))
	                return Plural.Few;
	            if (v === 0 && i % 10 === 0 ||
	                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
	                return Plural.Many;
	            return Plural.Other;
	        case 'shi':
	            if (i === 0 || n === 1)
	                return Plural.One;
	            if (n === Math.floor(n) && n >= 2 && n <= 10)
	                return Plural.Few;
	            return Plural.Other;
	        case 'si':
	            if (n === 0 || n === 1 || i === 0 && f === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'sl':
	            if (v === 0 && i % 100 === 1)
	                return Plural.One;
	            if (v === 0 && i % 100 === 2)
	                return Plural.Two;
	            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
	                return Plural.Few;
	            return Plural.Other;
	        case 'tzm':
	            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
	                return Plural.One;
	            return Plural.Other;
	        default:
	            return Plural.Other;
	    }
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Adds and removes CSS classes on an HTML element.
	 *
	 * \@howToUse
	 * ```
	 *     <some-element [ngClass]="'first second'">...</some-element>
	 *
	 *     <some-element [ngClass]="['first', 'second']">...</some-element>
	 *
	 *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
	 *
	 *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
	 *
	 *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
	 * ```
	 *
	 * \@description
	 *
	 * The CSS classes are updated as follows, depending on the type of the expression evaluation:
	 * - `string` - the CSS classes listed in the string (space delimited) are added,
	 * - `Array` - the CSS classes declared as Array elements are added,
	 * - `Object` - keys are CSS classes that get added when the expression given in the value
	 *              evaluates to a truthy value, otherwise they are removed.
	 *
	 * \@stable
	 */
	var NgClass = (function () {
	    /**
	     * @param {?} _iterableDiffers
	     * @param {?} _keyValueDiffers
	     * @param {?} _ngEl
	     * @param {?} _renderer
	     */
	    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
	        this._iterableDiffers = _iterableDiffers;
	        this._keyValueDiffers = _keyValueDiffers;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	        this._initialClasses = [];
	    }
	    Object.defineProperty(NgClass.prototype, "klass", {
	        /**
	         * @param {?} v
	         * @return {?}
	         */
	        set: function (v) {
	            this._applyInitialClasses(true);
	            this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
	            this._applyInitialClasses(false);
	            this._applyClasses(this._rawClass, false);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgClass.prototype, "ngClass", {
	        /**
	         * @param {?} v
	         * @return {?}
	         */
	        set: function (v) {
	            this._cleanupClasses(this._rawClass);
	            this._iterableDiffer = null;
	            this._keyValueDiffer = null;
	            this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
	            if (this._rawClass) {
	                if (_angular_core.ɵisListLikeIterable(this._rawClass)) {
	                    this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
	                }
	                else {
	                    this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgClass.prototype.ngDoCheck = function () {
	        if (this._iterableDiffer) {
	            var /** @type {?} */ iterableChanges = this._iterableDiffer.diff(/** @type {?} */ (this._rawClass));
	            if (iterableChanges) {
	                this._applyIterableChanges(iterableChanges);
	            }
	        }
	        else if (this._keyValueDiffer) {
	            var /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff(/** @type {?} */ (this._rawClass));
	            if (keyValueChanges) {
	                this._applyKeyValueChanges(keyValueChanges);
	            }
	        }
	    };
	    /**
	     * @param {?} rawClassVal
	     * @return {?}
	     */
	    NgClass.prototype._cleanupClasses = function (rawClassVal) {
	        this._applyClasses(rawClassVal, true);
	        this._applyInitialClasses(false);
	    };
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgClass.prototype._applyKeyValueChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	        changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	        changes.forEachRemovedItem(function (record) {
	            if (record.previousValue) {
	                _this._toggleClass(record.key, false);
	            }
	        });
	    };
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgClass.prototype._applyIterableChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) {
	            if (typeof record.item === 'string') {
	                _this._toggleClass(record.item, true);
	            }
	            else {
	                throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + _angular_core.ɵstringify(record.item));
	            }
	        });
	        changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
	    };
	    /**
	     * @param {?} isCleanup
	     * @return {?}
	     */
	    NgClass.prototype._applyInitialClasses = function (isCleanup) {
	        var _this = this;
	        this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	    };
	    /**
	     * @param {?} rawClassVal
	     * @param {?} isCleanup
	     * @return {?}
	     */
	    NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
	        var _this = this;
	        if (rawClassVal) {
	            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
	                ((rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	            }
	            else {
	                Object.keys(rawClassVal).forEach(function (klass) {
	                    if (rawClassVal[klass] != null)
	                        _this._toggleClass(klass, !isCleanup);
	                });
	            }
	        }
	    };
	    /**
	     * @param {?} klass
	     * @param {?} enabled
	     * @return {?}
	     */
	    NgClass.prototype._toggleClass = function (klass, enabled) {
	        var _this = this;
	        klass = klass.trim();
	        if (klass) {
	            klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, !!enabled); });
	        }
	    };
	    return NgClass;
	}());
	NgClass.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngClass]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgClass.ctorParameters = function () { return [
	    { type: _angular_core.IterableDiffers, },
	    { type: _angular_core.KeyValueDiffers, },
	    { type: _angular_core.ElementRef, },
	    { type: _angular_core.Renderer, },
	]; };
	NgClass.propDecorators = {
	    'klass': [{ type: _angular_core.Input, args: ['class',] },],
	    'ngClass': [{ type: _angular_core.Input },],
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Instantiates a single {\@link Component} type and inserts its Host View into current View.
	 * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
	 *
	 * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
	 * any existing component will get destroyed.
	 *
	 * ### Fine tune control
	 *
	 * You can control the component creation process by using the following optional attributes:
	 *
	 * * `ngComponentOutletInjector`: Optional custom {\@link Injector} that will be used as parent for
	 * the Component. Defaults to the injector of the current view container.
	 *
	 * * `ngComponentOutletProviders`: Optional injectable objects ({\@link Provider}) that are visible
	 * to the component.
	 *
	 * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
	 * section of the component, if exists.
	 *
	 * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
	 * module, then load a component from that module.
	 *
	 * ### Syntax
	 *
	 * Simple
	 * ```
	 * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
	 * ```
	 *
	 * Customized injector/content
	 * ```
	 * <ng-container *ngComponentOutlet="componentTypeExpression;
	 *                                   injector: injectorExpression;
	 *                                   content: contentNodesExpression;">
	 * </ng-container>
	 * ```
	 *
	 * Customized ngModuleFactory
	 * ```
	 * <ng-container *ngComponentOutlet="componentTypeExpression;
	 *                                   ngModuleFactory: moduleFactory;">
	 * </ng-container>
	 * ```
	 * # Example
	 *
	 * {\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
	 *
	 * A more complete example with additional options:
	 *
	 * {\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
	 * A more complete example with ngModuleFactory:
	 *
	 * {\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}
	 *
	 * \@experimental
	 */
	var NgComponentOutlet = (function () {
	    /**
	     * @param {?} _viewContainerRef
	     */
	    function NgComponentOutlet(_viewContainerRef) {
	        this._viewContainerRef = _viewContainerRef;
	        this._componentRef = null;
	        this._moduleRef = null;
	    }
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgComponentOutlet.prototype.ngOnChanges = function (changes) {
	        this._viewContainerRef.clear();
	        this._componentRef = null;
	        if (this.ngComponentOutlet) {
	            var /** @type {?} */ elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
	            if (changes['ngComponentOutletNgModuleFactory']) {
	                if (this._moduleRef)
	                    this._moduleRef.destroy();
	                if (this.ngComponentOutletNgModuleFactory) {
	                    var /** @type {?} */ parentModule = elInjector.get(_angular_core.NgModuleRef);
	                    this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
	                }
	                else {
	                    this._moduleRef = null;
	                }
	            }
	            var /** @type {?} */ componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :
	                elInjector.get(_angular_core.ComponentFactoryResolver);
	            var /** @type {?} */ componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
	            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgComponentOutlet.prototype.ngOnDestroy = function () {
	        if (this._moduleRef)
	            this._moduleRef.destroy();
	    };
	    return NgComponentOutlet;
	}());
	NgComponentOutlet.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngComponentOutlet]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgComponentOutlet.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	]; };
	NgComponentOutlet.propDecorators = {
	    'ngComponentOutlet': [{ type: _angular_core.Input },],
	    'ngComponentOutletInjector': [{ type: _angular_core.Input },],
	    'ngComponentOutletContent': [{ type: _angular_core.Input },],
	    'ngComponentOutletNgModuleFactory': [{ type: _angular_core.Input },],
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@stable
	 */
	var NgForOfContext = (function () {
	    /**
	     * @param {?} $implicit
	     * @param {?} ngForOf
	     * @param {?} index
	     * @param {?} count
	     */
	    function NgForOfContext($implicit, ngForOf, index, count) {
	        this.$implicit = $implicit;
	        this.ngForOf = ngForOf;
	        this.index = index;
	        this.count = count;
	    }
	    Object.defineProperty(NgForOfContext.prototype, "first", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.index === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOfContext.prototype, "last", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.index === this.count - 1; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOfContext.prototype, "even", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this.index % 2 === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOfContext.prototype, "odd", {
	        /**
	         * @return {?}
	         */
	        get: function () { return !this.even; },
	        enumerable: true,
	        configurable: true
	    });
	    return NgForOfContext;
	}());
	/**
	 * The `NgForOf` directive instantiates a template once per item from an iterable. The context
	 * for each instantiated template inherits from the outer context with the given loop variable
	 * set to the current item from the iterable.
	 *
	 * ### Local Variables
	 *
	 * `NgForOf` provides several exported values that can be aliased to local variables:
	 *
	 * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
	 * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
	 * more complex then a property access, for example when using the async pipe (`userStreams |
	 * async`).
	 * - `index: number`: The index of the current item in the iterable.
	 * - `first: boolean`: True when the item is the first item in the iterable.
	 * - `last: boolean`: True when the item is the last item in the iterable.
	 * - `even: boolean`: True when the item has an even index in the iterable.
	 * - `odd: boolean`: True when the item has an odd index in the iterable.
	 *
	 * ```
	 * <li *ngFor="let user of userObservable | async as users; index as i; first as isFirst">
	 *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
	 * </li>
	 * ```
	 *
	 * ### Change Propagation
	 *
	 * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 * * Otherwise, the DOM element for that item will remain the same.
	 *
	 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
	 * those changes in the DOM. This has important implications for animations and any stateful
	 * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can
	 * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
	 * such as user input.
	 *
	 * It is possible for the identities of elements in the iterator to change while the data does not.
	 * This can happen, for example, if the iterator produced from an RPC to the server, and that
	 * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
	 * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
	 * elements were deleted and all new elements inserted). This is an expensive operation and should
	 * be avoided if possible.
	 *
	 * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.
	 * `trackBy` takes a function which has two arguments: `index` and `item`.
	 * If `trackBy` is given, Angular tracks changes by the return value of the function.
	 *
	 * ### Syntax
	 *
	 * - `<li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>`
	 * - `<li template="ngFor let item of items; index as i; trackBy: trackByFn">...</li>`
	 *
	 * With `<ng-template>` element:
	 *
	 * ```
	 * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
	 *   <li>...</li>
	 * </ng-template>
	 * ```
	 *
	 * ### Example
	 *
	 * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
	 * example.
	 *
	 * \@stable
	 */
	var NgForOf = (function () {
	    /**
	     * @param {?} _viewContainer
	     * @param {?} _template
	     * @param {?} _differs
	     */
	    function NgForOf(_viewContainer, _template, _differs) {
	        this._viewContainer = _viewContainer;
	        this._template = _template;
	        this._differs = _differs;
	        this._differ = null;
	    }
	    Object.defineProperty(NgForOf.prototype, "ngForTrackBy", {
	        /**
	         * @return {?}
	         */
	        get: function () { return this._trackByFn; },
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        set: function (fn) {
	            if (_angular_core.isDevMode() && fn != null && typeof fn !== 'function') {
	                // TODO(vicb): use a log service once there is a public one available
	                if ((console) && (console.warn)) {
	                    console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ". " +
	                        "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
	                }
	            }
	            this._trackByFn = fn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOf.prototype, "ngForTemplate", {
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        set: function (value) {
	            // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
	            // The current type is too restrictive; a template that just uses index, for example,
	            // should be acceptable.
	            if (value) {
	                this._template = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgForOf.prototype.ngOnChanges = function (changes) {
	        if ('ngForOf' in changes) {
	            // React on ngForOf changes only once all inputs have been initialized
	            var /** @type {?} */ value = changes['ngForOf'].currentValue;
	            if (!this._differ && value) {
	                try {
	                    this._differ = this._differs.find(value).create(this.ngForTrackBy);
	                }
	                catch (e) {
	                    throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
	                }
	            }
	        }
	    };
	    /**
	     * @return {?}
	     */
	    NgForOf.prototype.ngDoCheck = function () {
	        if (this._differ) {
	            var /** @type {?} */ changes = this._differ.diff(this.ngForOf);
	            if (changes)
	                this._applyChanges(changes);
	        }
	    };
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgForOf.prototype._applyChanges = function (changes) {
	        var _this = this;
	        var /** @type {?} */ insertTuples = [];
	        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
	            if (item.previousIndex == null) {
	                var /** @type {?} */ view = _this._viewContainer.createEmbeddedView(_this._template, new NgForOfContext(null, _this.ngForOf, null, null), currentIndex);
	                var /** @type {?} */ tuple = new RecordViewTuple(item, view);
	                insertTuples.push(tuple);
	            }
	            else if (currentIndex == null) {
	                _this._viewContainer.remove(adjustedPreviousIndex);
	            }
	            else {
	                var /** @type {?} */ view = _this._viewContainer.get(adjustedPreviousIndex);
	                _this._viewContainer.move(view, currentIndex);
	                var /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */ (view));
	                insertTuples.push(tuple);
	            }
	        });
	        for (var /** @type {?} */ i = 0; i < insertTuples.length; i++) {
	            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
	        }
	        for (var /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {
	            var /** @type {?} */ viewRef = (this._viewContainer.get(i));
	            viewRef.context.index = i;
	            viewRef.context.count = ilen;
	        }
	        changes.forEachIdentityChange(function (record) {
	            var /** @type {?} */ viewRef = (_this._viewContainer.get(record.currentIndex));
	            viewRef.context.$implicit = record.item;
	        });
	    };
	    /**
	     * @param {?} view
	     * @param {?} record
	     * @return {?}
	     */
	    NgForOf.prototype._perViewChange = function (view, record) {
	        view.context.$implicit = record.item;
	    };
	    return NgForOf;
	}());
	NgForOf.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgForOf.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	    { type: _angular_core.TemplateRef, },
	    { type: _angular_core.IterableDiffers, },
	]; };
	NgForOf.propDecorators = {
	    'ngForOf': [{ type: _angular_core.Input },],
	    'ngForTrackBy': [{ type: _angular_core.Input },],
	    'ngForTemplate': [{ type: _angular_core.Input },],
	};
	var RecordViewTuple = (function () {
	    /**
	     * @param {?} record
	     * @param {?} view
	     */
	    function RecordViewTuple(record, view) {
	        this.record = record;
	        this.view = view;
	    }
	    return RecordViewTuple;
	}());
	/**
	 * @deprecated from v4.0.0 - Use NgForOf instead.
	 */
	var NgFor = NgForOf;
	/**
	 * @param {?} type
	 * @return {?}
	 */
	function getTypeNameForDebugging(type) {
	    return type['name'] || typeof type;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Conditionally includes a template based on the value of an `expression`.
	 *
	 * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place
	 * when expression is truthy or falsy respectively. Typically the:
	 *  - `then` template is the inline template of `ngIf` unless bound to a different value.
	 *  - `else` template is blank unless it is bound.
	 *
	 * # Most common usage
	 *
	 * The most common usage of the `ngIf` directive is to conditionally show the inline template as
	 * seen in this example:
	 * {\@example common/ngIf/ts/module.ts region='NgIfSimple'}
	 *
	 * # Showing an alternative template using `else`
	 *
	 * If it is necessary to display a template when the `expression` is falsy use the `else` template
	 * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.
	 * The template can be defined anywhere in the component view but is typically placed right after
	 * `ngIf` for readability.
	 *
	 * {\@example common/ngIf/ts/module.ts region='NgIfElse'}
	 *
	 * # Using non-inlined `then` template
	 *
	 * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using
	 * a binding (just like `else`). Because `then` and `else` are bindings, the template references can
	 * change at runtime as shown in this example.
	 *
	 * {\@example common/ngIf/ts/module.ts region='NgIfThenElse'}
	 *
	 * # Storing conditional result in a variable
	 *
	 * A common pattern is that we need to show a set of properties from the same object. If the
	 * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against
	 * dereferencing a `null` value. This is especially the case when waiting on async data such as
	 * when using the `async` pipe as shown in folowing example:
	 *
	 * ```
	 * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!
	 * ```
	 *
	 * There are several inefficiencies in the above example:
	 *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the
	 *    example above.
	 *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.
	 *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.
	 *  - We have to place the `async` pipe in parenthesis.
	 *
	 * A better way to do this is to use `ngIf` and store the result of the condition in a local
	 * variable as shown in the the example below:
	 *
	 * {\@example common/ngIf/ts/module.ts region='NgIfAs'}
	 *
	 * Notice that:
	 *  - We use only one `async` pipe and hence only one subscription gets created.
	 *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.
	 *  - The local `user` can then be bound repeatedly in a more efficient way.
	 *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only
	 *    display the data if `userStream` returns a value.
	 *  - We can display an alternative template while waiting for the data.
	 *
	 * ### Syntax
	 *
	 * Simple form:
	 * - `<div *ngIf="condition">...</div>`
	 * - `<div template="ngIf condition">...</div>`
	 * - `<ng-template [ngIf]="condition"><div>...</div></ng-template>`
	 *
	 * Form with an else block:
	 * ```
	 * <div *ngIf="condition; else elseBlock">...</div>
	 * <ng-template #elseBlock>...</ng-template>
	 * ```
	 *
	 * Form with a `then` and `else` block:
	 * ```
	 * <div *ngIf="condition; then thenBlock else elseBlock"></div>
	 * <ng-template #thenBlock>...</ng-template>
	 * <ng-template #elseBlock>...</ng-template>
	 * ```
	 *
	 * Form with storing the value locally:
	 * ```
	 * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
	 * <ng-template #elseBlock>...</ng-template>
	 * ```
	 *
	 * \@stable
	 */
	var NgIf = (function () {
	    /**
	     * @param {?} _viewContainer
	     * @param {?} templateRef
	     */
	    function NgIf(_viewContainer, templateRef) {
	        this._viewContainer = _viewContainer;
	        this._context = new NgIfContext();
	        this._thenTemplateRef = null;
	        this._elseTemplateRef = null;
	        this._thenViewRef = null;
	        this._elseViewRef = null;
	        this._thenTemplateRef = templateRef;
	    }
	    Object.defineProperty(NgIf.prototype, "ngIf", {
	        /**
	         * @param {?} condition
	         * @return {?}
	         */
	        set: function (condition) {
	            this._context.$implicit = this._context.ngIf = condition;
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgIf.prototype, "ngIfThen", {
	        /**
	         * @param {?} templateRef
	         * @return {?}
	         */
	        set: function (templateRef) {
	            this._thenTemplateRef = templateRef;
	            this._thenViewRef = null; // clear previous view if any.
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgIf.prototype, "ngIfElse", {
	        /**
	         * @param {?} templateRef
	         * @return {?}
	         */
	        set: function (templateRef) {
	            this._elseTemplateRef = templateRef;
	            this._elseViewRef = null; // clear previous view if any.
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgIf.prototype._updateView = function () {
	        if (this._context.$implicit) {
	            if (!this._thenViewRef) {
	                this._viewContainer.clear();
	                this._elseViewRef = null;
	                if (this._thenTemplateRef) {
	                    this._thenViewRef =
	                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
	                }
	            }
	        }
	        else {
	            if (!this._elseViewRef) {
	                this._viewContainer.clear();
	                this._thenViewRef = null;
	                if (this._elseTemplateRef) {
	                    this._elseViewRef =
	                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
	                }
	            }
	        }
	    };
	    return NgIf;
	}());
	NgIf.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngIf]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgIf.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	    { type: _angular_core.TemplateRef, },
	]; };
	NgIf.propDecorators = {
	    'ngIf': [{ type: _angular_core.Input },],
	    'ngIfThen': [{ type: _angular_core.Input },],
	    'ngIfElse': [{ type: _angular_core.Input },],
	};
	/**
	 * \@stable
	 */
	var NgIfContext = (function () {
	    function NgIfContext() {
	        this.$implicit = null;
	        this.ngIf = null;
	    }
	    return NgIfContext;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SwitchView = (function () {
	    /**
	     * @param {?} _viewContainerRef
	     * @param {?} _templateRef
	     */
	    function SwitchView(_viewContainerRef, _templateRef) {
	        this._viewContainerRef = _viewContainerRef;
	        this._templateRef = _templateRef;
	        this._created = false;
	    }
	    /**
	     * @return {?}
	     */
	    SwitchView.prototype.create = function () {
	        this._created = true;
	        this._viewContainerRef.createEmbeddedView(this._templateRef);
	    };
	    /**
	     * @return {?}
	     */
	    SwitchView.prototype.destroy = function () {
	        this._created = false;
	        this._viewContainerRef.clear();
	    };
	    /**
	     * @param {?} created
	     * @return {?}
	     */
	    SwitchView.prototype.enforceState = function (created) {
	        if (created && !this._created) {
	            this.create();
	        }
	        else if (!created && this._created) {
	            this.destroy();
	        }
	    };
	    return SwitchView;
	}());
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
	 *             expression.
	 *
	 * \@howToUse
	 * ```
	 *     <container-element [ngSwitch]="switch_expression">
	 *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
	 *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
	 *       <ng-container *ngSwitchCase="match_expression_3">
	 *         <!-- use a ng-container to group multiple root nodes -->
	 *         <inner-element></inner-element>
	 *         <inner-other-element></inner-other-element>
	 *       </ng-container>
	 *       <some-element *ngSwitchDefault>...</some-element>
	 *     </container-element>
	 * ```
	 * \@description
	 *
	 * `NgSwitch` stamps out nested views when their match expression value matches the value of the
	 * switch expression.
	 *
	 * In other words:
	 * - you define a container element (where you place the directive with a switch expression on the
	 * `[ngSwitch]="..."` attribute)
	 * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
	 * root elements.
	 *
	 * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
	 * be preserved at the location.
	 *
	 * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
	 * expression is evaluated.
	 * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
	 * stamped out.
	 *
	 * \@stable
	 */
	var NgSwitch = (function () {
	    function NgSwitch() {
	        this._defaultUsed = false;
	        this._caseCount = 0;
	        this._lastCaseCheckIndex = 0;
	        this._lastCasesMatched = false;
	    }
	    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	        /**
	         * @param {?} newValue
	         * @return {?}
	         */
	        set: function (newValue) {
	            this._ngSwitch = newValue;
	            if (this._caseCount === 0) {
	                this._updateDefaultCases(true);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * \@internal
	     * @return {?}
	     */
	    NgSwitch.prototype._addCase = function () { return this._caseCount++; };
	    /**
	     * \@internal
	     * @param {?} view
	     * @return {?}
	     */
	    NgSwitch.prototype._addDefault = function (view) {
	        if (!this._defaultViews) {
	            this._defaultViews = [];
	        }
	        this._defaultViews.push(view);
	    };
	    /**
	     * \@internal
	     * @param {?} value
	     * @return {?}
	     */
	    NgSwitch.prototype._matchCase = function (value) {
	        var /** @type {?} */ matched = value == this._ngSwitch;
	        this._lastCasesMatched = this._lastCasesMatched || matched;
	        this._lastCaseCheckIndex++;
	        if (this._lastCaseCheckIndex === this._caseCount) {
	            this._updateDefaultCases(!this._lastCasesMatched);
	            this._lastCaseCheckIndex = 0;
	            this._lastCasesMatched = false;
	        }
	        return matched;
	    };
	    /**
	     * @param {?} useDefault
	     * @return {?}
	     */
	    NgSwitch.prototype._updateDefaultCases = function (useDefault) {
	        if (this._defaultViews && useDefault !== this._defaultUsed) {
	            this._defaultUsed = useDefault;
	            for (var /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {
	                var /** @type {?} */ defaultView = this._defaultViews[i];
	                defaultView.enforceState(useDefault);
	            }
	        }
	    };
	    return NgSwitch;
	}());
	NgSwitch.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngSwitch]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgSwitch.ctorParameters = function () { return []; };
	NgSwitch.propDecorators = {
	    'ngSwitch': [{ type: _angular_core.Input },],
	};
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgSwitch} when the
	 *             given expression evaluate to respectively the same/different value as the switch
	 *             expression.
	 *
	 * \@howToUse
	 * ```
	 * <container-element [ngSwitch]="switch_expression">
	 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 * </container-element>
	 * ```
	 * \@description
	 *
	 * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
	 * expression.
	 *
	 * If multiple match expressions match the switch expression value, all of them are displayed.
	 *
	 * See {\@link NgSwitch} for more details and example.
	 *
	 * \@stable
	 */
	var NgSwitchCase = (function () {
	    /**
	     * @param {?} viewContainer
	     * @param {?} templateRef
	     * @param {?} ngSwitch
	     */
	    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
	        this.ngSwitch = ngSwitch;
	        ngSwitch._addCase();
	        this._view = new SwitchView(viewContainer, templateRef);
	    }
	    /**
	     * @return {?}
	     */
	    NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
	    return NgSwitchCase;
	}());
	NgSwitchCase.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngSwitchCase]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgSwitchCase.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	    { type: _angular_core.TemplateRef, },
	    { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	]; };
	NgSwitchCase.propDecorators = {
	    'ngSwitchCase': [{ type: _angular_core.Input },],
	};
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Creates a view that is added to the parent {\@link NgSwitch} when no case expressions
	 * match the
	 *             switch expression.
	 *
	 * \@howToUse
	 * ```
	 * <container-element [ngSwitch]="switch_expression">
	 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 *   <some-other-element *ngSwitchDefault>...</some-other-element>
	 * </container-element>
	 * ```
	 *
	 * \@description
	 *
	 * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
	 * expression.
	 *
	 * See {\@link NgSwitch} for more details and example.
	 *
	 * \@stable
	 */
	var NgSwitchDefault = (function () {
	    /**
	     * @param {?} viewContainer
	     * @param {?} templateRef
	     * @param {?} ngSwitch
	     */
	    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
	        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
	    }
	    return NgSwitchDefault;
	}());
	NgSwitchDefault.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngSwitchDefault]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgSwitchDefault.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	    { type: _angular_core.TemplateRef, },
	    { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
	 *
	 * \@howToUse
	 * ```
	 * <some-element [ngPlural]="value">
	 *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
	 *   <ng-template ngPluralCase="=1">there is one</ng-template>
	 *   <ng-template ngPluralCase="few">there are a few</ng-template>
	 * </some-element>
	 * ```
	 *
	 * \@description
	 *
	 * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
	 * that match the switch expression's pluralization category.
	 *
	 * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
	 * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
	 * expression:
	 * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
	 *   matches the switch expression exactly,
	 * - otherwise, the view will be treated as a "category match", and will only display if exact
	 *   value matches aren't found and the value maps to its category for the defined locale.
	 *
	 * See http://cldr.unicode.org/index/cldr-spec/plural-rules
	 *
	 * \@experimental
	 */
	var NgPlural = (function () {
	    /**
	     * @param {?} _localization
	     */
	    function NgPlural(_localization) {
	        this._localization = _localization;
	        this._caseViews = {};
	    }
	    Object.defineProperty(NgPlural.prototype, "ngPlural", {
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        set: function (value) {
	            this._switchValue = value;
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} value
	     * @param {?} switchView
	     * @return {?}
	     */
	    NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
	    /**
	     * @return {?}
	     */
	    NgPlural.prototype._updateView = function () {
	        this._clearViews();
	        var /** @type {?} */ cases = Object.keys(this._caseViews);
	        var /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);
	        this._activateView(this._caseViews[key]);
	    };
	    /**
	     * @return {?}
	     */
	    NgPlural.prototype._clearViews = function () {
	        if (this._activeView)
	            this._activeView.destroy();
	    };
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    NgPlural.prototype._activateView = function (view) {
	        if (view) {
	            this._activeView = view;
	            this._activeView.create();
	        }
	    };
	    return NgPlural;
	}());
	NgPlural.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngPlural]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgPlural.ctorParameters = function () { return [
	    { type: NgLocalization, },
	]; };
	NgPlural.propDecorators = {
	    'ngPlural': [{ type: _angular_core.Input },],
	};
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgPlural} when the
	 *             given expression matches the plural expression according to CLDR rules.
	 *
	 * \@howToUse
	 * ```
	 * <some-element [ngPlural]="value">
	 *   <ng-template ngPluralCase="=0">...</ng-template>
	 *   <ng-template ngPluralCase="other">...</ng-template>
	 * </some-element>
	 * ```
	 *
	 * See {\@link NgPlural} for more details and example.
	 *
	 * \@experimental
	 */
	var NgPluralCase = (function () {
	    /**
	     * @param {?} value
	     * @param {?} template
	     * @param {?} viewContainer
	     * @param {?} ngPlural
	     */
	    function NgPluralCase(value, template, viewContainer, ngPlural) {
	        this.value = value;
	        var isANumber = !isNaN(Number(value));
	        ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
	    }
	    return NgPluralCase;
	}());
	NgPluralCase.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngPluralCase]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgPluralCase.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['ngPluralCase',] },] },
	    { type: _angular_core.TemplateRef, },
	    { type: _angular_core.ViewContainerRef, },
	    { type: NgPlural, decorators: [{ type: _angular_core.Host },] },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Update an HTML element styles.
	 *
	 * \@howToUse
	 * ```
	 * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
	 *
	 * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
	 *
	 * <some-element [ngStyle]="objExp">...</some-element>
	 * ```
	 *
	 * \@description
	 *
	 * The styles are updated according to the value of the expression evaluation:
	 * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
	 * - values are the values assigned to those properties (expressed in the given unit).
	 *
	 * \@stable
	 */
	var NgStyle = (function () {
	    /**
	     * @param {?} _differs
	     * @param {?} _ngEl
	     * @param {?} _renderer
	     */
	    function NgStyle(_differs, _ngEl, _renderer) {
	        this._differs = _differs;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	    }
	    Object.defineProperty(NgStyle.prototype, "ngStyle", {
	        /**
	         * @param {?} v
	         * @return {?}
	         */
	        set: function (v) {
	            this._ngStyle = v;
	            if (!this._differ && v) {
	                this._differ = this._differs.find(v).create();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {?}
	     */
	    NgStyle.prototype.ngDoCheck = function () {
	        if (this._differ) {
	            var /** @type {?} */ changes = this._differ.diff(this._ngStyle);
	            if (changes) {
	                this._applyChanges(changes);
	            }
	        }
	    };
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgStyle.prototype._applyChanges = function (changes) {
	        var _this = this;
	        changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
	        changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	        changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	    };
	    /**
	     * @param {?} nameAndUnit
	     * @param {?} value
	     * @return {?}
	     */
	    NgStyle.prototype._setStyle = function (nameAndUnit, value) {
	        var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
	        value = value != null && unit ? "" + value + unit : value;
	        this._renderer.setElementStyle(this._ngEl.nativeElement, name, /** @type {?} */ (value));
	    };
	    return NgStyle;
	}());
	NgStyle.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngStyle]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgStyle.ctorParameters = function () { return [
	    { type: _angular_core.KeyValueDiffers, },
	    { type: _angular_core.ElementRef, },
	    { type: _angular_core.Renderer, },
	]; };
	NgStyle.propDecorators = {
	    'ngStyle': [{ type: _angular_core.Input },],
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 *
	 * \@whatItDoes Inserts an embedded view from a prepared `TemplateRef`
	 *
	 * \@howToUse
	 * ```
	 * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
	 * ```
	 *
	 * \@description
	 *
	 * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
	 * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
	 * by the local template `let` declarations.
	 *
	 * Note: using the key `$implicit` in the context object will set it's value as default.
	 *
	 * # Example
	 *
	 * {\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
	 *
	 * \@experimental
	 */
	var NgTemplateOutlet = (function () {
	    /**
	     * @param {?} _viewContainerRef
	     */
	    function NgTemplateOutlet(_viewContainerRef) {
	        this._viewContainerRef = _viewContainerRef;
	    }
	    Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
	        /**
	         * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.
	         * @param {?} context
	         * @return {?}
	         */
	        set: function (context) { this.ngTemplateOutletContext = context; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {?} changes
	     * @return {?}
	     */
	    NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
	        if (this._viewRef) {
	            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
	        }
	        if (this.ngTemplateOutlet) {
	            this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);
	        }
	    };
	    return NgTemplateOutlet;
	}());
	NgTemplateOutlet.decorators = [
	    { type: _angular_core.Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
	];
	/**
	 * @nocollapse
	 */
	NgTemplateOutlet.ctorParameters = function () { return [
	    { type: _angular_core.ViewContainerRef, },
	]; };
	NgTemplateOutlet.propDecorators = {
	    'ngTemplateOutletContext': [{ type: _angular_core.Input },],
	    'ngTemplateOutlet': [{ type: _angular_core.Input },],
	    'ngOutletContext': [{ type: _angular_core.Input },],
	};
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A collection of Angular directives that are likely to be used in each and every Angular
	 * application.
	 */
	var COMMON_DIRECTIVES = [
	    NgClass,
	    NgComponentOutlet,
	    NgForOf,
	    NgIf,
	    NgTemplateOutlet,
	    NgStyle,
	    NgSwitch,
	    NgSwitchCase,
	    NgSwitchDefault,
	    NgPlural,
	    NgPluralCase,
	];
	/**
	 * A collection of deprecated directives that are no longer part of the core module.
	 */
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @param {?} type
	 * @param {?} value
	 * @return {?}
	 */
	function invalidPipeArgumentError(type, value) {
	    return Error("InvalidPipeArgument: '" + value + "' for pipe '" + _angular_core.ɵstringify(type) + "'");
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ObservableStrategy = (function () {
	    function ObservableStrategy() {
	    }
	    /**
	     * @param {?} async
	     * @param {?} updateLatestValue
	     * @return {?}
	     */
	    ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	        return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
	    };
	    /**
	     * @param {?} subscription
	     * @return {?}
	     */
	    ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
	    /**
	     * @param {?} subscription
	     * @return {?}
	     */
	    ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
	    return ObservableStrategy;
	}());
	var PromiseStrategy = (function () {
	    function PromiseStrategy() {
	    }
	    /**
	     * @param {?} async
	     * @param {?} updateLatestValue
	     * @return {?}
	     */
	    PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	        return async.then(updateLatestValue, function (e) { throw e; });
	    };
	    /**
	     * @param {?} subscription
	     * @return {?}
	     */
	    PromiseStrategy.prototype.dispose = function (subscription) { };
	    /**
	     * @param {?} subscription
	     * @return {?}
	     */
	    PromiseStrategy.prototype.onDestroy = function (subscription) { };
	    return PromiseStrategy;
	}());
	var _promiseStrategy = new PromiseStrategy();
	var _observableStrategy = new ObservableStrategy();
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Unwraps a value from an asynchronous primitive.
	 * \@howToUse `observable_or_promise_expression | async`
	 * \@description
	 * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
	 * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
	 * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
	 * potential memory leaks.
	 *
	 *
	 * ## Examples
	 *
	 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
	 * promise.
	 *
	 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
	 *
	 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
	 * to the view. The Observable continuously updates the view with the current time.
	 *
	 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
	 *
	 * \@stable
	 */
	var AsyncPipe = (function () {
	    /**
	     * @param {?} _ref
	     */
	    function AsyncPipe(_ref) {
	        this._ref = _ref;
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._obj = null;
	        this._strategy = null;
	    }
	    /**
	     * @return {?}
	     */
	    AsyncPipe.prototype.ngOnDestroy = function () {
	        if (this._subscription) {
	            this._dispose();
	        }
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    AsyncPipe.prototype.transform = function (obj) {
	        if (!this._obj) {
	            if (obj) {
	                this._subscribe(obj);
	            }
	            this._latestReturnedValue = this._latestValue;
	            return this._latestValue;
	        }
	        if (obj !== this._obj) {
	            this._dispose();
	            return this.transform(/** @type {?} */ (obj));
	        }
	        if (this._latestValue === this._latestReturnedValue) {
	            return this._latestReturnedValue;
	        }
	        this._latestReturnedValue = this._latestValue;
	        return _angular_core.WrappedValue.wrap(this._latestValue);
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    AsyncPipe.prototype._subscribe = function (obj) {
	        var _this = this;
	        this._obj = obj;
	        this._strategy = this._selectStrategy(obj);
	        this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    AsyncPipe.prototype._selectStrategy = function (obj) {
	        if (_angular_core.ɵisPromise(obj)) {
	            return _promiseStrategy;
	        }
	        if (_angular_core.ɵisObservable(obj)) {
	            return _observableStrategy;
	        }
	        throw invalidPipeArgumentError(AsyncPipe, obj);
	    };
	    /**
	     * @return {?}
	     */
	    AsyncPipe.prototype._dispose = function () {
	        this._strategy.dispose(this._subscription);
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._obj = null;
	    };
	    /**
	     * @param {?} async
	     * @param {?} value
	     * @return {?}
	     */
	    AsyncPipe.prototype._updateLatestValue = function (async, value) {
	        if (async === this._obj) {
	            this._latestValue = value;
	            this._ref.markForCheck();
	        }
	    };
	    return AsyncPipe;
	}());
	AsyncPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'async', pure: false },] },
	];
	/**
	 * @nocollapse
	 */
	AsyncPipe.ctorParameters = function () { return [
	    { type: _angular_core.ChangeDetectorRef, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Transforms text to lowercase.
	 *
	 * {\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }
	 *
	 * \@stable
	 */
	var LowerCasePipe = (function () {
	    function LowerCasePipe() {
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    LowerCasePipe.prototype.transform = function (value) {
	        if (!value)
	            return value;
	        if (typeof value !== 'string') {
	            throw invalidPipeArgumentError(LowerCasePipe, value);
	        }
	        return value.toLowerCase();
	    };
	    return LowerCasePipe;
	}());
	LowerCasePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'lowercase' },] },
	];
	/**
	 * @nocollapse
	 */
	LowerCasePipe.ctorParameters = function () { return []; };
	/**
	 * Helper method to transform a single word to titlecase.
	 *
	 * \@stable
	 * @param {?} word
	 * @return {?}
	 */
	function titleCaseWord(word) {
	    if (!word)
	        return word;
	    return word[0].toUpperCase() + word.substr(1).toLowerCase();
	}
	/**
	 * Transforms text to titlecase.
	 *
	 * \@stable
	 */
	var TitleCasePipe = (function () {
	    function TitleCasePipe() {
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    TitleCasePipe.prototype.transform = function (value) {
	        if (!value)
	            return value;
	        if (typeof value !== 'string') {
	            throw invalidPipeArgumentError(TitleCasePipe, value);
	        }
	        return value.split(/\b/g).map(function (word) { return titleCaseWord(word); }).join('');
	    };
	    return TitleCasePipe;
	}());
	TitleCasePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'titlecase' },] },
	];
	/**
	 * @nocollapse
	 */
	TitleCasePipe.ctorParameters = function () { return []; };
	/**
	 * Transforms text to uppercase.
	 *
	 * \@stable
	 */
	var UpperCasePipe = (function () {
	    function UpperCasePipe() {
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    UpperCasePipe.prototype.transform = function (value) {
	        if (!value)
	            return value;
	        if (typeof value !== 'string') {
	            throw invalidPipeArgumentError(UpperCasePipe, value);
	        }
	        return value.toUpperCase();
	    };
	    return UpperCasePipe;
	}());
	UpperCasePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'uppercase' },] },
	];
	/**
	 * @nocollapse
	 */
	UpperCasePipe.ctorParameters = function () { return []; };
	var NumberFormatStyle = {};
	NumberFormatStyle.Decimal = 0;
	NumberFormatStyle.Percent = 1;
	NumberFormatStyle.Currency = 2;
	NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
	NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
	NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
	var NumberFormatter = (function () {
	    function NumberFormatter() {
	    }
	    /**
	     * @param {?} num
	     * @param {?} locale
	     * @param {?} style
	     * @param {?=} __3
	     * @return {?}
	     */
	    NumberFormatter.format = function (num, locale, style, _a) {
	        var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
	        var /** @type {?} */ options = {
	            minimumIntegerDigits: minimumIntegerDigits,
	            minimumFractionDigits: minimumFractionDigits,
	            maximumFractionDigits: maximumFractionDigits,
	            style: NumberFormatStyle[style].toLowerCase()
	        };
	        if (style == NumberFormatStyle.Currency) {
	            options.currency = currency;
	            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
	        }
	        return new Intl.NumberFormat(locale, options).format(num);
	    };
	    return NumberFormatter;
	}());
	var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
	var PATTERN_ALIASES = {
	    // Keys are quoted so they do not get renamed during closure compilation.
	    'yMMMdjms': datePartGetterFactory(combine([
	        digitCondition('year', 1),
	        nameCondition('month', 3),
	        digitCondition('day', 1),
	        digitCondition('hour', 1),
	        digitCondition('minute', 1),
	        digitCondition('second', 1),
	    ])),
	    'yMdjm': datePartGetterFactory(combine([
	        digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
	        digitCondition('hour', 1), digitCondition('minute', 1)
	    ])),
	    'yMMMMEEEEd': datePartGetterFactory(combine([
	        digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
	        digitCondition('day', 1)
	    ])),
	    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
	    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
	    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
	    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
	    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
	};
	var DATE_FORMATS = {
	    // Keys are quoted so they do not get renamed.
	    'yyyy': datePartGetterFactory(digitCondition('year', 4)),
	    'yy': datePartGetterFactory(digitCondition('year', 2)),
	    'y': datePartGetterFactory(digitCondition('year', 1)),
	    'MMMM': datePartGetterFactory(nameCondition('month', 4)),
	    'MMM': datePartGetterFactory(nameCondition('month', 3)),
	    'MM': datePartGetterFactory(digitCondition('month', 2)),
	    'M': datePartGetterFactory(digitCondition('month', 1)),
	    'LLLL': datePartGetterFactory(nameCondition('month', 4)),
	    'L': datePartGetterFactory(nameCondition('month', 1)),
	    'dd': datePartGetterFactory(digitCondition('day', 2)),
	    'd': datePartGetterFactory(digitCondition('day', 1)),
	    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
	    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
	    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
	    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	    'jj': datePartGetterFactory(digitCondition('hour', 2)),
	    'j': datePartGetterFactory(digitCondition('hour', 1)),
	    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
	    'm': datePartGetterFactory(digitCondition('minute', 1)),
	    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
	    's': datePartGetterFactory(digitCondition('second', 1)),
	    // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	    // we can be just safely rely on using `sss` since we currently don't support single or two digit
	    // fractions
	    'sss': datePartGetterFactory(digitCondition('second', 3)),
	    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
	    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
	    'EE': datePartGetterFactory(nameCondition('weekday', 2)),
	    'E': datePartGetterFactory(nameCondition('weekday', 1)),
	    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	    'Z': timeZoneGetter('short'),
	    'z': timeZoneGetter('long'),
	    'ww': datePartGetterFactory({}),
	    // first Thursday of the year. not support ?
	    'w': datePartGetterFactory({}),
	    // of the year not support ?
	    'G': datePartGetterFactory(nameCondition('era', 1)),
	    'GG': datePartGetterFactory(nameCondition('era', 2)),
	    'GGG': datePartGetterFactory(nameCondition('era', 3)),
	    'GGGG': datePartGetterFactory(nameCondition('era', 4))
	};
	/**
	 * @param {?} inner
	 * @return {?}
	 */
	function digitModifier(inner) {
	    return function (date, locale) {
	        var /** @type {?} */ result = inner(date, locale);
	        return result.length == 1 ? '0' + result : result;
	    };
	}
	/**
	 * @param {?} inner
	 * @return {?}
	 */
	function hourClockExtractor(inner) {
	    return function (date, locale) { return inner(date, locale).split(' ')[1]; };
	}
	/**
	 * @param {?} inner
	 * @return {?}
	 */
	function hourExtractor(inner) {
	    return function (date, locale) { return inner(date, locale).split(' ')[0]; };
	}
	/**
	 * @param {?} date
	 * @param {?} locale
	 * @param {?} options
	 * @return {?}
	 */
	function intlDateFormat(date, locale, options) {
	    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
	}
	/**
	 * @param {?} timezone
	 * @return {?}
	 */
	function timeZoneGetter(timezone) {
	    // To workaround `Intl` API restriction for single timezone let format with 24 hours
	    var /** @type {?} */ options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
	    return function (date, locale) {
	        var /** @type {?} */ result = intlDateFormat(date, locale, options);
	        // Then extract first 3 letters that related to hours
	        return result ? result.substring(3) : '';
	    };
	}
	/**
	 * @param {?} options
	 * @param {?} value
	 * @return {?}
	 */
	function hour12Modify(options, value) {
	    options.hour12 = value;
	    return options;
	}
	/**
	 * @param {?} prop
	 * @param {?} len
	 * @return {?}
	 */
	function digitCondition(prop, len) {
	    var /** @type {?} */ result = {};
	    result[prop] = len === 2 ? '2-digit' : 'numeric';
	    return result;
	}
	/**
	 * @param {?} prop
	 * @param {?} len
	 * @return {?}
	 */
	function nameCondition(prop, len) {
	    var /** @type {?} */ result = {};
	    if (len < 4) {
	        result[prop] = len > 1 ? 'short' : 'narrow';
	    }
	    else {
	        result[prop] = 'long';
	    }
	    return result;
	}
	/**
	 * @param {?} options
	 * @return {?}
	 */
	function combine(options) {
	    return ((Object)).assign.apply(((Object)), [{}].concat(options));
	}
	/**
	 * @param {?} ret
	 * @return {?}
	 */
	function datePartGetterFactory(ret) {
	    return function (date, locale) { return intlDateFormat(date, locale, ret); };
	}
	var DATE_FORMATTER_CACHE = new Map();
	/**
	 * @param {?} format
	 * @param {?} date
	 * @param {?} locale
	 * @return {?}
	 */
	function dateFormatter(format, date, locale) {
	    var /** @type {?} */ fn = PATTERN_ALIASES[format];
	    if (fn)
	        return fn(date, locale);
	    var /** @type {?} */ cacheKey = format;
	    var /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);
	    if (!parts) {
	        parts = [];
	        var /** @type {?} */ match = void 0;
	        DATE_FORMATS_SPLIT.exec(format);
	        while (format) {
	            match = DATE_FORMATS_SPLIT.exec(format);
	            if (match) {
	                parts = parts.concat(match.slice(1));
	                format = parts.pop();
	            }
	            else {
	                parts.push(format);
	                format = null;
	            }
	        }
	        DATE_FORMATTER_CACHE.set(cacheKey, parts);
	    }
	    return parts.reduce(function (text, part) {
	        var /** @type {?} */ fn = DATE_FORMATS[part];
	        return text + (fn ? fn(date, locale) : partToTime(part));
	    }, '');
	}
	/**
	 * @param {?} part
	 * @return {?}
	 */
	function partToTime(part) {
	    return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
	}
	var DateFormatter = (function () {
	    function DateFormatter() {
	    }
	    /**
	     * @param {?} date
	     * @param {?} locale
	     * @param {?} pattern
	     * @return {?}
	     */
	    DateFormatter.format = function (date, locale, pattern) {
	        return dateFormatter(pattern, date, locale);
	    };
	    return DateFormatter;
	}());
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
	/**
	 * @param {?} pipe
	 * @param {?} locale
	 * @param {?} value
	 * @param {?} style
	 * @param {?} digits
	 * @param {?=} currency
	 * @param {?=} currencyAsSymbol
	 * @return {?}
	 */
	function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
	    if (currency === void 0) { currency = null; }
	    if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
	    if (value == null)
	        return null;
	    // Convert strings to numbers
	    value = typeof value === 'string' && isNumeric(value) ? +value : value;
	    if (typeof value !== 'number') {
	        throw invalidPipeArgumentError(pipe, value);
	    }
	    var /** @type {?} */ minInt;
	    var /** @type {?} */ minFraction;
	    var /** @type {?} */ maxFraction;
	    if (style !== NumberFormatStyle.Currency) {
	        // rely on Intl default for currency
	        minInt = 1;
	        minFraction = 0;
	        maxFraction = 3;
	    }
	    if (digits) {
	        var /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);
	        if (parts === null) {
	            throw new Error(digits + " is not a valid digit info for number pipes");
	        }
	        if (parts[1] != null) {
	            minInt = parseIntAutoRadix(parts[1]);
	        }
	        if (parts[3] != null) {
	            minFraction = parseIntAutoRadix(parts[3]);
	        }
	        if (parts[5] != null) {
	            maxFraction = parseIntAutoRadix(parts[5]);
	        }
	    }
	    return NumberFormatter.format(/** @type {?} */ (value), locale, style, {
	        minimumIntegerDigits: minInt,
	        minimumFractionDigits: minFraction,
	        maximumFractionDigits: maxFraction,
	        currency: currency,
	        currencyAsSymbol: currencyAsSymbol,
	    });
	}
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Formats a number according to locale rules.
	 * \@howToUse `number_expression | number[:digitInfo]`
	 *
	 * Formats a number as text. Group sizing and separator and other locale-specific
	 * configurations are based on the active locale.
	 *
	 * where `expression` is a number:
	 *  - `digitInfo` is a `string` which has a following format: <br>
	 *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
	 *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
	 *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
	 *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
	 *
	 * For more information on the acceptable range for each of these numbers and other
	 * details see your native internationalization library.
	 *
	 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	 *
	 * ### Example
	 *
	 * {\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
	 *
	 * \@stable
	 */
	var DecimalPipe = (function () {
	    /**
	     * @param {?} _locale
	     */
	    function DecimalPipe(_locale) {
	        this._locale = _locale;
	    }
	    /**
	     * @param {?} value
	     * @param {?=} digits
	     * @return {?}
	     */
	    DecimalPipe.prototype.transform = function (value, digits) {
	        if (digits === void 0) { digits = null; }
	        return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
	    };
	    return DecimalPipe;
	}());
	DecimalPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'number' },] },
	];
	/**
	 * @nocollapse
	 */
	DecimalPipe.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Formats a number as a percentage according to locale rules.
	 * \@howToUse `number_expression | percent[:digitInfo]`
	 *
	 * \@description
	 *
	 * Formats a number as percentage.
	 *
	 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
	 *
	 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	 *
	 * ### Example
	 *
	 * {\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
	 *
	 * \@stable
	 */
	var PercentPipe = (function () {
	    /**
	     * @param {?} _locale
	     */
	    function PercentPipe(_locale) {
	        this._locale = _locale;
	    }
	    /**
	     * @param {?} value
	     * @param {?=} digits
	     * @return {?}
	     */
	    PercentPipe.prototype.transform = function (value, digits) {
	        if (digits === void 0) { digits = null; }
	        return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
	    };
	    return PercentPipe;
	}());
	PercentPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'percent' },] },
	];
	/**
	 * @nocollapse
	 */
	PercentPipe.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Formats a number as currency using locale rules.
	 * \@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
	 * \@description
	 *
	 * Use `currency` to format a number as currency.
	 *
	 * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
	 *    as `USD` for the US dollar and `EUR` for the euro.
	 * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
	 *   - `true`: use symbol (e.g. `$`).
	 *   - `false`(default): use code (e.g. `USD`).
	 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
	 *
	 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	 *
	 * ### Example
	 *
	 * {\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
	 *
	 * \@stable
	 */
	var CurrencyPipe = (function () {
	    /**
	     * @param {?} _locale
	     */
	    function CurrencyPipe(_locale) {
	        this._locale = _locale;
	    }
	    /**
	     * @param {?} value
	     * @param {?=} currencyCode
	     * @param {?=} symbolDisplay
	     * @param {?=} digits
	     * @return {?}
	     */
	    CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
	        if (currencyCode === void 0) { currencyCode = 'USD'; }
	        if (symbolDisplay === void 0) { symbolDisplay = false; }
	        if (digits === void 0) { digits = null; }
	        return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
	    };
	    return CurrencyPipe;
	}());
	CurrencyPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'currency' },] },
	];
	/**
	 * @nocollapse
	 */
	CurrencyPipe.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	/**
	 * @param {?} text
	 * @return {?}
	 */
	function parseIntAutoRadix(text) {
	    var /** @type {?} */ result = parseInt(text);
	    if (isNaN(result)) {
	        throw new Error('Invalid integer literal when parsing ' + text);
	    }
	    return result;
	}
	/**
	 * @param {?} value
	 * @return {?}
	 */
	function isNumeric(value) {
	    return !isNaN(value - parseFloat(value));
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Formats a date according to locale rules.
	 * \@howToUse `date_expression | date[:format]`
	 * \@description
	 *
	 * Where:
	 * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
	 * (https://www.w3.org/TR/NOTE-datetime).
	 * - `format` indicates which date/time components to include. The format can be predefined as
	 *   shown below or custom as shown in the table.
	 *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
	 *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
	 *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
	 *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
	 *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
	 *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
	 *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
	 *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
	 *
	 *
	 *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
	 *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
	 *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
	 *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
	 *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
	 *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
	 *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
	 *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
	 *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
	 *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
	 *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
	 *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
	 *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
	 *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
	 *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
	 *
	 * In javascript, only the components specified will be respected (not the ordering,
	 * punctuations, ...) and details of the formatting will be dependent on the locale.
	 *
	 * Timezone of the formatted text will be the local system timezone of the end-user's machine.
	 *
	 * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
	 * applied and the formatted text will have the same day, month and year of the expression.
	 *
	 * WARNINGS:
	 * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
	 *   Instead users should treat the date as an immutable object and change the reference when the
	 *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
	 *   which would be an expensive operation).
	 * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
	 *   browsers.
	 *
	 * ### Examples
	 *
	 * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
	 * in the _local_ time and locale is 'en-US':
	 *
	 * ```
	 *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
	 *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
	 *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
	 *     {{ dateObj | date:'mmss' }}        // output is '43:11'
	 * ```
	 *
	 * {\@example common/pipes/ts/date_pipe.ts region='DatePipe'}
	 *
	 * \@stable
	 */
	var DatePipe = (function () {
	    /**
	     * @param {?} _locale
	     */
	    function DatePipe(_locale) {
	        this._locale = _locale;
	    }
	    /**
	     * @param {?} value
	     * @param {?=} pattern
	     * @return {?}
	     */
	    DatePipe.prototype.transform = function (value, pattern) {
	        if (pattern === void 0) { pattern = 'mediumDate'; }
	        var /** @type {?} */ date;
	        if (isBlank(value) || value !== value)
	            return null;
	        if (typeof value === 'string') {
	            value = value.trim();
	        }
	        if (isDate(value)) {
	            date = value;
	        }
	        else if (isNumeric(value)) {
	            date = new Date(parseFloat(value));
	        }
	        else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
	            /**
	            * For ISO Strings without time the day, month and year must be extracted from the ISO String
	            * before Date creation to avoid time offset and errors in the new Date.
	            * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
	            * date, some browsers (e.g. IE 9) will throw an invalid Date error
	            * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
	            * is applied
	            * Note: ISO months are 0 for January, 1 for February, ...
	            */
	            var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
	            date = new Date(y, m - 1, d);
	        }
	        else {
	            date = new Date(value);
	        }
	        if (!isDate(date)) {
	            var /** @type {?} */ match = void 0;
	            if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {
	                date = isoStringToDate(match);
	            }
	            else {
	                throw invalidPipeArgumentError(DatePipe, value);
	            }
	        }
	        return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
	    };
	    return DatePipe;
	}());
	/**
	 * \@internal
	 */
	DatePipe._ALIASES = {
	    'medium': 'yMMMdjms',
	    'short': 'yMdjm',
	    'fullDate': 'yMMMMEEEEd',
	    'longDate': 'yMMMMd',
	    'mediumDate': 'yMMMd',
	    'shortDate': 'yMd',
	    'mediumTime': 'jms',
	    'shortTime': 'jm'
	};
	DatePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'date', pure: true },] },
	];
	/**
	 * @nocollapse
	 */
	DatePipe.ctorParameters = function () { return [
	    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	]; };
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function isBlank(obj) {
	    return obj == null || obj === '';
	}
	/**
	 * @param {?} obj
	 * @return {?}
	 */
	function isDate(obj) {
	    return obj instanceof Date && !isNaN(obj.valueOf());
	}
	/**
	 * @param {?} match
	 * @return {?}
	 */
	function isoStringToDate(match) {
	    var /** @type {?} */ date = new Date(0);
	    var /** @type {?} */ tzHour = 0;
	    var /** @type {?} */ tzMin = 0;
	    var /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
	    var /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;
	    if (match[9]) {
	        tzHour = toInt(match[9] + match[10]);
	        tzMin = toInt(match[9] + match[11]);
	    }
	    dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
	    var /** @type {?} */ h = toInt(match[4] || '0') - tzHour;
	    var /** @type {?} */ m = toInt(match[5] || '0') - tzMin;
	    var /** @type {?} */ s = toInt(match[6] || '0');
	    var /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	    timeSetter.call(date, h, m, s, ms);
	    return date;
	}
	/**
	 * @param {?} str
	 * @return {?}
	 */
	function toInt(str) {
	    return parseInt(str, 10);
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _INTERPOLATION_REGEXP = /#/g;
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
	 * \@howToUse `expression | i18nPlural:mapping`
	 * \@description
	 *
	 *  Where:
	 *  - `expression` is a number.
	 *  - `mapping` is an object that mimics the ICU format, see
	 *    http://userguide.icu-project.org/formatparse/messages
	 *
	 *  ## Example
	 *
	 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
	 *
	 * \@experimental
	 */
	var I18nPluralPipe = (function () {
	    /**
	     * @param {?} _localization
	     */
	    function I18nPluralPipe(_localization) {
	        this._localization = _localization;
	    }
	    /**
	     * @param {?} value
	     * @param {?} pluralMap
	     * @return {?}
	     */
	    I18nPluralPipe.prototype.transform = function (value, pluralMap) {
	        if (value == null)
	            return '';
	        if (typeof pluralMap !== 'object' || pluralMap === null) {
	            throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
	        }
	        var /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
	        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
	    };
	    return I18nPluralPipe;
	}());
	I18nPluralPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'i18nPlural', pure: true },] },
	];
	/**
	 * @nocollapse
	 */
	I18nPluralPipe.ctorParameters = function () { return [
	    { type: NgLocalization, },
	]; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Generic selector that displays the string that matches the current value.
	 * \@howToUse `expression | i18nSelect:mapping`
	 * \@description
	 *
	 *  Where `mapping` is an object that indicates the text that should be displayed
	 *  for different values of the provided `expression`.
	 *  If none of the keys of the mapping match the value of the `expression`, then the content
	 *  of the `other` key is returned when present, otherwise an empty string is returned.
	 *
	 *  ## Example
	 *
	 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
	 *
	 *  \@experimental
	 */
	var I18nSelectPipe = (function () {
	    function I18nSelectPipe() {
	    }
	    /**
	     * @param {?} value
	     * @param {?} mapping
	     * @return {?}
	     */
	    I18nSelectPipe.prototype.transform = function (value, mapping) {
	        if (value == null)
	            return '';
	        if (typeof mapping !== 'object' || typeof value !== 'string') {
	            throw invalidPipeArgumentError(I18nSelectPipe, mapping);
	        }
	        if (mapping.hasOwnProperty(value)) {
	            return mapping[value];
	        }
	        if (mapping.hasOwnProperty('other')) {
	            return mapping['other'];
	        }
	        return '';
	    };
	    return I18nSelectPipe;
	}());
	I18nSelectPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'i18nSelect', pure: true },] },
	];
	/**
	 * @nocollapse
	 */
	I18nSelectPipe.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Converts value into JSON string.
	 * \@howToUse `expression | json`
	 * \@description
	 *
	 * Converts value into string using `JSON.stringify`. Useful for debugging.
	 *
	 * ### Example
	 * {\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
	 *
	 * \@stable
	 */
	var JsonPipe = (function () {
	    function JsonPipe() {
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };
	    return JsonPipe;
	}());
	JsonPipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'json', pure: false },] },
	];
	/**
	 * @nocollapse
	 */
	JsonPipe.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * \@ngModule CommonModule
	 * \@whatItDoes Creates a new List or String containing a subset (slice) of the elements.
	 * \@howToUse `array_or_string_expression | slice:start[:end]`
	 * \@description
	 *
	 * Where the input expression is a `List` or `String`, and:
	 * - `start`: The starting index of the subset to return.
	 *   - **a positive integer**: return the item at `start` index and all items after
	 *     in the list or string expression.
	 *   - **a negative integer**: return the item at `start` index from the end and all items after
	 *     in the list or string expression.
	 *   - **if positive and greater than the size of the expression**: return an empty list or string.
	 *   - **if negative and greater than the size of the expression**: return entire list or string.
	 * - `end`: The ending index of the subset to return.
	 *   - **omitted**: return all items until the end.
	 *   - **if positive**: return all items before `end` index of the list or string.
	 *   - **if negative**: return all items before `end` index from the end of the list or string.
	 *
	 * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
	 * and `String.prototype.slice()`.
	 *
	 * When operating on a [List], the returned list is always a copy even when all
	 * the elements are being returned.
	 *
	 * When operating on a blank value, the pipe returns the blank value.
	 *
	 * ## List Example
	 *
	 * This `ngFor` example:
	 *
	 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
	 *
	 * produces the following:
	 *
	 *     <li>b</li>
	 *     <li>c</li>
	 *
	 * ## String Examples
	 *
	 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
	 *
	 * \@stable
	 */
	var SlicePipe = (function () {
	    function SlicePipe() {
	    }
	    /**
	     * @param {?} value
	     * @param {?} start
	     * @param {?=} end
	     * @return {?}
	     */
	    SlicePipe.prototype.transform = function (value, start, end) {
	        if (value == null)
	            return value;
	        if (!this.supports(value)) {
	            throw invalidPipeArgumentError(SlicePipe, value);
	        }
	        return value.slice(start, end);
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
	    return SlicePipe;
	}());
	SlicePipe.decorators = [
	    { type: _angular_core.Pipe, args: [{ name: 'slice', pure: false },] },
	];
	/**
	 * @nocollapse
	 */
	SlicePipe.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * This module provides a set of common Pipes.
	 */
	/**
	 * A collection of Angular pipes that are likely to be used in each and every application.
	 */
	var COMMON_PIPES = [
	    AsyncPipe,
	    UpperCasePipe,
	    LowerCasePipe,
	    JsonPipe,
	    SlicePipe,
	    DecimalPipe,
	    PercentPipe,
	    TitleCasePipe,
	    CurrencyPipe,
	    DatePipe,
	    I18nPluralPipe,
	    I18nSelectPipe,
	];
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The module that includes all the basic Angular directives like {\@link NgIf}, {\@link NgForOf}, ...
	 *
	 * \@stable
	 */
	var CommonModule = (function () {
	    function CommonModule() {
	    }
	    return CommonModule;
	}());
	CommonModule.decorators = [
	    { type: _angular_core.NgModule, args: [{
	                declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
	                exports: [COMMON_DIRECTIVES, COMMON_PIPES],
	                providers: [
	                    { provide: NgLocalization, useClass: NgLocaleLocalization },
	                ],
	            },] },
	];
	/**
	 * @nocollapse
	 */
	CommonModule.ctorParameters = function () { return []; };
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var PLATFORM_BROWSER_ID = 'browser';
	var PLATFORM_SERVER_ID = 'server';
	var PLATFORM_WORKER_APP_ID = 'browserWorkerApp';
	var PLATFORM_WORKER_UI_ID = 'browserWorkerUi';
	/**
	 * Returns whether a platform id represents a browser platform.
	 * \@experimental
	 * @param {?} platformId
	 * @return {?}
	 */
	function isPlatformBrowser(platformId) {
	    return platformId === PLATFORM_BROWSER_ID;
	}
	/**
	 * Returns whether a platform id represents a server platform.
	 * \@experimental
	 * @param {?} platformId
	 * @return {?}
	 */
	function isPlatformServer(platformId) {
	    return platformId === PLATFORM_SERVER_ID;
	}
	/**
	 * Returns whether a platform id represents a web worker app platform.
	 * \@experimental
	 * @param {?} platformId
	 * @return {?}
	 */
	function isPlatformWorkerApp(platformId) {
	    return platformId === PLATFORM_WORKER_APP_ID;
	}
	/**
	 * Returns whether a platform id represents a web worker UI platform.
	 * \@experimental
	 * @param {?} platformId
	 * @return {?}
	 */
	function isPlatformWorkerUi(platformId) {
	    return platformId === PLATFORM_WORKER_UI_ID;
	}
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @module
	 * @description
	 * Entry point for all public APIs of the common package.
	 */
	/**
	 * \@stable
	 */
	var VERSION = new _angular_core.Version('4.0.0');
	
	exports.NgLocaleLocalization = NgLocaleLocalization;
	exports.NgLocalization = NgLocalization;
	exports.CommonModule = CommonModule;
	exports.NgClass = NgClass;
	exports.NgFor = NgFor;
	exports.NgForOf = NgForOf;
	exports.NgForOfContext = NgForOfContext;
	exports.NgIf = NgIf;
	exports.NgIfContext = NgIfContext;
	exports.NgPlural = NgPlural;
	exports.NgPluralCase = NgPluralCase;
	exports.NgStyle = NgStyle;
	exports.NgSwitch = NgSwitch;
	exports.NgSwitchCase = NgSwitchCase;
	exports.NgSwitchDefault = NgSwitchDefault;
	exports.NgTemplateOutlet = NgTemplateOutlet;
	exports.NgComponentOutlet = NgComponentOutlet;
	exports.AsyncPipe = AsyncPipe;
	exports.DatePipe = DatePipe;
	exports.I18nPluralPipe = I18nPluralPipe;
	exports.I18nSelectPipe = I18nSelectPipe;
	exports.JsonPipe = JsonPipe;
	exports.LowerCasePipe = LowerCasePipe;
	exports.CurrencyPipe = CurrencyPipe;
	exports.DecimalPipe = DecimalPipe;
	exports.PercentPipe = PercentPipe;
	exports.SlicePipe = SlicePipe;
	exports.UpperCasePipe = UpperCasePipe;
	exports.TitleCasePipe = TitleCasePipe;
	exports.ɵPLATFORM_BROWSER_ID = PLATFORM_BROWSER_ID;
	exports.ɵPLATFORM_SERVER_ID = PLATFORM_SERVER_ID;
	exports.ɵPLATFORM_WORKER_APP_ID = PLATFORM_WORKER_APP_ID;
	exports.ɵPLATFORM_WORKER_UI_ID = PLATFORM_WORKER_UI_ID;
	exports.isPlatformBrowser = isPlatformBrowser;
	exports.isPlatformServer = isPlatformServer;
	exports.isPlatformWorkerApp = isPlatformWorkerApp;
	exports.isPlatformWorkerUi = isPlatformWorkerUi;
	exports.VERSION = VERSION;
	exports.PlatformLocation = PlatformLocation;
	exports.LOCATION_INITIALIZED = LOCATION_INITIALIZED;
	exports.LocationStrategy = LocationStrategy;
	exports.APP_BASE_HREF = APP_BASE_HREF;
	exports.HashLocationStrategy = HashLocationStrategy;
	exports.PathLocationStrategy = PathLocationStrategy;
	exports.Location = Location;
	exports.ɵa = COMMON_DIRECTIVES;
	exports.ɵb = COMMON_PIPES;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));
	//# sourceMappingURL=common.umd.js.map


/***/ },
/* 488 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var registry = {};
	function registerResource(code) {
	    return function (cls) {
	        registry[code] = cls;
	        w.cls = cls;
	    };
	}
	exports.registerResource = registerResource;
	;
	/**
	 * Create a resource with the type of the constructor
	 * function `cls`.
	 */
	function fromFhir(fhirObject) {
	    var tryToMap = fhirObject.code !== undefined
	        && fhirObject.code.coding !== undefined
	        && fhirObject.code.coding.length == 1
	        && fhirObject.code.coding[0].code !== undefined;
	    var mappingExists = false;
	    if (tryToMap) {
	        var coding = fhirObject.code.coding[0].code;
	        mappingExists = registry[coding] !== undefined;
	    }
	    if (mappingExists) {
	        var coding = fhirObject.code.coding[0].code;
	        var resource = {
	            _fhir: fhirObject
	        };
	        var cls = registry[coding];
	        resource.__proto__ = cls.prototype;
	        return resource;
	    }
	    else {
	        fhirObject.toJson = function () { return this; };
	        return fhirObject;
	    }
	}
	exports.fromFhir = fromFhir;
	var w = window;
	w.fromFhir = fromFhir;


/***/ },
/* 489 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Resource = (function () {
	    function Resource(resourceType) {
	        this._fhir = {};
	        this._fhir.resourceType = resourceType;
	    }
	    Resource.prototype.addProperty = function (property, value) {
	        this._fhir[property] = value;
	    };
	    Resource.prototype.removeProperty = function (key) {
	        delete this._fhir[key];
	    };
	    Resource.prototype.toJson = function () {
	        return this._fhir;
	    };
	    Object.defineProperty(Resource.prototype, "id", {
	        get: function () {
	            return this._fhir.id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Resource.prototype, "resourceType", {
	        get: function () {
	            return this._fhir.resourceType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Resource;
	}());
	exports.Resource = Resource;
	;


/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Resource_1 = __webpack_require__(489);
	exports.Resource = Resource_1.Resource;
	var Observation_1 = __webpack_require__(491);
	exports.Observation = Observation_1.Observation;
	var BodyWeight_1 = __webpack_require__(492);
	exports.BodyWeight = BodyWeight_1.BodyWeight;
	var Temperature_1 = __webpack_require__(495);
	exports.Temperature = Temperature_1.Temperature;
	var HeartRate_1 = __webpack_require__(496);
	exports.HeartRate = HeartRate_1.HeartRate;
	var StepsCount_1 = __webpack_require__(497);
	exports.StepsCount = StepsCount_1.StepsCount;
	var BodyHeight_1 = __webpack_require__(498);
	exports.BodyHeight = BodyHeight_1.BodyHeight;
	var Questionnaire_1 = __webpack_require__(499);
	exports.Questionnaire = Questionnaire_1.Questionnaire;
	var BloodPressure_1 = __webpack_require__(500);
	exports.BloodPressure = BloodPressure_1.BloodPressure;
	var Media_1 = __webpack_require__(501);
	exports.Media = Media_1.Media;
	var ImageMedia_1 = __webpack_require__(502);
	exports.ImageMedia = ImageMedia_1.ImageMedia;
	var Laboratory_1 = __webpack_require__(503);
	exports.Laboratory = Laboratory_1.Laboratory;
	var Hemoglobin_1 = __webpack_require__(504);
	exports.Hemoglobin = Hemoglobin_1.Hemoglobin;
	var categories = __webpack_require__(494);
	exports.categories = categories;


/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Resource_1 = __webpack_require__(489);
	/**
	 * Measurements and simple assertions made about a patient, device or other
	 * subject.
	 *
	 * https://www.hl7.org/fhir/observation.html
	 */
	var Observation = (function (_super) {
	    __extends(Observation, _super);
	    function Observation(quantity, date, code, category) {
	        var _this = _super.call(this, 'Observation') || this;
	        _this.addProperty('status', 'final');
	        _this.addProperty('code', code);
	        _this.addProperty('effectiveDateTime', date.toISOString());
	        _this.addProperty('valueQuantity', quantity);
	        _this.addProperty('category', category);
	        return _this;
	    }
	    return Observation;
	}(Resource_1.Resource));
	exports.Observation = Observation;
	;
	var MultiObservation = (function (_super) {
	    __extends(MultiObservation, _super);
	    function MultiObservation(date, code, category) {
	        var _this = _super.call(this, 'Observation') || this;
	        _this.addProperty('status', 'final');
	        _this.addProperty('code', code);
	        _this.addProperty('effectiveDateTime', date.toISOString());
	        _this.addProperty('component', []);
	        _this.addProperty('category', category);
	        return _this;
	    }
	    MultiObservation.prototype.addComponent = function (component) {
	        this._fhir.component.push(component);
	    };
	    return MultiObservation;
	}(Resource_1.Resource));
	exports.MultiObservation = MultiObservation;
	;


/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var VitalSigns_1 = __webpack_require__(493);
	var registry_1 = __webpack_require__(488);
	var BodyWeight = (function (_super) {
	    __extends(BodyWeight, _super);
	    function BodyWeight(weightKg, date) {
	        var _this = this;
	        var quanitity = {
	            value: weightKg,
	            unit: 'kg',
	            system: 'http://unitsofmeasure.org'
	        };
	        _this = _super.call(this, quanitity, date, {
	            coding: [{
	                    system: 'http://loinc.org',
	                    code: '3141-9',
	                    display: 'Weight Measured'
	                }]
	        }) || this;
	        return _this;
	    }
	    return BodyWeight;
	}(VitalSigns_1.VitalSigns));
	BodyWeight = __decorate([
	    registry_1.registerResource('3141-9')
	], BodyWeight);
	exports.BodyWeight = BodyWeight;
	;


/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var categories_1 = __webpack_require__(494);
	var Observation_1 = __webpack_require__(491);
	var VitalSigns = (function (_super) {
	    __extends(VitalSigns, _super);
	    function VitalSigns(quantity, date, code) {
	        return _super.call(this, quantity, date, code, categories_1.VitalSigns) || this;
	    }
	    return VitalSigns;
	}(Observation_1.Observation));
	exports.VitalSigns = VitalSigns;
	;


/***/ },
/* 494 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.VitalSigns = {
	    coding: [{
	            system: 'http://hl7.org/fhir/observation-category',
	            code: 'vital-signs',
	            display: 'Vital Signs'
	        }],
	    text: 'Vital Signs'
	};
	exports.Laboratory = {
	    coding: [{
	            system: 'http://hl7.org/fhir/observation-category',
	            code: 'laboratory',
	            display: 'Laboratory'
	        }],
	    text: 'Laboratory'
	};


/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var VitalSigns_1 = __webpack_require__(493);
	var registry_1 = __webpack_require__(488);
	var tempCode = {
	    "coding": [
	        {
	            "system": "http://acme.lab",
	            "code": "BT",
	            "display": "Body temperature"
	        },
	        // LOINC and SNOMED CT translations here - Note in the US the primary code
	        // will be LOINC per meaningful use.  Further SNOMED CT  has acceeded
	        // to LOINC being the primary coding system for vitals and
	        // anthropromorphic measures.  SNOMED CT is required in some
	        // countries such as the UK.
	        {
	            "system": "http://loinc.org",
	            "code": "8310-5",
	            "display": "Body temperature"
	        },
	        {
	            "system": "http://snomed.info/sct",
	            "code": "56342008",
	            "display": "Temperature taking"
	        }
	    ],
	    "text": "Body temperature"
	};
	var Temperature = (function (_super) {
	    __extends(Temperature, _super);
	    function Temperature(tempC, date) {
	        var _this = this;
	        var quanitity = {
	            value: tempC,
	            unit: 'degrees C',
	            code: '258710007',
	            system: 'http://snomed.info/sct'
	        };
	        _this = _super.call(this, quanitity, date, tempCode) || this;
	        return _this;
	    }
	    return Temperature;
	}(VitalSigns_1.VitalSigns));
	Temperature = __decorate([
	    registry_1.registerResource('258710007')
	], Temperature);
	exports.Temperature = Temperature;
	;


/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var VitalSigns_1 = __webpack_require__(493);
	var registry_1 = __webpack_require__(488);
	var HeartRate = (function (_super) {
	    __extends(HeartRate, _super);
	    function HeartRate(beatsPerMinute, date) {
	        var _this = this;
	        var quanitity = {
	            value: beatsPerMinute,
	            unit: 'bpm'
	        };
	        _this = _super.call(this, quanitity, date, {
	            coding: [{
	                    system: 'http://loinc.org',
	                    code: '8867-4',
	                    display: 'Heart Rate'
	                }]
	        }) || this;
	        return _this;
	    }
	    return HeartRate;
	}(VitalSigns_1.VitalSigns));
	HeartRate = __decorate([
	    registry_1.registerResource('8867-4')
	], HeartRate);
	exports.HeartRate = HeartRate;
	;


/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var VitalSigns_1 = __webpack_require__(493);
	var registry_1 = __webpack_require__(488);
	var StepsCount = (function (_super) {
	    __extends(StepsCount, _super);
	    function StepsCount(steps, date) {
	        var _this = this;
	        var quanitity = {
	            value: steps,
	            unit: 'steps'
	        };
	        _this = _super.call(this, quanitity, date, {
	            text: 'Steps',
	            coding: [{
	                    system: 'http://midata.coop',
	                    code: 'activities/steps',
	                    display: 'Steps'
	                }]
	        }) || this;
	        return _this;
	    }
	    return StepsCount;
	}(VitalSigns_1.VitalSigns));
	StepsCount = __decorate([
	    registry_1.registerResource('activities/steps')
	], StepsCount);
	exports.StepsCount = StepsCount;
	;


/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var VitalSigns_1 = __webpack_require__(493);
	var registry_1 = __webpack_require__(488);
	var BodyHeight = (function (_super) {
	    __extends(BodyHeight, _super);
	    function BodyHeight(heightCm, date) {
	        var _this = this;
	        var quanitity = {
	            value: heightCm,
	            unit: 'cm',
	            system: 'http://unitsofmeasure.org'
	        };
	        _this = _super.call(this, quanitity, date, {
	            coding: [{
	                    system: 'http://loinc.org',
	                    code: '8302-2',
	                    display: 'Body Height'
	                }]
	        }) || this;
	        return _this;
	    }
	    return BodyHeight;
	}(VitalSigns_1.VitalSigns));
	BodyHeight = __decorate([
	    registry_1.registerResource('8302-2')
	], BodyHeight);
	exports.BodyHeight = BodyHeight;
	;


/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Resource_1 = __webpack_require__(489);
	var Questionnaire = (function (_super) {
	    __extends(Questionnaire, _super);
	    function Questionnaire(questionGroup) {
	        var _this = _super.call(this, 'Questionnaire') || this;
	        // Other possible values: draft / retired
	        _this.addProperty('status', 'published');
	        return _this;
	    }
	    return Questionnaire;
	}(Resource_1.Resource));
	exports.Questionnaire = Questionnaire;
	;


/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var Observation_1 = __webpack_require__(491);
	var categories_1 = __webpack_require__(494);
	var registry_1 = __webpack_require__(488);
	var BloodPressure = (function (_super) {
	    __extends(BloodPressure, _super);
	    function BloodPressure(systolic, diastolic, date) {
	        var _this = this;
	        var code = {
	            coding: [{
	                    system: "http://loinc.org",
	                    code: '55417-0',
	                    display: 'Blood Pressure'
	                }]
	        };
	        _this = _super.call(this, date, code, categories_1.VitalSigns) || this;
	        _this.addComponent({
	            code: {
	                coding: [{
	                        system: "http://loinc.org",
	                        code: "8480-6",
	                        display: "Systolic blood pressure"
	                    }]
	            },
	            valueQuantity: {
	                value: systolic,
	                unit: 'mm[Hg]'
	            }
	        });
	        _this.addComponent({
	            code: {
	                coding: [{
	                        system: "http://loinc.org",
	                        code: "8462-4",
	                        display: "Diastolic blood pressure"
	                    }]
	            },
	            valueQuantity: {
	                value: diastolic,
	                unit: 'mm[Hg]'
	            }
	        });
	        return _this;
	    }
	    return BloodPressure;
	}(Observation_1.MultiObservation));
	BloodPressure = __decorate([
	    registry_1.registerResource('55417-0')
	], BloodPressure);
	exports.BloodPressure = BloodPressure;
	;


/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Resource_1 = __webpack_require__(489);
	var Media = (function (_super) {
	    __extends(Media, _super);
	    function Media(filename, mediaType, mimetype, data) {
	        var _this = _super.call(this, 'Media') || this;
	        _this.addProperty('type', mediaType);
	        _this.addProperty('content', {
	            contentType: mimetype,
	            data: data,
	            title: filename
	        });
	        return _this;
	    }
	    return Media;
	}(Resource_1.Resource));
	exports.Media = Media;
	;


/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Media_1 = __webpack_require__(501);
	var supportedImageTypes = ['png', 'gif', 'jpg'];
	var ImageMedia = (function (_super) {
	    __extends(ImageMedia, _super);
	    function ImageMedia(filename, data) {
	        var _this = this;
	        var type;
	        var matches = filename.match(/\.(\w+)$/);
	        if (matches !== null) {
	            type = matches[1].toLowerCase();
	            if (supportedImageTypes.indexOf(type) === -1) {
	                throw new Error("Unsupported type: " + type);
	            }
	        }
	        else {
	            throw new Error('The filename requires a file extension!');
	        }
	        _this = _super.call(this, filename, 'photo', "image/" + type, data) || this;
	        return _this;
	    }
	    return ImageMedia;
	}(Media_1.Media));
	exports.ImageMedia = ImageMedia;
	;


/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var categories_1 = __webpack_require__(494);
	var Observation_1 = __webpack_require__(491);
	var Laboratory = (function (_super) {
	    __extends(Laboratory, _super);
	    function Laboratory(quantity, date, code) {
	        return _super.call(this, quantity, date, code, categories_1.Laboratory) || this;
	    }
	    return Laboratory;
	}(Observation_1.Observation));
	exports.Laboratory = Laboratory;
	;


/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var Laboratory_1 = __webpack_require__(503);
	var registry_1 = __webpack_require__(488);
	var Hemoglobin = (function (_super) {
	    __extends(Hemoglobin, _super);
	    function Hemoglobin(gdl, date) {
	        var _this = this;
	        var quanitity = {
	            value: gdl,
	            unit: 'g/dL'
	        };
	        _this = _super.call(this, quanitity, date, {
	            coding: [{
	                    system: 'http://loinc.org',
	                    code: '718-7',
	                    display: 'Hemoglobin [Mass/volume] in Blood'
	                }]
	        }) || this;
	        return _this;
	    }
	    return Hemoglobin;
	}(Laboratory_1.Laboratory));
	Hemoglobin = __decorate([
	    registry_1.registerResource('718-7')
	], Hemoglobin);
	exports.Hemoglobin = Hemoglobin;
	;


/***/ }
/******/ ])
});
;
//# sourceMappingURL=midata.js.map